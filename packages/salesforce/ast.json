{
  "operations": [
    {
      "name": "relationship",
      "params": [
        "relationshipName",
        "externalId",
        "dataSource"
      ],
      "docs": {
        "description": "Adds a lookup relation or 'dome insert' to a record.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "Data Sourced Value:\n relationship(\"relationship_name__r\", \"externalID on related object\", dataSource(\"path\"))\nFixed Value:\n relationship(\"relationship_name__r\", \"externalID on related object\", \"hello world\")"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "`__r` relationship field on the record.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "relationshipName"
          },
          {
            "title": "param",
            "description": "Salesforce ExternalID field.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "externalId"
          },
          {
            "title": "param",
            "description": "resolvable source.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "dataSource"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "object"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "describeAll",
      "params": [],
      "docs": {
        "description": "Outputs basic information about available sObjects.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "describeAll()"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "describe",
      "params": [
        "sObject"
      ],
      "docs": {
        "description": "Outputs basic information about an sObject to `STDOUT`.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "describe('obj_name')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "retrieve",
      "params": [
        "sObject",
        "id",
        "callback"
      ],
      "docs": {
        "description": "Retrieves a Salesforce sObject(s).",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "retrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "The sObject to retrieve",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "The id of the record",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "id"
          },
          {
            "title": "param",
            "description": "A callback to execute once the record is retrieved",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "query",
      "params": [
        "qs",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Execute an SOQL query.\nNote that in an event of a query error,\nerror logs will be printed but the operation will not throw the error.\n\nThe Salesforce query API is subject to rate limits, {@link https://sforce.co/3W9zyaQ See for more details}.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "query(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);"
          },
          {
            "title": "example",
            "description": "query(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`, { autoFetch: true });",
            "caption": "Query more records if next records are available"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "A query string. Must be less than `4000` characters in WHERE clause",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "qs"
          },
          {
            "title": "param",
            "description": "Options passed to the bulk api.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Fetch next records if available.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            "name": "options.autoFetch",
            "default": "false"
          },
          {
            "title": "param",
            "description": "A callback to execute once the record is retrieved",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "bulkQuery",
      "params": [
        "qs",
        "options",
        "callback"
      ],
      "docs": {
        "description": "Execute an SOQL Bulk Query.\nThis function uses bulk query to efficiently query large data sets and reduce the number of API requests.\n`bulkQuery()` uses {@link https://sforce.co/3y9phlc Bulk API v.2.0} which is available in API version 41.0 and later.\nThis API is subject to {@link https://sforce.co/4b6kn6z rate limits}.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "bulkQuery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);",
            "caption": "The results will be available on `state.data`"
          },
          {
            "title": "example",
            "description": "bulkQuery(\n  (state) =>\n    `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`,\n  { pollTimeout: 10000, pollInterval: 6000 }\n);"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "A query string.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "qs"
          },
          {
            "title": "param",
            "description": "Options passed to the bulk api.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "Polling timeout in milliseconds.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "integer"
              }
            },
            "name": "options.pollTimeout",
            "default": "90000"
          },
          {
            "title": "param",
            "description": "Polling interval in milliseconds.",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "integer"
              }
            },
            "name": "options.pollInterval",
            "default": "3000"
          },
          {
            "title": "param",
            "description": "A callback to execute once the record is retrieved",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "callback"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": false
    },
    {
      "name": "bulk",
      "params": [
        "sObject",
        "operation",
        "options",
        "records"
      ],
      "docs": {
        "description": "Create and execute a bulk job.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "bulk('Patient__c', 'insert', { failOnError: true, pollInterval: 3000, pollTimeout: 240000 }, state => {\n  return state.data.someArray.map(x => {\n    return { 'Age__c': x.age, 'Name': x.name }\n  })\n});"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "The bulk operation to be performed",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "operation"
          },
          {
            "title": "param",
            "description": "Options passed to the bulk api.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "options"
          },
          {
            "title": "param",
            "description": "an array of records, or a function which returns an array.",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "records"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "destroy",
      "params": [
        "sObject",
        "attrs",
        "options"
      ],
      "docs": {
        "description": "Delete records of an object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "destroy('obj_name', [\n '0060n00000JQWHYAA5',\n '0090n00000JQEWHYAA5\n], { failOnError: true })"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "Array of IDs of records to delete.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "param",
            "description": "Options for the destroy delete operation.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "options"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "create",
      "params": [
        "sObject",
        "attrs"
      ],
      "docs": {
        "description": "Create a new object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "create('obj_name', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "Field attributes for the new object.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "createIf",
      "params": [
        "logical",
        "sObject",
        "attrs"
      ],
      "docs": {
        "description": "Create a new object if conditions are met.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "createIf(true, 'obj_name', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "a logical statement that will be evaluated.",
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            },
            "name": "logical"
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "Field attributes for the new object.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "upsert",
      "params": [
        "sObject",
        "externalId",
        "attrs"
      ],
      "docs": {
        "description": "Upsert an object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "upsert('obj_name', 'ext_id', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "magic",
            "description": "sObject - $.children[?(!@.meta.system)].name"
          },
          {
            "title": "param",
            "description": "ID.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "externalId"
          },
          {
            "title": "magic",
            "description": "externalId - $.children[?(@.name==\"{{args.sObject}}\")].children[?(@.meta.externalId)].name"
          },
          {
            "title": "param",
            "description": "Field attributes for the new object.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "magic",
            "description": "attrs - $.children[?(@.name==\"{{args.sObject}}\")].children[?(!@.meta.externalId)]"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "upsertIf",
      "params": [
        "logical",
        "sObject",
        "externalId",
        "attrs"
      ],
      "docs": {
        "description": "Upsert if conditions are met.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "upsertIf(true, 'obj_name', 'ext_id', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "a logical statement that will be evaluated.",
            "type": {
              "type": "NameExpression",
              "name": "boolean"
            },
            "name": "logical"
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "ID.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "externalId"
          },
          {
            "title": "param",
            "description": "Field attributes for the new object.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "update",
      "params": [
        "sObject",
        "attrs"
      ],
      "docs": {
        "description": "Update an object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "update('obj_name', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "API name of the sObject.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sObject"
          },
          {
            "title": "param",
            "description": "Field attributes for the new object.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "attrs"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "reference",
      "params": [
        "position"
      ],
      "docs": {
        "description": "Get a reference ID by an index.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "reference(0)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Position for references array.",
            "type": {
              "type": "NameExpression",
              "name": "number"
            },
            "name": "position"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "State"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "toUTF8",
      "params": [
        "input"
      ],
      "docs": {
        "description": "Transliterates unicode characters to their best ASCII representation",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "fn((state) => {\n  const s = toUTF8(\"άνθρωποι\");\n  console.log(s); // anthropoi\n  return state;\n});"
          },
          {
            "title": "param",
            "description": "A string with unicode characters",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "input"
          },
          {
            "title": "returns",
            "description": "ASCII representation of input string",
            "type": {
              "type": "NameExpression",
              "name": "String"
            }
          }
        ]
      },
      "valid": true
    }
  ],
  "exports": [],
  "common": [
    {
      "name": "fn",
      "params": [
        "func"
      ],
      "docs": {
        "description": "Creates a custom step (or operation) for more flexible job writing.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "fn(state => {\n  // do some things to state\n  return state;\n});"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "is the function",
            "type": {
              "type": "NameExpression",
              "name": "Function"
            },
            "name": "func"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "jsonValue",
      "params": [
        "obj",
        "path"
      ],
      "docs": {
        "description": "Picks out a single value from a JSON object.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "jsonValue({ a:1 }, 'a')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "A valid JSON object.",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "obj"
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in given JSON object.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "sourceValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out a single value from source data.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "sourceValue('$.key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "source",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out a value from source data.\nWill return whatever JSONPath returns, which will always be an array.\nIf you need a single value use `sourceValue` instead.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "source('$.key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "String"
                    },
                    {
                      "type": "NameExpression",
                      "name": "Object"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "dataPath",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Ensures a path points at the data.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "dataPath('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `data`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "dataValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out a single value from the source data object—usually `state.data`.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "dataValue('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `data`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "referencePath",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Ensures a path points at references.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "referencePath('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `references`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "lastReferenceValue",
      "params": [
        "path"
      ],
      "docs": {
        "description": "Picks out the last reference value from source data.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "lastReferenceValue('key')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `references`.",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "path"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "each",
      "params": [
        "dataSource",
        "operation"
      ],
      "docs": {
        "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.\n\nIt also ensures the results of an operation make their way back into\nthe state's references.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "each(\"$.[*]\",\n  create(\"SObject\",\n    field(\"FirstName\", sourceValue(\"$.firstName\"))\n  )\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state`.",
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            },
            "name": "dataSource"
          },
          {
            "title": "param",
            "description": "The operation needed to be repeated.",
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            },
            "name": "operation"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "combine",
      "params": [
        "operations"
      ],
      "docs": {
        "description": "Combines two operations into one",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "combine(\n  create('foo'),\n  delete('bar')\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Operations to be performed.",
            "type": {
              "type": "NameExpression",
              "name": "Operations"
            },
            "name": "operations"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "join",
      "params": [
        "targetPath",
        "sourcePath",
        "targetKey"
      ],
      "docs": {
        "description": "Adds data from a target object",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "join('$.key','$.data','newKey')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Target path",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "targetPath"
          },
          {
            "title": "param",
            "description": "Source path",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "sourcePath"
          },
          {
            "title": "param",
            "description": "Target Key",
            "type": {
              "type": "NameExpression",
              "name": "String"
            },
            "name": "targetKey"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "expandReferences",
      "params": [
        "value",
        "skipFilter"
      ],
      "docs": {
        "description": "Recursively resolves objects that have resolvable values (functions).",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "data",
            "type": {
              "type": "NameExpression",
              "name": "object"
            },
            "name": "value"
          },
          {
            "title": "param",
            "description": "a function which returns true if a value should be skipped",
            "type": {
              "type": "OptionalType",
              "expression": {
                "type": "NameExpression",
                "name": "Function"
              }
            },
            "name": "skipFilter"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Operation"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "field",
      "params": [
        "key",
        "value"
      ],
      "docs": {
        "description": "Returns a key, value pair in an array.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "field('destination_field_name__c', 'value')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Name of the field",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "key"
          },
          {
            "title": "param",
            "description": "The value itself or a sourceable operation.",
            "type": {
              "type": "NameExpression",
              "name": "Value"
            },
            "name": "value"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Field"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "fields",
      "params": [
        "fields"
      ],
      "docs": {
        "description": "Zips key value pairs into an object.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "fields(list_of_fields)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "a list of fields",
            "type": {
              "type": "NameExpression",
              "name": "Fields"
            },
            "name": "fields"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Object"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "merge",
      "params": [
        "dataSource",
        "fields"
      ],
      "docs": {
        "description": "Merges fields into each item in an array.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "merge(\n  \"$.books[*]\",\n  fields(\n    field( \"publisher\", sourceValue(\"$.publisher\") )\n  )\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            },
            "name": "dataSource"
          },
          {
            "title": "param",
            "description": "Group of fields to merge in.",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "fields"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "index",
      "params": [],
      "docs": {
        "description": "Returns the index of the current array being iterated.\nTo be used with `each` as a data source.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "index()"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "DataSource"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "arrayToString",
      "params": [
        "arr",
        "separator"
      ],
      "docs": {
        "description": "Turns an array into a string, separated by X.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "field(\"destination_string__c\", function(state) {\n  return arrayToString(dataValue(\"path_of_array\")(state), ', ')\n})"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Array of toString'able primatives.",
            "type": {
              "type": "NameExpression",
              "name": "array"
            },
            "name": "arr"
          },
          {
            "title": "param",
            "description": "Separator string.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "separator"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "toArray",
      "params": [
        "arg"
      ],
      "docs": {
        "description": "Ensures primitive data types are wrapped in an array.\nDoes not affect array objects.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "each(function(state) {\n  return toArray( dataValue(\"path_of_array\")(state) )\n}, ...)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Data required to be in an array",
            "type": {
              "type": "NameExpression",
              "name": "any"
            },
            "name": "arg"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "array"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "humanProper",
      "params": [
        "str"
      ],
      "docs": {
        "description": "Substitutes underscores for spaces and proper-cases a string",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "field(\"destination_string__c\", humanProper(state.data.path_to_string))"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "String that needs converting",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "str"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "scrubEmojis",
      "params": [
        "text",
        "replacementChars"
      ],
      "docs": {
        "description": "Replaces emojis in a string.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "scrubEmojis('Dove🕊️⭐ 29')"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "String that needs to be cleaned",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "text"
          },
          {
            "title": "param",
            "description": "Characters that replace the emojis",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "replacementChars"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "string"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "chunk",
      "params": [
        "array",
        "chunkSize"
      ],
      "docs": {
        "description": "Chunks an array into an array of arrays, each with no more than a certain size.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "chunk([1,2,3,4,5], 2)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "Array to be chunked",
            "type": {
              "type": "NameExpression",
              "name": "Object"
            },
            "name": "array"
          },
          {
            "title": "param",
            "description": "The maxiumum size of each chunks",
            "type": {
              "type": "NameExpression",
              "name": "Integer"
            },
            "name": "chunkSize"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "Object"
            }
          }
        ]
      },
      "valid": true
    },
    {
      "name": "map",
      "params": [
        "path",
        "operation",
        "state"
      ],
      "docs": {
        "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.",
        "tags": [
          {
            "title": "public",
            "description": null,
            "type": null
          },
          {
            "title": "example",
            "description": "map(\"$.[*]\",\n  create(\"SObject\",\n    field(\"FirstName\", sourceValue(\"$.firstName\"))\n  )\n)"
          },
          {
            "title": "function",
            "description": null,
            "name": null
          },
          {
            "title": "param",
            "description": "JSONPath referencing a point in `state.data`.",
            "type": {
              "type": "NameExpression",
              "name": "string"
            },
            "name": "path"
          },
          {
            "title": "param",
            "description": "The operation needed to be repeated.",
            "type": {
              "type": "NameExpression",
              "name": "function"
            },
            "name": "operation"
          },
          {
            "title": "param",
            "description": "Runtime state.",
            "type": {
              "type": "NameExpression",
              "name": "State"
            },
            "name": "state"
          },
          {
            "title": "returns",
            "description": null,
            "type": {
              "type": "NameExpression",
              "name": "State"
            }
          }
        ]
      },
      "valid": true
    }
  ]
}