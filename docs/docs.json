[
{"name":"asana","adaptor":"@openfn/language-asana","version":"2.1.5","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#getTask\\\">getTask(task_gid, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get a single task of a given project.</p>\\n</dd>\\n<dt><a href=\\\"#getTasks\\\">getTasks(project_gid, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get the list of tasks for a given project.</p>\\n</dd>\\n<dt><a href=\\\"#updateTask\\\">updateTask(task_gid, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update a specific task.</p>\\n</dd>\\n<dt><a href=\\\"#createTask\\\">createTask(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a task.</p>\\n</dd>\\n<dt><a href=\\\"#upsertTask\\\">upsertTask(project_gid, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update or create a task.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"getTask\\\"></a>\\n\\n## getTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nGet a single task of a given project.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTask(\\\"task_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"getTasks\\\"></a>\\n\\n## getTasks(project_gid, params, callback) ⇒ <code>Operation</code>\\nGet the list of tasks for a given project.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTasks(\\\"project_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"updateTask\\\"></a>\\n\\n## updateTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate a specific task.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupdateTask(\\\"task_gid\\\",\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"createTask\\\"></a>\\n\\n## createTask(params, callback) ⇒ <code>Operation</code>\\nCreate a task.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTask(\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"upsertTask\\\"></a>\\n\\n## upsertTask(project_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate or create a task.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | an object with an externalId and some task data. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupsertTask(\\n \\\"1201382240880\\\",\\n {\\n   \\\"externalId\\\": \\\"name\\\",\\n   \\\"data\\\": {\\n     name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n   }\\n\\n }\\n)\\n```\\n\"","readme":"\"# language-asana\\n\\nLanguage Pack for connecting with Asana.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/asana-configuration-schema/)\\ndefinition.\\n\\n### How to create an API token\\n\\nUsing Asana's API requires having an API token. To generate that token, head to\\nthe [Asana developer console](https://app.asana.com/0/developer-console) and\\nenter the **Personal access tokens** section.\\n\\nThere you can click on **+New access token**. A prompt will be opened allowing\\nyou to give the token a name and then create it.\\n\\n_Note: Treat your PAT like you would with a password. Do not share it or display\\nit online._\\n\\n### Sample expression\\n\\n## Find a single task of a given project using the task id.\\n\\n```js\\ngetTask('1234', {\\n  opt_fields: 'name,assignee',\\n});\\n```\\n\\n## Find the list of tasks of a given project using the project id.\\n\\n```js\\ngetTasks('22889593722', {\\n  opt_fields: 'name,notes,assignee',\\n});\\n```\\n\\n## Update a specific task\\n\\n```js\\nupdateTask('12344', {\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Create a task\\n\\n```js\\ncreateTask({\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Update a task or create a new one\\n\\nYou can use a field name literal as `externalId` to match a specific task. If\\nthe task does not exist, a new one will be created. The first parameter in this\\nfunction should be the `project_id`.\\n\\n```js\\nupsertTask('12344', {\\n  externalId: 'name',\\n  data: {\\n    name: 'A new task',\\n    projects: ['12344'],\\n    notes: 'This is a new task',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-asana\\n\\n## 2.1.5\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 5f40dcf: Migrated language-asana\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["getTask","getTasks","updateTask","createTask","upsertTask"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiVersion":{"title":"API Version","type":"string","description":"The API version","examples":["1.0"]},"token":{"title":"Token","type":"string","description":"The API token","examples":["sample-tokenyWSJdXBACMLLWMNGgADFA"]}},"type":"object","additionalProperties":true,"required":["apiVersion","token"]}},
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.1.8","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for beyonic.</p>\\n</dd>\\n<dt><a href=\\\"#createPayment\\\">createPayment(data)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a payment</p>\\n</dd>\\n<dt><a href=\\\"#createContact\\\">createContact(data)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a contact</p>\\n</dd>\\n<dt><a href=\\\"#createCollectionRequest\\\">createCollectionRequest(data)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a collection request</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for beyonic.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"createPayment\\\"></a>\\n\\n## createPayment(data) ⇒ <code>Operation</code>\\nCreate a payment\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the payment |\\n\\n**Example**  \\n```js\\nexecute(\\n  createPayment(data)\\n)(state)\\n```\\n<a name=\\\"createContact\\\"></a>\\n\\n## createContact(data) ⇒ <code>Operation</code>\\nCreate a contact\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the contact |\\n\\n**Example**  \\n```js\\nexecute(\\n  createContact(data)\\n)(state)\\n```\\n<a name=\\\"createCollectionRequest\\\"></a>\\n\\n## createCollectionRequest(data) ⇒ <code>Operation</code>\\nCreate a collection request\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the collection request |\\n\\n**Example**  \\n```js\\nexecute(\\n  createCollectionRequest(data)\\n)(state)\\n```\\n\"","readme":"\"# Language Beyonic\\n\\nLanguage Pack for building expressions and operations for working with the\\n[beyonic API](http://apidocs.beyonic.com/).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/beyonic-configuration-schema/)\\ndefinition.\\n\\n## Payments API\\n\\n#### `createPayment(...)`\\n\\n```js\\ncreatePayment(\\n  fields(\\n    field('phonenumber', '+256773712831'),\\n    field('first_name', 'Gideon'),\\n    field('last_name', 'Zelalem'),\\n    field('amount', 100.2),\\n    field('currency', 'USD'),\\n    field('account', 1),\\n    field('description', 'Long-term contract for Arseal'),\\n    field('payment_type', 'money'),\\n    field('callback_url', 'https://my.website/payments/callback')\\n  )\\n);\\n```\\n\\n## Collection Requests API\\n\\n#### `createCollectionRequest(...)`\\n\\n```js\\ncreateCollectionRequest(\\n  fields(\\n    field('instructions', 'Send me some money, please!'),\\n    field('phonenumber', '+256773712831'),\\n    field('amount', 5.0),\\n    field('currency', 'USD')\\n  )\\n);\\n```\\n\\n## Contacts API\\n\\n#### `createContact(...)`\\n\\n```js\\ncreateContact(\\n  fields(\\n    field('first_name', 'Granit'),\\n    field('last_name', 'Xhaka'),\\n    field('phone_number', '+256773712831'),\\n    field('email', 'granit@arsenal.com')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-beyonic\\n\\n## 0.1.8\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.7\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.6\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.1.5\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- 63080d0: Update common for build\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- 0d358b6: Add ast.json for beyonic\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 06ff25f: Update superagent to v8\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 28ceb1f: Moving language-beyonic to adaptors/packages/beyonic\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"API URL","format":"uri","minLength":1,"examples":["https://beyonic.com/api"]},"apiToken":{"title":"API Token","type":"string","description":"API token","minLength":1,"examples":["cdjhiooiSIUJHDYSYUIHASIOHKAANOAJJjsiujhaka"]}},"type":"object","additionalProperties":true,"required":["apiUrl","apiToken"]}},
{"name":"bigquery","adaptor":"@openfn/language-bigquery","version":"1.1.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#load\\\">load(dirPath, projectId, datasetId, tableId, loadOptions, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Load files to BigQuery</p>\\n</dd>\\n<dt><a href=\\\"#parseCSV\\\">parseCSV(target, config)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>CSV-Parse for CSV conversion to JSON</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"load\\\"></a>\\n\\n## load(dirPath, projectId, datasetId, tableId, loadOptions, callback) ⇒ <code>Operation</code>\\nLoad files to BigQuery\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | the path to your local directory |\\n| projectId | <code>string</code> | your bigquery project id |\\n| datasetId | <code>string</code> | your bigquery dataset id |\\n| tableId | <code>string</code> | the name of the table you'd like to load |\\n| loadOptions | <code>object</code> | options to pass to the bigquery.load() API |\\n| callback | <code>function</code> | and optional callback |\\n\\n**Example**  \\n```js\\nload(\\n  './tmp/files',\\n  'my-bg-project',\\n  'test01',\\n  'product-codes',\\n  {\\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    createDisposition: 'CREATE_IF_NEEDED',\\n  }\\n)\\n```\\n<a name=\\\"parseCSV\\\"></a>\\n\\n## parseCSV(target, config) ⇒ <code>Operation</code>\\nCSV-Parse for CSV conversion to JSON\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| target | <code>String</code> | string or local file with CSV data |\\n| config | <code>Object</code> | csv-parse config object |\\n\\n**Example**  \\n```js\\nparseCSV(\\\"/home/user/someData.csv\\\", {\\n\\t  quoteChar: '\\\"',\\n\\t  header: false,\\n\\t});\\n```\\n\"","readme":"\"# Language BigQuery\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### state.json\\n\\nThe configuration key must be a valid GCP credential as JSON.\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"type\\\": \\\"service_account\\\",\\n    \\\"project_id\\\": \\\"some-project\\\",\\n    \\\"private_key_id\\\": \\\"670b9e3c8c366e83aa569dd57cbfc5c575b72e42\\\",\\n    \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nblah\\\\nmoreblah=\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n    \\\"client_email\\\": \\\"bigquery@some-project.iam.gserviceaccount.com\\\",\\n    \\\"client_id\\\": \\\"someid\\\",\\n    \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n    \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n    \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n    \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1 }\\n}\\n```\\n\\n### operations (expression.js)\\n\\n#### load(...)\\n\\nLoad data to a table in bigquery from a CSV. See full\\n[options here](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad).\\n\\n```js\\nload(\\n  '/home/taylor/Desktop/type-C_r-ALL_ps-201012_freq-M_px-HS_pub-20200731_fmt-csv_ex-20200818.csv',\\n  'awesome-solutions-project', // project\\n  'test01', // dataset\\n  'mytable', // table\\n  {\\n    schema:\\n      'classification:STRING,year:STRING,period:STRING,period_desc:STRING,aggregate_level:STRING,is_leaf_code:STRING,trade_flow_code:STRING,trade_flow:STRING,reporter_code:STRING,reporter:STRING,reporter_iso:STRING,partner_code:STRING,partner:STRING,partner_iso:STRING,commodity_code:STRING,commodity:STRING,qty_unit_code:STRING,qty_unit:STRING,qty:INTEGER,netweight_kg:INTEGER,trade_value:INTEGER,flag:STRING',\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    // createDisposition: 'CREATE_IF_NEEDED',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n  } // loadOptions\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-bigquery\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 57f3513: Fix exports in index.js\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- e4c6114: bigquery migration and build\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["load","parseCSV"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","additionalProperties":true,"properties":{"type":{"title":"Type","type":"string","description":"","examples":["service_acconut"]},"project_id":{"title":"Prokect id","type":"string","description":"Project id","examples":["some-project-id"]},"private_key_id":{"title":"Private Key Id","type":"string","description":"Private key id","examples":["670b9e3c8c366e83aa569dd57cbfc5c575b72e42"]},"private_key":{"title":"Private Key","type":"string","description":"Private key","examples":["-----BEGIN PRIVATE KEY-----\nblah\nmoreblah=\n-----END PRIVATE KEY-----\n"]},"client_email":{"title":"Client Email","type":"string","description":"Client email","examples":["bigquery@some-project.iam.gserviceaccount.com"]},"client_id":{"title":"Client Id","type":"string","description":"Client id","examples":["someid"]},"auth_uri":{"title":"Auth Uri","type":"string","description":"Auth Uri","examples":["https://accounts.google.com/o/oauth2/auth"]},"token_uri":{"title":"Token Uri","type":"string","description":"Token Uri","examples":["https://oauth2.googleapis.com/token"]},"auth_provider_x509_cert_url":{"title":"Auth Provider x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/oauth2/v1/certs"]},"client_x509_cert_url":{"title":"Client x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com"]}},"required":["type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url"]}},
{"name":"commcare","adaptor":"@openfn/language-commcare","version":"1.5.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for commcare.</p>\\n</dd>\\n<dt><a href=\\\"#clientPost\\\">clientPost(formData)</a> ⇒ <code>State</code></dt>\\n<dd><p>Performs a post request</p>\\n</dd>\\n<dt><a href=\\\"#submitXls\\\">submitXls(formData, params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Convert form data to xls then submit.</p>\\n</dd>\\n<dt><a href=\\\"#submit\\\">submit(formData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Submit form data</p>\\n</dd>\\n<dt><a href=\\\"#fetchReportData\\\">fetchReportData(reportId, params, postUrl)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request to CommCare&#39;s Reports API\\nand POST the response to somewhere else.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for commcare.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"clientPost\\\"></a>\\n\\n## clientPost(formData) ⇒ <code>State</code>\\nPerforms a post request\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Form Data with auth params and body |\\n\\n**Example**  \\n```js\\nclientPost(formData)\\n```\\n<a name=\\\"submitXls\\\"></a>\\n\\n## submitXls(formData, params) ⇒ <code>Operation</code>\\nConvert form data to xls then submit.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n| params | <code>Object</code> | Request params including case type and external id. |\\n\\n**Example**  \\n```js\\nsubmitXls(\\n   [\\n     {name: 'Mamadou', phone: '000000'},\\n   ],\\n   {\\n     case_type: 'student',\\n     search_field: 'external_id',\\n     create_new_cases: 'on',\\n   }\\n)\\n```\\n<a name=\\\"submit\\\"></a>\\n\\n## submit(formData) ⇒ <code>Operation</code>\\nSubmit form data\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n\\n**Example**  \\n```js\\nsubmit(\\n   fields(\\n     field(\\\"@\\\", function(state) {\\n       return {\\n         \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/form-id-here\\\"\\n       };\\n     }),\\n     field(\\\"question1\\\", dataValue(\\\"answer1\\\")),\\n     field(\\\"question2\\\", \\\"Some answer here.\\\")\\n   )\\n )\\n```\\n<a name=\\\"fetchReportData\\\"></a>\\n\\n## fetchReportData(reportId, params, postUrl) ⇒ <code>Operation</code>\\nMake a GET request to CommCare's Reports API\\nand POST the response to somewhere else.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reportId | <code>String</code> | API name of the report. |\\n| params | <code>Object</code> | Query params, incl: limit, offset, and custom report filters. |\\n| postUrl | <code>String</code> | Url to which the response object will be posted. |\\n\\n**Example**  \\n```js\\nfetchReportData(reportId, params, postUrl)\\n```\\n\"","readme":"\"# Language CommCare\\n\\nLanguage Pack for interacting with the CommCare API.\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Download+Report+Data\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Submission+API\\n\\nhttps://bitbucket.org/javarosa/javarosa/wiki/FormSubmissionAPI\\n\\nAccepted X-Form Spec from Dimagi: http://dimagi.github.io/xform-spec Accepted\\nX-Form Spec for Cases from Dimagi:\\nhttps://github.com/dimagi/commcare/wiki/casexml20\\n\\n## Documentation\\n\\n## Configuration\\n\\nView all the required and optional properties for `state.configuration` in the official [configuration-schema](https://docs.openfn.org/adaptors/packages/commcare-configuration-schema/) definition.\\n\\n- The \\\"appId\\\" is the UUID which designates your commcare project as different from\\neveryone elses. It can be found in the URL of your application when you first\\nenter it from the project screen. I.e., the last part of this url:\\n`https://www.commcarehq.org/a/YOUR_PROJECT/apps/view/YOUR_APP_ID/`\\n\\n- Note that the username is your full email address.\\n\\n## `fetchReportData` to pull aggregate data from CommCare\\n\\nIt takes 3 arguments: reportId, params, and postUrl.\\n\\n```js\\nfetchReportData(\\n  'reportId',\\n  { limit: 10, offset: 2, state: 'Vermont' },\\n  'http://www.openfn.org/inbox/secret-uuid'\\n);\\n```\\n\\nsimple body target:\\n\\n```xml\\n<data xmlns=\\\"http://openrosa.org/formdesigner/39A2CA97-2EB8-4A9C-A0D1-6AA666666A66\\\">\\n    <firstname>Something</firstname>\\n    <lastname>Else</lastname>\\n    <age>29</age>\\n</data>\\n```\\n\\ncomplex body target:\\n\\n```xml\\n<?xml version='1.0' ?>\\n<data uiVersion=\\\"1\\\" version=\\\"17\\\" name=\\\"New Form\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\" xmlns=\\\"http://openrosa.org/formdesigner/1DFD8610-91E3-4409-BF8B-02D3B4FF3530\\\">\\n    <foo>bar</foo>\\n    <n0:case case_id=\\\"ddb8e2b3-7ce0-43e4-ad45-d7a2eebe9169\\\" user_id=\\\"user-xxx-eve\\\" date_modified=\\\"2013-04-19T16:53:02.799-04\\\" xmlns:n0=\\\"http://commcarehq.org/case/transaction/v2\\\">\\n        <n0:create>\\n            <n0:case_name>bar</n0:case_name>\\n            <n0:owner_id>user-xxx-eve</n0:owner_id>\\n            <n0:case_type>member</n0:case_type>\\n        </n0:create>\\n    </n0:case>\\n    <n1:meta xmlns:n1=\\\"http://openrosa.org/jr/xforms\\\">\\n        <n1:deviceID>A00000245706EE</n1:deviceID>\\n        <n1:timeStart>2013-04-19T16:52:41.000-04</n1:timeStart>\\n        <n1:timeEnd>2013-04-19T16:53:02.799-04</n1:timeEnd>\\n        <n1:username>eve</n1:username>\\n        <n1:userID>user-xxx-eve</n1:userID>\\n        <n1:instanceID>b58df19c-efd5-4ecf-9581-65dda8b8787c</n1:instanceID>\\n        <n2:appVersion xmlns:n2=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version \\\"2.4.1\\\"(10083). App v19. CommCare Version 2.4. Build 10083, built on: March-12-2013</n2:appVersion>\\n    </n1:meta>\\n</data>\\n```\\n\\n## Submitting data to CommCare HQ\\n\\n### Submit an XLS file\\n\\nThis function bulk submit a JSON object as xls file to CommCare HQ\\n\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n### submit\\n\\nHere we're just building the most basic JSON object, that will be converted to\\nan XML object and posted as the <data /> element.\\n\\n```js\\nsubmit(\\n  fields(\\n    field('@', function (state) {\\n      return {\\n        xmlns:\\n          'http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9',\\n      };\\n    }),\\n    field('paitent_namentosh', dataValue('first_name')),\\n    field('question2', 'Some answer here.'),\\n    field('question3', 'HKS'),\\n    field('question4', 'item1'),\\n    field('question5', 69855),\\n    field('question6', 12)\\n  )\\n);\\n```\\n\\nAn open rosa form submission body should look like this:\\n\\n```xml\\n<?xml version=\\\"1.0\\\" ?>\\n<data name=\\\"Patient Registration\\\" uiVersion=\\\"1\\\" version=\\\"9\\\" xmlns=\\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\">\\n  <paitent_namentosh>Taylor</paitent_namentosh>\\n  <question2>Moruki</question2>\\n  <question3>Hks</question3>\\n  <question4>item1</question4>\\n  <question5>69855</question5>\\n  <question6>12</question6>\\n  <n0:meta xmlns:n0=\\\"http://openrosa.org/jr/xforms\\\">\\n    <n0:deviceID>358239055789384</n0:deviceID>\\n    <n0:timeStart>2015-08-21T16:21:59.807+02</n0:timeStart>\\n    <n0:timeEnd>2015-08-21T16:22:15.987+02</n0:timeEnd>\\n    <n0:username>openfn</n0:username>\\n    <n0:userID>5fe615b3af2834cb5dca59f7466d6174</n0:userID>\\n    <n0:instanceID>195e79eb-d823-46fe-9e4f-59b8327d5db2</n0:instanceID>\\n    <n1:appVersion xmlns:n1=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version &quot;2.22.0&quot;(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015</n1:appVersion>\\n  </n0:meta>\\n</data>\\n```\\n\\nSo the JSON emitted by your expression should look like this:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n    \\\"name\\\": \\\"Patient Registration\\\",\\n    \\\"uiVersion\\\": \\\"1\\\",\\n    \\\"version\\\": \\\"9\\\",\\n    \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\",\\n    \\\"xmlns:jrm\\\": \\\"http://dev.commcarehq.org/jr/xforms\\\",\\n    \\\"paitent_namentosh\\\": \\\"Taylor\\\",\\n    \\\"question2\\\": \\\" Moruki\\\",\\n    \\\"question3\\\": \\\"Hks\\\",\\n    \\\"question4\\\": \\\"item1\\\",\\n    \\\"question5\\\": \\\"69855\\\",\\n    \\\"question6\\\": \\\"12\\\",\\n    \\\"n0:meta\\\": {\\n      \\\"xmlns:n0\\\": \\\"http://openrosa.org/jr/xforms\\\",\\n      \\\"n0:deviceID\\\": \\\"358239055789384\\\",\\n      \\\"n0:timeStart\\\": \\\"2015-08-21T16:21:59.807+02\\\",\\n      \\\"n0:timeEnd\\\": \\\"2015-08-21T16:22:15.987+02\\\",\\n      \\\"n0:username\\\": \\\"openfn\\\",\\n      \\\"n0:userID\\\": \\\"5fe615b3af2834cb5dca59f7466d6174\\\",\\n      \\\"n0:instanceID\\\": \\\"195e79eb-d823-46fe-9e4f-59b8327d5db2\\\",\\n      \\\"n1:appVersion\\\": {\\n        \\\"xmlns:n1\\\": \\\"http://commcarehq.org/xforms\\\",\\n        \\\"$t\\\": \\\"CommCare ODK, version \\\\\\\"2.22.0\\\\\\\"(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-commcare\\n\\n## 1.5.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n- Updated dependencies [f2aed32]\\n  - @openfn/language-http@4.2.5\\n\\n## 1.5.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 57f3513: Fix exports in index.js\\n- Updated dependencies [6d8de03]\\n  - @openfn/language-http@4.2.4\\n\\n## 1.5.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n  - @openfn/language-http@4.2.3\\n\\n## 1.5.0\\n\\n### Minor Changes\\n\\n- 5c050ed: Migrate CommCare\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 94076b9: update dependency xlsx to ^0.18.0\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [9a2755e]\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-http@4.2.2\\n  - @openfn/language-common@1.7.4\\n\"","functions":["submitXls","submit","fetchReportData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The CommCare host url","format":"uri","minLength":1,"examples":["https://www.commcarehq.org"]},"applicationName":{"title":"Application Name","type":"string","description":"The CommCare application name","minLength":1,"examples":["some-proof-of-concept"]},"appId":{"title":"App ID","type":"string","description":"Your CommCare project UUID","minLength":1,"examples":["the-long-uuid-in-the-url-that-designates-a-unique-commcare-project"]},"username":{"title":"Username","type":"string","description":"The username to log in to CommCare","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to CommCare","writeOnly":true,"minLength":1,"examples":["superscretepassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","applicationName","appId"]}},
{"name":"common","adaptor":"@openfn/language-common","version":"1.7.5","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>Execute a sequence of operations.\\nMain outer API for executing expressions.</p>\\n</dd>\\n<dt><a href=\\\"#alterState\\\">alterState(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>alias for &quot;fn()&quot;</p>\\n</dd>\\n<dt><a href=\\\"#fn\\\">fn(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a custom step (or operation) for more flexible job writing.</p>\\n</dd>\\n<dt><a href=\\\"#jsonValue\\\">jsonValue(obj, path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#sourceValue\\\">sourceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#source\\\">source(path)</a> ⇒ <code>Array.&lt;(String|Object)&gt;</code></dt>\\n<dd><p>Picks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use <code>sourceValue</code> instead.</p>\\n</dd>\\n<dt><a href=\\\"#dataPath\\\">dataPath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at the data.</p>\\n</dd>\\n<dt><a href=\\\"#dataValue\\\">dataValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from the source data object—usually <code>state.data</code>.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#referencePath\\\">referencePath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at references.</p>\\n</dd>\\n<dt><a href=\\\"#lastReferenceValue\\\">lastReferenceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out the last reference value from source data.</p>\\n</dd>\\n<dt><a href=\\\"#map\\\">map(path, operation, state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n</dd>\\n<dt><a href=\\\"#asData\\\">asData(data, state)</a> ⇒ <code>array</code></dt>\\n<dd><p>Simple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.</p>\\n<ul>\\n<li>JSONPath referencing a point in <code>state</code></li>\\n<li>Object Literal of the data itself.</li>\\n<li>Function to be called with state.</li>\\n</ul>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#combine\\\">combine(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Combines two operations into one</p>\\n</dd>\\n<dt><a href=\\\"#join\\\">join(targetPath, sourcePath, targetKey)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Adds data from a target object</p>\\n</dd>\\n<dt><a href=\\\"#expandReferences\\\">expandReferences(value, [skipFilter])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions).</p>\\n</dd>\\n<dt><a href=\\\"#field\\\">field(key, value)</a> ⇒ <code>Field</code></dt>\\n<dd><p>Returns a key, value pair in an array.</p>\\n</dd>\\n<dt><a href=\\\"#fields\\\">fields(fields)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Zips key value pairs into an object.</p>\\n</dd>\\n<dt><a href=\\\"#merge\\\">merge(dataSource, fields)</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Merges fields into each item in an array.</p>\\n</dd>\\n<dt><a href=\\\"#index\\\">index()</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Returns the index of the current array being iterated.\\nTo be used with <code>each</code> as a data source.</p>\\n</dd>\\n<dt><a href=\\\"#arrayToString\\\">arrayToString(arr, separator)</a> ⇒ <code>string</code></dt>\\n<dd><p>Turns an array into a string, separated by X.</p>\\n</dd>\\n<dt><a href=\\\"#toArray\\\">toArray(arg)</a> ⇒ <code>array</code></dt>\\n<dd><p>Ensures primitive data types are wrapped in an array.\\nDoes not affect array objects.</p>\\n</dd>\\n<dt><a href=\\\"#composeNextState\\\">composeNextState(state, response)</a> ⇒ <code>State</code></dt>\\n<dd><p>Prepares next state</p>\\n</dd>\\n<dt><a href=\\\"#humanProper\\\">humanProper(str)</a> ⇒ <code>string</code></dt>\\n<dd><p>Substitutes underscores for spaces and proper-cases a string</p>\\n</dd>\\n<dt><a href=\\\"#scrubEmojis\\\">scrubEmojis(text, replacementChars)</a> ⇒ <code>string</code></dt>\\n<dd><p>Replaces emojis in a string.</p>\\n</dd>\\n<dt><a href=\\\"#chunk\\\">chunk(array, chunkSize)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Chunks an array into an array of arrays, each with no more than a certain size.</p>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#expandRequestReferences\\\">expandRequestReferences(value)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like <code>FormData</code>.</p>\\n</dd>\\n<dt><a href=\\\"#withAgent\\\">withAgent(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates an https agent for axios from the agentOptions key passed in params.</p>\\n</dd>\\n<dt><a href=\\\"#get\\\">get(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request</p>\\n</dd>\\n<dt><a href=\\\"#post\\\">post(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request</p>\\n</dd>\\n<dt><a href=\\\"#del\\\">del(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a DELETE request</p>\\n</dd>\\n<dt><a href=\\\"#head\\\">head(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a HEAD request</p>\\n</dd>\\n<dt><a href=\\\"#put\\\">put(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PUT request</p>\\n</dd>\\n<dt><a href=\\\"#patch\\\">patch(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PATCH request</p>\\n</dd>\\n<dt><a href=\\\"#options\\\">options(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a OPTIONS request</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Promise</code>\\nExecute a sequence of operations.\\nMain outer API for executing expressions.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n   create('foo'),\\n   delete('bar')\\n )\\n```\\n<a name=\\\"alterState\\\"></a>\\n\\n## alterState(func) ⇒ <code>Operation</code>\\nalias for \\\"fn()\\\"\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n<a name=\\\"fn\\\"></a>\\n\\n## fn(func) ⇒ <code>Operation</code>\\nCreates a custom step (or operation) for more flexible job writing.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n**Example**  \\n```js\\nfn(state => {\\n  // do some things to state\\n  return state;\\n});\\n```\\n<a name=\\\"jsonValue\\\"></a>\\n\\n## jsonValue(obj, path) ⇒ <code>Operation</code>\\nPicks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>object</code> | A valid JSON object. |\\n| path | <code>String</code> | JSONPath referencing a point in given JSON object. |\\n\\n**Example**  \\n```js\\njsonValue({ a:1 }, 'a')\\n```\\n<a name=\\\"sourceValue\\\"></a>\\n\\n## sourceValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsourceValue('$.key')\\n```\\n<a name=\\\"source\\\"></a>\\n\\n## source(path) ⇒ <code>Array.&lt;(String\\\\|Object)&gt;</code>\\nPicks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use `sourceValue` instead.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsource('$.key')\\n```\\n<a name=\\\"dataPath\\\"></a>\\n\\n## dataPath(path) ⇒ <code>string</code>\\nEnsures a path points at the data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataPath('key')\\n```\\n<a name=\\\"dataValue\\\"></a>\\n\\n## dataValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from the source data object—usually `state.data`.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataValue('key')\\n```\\n<a name=\\\"referencePath\\\"></a>\\n\\n## referencePath(path) ⇒ <code>string</code>\\nEnsures a path points at references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nreferencePath('key')\\n```\\n<a name=\\\"lastReferenceValue\\\"></a>\\n\\n## lastReferenceValue(path) ⇒ <code>Operation</code>\\nPicks out the last reference value from source data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nlastReferenceValue('key')\\n```\\n<a name=\\\"map\\\"></a>\\n\\n## map(path, operation, state) ⇒ <code>State</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `state.data`. |\\n| operation | <code>function</code> | The operation needed to be repeated. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nmap(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"asData\\\"></a>\\n\\n## asData(data, state) ⇒ <code>array</code>\\nSimple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.\\n- JSONPath referencing a point in `state`\\n- Object Literal of the data itself.\\n- Function to be called with state.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> \\\\| <code>object</code> \\\\| <code>function</code> |  |\\n| state | <code>object</code> | The current state. |\\n\\n**Example**  \\n```js\\nasData('$.key'| key | callback)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"combine\\\"></a>\\n\\n## combine(operations) ⇒ <code>Operation</code>\\nCombines two operations into one\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\ncombine(\\n  create('foo'),\\n  delete('bar')\\n)\\n```\\n<a name=\\\"join\\\"></a>\\n\\n## join(targetPath, sourcePath, targetKey) ⇒ <code>Operation</code>\\nAdds data from a target object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| targetPath | <code>String</code> | Target path |\\n| sourcePath | <code>String</code> | Source path |\\n| targetKey | <code>String</code> | Target Key |\\n\\n**Example**  \\n```js\\njoin('$.key','$.data','newKey')\\n```\\n<a name=\\\"expandReferences\\\"></a>\\n\\n## expandReferences(value, [skipFilter]) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions).\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n| [skipFilter] | <code>function</code> | a function which returns true if a value should be skipped |\\n\\n<a name=\\\"field\\\"></a>\\n\\n## field(key, value) ⇒ <code>Field</code>\\nReturns a key, value pair in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | Name of the field |\\n| value | <code>Value</code> | The value itself or a sourceable operation. |\\n\\n**Example**  \\n```js\\nfield('destination_field_name__c', 'value')\\n```\\n<a name=\\\"fields\\\"></a>\\n\\n## fields(fields) ⇒ <code>Object</code>\\nZips key value pairs into an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fields | <code>Fields</code> | a list of fields |\\n\\n**Example**  \\n```js\\nfields(list_of_fields)\\n```\\n<a name=\\\"merge\\\"></a>\\n\\n## merge(dataSource, fields) ⇒ <code>DataSource</code>\\nMerges fields into each item in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> |  |\\n| fields | <code>Object</code> | Group of fields to merge in. |\\n\\n**Example**  \\n```js\\nmerge(\\n  \\\"$.books[*]\\\",\\n  fields(\\n    field( \\\"publisher\\\", sourceValue(\\\"$.publisher\\\") )\\n  )\\n)\\n```\\n<a name=\\\"index\\\"></a>\\n\\n## index() ⇒ <code>DataSource</code>\\nReturns the index of the current array being iterated.\\nTo be used with `each` as a data source.\\n\\n**Kind**: global function  \\n**Access**: public  \\n**Example**  \\n```js\\nindex()\\n```\\n<a name=\\\"arrayToString\\\"></a>\\n\\n## arrayToString(arr, separator) ⇒ <code>string</code>\\nTurns an array into a string, separated by X.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arr | <code>array</code> | Array of toString'able primatives. |\\n| separator | <code>string</code> | Separator string. |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", function(state) {\\n  return arrayToString(dataValue(\\\"path_of_array\\\")(state), ', ')\\n})\\n```\\n<a name=\\\"toArray\\\"></a>\\n\\n## toArray(arg) ⇒ <code>array</code>\\nEnsures primitive data types are wrapped in an array.\\nDoes not affect array objects.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arg | <code>any</code> | Data required to be in an array |\\n\\n**Example**  \\n```js\\neach(function(state) {\\n  return toArray( dataValue(\\\"path_of_array\\\")(state) )\\n}, ...)\\n```\\n<a name=\\\"composeNextState\\\"></a>\\n\\n## composeNextState(state, response) ⇒ <code>State</code>\\nPrepares next state\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | state |\\n| response | <code>Object</code> | Response to be added |\\n\\n**Example**  \\n```js\\ncomposeNextState(state, response)\\n```\\n<a name=\\\"humanProper\\\"></a>\\n\\n## humanProper(str) ⇒ <code>string</code>\\nSubstitutes underscores for spaces and proper-cases a string\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| str | <code>string</code> | String that needs converting |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", humanProper(state.data.path_to_string))\\n```\\n<a name=\\\"scrubEmojis\\\"></a>\\n\\n## scrubEmojis(text, replacementChars) ⇒ <code>string</code>\\nReplaces emojis in a string.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | String that needs to be cleaned |\\n| replacementChars | <code>string</code> | Characters that replace the emojis |\\n\\n**Example**  \\n```js\\nscrubEmojis('Dove🕊️⭐ 29')\\n```\\n<a name=\\\"chunk\\\"></a>\\n\\n## chunk(array, chunkSize) ⇒ <code>Object</code>\\nChunks an array into an array of arrays, each with no more than a certain size.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| array | <code>Object</code> | Array to be chunked |\\n| chunkSize | <code>Integer</code> | The maxiumum size of each chunks |\\n\\n**Example**  \\n```js\\nchunk([1,2,3,4,5], 2)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n   create(\\\"SObject\\\",\\n   field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\")))\\n )\\n```\\n<a name=\\\"expandRequestReferences\\\"></a>\\n\\n## expandRequestReferences(value) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like `FormData`.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n\\n<a name=\\\"withAgent\\\"></a>\\n\\n## withAgent(params) ⇒ <code>Operation</code>\\nCreates an https agent for axios from the agentOptions key passed in params.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data |\\n\\n<a name=\\\"get\\\"></a>\\n\\n## get(requestParams) ⇒ <code>Operation</code>\\nMake a GET request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Get an item with a specified id from state)*  \\n```js\\n get({\\n     url: state => `https://www.example.com/api/items/${state.id},\\n     headers: {\\\"content-type\\\": \\\"application/json\\\"}\\n});\\n```\\n<a name=\\\"post\\\"></a>\\n\\n## post(requestParams) ⇒ <code>Operation</code>\\nMake a POST request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Sending a payload with data that comes from state)*  \\n```js\\npost({\\n  url: \\\"https://example.com\\\",\\n  data: (state) => state.data\\n});\\n```\\n**Example** *( Capturing the response for later use in state )*  \\n```js\\nalterState((state) => {\\n  return post({\\n    url: \\\"https://example.com\\\",\\n    data: (state) => state.data\\n  })(state).then(({response}) => {\\n   state.responseData = response.data\\n  })\\n});\\n```\\n<a name=\\\"del\\\"></a>\\n\\n## del(requestParams) ⇒ <code>Operation</code>\\nMake a DELETE request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Deleting a record with data that comes from state)*  \\n```js\\ndelete({\\n   url: state => `https://www.example.com/api/items/${state.id}`,\\n })(state);\\n```\\n<a name=\\\"head\\\"></a>\\n\\n## head(requestParams) ⇒ <code>Operation</code>\\nMake a HEAD request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Gets the headers that would be returned if the HEAD request&#x27;s URL was instead requested with the HTTP GET method)*  \\n```js\\nhead({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n<a name=\\\"put\\\"></a>\\n\\n## put(requestParams) ⇒ <code>Operation</code>\\nMake a PUT request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Creates a new resource or replaces a representation of the target resource with the request payload, with data from state.)*  \\n```js\\nput({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"patch\\\"></a>\\n\\n## patch(requestParams) ⇒ <code>Operation</code>\\nMake a PATCH request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Applies partial modifications to a resource, with data from state.)*  \\n```js\\npatch({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"options\\\"></a>\\n\\n## options(requestParams) ⇒ <code>Operation</code>\\nMake a OPTIONS request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Requests permitted communication options for a given URL or server, with data from state.)*  \\n```js\\noptions({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n\"","readme":"\"# Language Common [![CircleCI](https://circleci.com/gh/OpenFn/language-common.svg?style=svg)](https://circleci.com/gh/OpenFn/language-common)\\n\\nCommon and generic expressions and operations for [OpenFn](http://openfn.org).\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.4.0\\n\\n## 1.7.5\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n\\n## 1.7.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- # ecf5d30: remove sinon since it was not being used\\n\\nBumped all package versions to their latest.\\n\\n# v0.0.4\\n\\n- Added `arrayToString` helper.  \\n  Allowing you to join an array of string'able primitives (strings and integers)\\n  into a string.\\n- Added `toArray` helper.  \\n  This can be used to coerce certain types of data into an array, this can be\\n  useful when the source data has an ambiguous format. For example a given key\\n  in the data may have an object as it's value (when there is only one item),\\n  and an array of objects when there is more than one. `toArray` can be used to\\n  reconcile this inconsistency.\\n\"","functions":["execute","fn","jsonValue","sourceValue","source","dataPath","dataValue","referencePath","lastReferenceValue","asData","each","combine","join","expandReferences","field","fields","merge","index","arrayToString","toArray","composeNextState","humanProper","scrubEmojis","chunk","map"],"configuration-schema":"No Configuration Schema"},
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"3.2.5","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for DHIS2.</p>\\n</dd>\\n<dt><a href=\\\"#configMigrationHelper\\\">configMigrationHelper(state)</a> ⇒ <code>object</code></dt>\\n<dd><p>Migrates <code>apiUrl</code> to <code>hostUrl</code> if <code>hostUrl</code> is <code>blank</code>.\\nFor <code>OpenFn.org</code> users with the <code>old-style configuration</code>.</p>\\n</dd>\\n<dt><a href=\\\"#create\\\">create(resourceType, data, [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a record</p>\\n</dd>\\n<dt><a href=\\\"#update\\\">update(resourceType, path, data, [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send <code>all required fields</code> or the <code>full body</code></p>\\n</dd>\\n<dt><a href=\\\"#get\\\">get(resourceType, query, [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get data. Generic helper method for getting data of any kind from DHIS2.</p>\\n<ul>\\n<li>This can be used to get <code>DataValueSets</code>,<code>events</code>,<code>trackedEntityInstances</code>,<code>etc.</code></li>\\n</ul>\\n</dd>\\n<dt><a href=\\\"#upsert\\\">upsert(resourceType, query, data, [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.</p>\\n</dd>\\n<dt><a href=\\\"#discover\\\">discover(httpMethod, endpoint)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Discover <code>DHIS2</code> <code>api</code> <code>endpoint</code> <code>query parameters</code> and allowed <code>operators</code> for a given resource&#39;s endpoint.</p>\\n</dd>\\n<dt><a href=\\\"#patch\\\">patch(resourceType, path, data, [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Patch a record. A generic helper function to send partial updates on one or more object properties.</p>\\n<ul>\\n<li>You are not required to send the full body of object properties.</li>\\n<li>This is useful for cases where you don&#39;t want or need to update all properties on a object.</li>\\n</ul>\\n</dd>\\n<dt><a href=\\\"#destroy\\\">destroy(resourceType, path, [data], [options], [callback])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Delete a record. A generic helper function to delete an object</p>\\n</dd>\\n<dt><a href=\\\"#findAttributeValue\\\">findAttributeValue(trackedEntityInstance, attributeDisplayName)</a> ⇒ <code>string</code></dt>\\n<dd><p>Gets an attribute value by its case-insensitive display name</p>\\n</dd>\\n<dt><a href=\\\"#attr\\\">attr(attribute, value)</a> ⇒ <code>object</code></dt>\\n<dd><p>Converts an attribute ID and value into a DSHI2 attribute object</p>\\n</dd>\\n<dt><a href=\\\"#dv\\\">dv(dataElement, value)</a> ⇒ <code>object</code></dt>\\n<dd><p>Converts a dataElement and value into a DSHI2 dataValue object</p>\\n</dd>\\n<dt><a href=\\\"#request\\\">request(configuration, axiosRequest)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>The request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.</p>\\n</dd>\\n<dt><a href=\\\"#selectId\\\">selectId(resourceType)</a> ⇒ <code>string</code></dt>\\n<dd><p>Determines the attribute name for a DHIS2 system ID given a resource type.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for DHIS2.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"configMigrationHelper\\\"></a>\\n\\n## configMigrationHelper(state) ⇒ <code>object</code>\\nMigrates `apiUrl` to `hostUrl` if `hostUrl` is `blank`.\\nFor `OpenFn.org` users with the `old-style configuration`.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>object</code> | the runtime state |\\n\\n**Example**  \\n```js\\nconfigMigrationHelper(state)\\n```\\n<a name=\\\"create\\\"></a>\\n\\n## create(resourceType, data, [options], [callback]) ⇒ <code>Operation</code>\\nCreate a record\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `trackedEntityInstances`, `programs`, `events`, ... |\\n| data | <code>Object</code> | Data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\ncreate('programs', {\\n  name: 'name 20',\\n  shortName: 'n20',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\ncreate('events', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'DiszpKrYNg8',\\n  status: 'COMPLETED',\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\ncreate('trackedEntityInstances', {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Gigiwe',\\n    },\\n  ]\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\ncreate('dataSetNotificationTemplates', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\ncreate('dataElements', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\ncreate('dataElementGroups', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\ncreate('dataElementGroupSets', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\ncreate('dataValueSets', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\ncreate('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(an enrollment)*  \\n```js\\ncreate('enrollments', {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-09-17',\\n  incidentDate: '2013-09-17',\\n});\\n```\\n<a name=\\\"update\\\"></a>\\n\\n## update(resourceType, path, data, [options], [callback]) ⇒ <code>Operation</code>\\nUpdate data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send `all required fields` or the `full body`\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\nupdate('programs', 'qAZJCrNJK8H', {\\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\\n  shortName: '14e1aa02',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\nupdate('events', 'PVqUD2hvU4E', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'Ngelehun CHC',\\n  status: 'COMPLETED',\\n  storedBy: 'admin',\\n  dataValues: [],\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\nupdate('trackedEntityInstances', 'IeQfgUtGPq2', {\\n  created: '2015-08-06T21:12:37.256',\\n  orgUnit: 'TSyzvBiovKh',\\n  createdAtClient: '2015-08-06T21:12:37.256',\\n  trackedEntityInstance: 'IeQfgUtGPq2',\\n  lastUpdated: '2015-08-06T21:12:37.257',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  inactive: false,\\n  deleted: false,\\n  featureType: 'NONE',\\n  programOwners: [\\n    {\\n      ownerOrgUnit: 'TSyzvBiovKh',\\n      program: 'IpHINAT79UW',\\n      trackedEntityInstance: 'IeQfgUtGPq2',\\n    },\\n  ],\\n  enrollments: [],\\n  relationships: [],\\n  attributes: [\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      displayName: 'Last name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'zDhUuAYrxNC',\\n      value: 'Russell',\\n    },\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      code: 'MMD_PER_NAM',\\n      displayName: 'First name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Catherine',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello Updated,\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\nupdate('dataElements', 'FTRrcoaog83', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\nupdate('dataElementGroups', 'QrprHT61XFk', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\nupdate('dataValueSets', 'AsQj6cDsUq4', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\nupdate('dataValueSets', 'Ix2HsbDMLea', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a single enrollment)*  \\n```js\\nupdate('enrollments', 'CmsHzercTBa' {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-10-17',\\n  incidentDate: '2013-10-17',\\n});\\n```\\n<a name=\\\"get\\\"></a>\\n\\n## get(resourceType, query, [options], [callback]) ⇒ <code>Operation</code>\\nGet data. Generic helper method for getting data of any kind from DHIS2.\\n- This can be used to get `DataValueSets`,`events`,`trackedEntityInstances`,`etc.`\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - state  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to get(use its `plural` name). E.g. `dataElements`, `trackedEntityInstances`,`organisationUnits`, etc. |\\n| query | <code>Object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params beyond filters, request configuration (e.g. `auth`) and DHIS2 api version to use. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(all data values for the &#x27;pBOMPrpg1QX&#x27; dataset)*  \\n```js\\nget('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n});\\n```\\n**Example** *(all programs for an organization unit)*  \\n```js\\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });\\n```\\n**Example** *(a single tracked entity instance by a unique external ID)*  \\n```js\\nget('trackedEntityInstances', {\\n  ou: 'DiszpKrYNg8',\\n  filter: ['flGbXLXCrEo:Eq:124', 'w75KJ2mc4zz:Eq:John'],\\n});\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert(resourceType, query, data, [options], [callback]) ⇒ <code>Operation</code>\\nUpsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.\\n\\n**Kind**: global function  \\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntityInstances` |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [options] | <code>Object</code> | Optional configuration that will be applied to both the `get` and the `create` or `update` operations. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(Example &#x60;expression.js&#x60; of upsert)*  \\n```js\\nupsert('trackedEntityInstances', {\\n ou: 'TSyzvBiovKh',\\n filter: ['w75KJ2mc4zz:Eq:Qassim'],\\n}, {\\n orgUnit: 'TSyzvBiovKh',\\n trackedEntityType: 'nEenWmSyUEp',\\n attributes: [\\n   {\\n     attribute: 'w75KJ2mc4zz',\\n     value: 'Qassim',\\n   },\\n ],\\n});\\n```\\n<a name=\\\"discover\\\"></a>\\n\\n## discover(httpMethod, endpoint) ⇒ <code>Operation</code>\\nDiscover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| httpMethod | <code>string</code> | The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete` |\\n| endpoint | <code>string</code> | The path for a given endpoint. E.g. `/trackedEntityInstances` or `/dataValueSets` |\\n\\n**Example** *(a list of parameters allowed on a given endpoint for specific http method)*  \\n```js\\ndiscover('post', '/trackedEntityInstances')\\n```\\n<a name=\\\"patch\\\"></a>\\n\\n## patch(resourceType, path, data, [options], [callback]) ⇒ <code>Operation</code>\\nPatch a record. A generic helper function to send partial updates on one or more object properties.\\n- You are not required to send the full body of object properties.\\n- This is useful for cases where you don't want or need to update all properties on a object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. Include only the fields you want to update. E.g. `{name: \\\"New Name\\\"}` |\\n| [options] | <code>Object</code> | Optional configuration, including params for the update ({preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}). Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a dataElement)*  \\n```js\\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });\\n```\\n<a name=\\\"destroy\\\"></a>\\n\\n## destroy(resourceType, path, [data], [options], [callback]) ⇒ <code>Operation</code>\\nDelete a record. A generic helper function to delete an object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be deleted. E.g. `trackedEntityInstances`, `organisationUnits`, etc. |\\n| path | <code>string</code> | Can be an `id` of an `object` or `path` to the `nested object` to `delete`. |\\n| [data] | <code>Object</code> | Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\\\"identifiableObjects\\\": [{\\\"id\\\": \\\"IDA\\\"}, {\\\"id\\\": \\\"IDB\\\"}, {\\\"id\\\": \\\"IDC\\\"}]}`. See more [on DHIS2 API docs](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects) |\\n| [options] | <code>Object</code> | Optional `options` for `del` operation including params e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see [DHIS2 documentation](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters). Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a tracked entity instance)*  \\n```js\\ndestroy('trackedEntityInstances', 'LcRd6Nyaq7T');\\n```\\n<a name=\\\"findAttributeValue\\\"></a>\\n\\n## findAttributeValue(trackedEntityInstance, attributeDisplayName) ⇒ <code>string</code>\\nGets an attribute value by its case-insensitive display name\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntityInstance | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeDisplayName | <code>string</code> | The 'displayName' to search for in the TEI's attributes |\\n\\n**Example**  \\n```js\\nfindAttributeValue(state.data.trackedEntityInstances[0], 'first name')\\n```\\n<a name=\\\"attr\\\"></a>\\n\\n## attr(attribute, value) ⇒ <code>object</code>\\nConverts an attribute ID and value into a DSHI2 attribute object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attribute | <code>string</code> | A tracked entity instance (TEI) attribute ID. |\\n| value | <code>string</code> | The value for that attribute. |\\n\\n**Example**  \\n```js\\nattr('w75KJ2mc4zz', 'Elias')\\n```\\n<a name=\\\"dv\\\"></a>\\n\\n## dv(dataElement, value) ⇒ <code>object</code>\\nConverts a dataElement and value into a DSHI2 dataValue object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataElement | <code>string</code> | A data element ID. |\\n| value | <code>string</code> | The value for that data element. |\\n\\n**Example**  \\n```js\\ndv('f7n9E0hX8qk', 12)\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request(configuration, axiosRequest) ⇒ <code>Promise</code>\\nThe request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.\\n\\n**Kind**: global function  \\n**Returns**: <code>Promise</code> - a promise that will resolve to either a response object or an error object.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| configuration | <code>object</code> | configuration must have a username and password |\\n| axiosRequest | <code>object</code> | the axiosRequest contains valid axios params: https://axios-http.com/docs/req_config |\\n\\n<a name=\\\"selectId\\\"></a>\\n\\n## selectId(resourceType) ⇒ <code>string</code>\\nDetermines the attribute name for a DHIS2 system ID given a resource type.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| resourceType | <code>string</code> | \\n\\n\"","readme":"\"# Language DHIS2\\n\\nAn OpenFn language Pack for building expressions and operations for working with\\nthe\\n[DHIS2 API](http://dhis2.github.io/dhis2-docs/master/en/developer/html/dhis2_developer_manual.html).\\nUsed most commonly via OpenFn.org or by hand with\\n[OpenFn/core](https://github.com/OpenFn/core) from the root of this repo:\\n\\n```sh\\ncore execute \\\\\\n -l ../language-dhis2 \\\\\\n -e ./tmp/expression.js \\\\\\n -s ./tmp/state.json \\\\\\n -o ./tmp/output.json\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/dhis2-docs) for\\nfull technical documentation.\\n\\nThere are lots of **examples** for how to use the various helper functions on\\nthe main\\n[Adaptor docs](https://docs.openfn.org/adaptors/packages/dhis2-docs#modules)\\npage.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dhis2-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`. (NB: that this repo\\nalso contain integration tests which can be run with\\n`pnpm run integration-test`.)\\n\\n⚠️ NB: Make changes to the files in `src/` and then use `npm run build` to\\ngenerate output files in `lib/`.\\n\\nThe documentation is autogenerated, so please **rebuild the docs** after making\\nchanges by running `pnpm build docs`\\n\\n### Unit Tests\\n\\nUnit tests allows to test the functionalities of the adaptor helper functions\\nsuch as:\\n\\n> Does `create('events', payload)` perform a post request to the correct DHIS2\\n> API?\\n\\nTo run unit tests execute `pnpm run test` (they're the default tests).\\n\\nAnytime a new functionality is added to the helper functions, more unit tests\\nneeds to be added.\\n\\n### End-to-end integration tests\\n\\nIntegration tests allow us to test the end-to-end behavior of the helper\\nfunctions and also to test the examples we provide via inline documentation.\\n\\nFor example with integration tests we answer the following question:\\n\\n> Does `create('events', eventPayload)` actually create a new event in a live\\n> DHIS2 system?\\n\\nTo run integration tests, execute `npm run integration-test`. These tests use\\nnetwork I/O and a public connection to a DHIS2 \\\"play\\\" server so their timing and\\nperformance is unpredictable. Consider adding an increased timeout, and\\nmodifying the orgUnit, program, etc., IDs set in `globalState`.\\n\\n#### Troubleshooting the tests\\n\\n- Depending on your internet strength please consider changing the **global\\n  timeout** in the `test/mocha.opts` file to avoid faillures related to network\\n  timeouts.\\n\\n- The behavior of the tests in `test/integration.js` is very unpredictable; they\\n  depend on the **configuration of a target DHIS2 instance**. Currently you need\\n  to have at least one organisation unit with one program, one\\n  trackedEntityInstance and one programStage in it. These components need to be\\n  well configured for the integration tests to work. For example: the\\n  trackedEntityInstance need to be enrolled to the program, which should be\\n  created in that organisation unit and contains at least that programStage. If\\n  the tests fail, you must adjust these attributes in the\\n  [before hook](https://github.com/OpenFn/adaptors/tree/main/packages/dhis2/test/integration.js):\\n\\n```javascript\\nbefore(done => {\\n  fixture.initialState = {\\n    configuration: {\\n      username: 'admin',\\n      password: 'district',\\n      hostUrl: 'https://play.dhis2.org/2.36.6',\\n    },\\n    program: 'IpHINAT79UW',\\n    orgUnit: 'DiszpKrYNg8',\\n    trackedEntityInstance: 'uhubxsfLanV',\\n    programStage: 'eaDHS084uMp',\\n  };\\n  done();\\n});\\n```\\n\\n- Make sure the `update` and `upsert` integration tests don't affect those\\n  initial organisation units, programs, programStage and trackedEntityInstance\\n  required. Otherwise the create integration tests would be broken again; and\\n  that's an endless faillure loop :(\\n\\nAnytime a new example is added in the documentation of a helper function, a new\\nintegration test should be built.\\n\"","changelog":"\"# @openfn/language-dhis2\\n\\n## 3.2.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.4\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.2.3\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n  - @openfn/buildtools@1.0.2\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 8d6e8ce: Migrate dhis2 into repo\\n\\n### Patch Changes\\n\\n- Updated dependencies [4671e89]\\n- Updated dependencies [8d6e8ce]\\n  - @openfn/buildtools@1.0.1\\n\"","functions":["create","update","get","upsert","discover","patch","destroy","findAttributeValue","attr","dv"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Password"]},"hostUrl":{"title":"Host URL","type":"string","description":"The base DHIS2 instance URL","format":"uri","minLength":1,"examples":["https://play.dhis2.org/2.36.6"]},"apiVersion":{"title":"API Version","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"38","description":"DHIS2 api version","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["hostUrl","password","username"]}},
{"name":"dynamics","adaptor":"@openfn/language-dynamics","version":"0.3.3","docs":"\"<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language Dynamics\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nMicrosoft Dynamics API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dynamics-configuration-schema/)\\ndefinition.\\n\\n- _Dynamics uses oauth2. The language-package will expect to be given a valid\\n  oauth token. If a valid token is not provided, it will fail. On OpenFn.org,\\n  the `CredentialService` is responsible for making sure the the oauth token is\\n  valid each time it assembles state to hand to `execute`._\\n\\n#### sample createEntity expression\\n\\n```js\\ncreateEntity({\\n  entityName: 'accounts',\\n  body: {\\n    name: 'Open Function',\\n    creditonhold: false,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample query expression\\n\\n_Can be used to retrieve or query a specific Entity if an entityId is declared\\nin the expression. Otherwise it will perform a query on all data with the\\ndefined Entity Name_\\n\\n```js\\nquery({\\n  entityName: 'contacts',\\n  entityId: '51a0e5b9-88df-e311-b8e5-6c3be5a8b200',\\n  query: {\\n    fields: ['fullname', 'birthdate'],\\n    limit: 10,\\n    orderBy: {\\n      field: 'lastname',\\n      direction: 'asc',\\n    },\\n    filter: \\\"firstname eq 'Cat'\\\",\\n  },\\n});\\n```\\n\\n#### sample update expression\\n\\n```js\\nupdateEntity({\\n  entityName: 'accounts',\\n  entityId: 'f4301865-c64a-e711-80f3-e0071b6fd061',\\n  body: {\\n    name: 'wilder 2',\\n    creditonhold: true,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample delete expression\\n\\n```js\\ndeleteEntity({\\n  entityName: 'accounts',\\n  entityId: 'aeef941b-254a-e711-80f1-e0071b685921',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-dynamics\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- b032b9c: Migrate Dynamics\\n\\n### Patch Changes\\n\\n- e81561f: Updated ast and package.json\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"resource":{"title":"Resource","type":"string","description":"Dynamics resource URL","format":"uri","minLength":1,"examples":["https://openfn.crm2.dynamics.com"]},"apiVersion":{"title":"API Version","type":"string","default":"8.2.0","description":"Dynamics API version to use","minLength":1,"examples":["8.2.0"]},"accessToken":{"title":"Access Token","type":"string","description":"Dynamics API access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["resource","apiVersion","accessToken"]}},
{"name":"facebook","adaptor":"@openfn/language-facebook","version":"0.2.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#postMessage\\\">postMessage(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Post a message</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"postMessage\\\"></a>\\n\\n## postMessage(params) ⇒ <code>Operation</code>\\nPost a message\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**  \\n```js\\npostMessage({\\n \\\"recipient\\\": {\\n    \\\"id\\\": \\\"your-psid\\\"\\n  },\\n  \\\"message\\\": {\\n    \\\"text\\\": \\\"your-message\\\"\\n  }\\n})\\n```\\n\"","readme":"\"# Language Facebook\\n\\nLanguage Pack for building expressions and operations to interact with the\\nFacebook Messenger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/facebook-configuration-schema/)\\ndefinition.\\n\\n### postMessage\\n\\n#### sample expression using operation\\n\\n```js\\npostMessage({\\n  recipient: {\\n    id: '<PSID>',\\n  },\\n  message: {\\n    text: '<YOUR MESSAGE GOES HERE>',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-facebook\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f7669d2: migrate facebook\\n\"","functions":["postMessage"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accessToken":{"title":"Access Token","type":"string","description":"Your Facebook API access token","writeOnly":true,"minLength":1}},"type":"object","additionalProperties":true,"required":["accessToken"]}},
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"1.1.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#create\\\">create(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a resource in a destination system using a POST request</p>\\n</dd>\\n<dt><a href=\\\"#createTransactionBundle\\\">createTransactionBundle(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a transactionBundle for HAPI FHIR</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"create\\\"></a>\\n\\n## create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a resource in a destination system using a POST request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"createTransactionBundle\\\"></a>\\n\\n## createTransactionBundle(params, callback) ⇒ <code>Operation</code>\\nCreates a transactionBundle for HAPI FHIR\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new transaction |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTransactionBundle( {\\\"entry\\\": [{...},, {...}]})\\n```\\n\"","readme":"\"# language-fhir\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HAPI FHIR\\nAPI.\\n\\n## FHIR Documentation\\n\\nThe Restfull API can be seen here: https://www.hl7.org/fhir/http.html\\n\\n## Documentation\\n\\n\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-configuration-schema/)\\ndefinition.\\n\\n#### Creates a resource in a destination system using a POST request\\n\\n```js\\ncreate('/endpoint', { foo: 'bar' });\\n```\\n\\n#### Creates a transactionBundle for HAPI FHIR\\n\\n```js\\ncreateTransactionBundle({\\n  entry: [transactionBundle],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-fhir\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- fee607e: Migrate FHIR, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["create","createTransactionBundle"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"resource":{"title":"Resource Url","type":"string","description":"The resource url to post transactionBundle in to the destination system","examples":["resource_url"]},"authType":{"title":"Auth Type","type":"string","description":"The type of authentication used to authenticate into the destination system","examples":["Basic"]},"token":{"title":"Token","type":"string","description":"The token  used to authenticate into the destination system","examples":["@super!scretetoken"]}},"required":["resource","authType","token"]}},
{"name":"godata","adaptor":"@openfn/language-godata","version":"3.2.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#listContacts\\\">listContacts(id, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch the list of contacts within a particular outbreak using its ID.</p>\\n</dd>\\n<dt><a href=\\\"#getContact\\\">getContact(id, query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get one or multiple contacts within an outbreak from a query filter</p>\\n</dd>\\n<dt><a href=\\\"#upsertContact\\\">upsertContact(id, externalId, goDataContact, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert contact to godata using an external id to match a specific record.</p>\\n</dd>\\n<dt><a href=\\\"#listOutbreaks\\\">listOutbreaks(callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch the list of outbreaks</p>\\n</dd>\\n<dt><a href=\\\"#getOutbreak\\\">getOutbreak(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get one or multiple outbreaks from a query filter</p>\\n</dd>\\n<dt><a href=\\\"#upsertOutbreak\\\">upsertOutbreak(outbreak, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert outbreak to godata</p>\\n</dd>\\n<dt><a href=\\\"#listCases\\\">listCases(id, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch the list of cases within a particular outbreak using its ID.</p>\\n</dd>\\n<dt><a href=\\\"#getCase\\\">getCase(id, query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get one or multiple cases within an outbreak from a query filter</p>\\n</dd>\\n<dt><a href=\\\"#upsertCase\\\">upsertCase(id, externalId, goDataCase, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert case to godata using an external id to mach a specific record</p>\\n</dd>\\n<dt><a href=\\\"#listLocations\\\">listLocations(callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch the list of locations</p>\\n</dd>\\n<dt><a href=\\\"#getLocation\\\">getLocation(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get one or multiple locations from a query filter</p>\\n</dd>\\n<dt><a href=\\\"#upsertLocation\\\">upsertLocation(externalId, goDataLocation, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert location to godata</p>\\n</dd>\\n<dt><a href=\\\"#listReferenceData\\\">listReferenceData(callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch the list of reference data</p>\\n</dd>\\n<dt><a href=\\\"#getReferenceData\\\">getReferenceData(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get one or multiple reference data from a query filter</p>\\n</dd>\\n<dt><a href=\\\"#upsertReferenceData\\\">upsertReferenceData(externalId, goDataReferenceData, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert reference data to godata</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"listContacts\\\"></a>\\n\\n## listContacts(id, callback) ⇒ <code>Operation</code>\\nFetch the list of contacts within a particular outbreak using its ID.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nlistContacts(\\\"343d-dc3e\\\", // Outbreak Id\\n   state => {\\n      console.log(state);\\n   return state;\\n });\\n```\\n<a name=\\\"getContact\\\"></a>\\n\\n## getContact(id, query, callback) ⇒ <code>Operation</code>\\nGet one or multiple contacts within an outbreak from a query filter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetContact(\\\"343d-dc3e\\\", {\\\"where\\\":{\\\"firstName\\\": \\\"Luca\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"upsertContact\\\"></a>\\n\\n## upsertContact(id, externalId, goDataContact, callback) ⇒ <code>Operation</code>\\nUpsert contact to godata using an external id to match a specific record.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataContact | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertContact(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   {\\n     firstName: 'Luca',\\n     gender: 'male',\\n     'age:years': '20'\\n     ...\\n   }\\n )\\n```\\n<a name=\\\"listOutbreaks\\\"></a>\\n\\n## listOutbreaks(callback) ⇒ <code>Operation</code>\\nFetch the list of outbreaks\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nlistOutbreaks(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"getOutbreak\\\"></a>\\n\\n## getOutbreak(query, callback) ⇒ <code>Operation</code>\\nGet one or multiple outbreaks from a query filter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetOutbreak({\\\"where\\\":{\\\"name\\\": \\\"Outbreak demo\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"upsertOutbreak\\\"></a>\\n\\n## upsertOutbreak(outbreak, callback) ⇒ <code>Operation</code>\\nUpsert outbreak to godata\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| outbreak | <code>object</code> | an object with an externalId and some outbreak data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertOutbreak({externalId: \\\"3dec33-ede3\\\", data: {...}})\\n```\\n<a name=\\\"listCases\\\"></a>\\n\\n## listCases(id, callback) ⇒ <code>Operation</code>\\nFetch the list of cases within a particular outbreak using its ID.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nlistCases(\\\"343d-dc3e\\\", state => {\\n   console.log(state);\\n   return state;\\n });\\n```\\n<a name=\\\"getCase\\\"></a>\\n\\n## getCase(id, query, callback) ⇒ <code>Operation</code>\\nGet one or multiple cases within an outbreak from a query filter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetCase(\\n   '3b55-cdf4',\\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\\n   state => {\\n     console.log(state);\\n     return state;\\n   }\\n);\\n```\\n<a name=\\\"upsertCase\\\"></a>\\n\\n## upsertCase(id, externalId, goDataCase, callback) ⇒ <code>Operation</code>\\nUpsert case to godata using an external id to mach a specific record\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataCase | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertCase(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   data: state => {\\n     const patient = state.data.body;\\n      return {\\n        firstName: patient.Patient_name.split(' ')[0],\\n        lastName: patient.Patient_name.split(' ')[1],\\n        visualId: patient.Case_ID,\\n        'age:years': patient.Age_in_year,\\n        gender: patient.Sex,\\n      };\\n })\\n```\\n<a name=\\\"listLocations\\\"></a>\\n\\n## listLocations(callback) ⇒ <code>Operation</code>\\nFetch the list of locations\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nlistLocations(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"getLocation\\\"></a>\\n\\n## getLocation(query, callback) ⇒ <code>Operation</code>\\nGet one or multiple locations from a query filter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetLocation({\\\"where\\\":{\\\"name\\\": \\\"30 DE OCTUBRE\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"upsertLocation\\\"></a>\\n\\n## upsertLocation(externalId, goDataLocation, callback) ⇒ <code>Operation</code>\\nUpsert location to godata\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataLocation | <code>object</code> | an object with some location data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertLocation('name', {...})\\n```\\n<a name=\\\"listReferenceData\\\"></a>\\n\\n## listReferenceData(callback) ⇒ <code>Operation</code>\\nFetch the list of reference data\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nlistReferenceData(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"getReferenceData\\\"></a>\\n\\n## getReferenceData(query, callback) ⇒ <code>Operation</code>\\nGet one or multiple reference data from a query filter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetReferenceData({\\\"where\\\":{\\\"categoryId\\\": \\\"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n<a name=\\\"upsertReferenceData\\\"></a>\\n\\n## upsertReferenceData(externalId, goDataReferenceData, callback) ⇒ <code>Operation</code>\\nUpsert reference data to godata\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataReferenceData | <code>object</code> | an object with some reference data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertReferenceData('id', {...})\\n```\\n\"","readme":"\"# language-godata\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the WHO\\nGo.Data API.\\n\\n[Go.Data](https://www.who.int/godata) is an outbreak investigation tool for\\nfield data collection during public health emergencies. The tool includes\\nfunctionality for case investigation, contact follow-up, visualization of chains\\nof transmission including secure data exchange and is designed for flexibility\\nin the field, to adapt to the wide range of outbreak scenarios.\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/language-godata/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/godata-configuration-schema/)\\ndefinition.\\n\\n## Helper Functions\\n\\n### post(...)\\n\\n## Fetch the list of outbreaks\\n\\nThis function is used to fetch the whole list of outbreaks in Go.Data.\\n\\n```js\\nlistOutbreaks(state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Get a specific outbreak\\n\\nThis function can be used to fetch one specific outbreak. A filtering mechanism\\nis used to specify a criteria to match. Mutliple outbreaks could be returned if\\nmatched by the filter.\\n\\n```js\\ngetOutbreak({ where: { name: 'Outbreak demo' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update an outbreak using a unique id as a key\\n\\nThis function is used to either update a record in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertOutbreak({\\n  externalId: '3dec33-ede3',\\n  data: {\\n    name: 'string',\\n    description: 'string',\\n    disease: 'string',\\n    countries: [\\n      {\\n        id: 'SENEGAL',\\n      },\\n    ],\\n    startDate: '2020-12-17T14:54:19.498Z',\\n    endDate: '2020-12-17T14:54:19.498Z',\\n    longPeriodsBetweenCaseOnset: 0,\\n    periodOfFollowup: 0,\\n  },\\n});\\n```\\n\\n## Fetch the list of cases\\n\\nThis function is used to fetch the whole list of cases for a specific outbreak\\nin Go.Data.\\n\\n```js\\nlistCases('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific case\\n\\nThis function can be used to fetch one specific case for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple cases could be\\nreturned if matched by the filter.\\n\\n```js\\ngetCase(\\n  '4c444f7-4e11-41d0-c1af-331dd15a892e',\\n  { 'where.relationship': { active: true }, where: { firstName: 'Luca' } },\\n  state => {\\n    console.log(state);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a case using a unique id as a key\\n\\nThis function is used to either update a case in Go.Data if matched or insert a\\nnew one if no record matched the unique id.\\n\\n```js\\nupsertCase('4dce-3eedce3-rd33', 'visualId',\\n  data: state => {\\n    const patient = state.data.body;\\n    return {\\n      firstName: patient.Patient_name.split(' ')[0],\\n      lastName: patient.Patient_name.split(' ')[1],\\n      visualId: patient.Case_ID,\\n      'age:years': patient.Age_in_year,\\n      gender: patient.Sex,\\n    };\\n  });\\n```\\n\\n## Fetch the list of contacts\\n\\nThis function is used to fetch the whole list of contacts for a specific\\noutbreak in Go.Data.\\n\\n```js\\nlistContacts('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific contact\\n\\nThis function can be used to get one specific contact for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple contacts could be\\nreturned if matched by the filter.\\n\\n```js\\ngetContact('343d-dc3e', { where: { firstName: 'Luca' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a contact using a unique id as a key\\n\\nThis function is used to either update a contact in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertContact('4dce-3eedce3-rd33', 'visualId', {\\n  firstName: 'Luca',\\n  gender: 'male',\\n  'age:years': '20',\\n});\\n```\\n\\n## Fetch the list of locations\\n\\nThis function is used to fetch the list of locations.\\n\\n```js\\nlistLocations(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific location\\n\\nThis function can be used to get one specific location. A filtering mechanism\\ncan specify a criteria to match. Mutliple locations could be returned if matched\\nby the filter.\\n\\n```js\\ngetLocation({ where: { name: '30 DE MAYO' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a location using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertLocation('name', {\\n  name: '30 DE DECIEMBRE',\\n  synonyms: [],\\n  identifiers: [],\\n  active: true,\\n  populationDensity: 0,\\n  geoLocation: {\\n    lat: -45.343244,\\n    lng: -67.193873,\\n  },\\n});\\n```\\n\\n## Fetch the list of reference data\\n\\nThis function is used to fetch the list of reference data.\\n\\n```js\\nlistReferenceData(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific reference data\\n\\nThis function can be used to get one specific reference data. A filtering\\nmechanism can specify a criteria to match.\\n\\n```js\\ngetReferenceData(\\n  { where: { categoryId: 'LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME' } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a reference data using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertReferenceData('id', {\\n  categoryId: 'CATEGORY',\\n  value: 'VALUE',\\n  readOnly: false,\\n  active: true,\\n  id: 'ID',\\n  createdAt: '2020-10-01T18:48:31.784Z',\\n  createdBy: '95d31ea9',\\n  updatedAt: '2020-10-01T18:48:31.784Z',\\n  updatedBy: '95d31ea9',\\n  createdOn: 'API',\\n  deleted: false,\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-godata\\n\\n## 3.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- 8e7a79e: Migrate Godata\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\"","functions":["listContacts","getContact","upsertContact","listOutbreaks","getOutbreak","upsertOutbreak","listCases","getCase","upsertCase","listLocations","getLocation","upsertLocation","listReferenceData","getReferenceData","upsertReferenceData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"Godata API URL","default":"https://www.who-godata.com/api","format":"uri","minLength":1,"examples":["https://www.who-godata.com/api"]},"email":{"title":"Email","type":"string","description":"Your Godata login email","writeOnly":true,"minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Godata login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["apiUrl","email","password"]}},
{"name":"googlesheets","adaptor":"@openfn/language-googlesheets","version":"2.1.5","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#appendValues\\\">appendValues(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Add an array of rows to the spreadsheet.\\n<a href=\\\"https://developers.google.com/sheets/api/samples/writing#append_values\\\">https://developers.google.com/sheets/api/samples/writing#append_values</a></p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"appendValues\\\"></a>\\n\\n## appendValues(params) ⇒ <code>Operation</code>\\nAdd an array of rows to the spreadsheet.\\nhttps://developers.google.com/sheets/api/samples/writing#append_values\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n\\n**Example**  \\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\"","readme":"\"# Language Google Sheets\\n\\nLanguage Pack for building expressions and operations to make Google Sheets API\\ncalls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googlesheets-configuration-schema/)\\ndefinition.\\n\\n### appendValues()\\n\\nAdd rows to an existing sheet:\\n`https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED`\\n\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-googlesheets\\n\\n## 2.1.5\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 9e7d458: Migrate googlesheets\\n\"","functions":["appendValues"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accessToken":{"title":"Access Token","type":"string","description":"Your Google Sheets access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["accessToken"]}},
{"name":"http","adaptor":"@openfn/language-http","version":"4.2.6","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#get\\\">get(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request</p>\\n</dd>\\n<dt><a href=\\\"#post\\\">post(path, params, callback)</a> ⇒ <code>operation</code></dt>\\n<dd><p>Make a POST request</p>\\n</dd>\\n<dt><a href=\\\"#put\\\">put(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PUT request</p>\\n</dd>\\n<dt><a href=\\\"#patch\\\">patch(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PATCH request</p>\\n</dd>\\n<dt><a href=\\\"#del\\\">del(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a DELETE request</p>\\n</dd>\\n<dt><a href=\\\"#parseXML\\\">parseXML(body, script)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Parse XML with the Cheerio parser</p>\\n</dd>\\n<dt><a href=\\\"#parseCSV\\\">parseCSV(target, config)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>CSV-Parse for CSV conversion to JSON</p>\\n</dd>\\n<dt><a href=\\\"#request\\\">request(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a request using the &#39;request&#39; node module. This module is deprecated.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"get\\\"></a>\\n\\n## get(path, params, callback) ⇒ <code>Operation</code>\\nMake a GET request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nget('/myEndpoint', {\\n   query: {foo: 'bar', a: 1},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"post\\\"></a>\\n\\n## post(path, params, callback) ⇒ <code>operation</code>\\nMake a POST request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npost('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"put\\\"></a>\\n\\n## put(path, params, callback) ⇒ <code>Operation</code>\\nMake a PUT request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nput('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"patch\\\"></a>\\n\\n## patch(path, params, callback) ⇒ <code>Operation</code>\\nMake a PATCH request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npatch('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"del\\\"></a>\\n\\n## del(path, params, callback) ⇒ <code>Operation</code>\\nMake a DELETE request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ndel(`/myendpoint/${state => state.data.id}`, {\\n   headers: {'content-type': 'application/json'}\\n })\\n```\\n<a name=\\\"parseXML\\\"></a>\\n\\n## parseXML(body, script) ⇒ <code>Operation</code>\\nParse XML with the Cheerio parser\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| body | <code>String</code> | data string to be parsed |\\n| script | <code>function</code> | script for extracting data |\\n\\n**Example**  \\n```js\\nparseXML(body, function($){\\n   return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n })\\n```\\n<a name=\\\"parseCSV\\\"></a>\\n\\n## parseCSV(target, config) ⇒ <code>Operation</code>\\nCSV-Parse for CSV conversion to JSON\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| target | <code>String</code> | string or local file with CSV data |\\n| config | <code>Object</code> | csv-parse config object |\\n\\n**Example**  \\n```js\\nparseCSV(\\\"/home/user/someData.csv\\\", {\\n\\t  quoteChar: '\\\"',\\n\\t  header: false,\\n\\t});\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request(params) ⇒ <code>Operation</code>\\nMake a request using the 'request' node module. This module is deprecated.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n\\n**Example**  \\n```js\\nrequest(params);\\n```\\n\"","readme":"\"# Language HTTP\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/http-configuration-schema/)\\ndefinition.\\n\\n### Get data\\n\\nThis helper function allows the use of a get method to fetch data. You can\\nspecify a query string for filter.\\n\\n```js\\nget(\\n  '/myendpoint',\\n  {\\n    query: { foo: 'bar', a: 1 },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'taylor', password: 'somethingsecret' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Post existing data\\n\\nSend some data to an existing endpoint.\\n\\n```js\\npost('/endpoint', {\\n  body: state => {\\n    return {\\n      field_1: 'some_data',\\n      field_2: 'some_more_data',\\n      field_id: dataValue('Some.Json.Object.Id')(state),\\n    };\\n  },\\n  headers: {\\n    Authorization: 'AUTH_KEY',\\n    'Content-Type': 'application/json',\\n  },\\n});\\n```\\n\\n### Update existing data with PUT or PATCH\\n\\n```js\\nput(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n```js\\npatch(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Delete data\\n\\n```js\\ndel(\\n  '/myendpoint',\\n  {\\n    query: { id: 'someId' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Parse XML\\n\\nThis function allows you to parse some xml data. A callback function can be use\\nto store in a table.\\n\\n```js\\nparseXML(body, function ($) {\\n  return $('table[class=your_table]').parsetable(true, true, true);\\n});\\n```\\n\\n### Parse CSV\\n\\n```js\\nparseCSV('someData.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n});\\n```\\n\\n### Sample parse local CSV file\\n\\n```js\\nparseCSV('PatientsJan2009.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n  columns: true,\\n  skip_empty_lines: true,\\n  trim: true,\\n  bom: true,\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`.\\n\\nTo build the docs for this repo, run `pnpm build:docs`.\\n\"","changelog":"\"# @openfn/language-http\\n\\n## 4.2.6\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.2.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.2.4\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 4.2.3\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 4.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 8e1b86d: update http to new format\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 4671e89: Migrate language-http\\n\"","functions":["get","post","put","patch","del","parseXML","parseCSV"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Password"]},"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://instance_name.surveycto.com"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
{"name":"khanacademy","adaptor":"@openfn/language-khanacademy","version":"0.3.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for khanacademy.</p>\\n</dd>\\n<dt><a href=\\\"#fetch\\\">fetch(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch data from the Khan Academy API</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for khanacademy.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetch\\\"></a>\\n\\n## fetch(params) ⇒ <code>Operation</code>\\nFetch data from the Khan Academy API\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the query |\\n\\n**Example**  \\n```js\\nexecute(\\n  fetch(params)\\n)(state)\\n```\\n\"","readme":"\"# Language KhanAcademy\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/khanacademy-configuration-schema/)\\ndefinition.\\n\\n## fetch\\n\\n#### sample usage\\n\\n```js\\nfetch({\\n  getEndpoint: 'user',\\n  queryParams: {\\n    email: 'thisoneuser@something.org',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/your-uuid',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-khanacademy\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 9137655: migrate khanacademy\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"email":{"title":"Email","type":"string","description":"Your Khanacademy login email","format":"email","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Khanacademy login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"consumerKey":{"title":"Consumer Key","type":"string","description":"Your Khanacademy consumer key","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]},"secretKey":{"title":"Secret Key","type":"string","description":"Your Khanacademy secret key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["email","password","secretKey","consumerKey"]}},
{"name":"kobotoolbox","adaptor":"@openfn/language-kobotoolbox","version":"1.3.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#getForms\\\">getForms(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a request to get the list of forms</p>\\n</dd>\\n<dt><a href=\\\"#getSubmissions\\\">getSubmissions(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get submissions for a specific form</p>\\n</dd>\\n<dt><a href=\\\"#getDeploymentInfo\\\">getDeploymentInfo(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get deployment information for a specific form</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"getForms\\\"></a>\\n\\n## getForms(params, callback) ⇒ <code>Operation</code>\\nMake a request to get the list of forms\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form list |\\n\\n**Example**  \\n```js\\ngetForms({}, state => {\\n   console.log(state.data);\\n   return state;\\n});\\n```\\n<a name=\\\"getSubmissions\\\"></a>\\n\\n## getSubmissions(params, callback) ⇒ <code>Operation</code>\\nGet submissions for a specific form\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form submissions |\\n\\n**Example**  \\n```js\\ngetSubmissions({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n<a name=\\\"getDeploymentInfo\\\"></a>\\n\\n## getDeploymentInfo(params, callback) ⇒ <code>Operation</code>\\nGet deployment information for a specific form\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form deployment information |\\n\\n**Example**  \\n```js\\ngetDeploymentInfo({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\"","readme":"\"# Language KoboToolbox\\n\\nLanguage Pack for building expressions and operations to interact with the\\n[TEMPLATE] API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/kobotoolbox-configuration-schema/)\\ndefinition.\\n\\n#### Get the list of forms\\n\\n```js\\ngetForms({}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n### Get submissions for a specific form\\n\\nA query can be used to filter results.\\n\\n```js\\ngetSubmissions(\\n  { formId: 'aXecHjmbATuF6iGFmvBLBX', query: { end: { $gte: '2020-11-20' } } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-kobotoolbox\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- e48c30c: add getDeploymentInfo function\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 7b5ca3e: add fn and fix adaptors export\\n\\n### Patch Changes\\n\\n- 4067c28: build ast file\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 7fc47d8: Migrate kobotoolbox\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["getForms"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseURL":{"title":"Base URL","type":"string","default":"https://kf.kobotoolbox.org","description":"Kobotoolbox URL","format":"uri","minLength":1,"examples":["https://kf.kobotoolbox.org"]},"username":{"title":"Username","type":"string","description":"Kobotoolbox username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Kobotoolbox password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"apiVersion":{"title":"API Version","type":"string","default":"v2","description":"Kobotoolbox API version to use","enum":["v1","v2"],"minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["username","baseURL","password","apiVersion"]}},
{"name":"magpi","adaptor":"@openfn/language-magpi","version":"1.0.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for magpi.</p>\\n</dd>\\n<dt><a href=\\\"#fetchSurveyData\\\">fetchSurveyData(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request to fetch Magpi data and POST it somewhere else</p>\\n</dd>\\n<dt><a href=\\\"#submitRecord\\\">submitRecord(jsonData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Submit a record for a form/survey which already exists in a Magpi user account</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for magpi.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetchSurveyData\\\"></a>\\n\\n## fetchSurveyData(params) ⇒ <code>Operation</code>\\nMake a POST request to fetch Magpi data and POST it somewhere else\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**  \\n```js\\nfetchSurveyData({\\n \\\"surveyId\\\": \\\"37479\\\",\\n \\\"afterDate\\\": \\\"2017-09-27\\\",\\n \\\"postUrl\\\": \\\"https://www.openfn.org/inbox/your-inbox-url\\\"\\n})\\n```\\n<a name=\\\"submitRecord\\\"></a>\\n\\n## submitRecord(jsonData) ⇒ <code>Operation</code>\\nSubmit a record for a form/survey which already exists in a Magpi user account\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| jsonData | <code>object</code> | Payload data for the record |\\n\\n**Example**  \\n```js\\nsubmitRecord(jsonData)\\n```\\n\"","readme":"\"# Language Magpi\\n\\nLanguage Pack for building expressions and operations for working with the\\n[Magpi inbound API](http://support.magpi.com/support/solutions/articles/4839-magpi-inbound-api)\\nand the\\n[Magpi outbound API](http://support.magpi.com/support/solutions/articles/4865-magpi-outbound-api).\\n\\n_N.B.: The Magpi API is under development and this pack may change._\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/magpi-configuration-schema/)\\ndefinition.\\n\\n## Fetch data from Magpi\\n\\nAllows you to fetch data from Magpi and post it elsewhere.\\n\\n#### Using `fetchSurveyData`:\\n\\nhttps://www.magpi.com/api/surveydata/v2?username=taylordowns2000&accesstoken=blahblahblah&surveyid=921409679070\\n\\n```js\\nfetchSurveyData({\\n  surveyId: '37479',\\n  afterDate: '2016-01-01',\\n  beforeDate: '2100-01-01',\\n  postUrl: 'https://www.openfn.org/inbox/secret-5c25-inbox-ba2c-url',\\n});\\n```\\n\\n## Submit new records\\n\\n**wip:** This will allow you to push data to Magpi to create a new record for a\\nform which exists in a user account.\\n\\n#### Using `submitRecord`:\\n\\n```js\\nsubmitRecord(1, 2);\\n```\\n\\n#### Magpi Outbound API Parameters:\\n\\n- `username`: The account username.\\n- `accesstoken`: The accesstoken generated on the site. Each accesstoken is\\n  associated with the user who generated.\\n- `surveyid`: The surveyid is not the survey's name. The surveyid can be\\n  obtained from the list of forms generated in 1 above.\\n- `startdate`: Start date of the data to be returned. Filtering is done based on\\n  the DateStamp and is inclusive.(Optional). The date format should be the same\\n  one as the one on the data tab/ The date format should be the same one as the\\n  one on the data tab\\n- `enddate`: End date of the data to be returned. Filtering is done based on the\\n  DateStamp and is inclusive.(Optional)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-magpi\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- e6c2b4a: Update xml2js parser\\n\\n### Minor Changes\\n\\n- df5dd2e: migrate magpi\\n\"","functions":["fetchSurveyData","submitRecord"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"username","type":"string","description":"Magpi username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"Magpi access token","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]}},"type":"object","additionalProperties":true,"required":["username","accessToken"]}},
{"name":"mailchimp","adaptor":"@openfn/language-mailchimp","version":"0.3.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#upsertMembers\\\">upsertMembers(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Add members to a particular audience</p>\\n</dd>\\n<dt><a href=\\\"#tagMembers\\\">tagMembers(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Tag members with a particular tag</p>\\n</dd>\\n<dt><a href=\\\"#startBatch\\\">startBatch(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Start a batch with a list of operations.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"upsertMembers\\\"></a>\\n\\n## upsertMembers(params) ⇒ <code>Operation</code>\\nAdd members to a particular audience\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, users, and options |\\n\\n**Example**  \\n```js\\nupsertMembers(params)\\n```\\n<a name=\\\"tagMembers\\\"></a>\\n\\n## tagMembers(params) ⇒ <code>Operation</code>\\nTag members with a particular tag\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a tagId, members, and a list |\\n\\n**Example**  \\n```js\\ntagMembers(params)\\n```\\n<a name=\\\"startBatch\\\"></a>\\n\\n## startBatch(params) ⇒ <code>Operation</code>\\nStart a batch with a list of operations.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | operations batch job |\\n\\n**Example**  \\n```js\\nstartBatch(params)\\n```\\n\"","readme":"\"# Language Mailchimp\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Mailchimp\\nmarketing API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailchimp-configuration-schema/)\\ndefinition.\\n\\n#### sample expression with multiple operations\\n\\n```js\\nupsertMembers({\\n  listId: 'someId',\\n  users: state =>\\n    state.response.body.rows.map(u => ({\\n      email: u.email,\\n      status: u.allow_other_emails ? 'subscribed' : 'unsubscribed',\\n      mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\\n    })),\\n  options: {},\\n});\\n\\ntagMembers({\\n  listId: 'someId', // All Subscribers\\n  tagId: 'someTag', // User\\n  members: state => state.response.body.rows.map(u => u.email),\\n});\\n\\ntagMembers({\\n  listId: 'someId', // All Subscribers\\n  tagId: 'someTag', // Other Emails Allowed\\n  members: state =>\\n    state.response.body.rows\\n      .filter(u => u.allow_other_emails)\\n      .map(u => u.email),\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailchimp\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 88fa3b5: migrate mailchimp\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","type":"string","description":"Mailchimp API domain URL","format":"uri","minLength":1,"examples":["https://mailchimp.com/api"]},"apiKey":{"title":"API Key","type":"string","description":"Mailchimp API Key","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]}},"type":"object","additionalProperties":true,"required":["server","apiKey"]}},
{"name":"mailgun","adaptor":"@openfn/language-mailgun","version":"0.3.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for mailgun.</p>\\n</dd>\\n<dt><a href=\\\"#send\\\">send(params)</a></dt>\\n<dd><p>Create an event</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mailgun.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"send\\\"></a>\\n\\n## send(params)\\nCreate an event\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Params for sending an email |\\n\\n**Example**  \\n```js\\nsend({\\n  from: 'from_email',\\n  to: 'to_email',\\n  subject: 'Your Subject',\\n  text: 'Your message goes here',\\n  attachment: {\\n    url: 'www.google.com/doodle.png',\\n    filename: 'forYou.png',\\n  },\\n})\\n```\\n\"","readme":"\"# Language Mailgun\\n\\nLanguage Pack for building expressions and operations for working with the\\nmailgun API.\\n\\n[mailgun-js on npm](https://www.npmjs.com/package/mailgun-js)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailgun-configuration-schema/)\\ndefinition.\\n\\n## send\\n\\n```js\\nsend(\\n  fields(\\n    field('from', 'from_email'),\\n    field('to', 'to_email'),\\n    field('subject', 'Your Subject'),\\n    field('text', 'Your message goes here')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailgun\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 9ded25e: Migrate Mailgun\\n\"","functions":["send"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"domain":{"title":"Domain URL","type":"string","description":"Mailgun API domain URL","format":"uri","minLength":1,"examples":["https://mailgun.com/api/example"]},"apiKey":{"title":"API Key","type":"string","description":"Mailgun API Key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["domain","apiKey"]}},
{"name":"maximo","adaptor":"@openfn/language-maximo","version":"0.3.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#fetch\\\">fetch(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request and POST it somewhere else</p>\\n</dd>\\n<dt><a href=\\\"#update\\\">update(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make an update in Maximo 7.6 and beyond</p>\\n</dd>\\n<dt><a href=\\\"#update75\\\">update75(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make an upadte in Maximo 7.5</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetch\\\"></a>\\n\\n## fetch(params) ⇒ <code>Operation</code>\\nMake a GET request and POST it somewhere else\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**  \\n```js\\nfetch({\\n endpoint: 'maxrest/rest/os/mxinventory',\\n query: {\\n   ITEMNUM: '01226',\\n   _format: 'json',\\n },\\n postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n<a name=\\\"update\\\"></a>\\n\\n## update(params) ⇒ <code>Operation</code>\\nMake an update in Maximo 7.6 and beyond\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example**  \\n```js\\nexecute(\\n  update(params)\\n)(state)\\n```\\n<a name=\\\"update75\\\"></a>\\n\\n## update75(params) ⇒ <code>Operation</code>\\nMake an upadte in Maximo 7.5\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example**  \\n```js\\nexecute(\\n  update75(params)\\n)(state)\\n```\\n\"","readme":"\"# Language Maximo\\n\\nLanguage Pack for building expressions and operations to access IBM Maximo EAM.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/maximo-configuration-schema/)\\ndefinition.\\n\\n### Fetch\\n\\n#### sample 'fetch' expression\\n\\n```js\\nfetch({\\n  endpoint: 'maxrest/rest/os/mxinventory',\\n  query: {\\n    ITEMNUM: '01226',\\n    _format: 'json',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n\\n### sample 'create' expression\\n\\n```js\\ncreate({\\n  endpoint: 'maxrest/rest/os/mxinvbal/',\\n  body: function (state) {\\n    return {\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      ISSUEUNIT: 'FOO',\\n      PHYSCNT: dataValue('PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n### sample 'update75' expression\\n\\n```js\\nupdate75({\\n  endpoint: state => {\\n    return (\\n      'maxrest/rest/os/mxinvbal/' +\\n      dataValue('form.question1.INVBALANCESID')(state)\\n    );\\n  },\\n  body: state => {\\n    return {\\n      _action: 'AddChange', //this is required for the old Maximo API!\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      PHYSCNT: dataValue('form.PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-maximo\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 4d4be56: migrate maximo\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Maximo instance base URL","format":"uri","minLength":1,"examples":["https://maximo-demo76.mro.com"]},"username":{"title":"Username","type":"string","description":"Maximo instance username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Maximo instance password","writeOnly":true,"minLength":1,"examples":["@some(!)passowrd"]}},"type":"object","additionalProperties":true,"required":["server","username","password"]}},
{"name":"medicmobile","adaptor":"@openfn/language-medicmobile","version":"0.3.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#fetchSubmissions\\\">fetchSubmissions(formId, params, postUrl)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Access form submissions and post them as JSON.</p>\\n</dd>\\n<dt><a href=\\\"#changesApi\\\">changesApi(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Access the CouchDB Changes API</p>\\n</dd>\\n<dt><a href=\\\"#pickFormData\\\">pickFormData(formId)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Select submissions for a specific form</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetchSubmissions\\\"></a>\\n\\n## fetchSubmissions(formId, params, postUrl) ⇒ <code>Operation</code>\\nAccess form submissions and post them as JSON.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Query parameters |\\n| params | <code>object</code> | Starting sequence id |\\n| postUrl | <code>string</code> | Inbox to post form data |\\n\\n**Example**  \\n```js\\nfetchSubmissions(\\n  \\\"pregnancy\\\", // formId\\n  { \\\"last-event-id\\\": 334 }, // params\\n  \\\"http://localhost:4000/inbox/abc-123-xyz\\\" // postUrl\\n);\\n```\\n<a name=\\\"changesApi\\\"></a>\\n\\n## changesApi(params, callback) ⇒ <code>Operation</code>\\nAccess the CouchDB Changes API\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nchangesApi(params, callback)\\n```\\n<a name=\\\"pickFormData\\\"></a>\\n\\n## pickFormData(formId) ⇒ <code>Operation</code>\\nSelect submissions for a specific form\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | The form ID. |\\n\\n**Example**  \\n```js\\npickFormData(formId)\\n```\\n\"","readme":"\"# Language Medic Mobile\\n\\nLanguage Pack for building expressions and operations to make calls to the Medic\\nMobile API.  \\n**For an overview of Medic's database, check out\\n[Medic's DB Schema v2](https://github.com/medic/medic-docs/blob/master/development/db-schema.md)**  \\nThe exported functions in this language package can be executed by\\n[OpenFn/core](https://github.com/OpenFn/core):\\n\\n```sh\\n../core/lib/cli.js execute -l ./lib/Adaptor -s ./tmp/state.json -e ./tmp/expression.js\\n```\\n\\nFor quick-start help, clone\\n[OpenFn/openfn-devtools](https://github.com/OpenFn/openfn-devtools) and follow\\nthe README.md\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/medicmobile-configuration-schema/)\\ndefinition.\\n\\n#### sample fetchSubmissions expression\\n\\n```js\\nfetchSubmissions(\\n  'pregnancy', // formId\\n  { 'last-event-id': 334 }, // params, last-event-id will be replaced by cursor\\n  'http://localhost:4000/inbox/abc-123-xyz' // postUrl\\n);\\n```\\n\\n#### sample changesApi and pickFormData usage\\n\\n```js\\n// get all the changes...\\nchangesApi({\\n  include_docs: true,\\n  // This only gets used the first time the job is run.\\n  // Subsequent runs take the lastSeq value as their cursor.\\n  // \\\"last-event-id\\\": 789,\\n});\\n\\n// Picks out the field data for a given formId.\\npickFormData('pregnancy');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-medicmobile\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2cd3236: migrate medicmobile\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["fetchSubmissions","changesApi","pickFormData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","type":"string","description":"Medic's CouchDB api URL","format":"uri","minLength":1,"examples":["https://standard.app.medicmobile.org"]},"db":{"title":"Database","type":"string","description":"Database name","minLength":1,"examples":["medic"]},"username":{"title":"Username","type":"string","description":"Medic instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Medic instance password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["server","username","password","db"]}},
{"name":"mogli","adaptor":"@openfn/language-mogli","version":"0.3.3","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_FakeAdaptor\\\">FakeAdaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#lookup\\\">lookup(relationshipName, externalID, path)</a> ⇒ <code>object</code></dt>\\n<dd><p>Adds a lookup or &#39;dome insert&#39; to a record.</p>\\n</dd>\\n<dt><a href=\\\"#relationship\\\">relationship(relationshipName, externalID, dataSource)</a> ⇒ <code>object</code></dt>\\n<dd><p>Adds a lookup or &#39;dome insert&#39; to a record.</p>\\n</dd>\\n</dl>\\n\\n## Typedefs\\n\\n<dl>\\n<dt><a href=\\\"#State\\\">State</a> : <code>Object</code></dt>\\n<dd></dd>\\n<dt><a href=\\\"#Operation\\\">Operation</a> : <code>function</code></dt>\\n<dd></dd>\\n</dl>\\n\\n<a name=\\\"module_FakeAdaptor\\\"></a>\\n\\n## FakeAdaptor\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ [<code>State</code>](#State)\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | [<code>State</code>](#State) | \\n\\n<a name=\\\"lookup\\\"></a>\\n\\n## lookup(relationshipName, externalID, path) ⇒ <code>object</code>\\nAdds a lookup or 'dome insert' to a record.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| path | <code>string</code> | JSONPath to data source. |\\n\\n**Example** *(Example)*  \\n```js\\nlookup(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"$.path\\\")\\n```\\n<a name=\\\"relationship\\\"></a>\\n\\n## relationship(relationshipName, externalID, dataSource) ⇒ <code>object</code>\\nAdds a lookup or 'dome insert' to a record.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example** *(Data Sourced Value)*  \\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\n```\\n**Example** *(Fixed Value)*  \\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n<a name=\\\"State\\\"></a>\\n\\n## State : <code>Object</code>\\n**Kind**: global typedef  \\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | JSON Data. |\\n| references | <code>Array.&lt;Reference&gt;</code> | History of all previous operations. |\\n\\n<a name=\\\"Operation\\\"></a>\\n\\n## Operation : <code>function</code>\\n**Kind**: global typedef  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | [<code>State</code>](#State) | \\n\\n\"","readme":"\"# Language Mogli\\n\\nLanguage Pack for building expressions and operations to interact with Mogli\\nSMS.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mogli-configuration-schema/)\\ndefinition.\\n\\n### Create inbound SMS\\n\\n```js\\ncreateSMS(\\n  fields(\\n    field('sender', dataValue('from_number')),\\n    field('receivedAt', dataValue('timestamp')),\\n    field('message', dataValue('message'))\\n  )\\n);\\n```\\n\\n<!-- TODO: determine update process -->\\n<!-- ### Update SMS status\\n```js\\nupdateSMS(\\n  fields(\\n    field(\\\"Id\\\", dataValue(\\\"externalId\\\")),\\n    field(\\\"status\\\", dataValue(\\\"status\\\"))\\n  )\\n);\\n``` -->\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.1.6\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- # c6056e8: migrate mogli\\n\\n* State gets cleaned up after the operations are finished. This means that the\\n  final state is serializable.\\n\\n  The JSForce connection object is provided by `createConnection`, and in turn\\n  `execute` ensures it is run before the user's operations.\\n\\n  The `cleanupState` reducer simply deletes the connection key from state.\\n\\n# v0.1.3\\n\\n- Bumped language-common dependency to v0.0.4.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"Mogli instance login URL","format":"uri","minLength":1,"examples":[" https://www.orange-or-airtel-or-vodafone.com/api/"]},"username":{"title":"Username","type":"string","description":"Mogli instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Mogli instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]},"securityToken":{"title":"Security Token","type":"string","description":"Mogli instance security token","writeOnly":true,"minLength":1,"examples":["dGF5bG9yOnNlY3JldA=="]},"secret":{"title":"Secret","type":"string","description":"Mogli instance secret","writeOnly":true,"minLength":1,"examples":["someotherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["loginUrl","username","password","securityToken","secret"]}},
{"name":"mongodb","adaptor":"@openfn/language-mongodb","version":"1.0.6","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#connect\\\">connect(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Connects to a mongoDb instance</p>\\n</dd>\\n<dt><a href=\\\"#disconnect\\\">disconnect(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes connection from the state.</p>\\n</dd>\\n<dt><a href=\\\"#insertDocuments\\\">insertDocuments(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Inserts documents into a mongoDb collection</p>\\n</dd>\\n<dt><a href=\\\"#findDocuments\\\">findDocuments(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Find documents in a mongoDb collection</p>\\n</dd>\\n<dt><a href=\\\"#updateDocument\\\">updateDocument(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Updates document (optionally upserting) into a mongoDb collection</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  insertDocuments(params),\\n  findDocuments(params)\\n)(state)\\n```\\n<a name=\\\"connect\\\"></a>\\n\\n## connect(state) ⇒ <code>State</code>\\nConnects to a mongoDb instance\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nconnect(state)\\n```\\n<a name=\\\"disconnect\\\"></a>\\n\\n## disconnect(state) ⇒ <code>State</code>\\nRemoves connection from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ndisconnect(state)\\n```\\n<a name=\\\"insertDocuments\\\"></a>\\n\\n## insertDocuments(params) ⇒ <code>State</code>\\nInserts documents into a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\ninsertDocuments({\\n   database: 'str',\\n   collection: 'kids',\\n   documents: [1,2,3]\\n  });\\n```\\n<a name=\\\"findDocuments\\\"></a>\\n\\n## findDocuments(params) ⇒ <code>State</code>\\nFind documents in a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\nfindDocuments({\\n   database: 'str',\\n   collection: 'cases',\\n   query: {a:3}\\n  });\\n```\\n<a name=\\\"updateDocument\\\"></a>\\n\\n## updateDocument(params) ⇒ <code>State</code>\\nUpdates document (optionally upserting) into a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\nupdateDocuments({\\n   database: 'str',\\n   collection: 'animals',\\n   filter: { type: 'fuzzy' },\\n   changes: { kind: 'soft' },\\n   options: { upsert: true }\\n  });\\n```\\n\"","readme":"\"# Language MongoDB\\n\\nLanguage Pack for building expressions and operations for use with MongoDB.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mongodb-configuration-schema/)\\ndefinition.\\n\\n### insertDocuments\\n\\n```js\\ninsertDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  documents: state => {\\n    return state.data.map(item => {\\n      return { name: item.name, age: item.age };\\n    });\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n### findDocuments\\n\\n```js\\nfindDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  query: state => {\\n    return { name: 'stu' };\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mongodb\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"clusterUrl":{"title":"Cluster URL","type":"string","description":"Your MongoDB cluster / host URL","format":"uri","minLength":1,"examples":["yourCluster-xxxyzzz.mongodb.net"]},"username":{"title":"Username","type":"string","description":"Your MongoDB instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your MongoDB instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]}},"type":"object","additionalProperties":true,"required":["clusterUrl","username","password"]}},
{"name":"mssql","adaptor":"@openfn/language-mssql","version":"4.0.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#createConnection\\\">createConnection(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Creates a connection.</p>\\n</dd>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for mssql.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#addRowsToRefs\\\">addRowsToRefs(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Sets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.</p>\\n</dd>\\n<dt><a href=\\\"#flattenRows\\\">flattenRows(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Returns a flatten object of the rows (array of arrays) with rowCount.</p>\\n</dd>\\n<dt><a href=\\\"#sql\\\">sql(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute an SQL statement</p>\\n</dd>\\n<dt><a href=\\\"#findValue\\\">findValue(filter)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch a uuid key given a condition</p>\\n</dd>\\n<dt><a href=\\\"#insert\\\">insert(table, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert a record</p>\\n</dd>\\n<dt><a href=\\\"#insertMany\\\">insertMany(table, records, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert many records, using the keys of the first as the column template</p>\\n</dd>\\n<dt><a href=\\\"#upsert\\\">upsert(table, uuid, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update a record using SQL MERGE</p>\\n</dd>\\n<dt><a href=\\\"#upsertIf\\\">upsertIf(logical, table, uuid, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update a record based on a logical condition using ON CONFLICT UPDATE</p>\\n</dd>\\n<dt><a href=\\\"#upsertMany\\\">upsertMany(table, uuid, records, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update multiple records using ON CONFLICT UPDATE and excluded</p>\\n</dd>\\n<dt><a href=\\\"#describeTable\\\">describeTable(tableName, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>List the columns of a table in a database.</p>\\n</dd>\\n<dt><a href=\\\"#insertTable\\\">insertTable(tableName, columns, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a table in database when given an array of columns and a table_name.</p>\\n</dd>\\n<dt><a href=\\\"#modifyTable\\\">modifyTable(tableName, columns, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Alter an existing table in the database.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"createConnection\\\"></a>\\n\\n## createConnection(state) ⇒ <code>State</code>\\nCreates a connection.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mssql.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"addRowsToRefs\\\"></a>\\n\\n## addRowsToRefs(state, rows) ⇒ <code>State</code>\\nSets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n<a name=\\\"flattenRows\\\"></a>\\n\\n## flattenRows(state, rows) ⇒ <code>State</code>\\nReturns a flatten object of the rows (array of arrays) with rowCount.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n<a name=\\\"sql\\\"></a>\\n\\n## sql(params) ⇒ <code>Operation</code>\\nExecute an SQL statement\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nsql({ query, options })\\n```\\n<a name=\\\"findValue\\\"></a>\\n\\n## findValue(filter) ⇒ <code>Operation</code>\\nFetch a uuid key given a condition\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\\n   operator: { first_name: 'like', last_name: '='}\\n })\\n```\\n<a name=\\\"insert\\\"></a>\\n\\n## insert(table, record, options) ⇒ <code>Operation</code>\\nInsert a record\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert(table, record, {setNull: [\\\"'undefined'\\\", \\\"''\\\"], logValues: false})\\n```\\n<a name=\\\"insertMany\\\"></a>\\n\\n## insertMany(table, records, options) ⇒ <code>Operation</code>\\nInsert many records, using the keys of the first as the column template\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany(table, records, { setNull: false, writeSql: true, logValues: false })\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert(table, uuid, record, options) ⇒ <code>Operation</code>\\nInsert or update a record using SQL MERGE\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(table, uuid, record, { setNull: \\\"'undefined'\\\", logValues: false})\\nupsert(table, [uuid1, uuid2], record, { setNull: \\\"'undefined'\\\", logValues: false})\\n```\\n<a name=\\\"upsertIf\\\"></a>\\n\\n## upsertIf(logical, table, uuid, record, options) ⇒ <code>Operation</code>\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'uuid', // a DB column with a unique constraint\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true, logValues: false }\\n)\\n```\\n<a name=\\\"upsertMany\\\"></a>\\n\\n## upsertMany(table, uuid, records, options) ⇒ <code>Operation</code>\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n 'users', 'email', records, { logValues: false }\\n)\\nupsertMany(\\n 'users', ['email', 'phone'], records, { logValues: false }\\n)\\n```\\n<a name=\\\"describeTable\\\"></a>\\n\\n## describeTable(tableName, options) ⇒ <code>Operation</code>\\nList the columns of a table in a database.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"insertTable\\\"></a>\\n\\n## insertTable(tableName, columns, options) ⇒ <code>Operation</code>\\nCreate a table in database when given an array of columns and a table_name.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"modifyTable\\\"></a>\\n\\n## modifyTable(tableName, columns, options) ⇒ <code>Operation</code>\\nAlter an existing table in the database.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\"","readme":"\"# Language MSSQL\\n\\nLanguage Pack for connecting to Azure SQL Server via OpenFn.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mssql-configuration-schema/)\\ndefinition.\\n\\n### Sample expression\\n\\n## sql query\\n\\n```js\\nsql({\\n  query: `\\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\\n    WHERE TABLE_TYPE = 'BASE TABLE'\\n    AND TABLE_CATALOG='my-demo'\\n  `,\\n});\\n\\nsql({\\n  query: `SELECT * FROM Household`,\\n  options: {\\n    writeSql: true, // Keep to true to log query (otherwise make it false).\\n    execute: true, // keep to false to not alter DB\\n  },\\n});\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nfn(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert one single record\\n\\n```js\\ninsert(\\n  'SomeDB.dbo.SupplierTest',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Nunya Bihz-Nash',\\n  },\\n  {\\n    // The optional `options` argument allows for global string replacement with\\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\\n    // to NULL. It can be a single string or an array of strings.\\n    // It DEFAULTS to \\\"'undefined'\\\", and can be turned off w/ `false`.\\n    setNull: \\\"'undefined'\\\",\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nThis function insert or update depending on the existence of a record in the\\ndatabase.\\n\\n```js\\nupsert(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Now I can tell!',\\n  },\\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\\n  { setNull: false, logValues: true }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users',\\n  'user_id',\\n  {\\n    name: 'Elodie',\\n    id: 7,\\n  },\\n  // Replace any occurence of '' and 'undefined' to NULL\\n  {\\n    setNull: [\\\"''\\\", \\\"'undefined'\\\"],\\n    writeSql: true,\\n    execute: false,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert Many records\\n\\nThis function allows the insert of a set of records inside a table all at once.\\nPass `logQuery` option to `true` to display the query.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\ninsertMany(\\n  'SomeDB.dbo.Supplier',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update Many records\\n\\nThis function inserts or updates many records all at once depending on their\\nexistence in the database.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\nIn case we need to check on multiple columns before upserting, we can have an\\narray of `uuids`.\\n\\n```js\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  ['SupplierNumber', 'SupplierCode'],\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n        SupplierCode: s.code,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\n## Describe a table from mssql\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: false, execute: true });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mssql\\n\\n## 4.0.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 3878624: Modify composeNextState function, to flattern all rows into an array\\n  of rows with their corresponding column names\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- c9b7ed7: Add language-mssql in monorepo\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["sql","findValue","insert","insertMany","upsert","upsertIf","upsertMany","describeTable","insertTable","modifyTable"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","type":"string","description":"The database instance server URL or IP address","format":"uri","minLength":1,"examples":["something.database.windows.net"]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"userName":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Password"]}},"type":"object","additionalProperties":true,"required":["server","database"]}},
{"name":"mysql","adaptor":"@openfn/language-mysql","version":"1.3.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for mysql.</p>\\n</dd>\\n<dt><a href=\\\"#insert\\\">insert(table, fields)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert a record</p>\\n</dd>\\n<dt><a href=\\\"#upsert\\\">upsert(table, fields)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or Update a record if matched</p>\\n</dd>\\n<dt><a href=\\\"#upsertMany\\\">upsertMany(table, data)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update multiple records using ON DUPLICATE KEY</p>\\n</dd>\\n<dt><a href=\\\"#query\\\">query(options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a SQL statement</p>\\n</dd>\\n<dt><a href=\\\"#sqlString\\\">sqlString(queryString)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a SQL statement</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mysql.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"insert\\\"></a>\\n\\n## insert(table, fields) ⇒ <code>Operation</code>\\nInsert a record\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example**  \\n```js\\nexecute(\\n  insert('table', fields(\\n     field('name', dataValue('name'))\\n  ))\\n)(state)\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert(table, fields) ⇒ <code>Operation</code>\\nInsert or Update a record if matched\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example**  \\n```js\\nexecute(\\n  upsert('table', fields(\\n     field('name', dataValue('name'))\\n  ))\\n)(state)\\n```\\n<a name=\\\"upsertMany\\\"></a>\\n\\n## upsertMany(table, data) ⇒ <code>Operation</code>\\nInsert or update multiple records using ON DUPLICATE KEY\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n\\n**Example**  \\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n)\\n```\\n<a name=\\\"query\\\"></a>\\n\\n## query(options) ⇒ <code>Operation</code>\\nExecute a SQL statement\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nexecute(\\n  query({ sql: 'select * from users;' })\\n)(state)\\n```\\n<a name=\\\"sqlString\\\"></a>\\n\\n## sqlString(queryString) ⇒ <code>Operation</code>\\nExecute a SQL statement\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| queryString | <code>String</code> | A query string (or function which takes state and returns a string) |\\n\\n**Example**  \\n```js\\nexecute(\\n  sqlString(state => \\\"select * from items;\\\")\\n)(state)\\n```\\n\"","readme":"\"# Language MySQL\\n\\nLanguage Pack for building expressions and operations to run MySQL queries.\\n\\n**See\\n[`src/Adaptor.js`](https://github.com/OpenFn/language-mysql/blob/master/src/Adaptor.js)\\nfor the full list of available helper functions including `upsert(...)`.**\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mysql-configuration-schema/)\\ndefinition.\\n\\n## Execute a query\\n\\nExecute an sql query with the node mysql package.\\n\\n```js\\nquery({\\n  sql: state => {\\n    return `select * from ${state.data.table} where id = ?;`;\\n  },\\n  timeout: 4000,\\n  values: ['007'],\\n});\\n```\\n\\n## Execute a sql query\\n\\nThis function takes either a `string` or a `function` that takes states and\\nreturns a string.\\n\\n```js\\nsqlString(state => {\\n  return (\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    state.data.version +\\n    `', ` +\\n    dataValue('form.Choix_tache')(state) +\\n    `)`\\n  );\\n});\\n```\\n\\n## Insert a single record\\n\\nThis function is used to insert a single record in a MySQL database.\\n\\n```js\\ninsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Insert or update a single record\\n\\nThis function is used to insert a single record in a MySQL database or update it\\nif there is a match.\\n\\n```js\\nupsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Upsert many records\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n);\\n```\\n\\nor\\n\\n```js\\nupsertMany('users', state =>\\n  state.data.users.map(user => {\\n    name: user['name'],\\n    email: user['email']\\n  })\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mysql\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 9d674c5: Migrate MySQL\\n\"","functions":["upsertMany"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The database instance host URL","format":"uri","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":3306,"description":"Database instance port","minLength":1,"examples":[3306]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"Username","type":"string","description":"The username to log in the database","minLength":1,"examples":["admin-demo"]},"password":{"title":"Password","type":"string","description":"The password to log in the database","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","database"]}},
{"name":"nexmo","adaptor":"@openfn/language-nexmo","version":"0.2.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#sendSMS\\\">sendSMS(from, toNumber, message)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Sends an SMS message to a specific phone number</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sendSMS\\\"></a>\\n\\n## sendSMS(from, toNumber, message) ⇒ <code>Operation</code>\\nSends an SMS message to a specific phone number\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| from | <code>String</code> | Name or number the message should be sent from. |\\n| toNumber | <code>String</code> | Destination phone number. |\\n| message | <code>String</code> | Text message |\\n\\n**Example**  \\n```js\\nsendSMS(\\\"OpenFn\\\", \\\"phoneNumber\\\", \\\"Hello World!\\\")\\n```\\n\"","readme":"\"# Language Nexmo\\n\\nLanguage Pack for building expressions and operations to interact with the Nexmo\\nAPI.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/nexmo-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression\\n\\n```js\\nsendSMS('OpenFn', '0123456789', 'HelloWorld!');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-nexmo\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f0f2495: migrate nexmo\\n\"","functions":["sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiKey":{"title":"API Key","type":"string","description":"Your Nexmo API Key","minLength":1,"examples":["mYaP1K3y"]},"apiSecret":{"title":"API Secret","type":"string","description":"Your Nexmo API Secret key","writeOnly":true,"minLength":1,"examples":["supersecret"]}},"type":"object","additionalProperties":true,"required":["apiKey","apiSecret"]}},
{"name":"ocl","adaptor":"@openfn/language-ocl","version":"0.2.4","docs":"\"## Members\\n\\n<dl>\\n<dt><a href=\\\"#auth\\\">auth</a></dt>\\n<dd><p>Do we have a mechanism to retrieve those from configuration</p>\\n</dd>\\n<dt><a href=\\\"#params\\\">params</a></dt>\\n<dd><p>Specify query parameters that may include OCL Data Source, MappingType, includion and exclusion values</p>\\n</dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#map\\\">map(state, [params])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Replaces source keys(data elements) to destination keys(data elements) with out changing state.data structure</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"auth\\\"></a>\\n\\n## auth\\nDo we have a mechanism to retrieve those from configuration\\n\\n**Kind**: global variable  \\n<a name=\\\"params\\\"></a>\\n\\n## params\\nSpecify query parameters that may include OCL Data Source, MappingType, includion and exclusion values\\n\\n**Kind**: global variable  \\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"map\\\"></a>\\n\\n## map(state, [params]) ⇒ <code>Operation</code>\\nReplaces source keys(data elements) to destination keys(data elements) with out changing state.data structure\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>Object</code> | Json object containing keys and data values; |\\n| [params] | <code>Object</code> | E.g. `{users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" } |\\n\\n**Example**  \\n```js\\nmapp(state, state)\\n```\\n<a name=\\\"map..retrievedMapping\\\"></a>\\n\\n### map~retrievedMapping\\nIn order to minimize web trafic, already accessed mapping\\ninformation is put into this variable to\\nreuse values for the consucutive keys.\\n\\n**Kind**: inner constant of [<code>map</code>](#map)  \\n\"","readme":"\"# Language OCL\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OCL API](http://ocl.github.io/ocl-docs/master/en/developer/html/ocl_developer_manual.html).\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/ocl-configuration-schema/)\\ndefinition.\\n\\n## Mapping source concepts to destination API\\n\\n#### Recieve form data from source application and convert data element keys to destination application.\\n\\n```js\\nmap(  \\\"data\\\": {\\n    \\\"a\\\": 1,\\n    \\\"b\\\": 2},\\n  {users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" }\\n  );\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-ocl\\n\\n## 0.2.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 5a06d7f: Migrate OCL, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["map"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The OCL API URL","default":"https://api.openconceptlab.org/","format":"uri","minLength":1,"examples":["https://api.openconceptlab.org/"]},"username":{"title":"Username","type":"string","description":"The username to log in to OCL","minLength":1,"examples":["usernmame"]},"password":{"title":"Password","type":"string","description":"The password to log in to OCL","writeOnly":true,"minLength":1,"examples":["supersecretpassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","password"]}},
{"name":"openfn","adaptor":"@openfn/language-openfn","version":"1.2.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#request\\\">request(options, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request(options, callback) ⇒ <code>Operation</code>\\nMake a POST request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nrequest({method: 'get', path: '/jobs/});\\n```\\n\"","readme":"\"# Language OpenFn\\n\\nAdaptor for building expressions and operations to interact with the OpenFn v1\\nAPI.\\n\\n## Documentation\\n\\n## request\\n\\n```js\\nrequest({\\n  method: 'get',\\n  path: 'jobs',\\n  params: {\\n    project_id: 490,\\n  },\\n});\\nrequest(\\n  {\\n    method: 'post',\\n    path: 'jobs',\\n    data: {\\n      trigger_id: 1,\\n      expression: 'steps()',\\n    },\\n  },\\n  state => {\\n    console.log('cool callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openfn-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openfn\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- be9d3c6: Migrate OpenFn\\n\"","functions":["request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","description":"The OpenFn host url","format":"uri","default":"https://www.openfn.org","minLength":1,"examples":["https://www.openfn.org"]},"projectId":{"title":"Project ID","type":"string","description":"Your OpenFn project ID","minLength":1,"examples":["some-id"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenFn","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenFn","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","username","password"]}},
{"name":"openmrs","adaptor":"@openfn/language-openmrs","version":"0.10.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for OpenMRS.</p>\\n</dd>\\n<dt><a href=\\\"#login\\\">login(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Logs in to OpenMRS, gets a session token.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable or confidential keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#getPatient\\\">getPatient(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Gets patient matching a uuid</p>\\n</dd>\\n<dt><a href=\\\"#getPatients\\\">getPatients(criteria, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Gets patients matching criteria</p>\\n</dd>\\n<dt><a href=\\\"#getPeople\\\">getPeople(criteria, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Gets people matching criteria</p>\\n</dd>\\n<dt><a href=\\\"#createEncounter\\\">createEncounter(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates an encounter</p>\\n</dd>\\n<dt><a href=\\\"#req\\\">req(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a request to any OpenMRS endpoint and execute a callback</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for OpenMRS.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Array</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"login\\\"></a>\\n\\n## login(state) ⇒ <code>State</code>\\nLogs in to OpenMRS, gets a session token.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable or confidential keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"getPatient\\\"></a>\\n\\n## getPatient(params) ⇒ <code>Operation</code>\\nGets patient matching a uuid\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | object with uuid for the patient |\\n\\n**Example**  \\n```js\\nexecute(\\n  getPatient({ uuid: 123 })\\n)(state)\\n```\\n<a name=\\\"getPatients\\\"></a>\\n\\n## getPatients(criteria, options) ⇒ <code>Operation</code>\\nGets patients matching criteria\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| criteria | <code>object</code> | Criteria object for the patient |\\n| options | <code>object</code> | Options |\\n\\n**Example**  \\n```js\\nexecute(\\n  getPatients(criteria)\\n)(state)\\n```\\n<a name=\\\"getPeople\\\"></a>\\n\\n## getPeople(criteria, options) ⇒ <code>Operation</code>\\nGets people matching criteria\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| criteria | <code>object</code> | Criteria object for the people |\\n| options | <code>object</code> | Options object for the handling of responses |\\n\\n**Example**  \\n```js\\nexecute(\\n  getPeople(\\n  { identifier: '007' },\\n  { exactlyOne: true }\\n)(state)\\n```\\n<a name=\\\"createEncounter\\\"></a>\\n\\n## createEncounter(params) ⇒ <code>Operation</code>\\nCreates an encounter\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | parameters of the encounter |\\n\\n**Example**  \\n```js\\nexecute(\\n  createEncounter(params)(state)\\n```\\n<a name=\\\"req\\\"></a>\\n\\n## req(params, callback) ⇒ <code>Operation</code>\\nMake a request to any OpenMRS endpoint and execute a callback\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | parameters for the request |\\n| callback | <code>function</code> | a callback to execute on the next state |\\n\\n**Example**  \\n```js\\nreq({\\n  method: 'GET'\\n  url: 'encounterType'\\n})(state)\\n```\\n\"","readme":"\"# Language OpenMRS\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OpenMRS API](https://wiki.openmrs.org/display/docs/API).\\n\\n[OpenMRS Data Model Explorer](http://burkeware.com/openmrs-data-model/openmrs-data-model-1.11.html#)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openmrs-configuration-schema/)\\ndefinition.\\n\\n### Get a patient by some criteria\\n\\n```js\\n// getPatient({ uuid: '516af9aa-0402-4e11-ad79-e394fdec0c91' });\\n// getPatient({ uuid: dataValue('patientId')(state) });\\ngetPatient({\\n  uuid: state => state.data[0].uuid,\\n});\\n```\\n\\n#### Example of searching for patients based on their `EMR Id`\\n\\n```js\\ngetPatients(\\n  {\\n    identifier: state => state.data.emrId,\\n    v: 'full',\\n  },\\n  {\\n    exactlyOne: true,\\n  }\\n);\\n```\\n\\n### Create an Encounter\\n\\n```js\\ncreateEncounter({\\n  encounterDatetime: dataValue('visit_date'), //dynamically fill with source app data\\n  patient: dataValue('uuid'),\\n  encounterType: dataValue('visit_type'),\\n  location: dataValue('location.uuid'),\\n  encounterProviders: [\\n    {\\n      provider: dataValue('provider_name'),\\n      encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f', //hardcoded value\\n    },\\n  ],\\n});\\n```\\n\\n### Make a request to any OpenMRS endpoint\\n\\n```js\\nreq({ method: 'GET', url: '/ws/rest/v1/concept' }, state => {\\n  console.log(JSON.stringify(state, null, 2));\\n  return state;\\n});\\n```\\n\\n<!-- ## Create new person\\n\\n```js\\nperson(\\n  fields(\\n    field(\\\"gender\\\", \\\"M\\\"),\\n    field(\\\"names\\\", function(state) {\\n      return [{\\n        \\\"givenName\\\": dataValue(\\\"form.first_name\\\")(state),\\n        \\\"familyName\\\": dataValue(\\\"form.last_name\\\")(state)\\n      }]\\n    })\\n  )\\n)\\n```-->\\n\\n## Create new patient\\n\\n```js\\npatient(\\n  fields(\\n    field('gender', 'M'),\\n    field('names', function (state) {\\n      return [\\n        {\\n          patient_id: dataValue('form.patientId')(state),\\n          creator: dataValue('form.user')(state),\\n        },\\n      ];\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openmrs\\n\\n## 0.10.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.10.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.10.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.10.0\\n\\n### Minor Changes\\n\\n- 6786949: Migrate OpenMRS\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"instanceUrl":{"title":"Instance URL","type":"string","description":"The OpenMRS host url","format":"uri","minLength":1,"examples":["http://openmrs.com/instance/url"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenMRS","minLength":1,"examples":["admin@openmrs.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenMRS","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["instanceUrl"]}},
{"name":"postgresql","adaptor":"@openfn/language-postgresql","version":"3.4.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for postgresql.</p>\\n</dd>\\n<dt><a href=\\\"#sql\\\">sql(sqlQuery, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute an SQL statement</p>\\n</dd>\\n<dt><a href=\\\"#findValue\\\">findValue(filter)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch a uuid key given a condition</p>\\n</dd>\\n<dt><a href=\\\"#insert\\\">insert(table, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert a record</p>\\n</dd>\\n<dt><a href=\\\"#insertMany\\\">insertMany(table, records, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert many records, using the keys of the first as the column template</p>\\n</dd>\\n<dt><a href=\\\"#upsert\\\">upsert(table, uuid, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update a record using ON CONFLICT UPDATE</p>\\n</dd>\\n<dt><a href=\\\"#upsertIf\\\">upsertIf(logical, table, uuid, record, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update a record based on a logical condition using ON CONFLICT UPDATE</p>\\n</dd>\\n<dt><a href=\\\"#upsertMany\\\">upsertMany(table, uuid, data, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Insert or update multiple records using ON CONFLICT UPDATE and excluded</p>\\n</dd>\\n<dt><a href=\\\"#describeTable\\\">describeTable(tableName, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>List the columns of a table in a database.</p>\\n</dd>\\n<dt><a href=\\\"#insertTable\\\">insertTable(tableName, columns, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a table in database when given an array of columns and a table_name.</p>\\n</dd>\\n<dt><a href=\\\"#modifyTable\\\">modifyTable(tableName, columns, options)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Alter an existing table in the database.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for postgresql.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sql\\\"></a>\\n\\n## sql(sqlQuery, options) ⇒ <code>Operation</code>\\nExecute an SQL statement\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>function</code> | a function which takes state and returns a string of SQL. |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nsql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\\n```\\n<a name=\\\"findValue\\\"></a>\\n\\n## findValue(filter) ⇒ <code>Operation</code>\\nFetch a uuid key given a condition\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mamadou' },\\n   operator: { first_name: 'like' }\\n })\\n```\\n<a name=\\\"insert\\\"></a>\\n\\n## insert(table, record, options) ⇒ <code>Operation</code>\\nInsert a record\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert('users', { name: 'Elodie', id: 7 }, { setNull: \\\"'NaN'\\\", logValues: true });\\n```\\n<a name=\\\"insertMany\\\"></a>\\n\\n## insertMany(table, records, options) ⇒ <code>Operation</code>\\nInsert many records, using the keys of the first as the column template\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>array</code> | An array or a function that takes state and returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany('users', state => state.data.recordArray, { setNull: \\\"'undefined'\\\", logValues: true });\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert(table, uuid, record, options) ⇒ <code>Operation</code>\\nInsert or update a record using ON CONFLICT UPDATE\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql:true, execute: true, logValues: true }\\n)\\n```\\n<a name=\\\"upsertIf\\\"></a>\\n\\n## upsertIf(logical, table, uuid, record, options) ⇒ <code>Operation</code>\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true }\\n)\\n```\\n<a name=\\\"upsertMany\\\"></a>\\n\\n## upsertMany(table, uuid, data, options) ⇒ <code>Operation</code>\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n  'users', // the DB table\\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  [\\n    { name: 'one', email: 'one@openfn.org },\\n    { name: 'two', email: 'two@openfn.org },\\n  ]\\n { logValues: true }\\n)\\n```\\n<a name=\\\"describeTable\\\"></a>\\n\\n## describeTable(tableName, options) ⇒ <code>Operation</code>\\nList the columns of a table in a database.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"insertTable\\\"></a>\\n\\n## insertTable(tableName, columns, options) ⇒ <code>Operation</code>\\nCreate a table in database when given an array of columns and a table_name.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"modifyTable\\\"></a>\\n\\n## modifyTable(tableName, columns, options) ⇒ <code>Operation</code>\\nAlter an existing table in the database.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\"","readme":"\"# Language PostgreSQL\\n\\nLanguage Pack for building expressions and operations to run PostgreSQL queries.\\n\\n## Documentation\\n\\n## required configuration for Heroku postgres\\n\\n```json\\n{\\n  \\\"host\\\": \\\"some-host-url.compute-1.amazonaws.com\\\",\\n  \\\"port\\\": \\\"5432\\\",\\n  \\\"database\\\": \\\"wouldntyouliketoknow\\\",\\n  \\\"user\\\": \\\"me\\\",\\n  \\\"password\\\": \\\"noway\\\",\\n  \\\"ssl\\\": true,\\n  \\\"allowSelfSignedCert\\\": true\\n}\\n```\\n\\n## `sql(query)`\\n\\nExecute an sql query. An option can be added to either log the query or not and\\neither execute the query or no. The options can be omitted as well.\\n\\n#### sample usage\\n\\n```js\\nsql(\\n  state =>\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`,\\n  { writeSql: true, execute: true }\\n);\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nalterState(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert a single record\\n\\nThis functions is used to insert a single record in postgres database. An option\\n`writeSql` allows to log the generated sql query. The `setNull` option allows to\\nreplace the specified elements with `NULL`.\\n\\n```js\\ninsert(\\n  'users',\\n  {\\n    email: 'antony@gmail.com',\\n    first_name: 'Antony',\\n    inserted_at: '2020-08-27 00:00:00',\\n    updated_at: '2020-08-27 00:00:00',\\n  },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nInsert or Update if matched. An option, `execute`, allows to either run the\\ngenerated query or no.\\n\\n```js\\nupsert(\\n  'users',\\n  'email',\\n  {\\n    email: 'luca@openfn.org',\\n    first_name: 'Luca',\\n    inserted_at: '2010-01-01 00:00:00',\\n    updated_at: '2010-01-01 00:00:00',\\n  },\\n  {\\n    setNull: [\\\"'NaN'\\\", \\\"'undefined'\\\"],\\n    writeSql: false,\\n    execute: true,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\\n  name: 'Elodie',\\n  id: 7,\\n});\\n```\\n\\n## Insert many records in postgresql\\n\\nThis function allows the insert of a set of records inside a table all at once.\\n\\n```js\\ninsertMany(\\n  'users',\\n  state =>\\n    state.data.people.map(s => {\\n      return {\\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\\n        inserted_at: '2020-01-01 00:00:00',\\n        updated_at: '2020-01-01 00:00:00',\\n      };\\n    }),\\n  { logValues: true }\\n);\\n```\\n\\n## Upsert many records in postgresql\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany('users', 'ON CONSTRAINT users_pkey', state =>\\n  state.data.people.map(s => {\\n    return {\\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\\n      inserted_at: '2020-01-01 00:00:00',\\n      updated_at: '2020-01-01 00:00:00',\\n    };\\n  })\\n);\\n```\\n\\n## Describe a table from postgres\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: true, execute: false });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-postgresql\\n\\n## 3.4.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.4.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.4.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.4.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.4.0\\n\\n### Minor Changes\\n\\n- 44ae341: Migrate postgresql\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["sql","findValue","insert","insertMany","upsert","upsertIf","upsertMany","describeTable","insertTable","modifyTable"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"Postgres instance host URL","format":"uri","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":5432,"description":"Database instance port","minLength":1,"examples":[5432]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"User","type":"string","description":"User name","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]},"ssl":{"title":"Use SSL","type":"boolean","examples":[true]},"allowSelfSignedCert":{"title":"Allow self-signed certificate","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["host","port","database"]}},
{"name":"primero","adaptor":"@openfn/language-primero","version":"2.10.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#generateAuthString\\\">generateAuthString(state)</a> ⇒ <code>string</code></dt>\\n<dd><p>Generate an auth string to support multiple types of auth credentials.</p>\\n</dd>\\n<dt><a href=\\\"#queryHandler\\\">queryHandler(state, params, callback)</a> ⇒ <code>State</code></dt>\\n<dd><p>Execute custom query</p>\\n</dd>\\n<dt><a href=\\\"#login\\\">login(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Logs in to Primero.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#getCases\\\">getCases(query, options, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get cases from Primero</p>\\n<p>Use this function to get cases from Primero based on a set of query parameters.\\nNote that in many implementations, the <code>remote</code> attribute should be set to <code>true</code> to ensure that only cases marked for remote access will be retrieved.\\nYou can specify a <code>case_id</code> value to fetch a unique case and a query string to filter result.</p>\\n</dd>\\n<dt><a href=\\\"#createCase\\\">createCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a new case in Primero</p>\\n<p>Use this function to create a new case in Primero based on a set of Data.</p>\\n</dd>\\n<dt><a href=\\\"#updateCase\\\">updateCase(id, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update an existing case in Primero</p>\\n<p>Use this function to update an existing case from Primero.\\nIn this implementation, the function uses a case ID to check for the case to update,\\nThen merge the values submitted in this call into an existing case.\\nFields not specified in this request will not be modified.\\nFor nested subform fields, the subform arrays will be recursively merged,\\nkeeping both the existing values and appending the new</p>\\n</dd>\\n<dt><a href=\\\"#upsertCase\\\">upsertCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert case to Primero</p>\\n<p>Use this function to update an existing case from Primero or to create it otherwise.\\nIn this implementation, we first fetch the list of cases,\\nthen we check if the case exist before choosing the right operation to do.</p>\\n</dd>\\n<dt><a href=\\\"#getReferrals\\\">getReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get referrals for a specific case in Primero</p>\\n<p>Use this function to get the list of referrals of one case from Primero.\\nThe search can be done using either <code>record id</code> or <code>case id</code>.</p>\\n</dd>\\n<dt><a href=\\\"#createReferrals\\\">createReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create referrals in Primero</p>\\n<p>Use this function to bulk refer to one or multiple cases from Primero to a single user</p>\\n</dd>\\n<dt><a href=\\\"#updateReferral\\\">updateReferral(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update a single referral for a specific case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#getForms\\\">getForms(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get forms from Primero</p>\\n<p>Use this function to get forms from Primero that are accessible to this user based on a set of query parameters.\\nThe user can filter the form list by record type and module.</p>\\n</dd>\\n<dt><a href=\\\"#getLookups\\\">getLookups(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get lookups from Primero</p>\\n<p>Use this function to get a paginated list of all lookups that are accessible to this user from Primero.\\nNote: You can specify a <code>per</code> value to fetch records per page(Defaults to 20).\\nAlso you can specify <code>page</code> value to fetch pagination (Defaults to 1)</p>\\n</dd>\\n<dt><a href=\\\"#getLocations\\\">getLocations(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get locations from Primero</p>\\n<p>Use this function to get a paginated list of all locations that are accessible to this user from Primero.\\nNote: You can specify a <code>per</code> value to fetch records per page(Defaults to 20).\\nAlso you can specify <code>page</code> value to fetch pagination (Defaults to 1).\\nAnother parameter is <code>hierarchy: true</code> (Defaults to false)</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"generateAuthString\\\"></a>\\n\\n## generateAuthString(state) ⇒ <code>string</code>\\nGenerate an auth string to support multiple types of auth credentials.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ngenerateAuthString(state)\\n```\\n<a name=\\\"queryHandler\\\"></a>\\n\\n## queryHandler(state, params, callback) ⇒ <code>State</code>\\nExecute custom query\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n| params | <code>object</code> | \\n| callback | <code>function</code> | \\n\\n<a name=\\\"login\\\"></a>\\n\\n## login(state) ⇒ <code>State</code>\\nLogs in to Primero.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"getCases\\\"></a>\\n\\n## getCases(query, options, callback) ⇒ <code>Operation</code>\\nGet cases from Primero\\n\\nUse this function to get cases from Primero based on a set of query parameters.\\nNote that in many implementations, the `remote` attribute should be set to `true` to ensure that only cases marked for remote access will be retrieved.\\nYou can specify a `case_id` value to fetch a unique case and a query string to filter result.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum, option to getReferrals |\\n| options | <code>object</code> | (Optional) an object with a getReferrals key to fetch referrals |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *( Get cases from Primero with query parameters)*  \\n```js\\ngetCases({\\n  remote: true,\\n  query: \\\"sex=male\\\",\\n});\\n```\\n**Example** *(Get case from Primero for a specific case id)*  \\n```js\\ngetCases({\\n  remote: true,\\n  case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n<a name=\\\"createCase\\\"></a>\\n\\n## createCase(params, callback) ⇒ <code>Operation</code>\\nCreate a new case in Primero\\n\\nUse this function to create a new case in Primero based on a set of Data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Create a new case in Primero based on a set of Data)*  \\n```js\\ncreateCase({\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Edwine Edgemont\\\",\\n  },\\n});\\n```\\n<a name=\\\"updateCase\\\"></a>\\n\\n## updateCase(id, params, callback) ⇒ <code>Operation</code>\\nUpdate an existing case in Primero\\n\\nUse this function to update an existing case from Primero.\\nIn this implementation, the function uses a case ID to check for the case to update,\\nThen merge the values submitted in this call into an existing case.\\nFields not specified in this request will not be modified.\\nFor nested subform fields, the subform arrays will be recursively merged,\\nkeeping both the existing values and appending the new\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | A case ID to use for the update. |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Update case for a specific case id)*  \\n```js\\nupdateCase(\\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\", {\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Fiona Edgemont\\\",\\n  },\\n});\\n```\\n<a name=\\\"upsertCase\\\"></a>\\n\\n## upsertCase(params, callback) ⇒ <code>Operation</code>\\nUpsert case to Primero\\n\\nUse this function to update an existing case from Primero or to create it otherwise.\\nIn this implementation, we first fetch the list of cases,\\nthen we check if the case exist before choosing the right operation to do.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalIds and some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Upsert case for a specific case id)*  \\n```js\\nupsertCase({\\n  externalIds: [\\\"case_id\\\"],\\n  data: state => ({\\n    age: 20,\\n    sex: \\\"male\\\",\\n    name: \\\"Alex\\\",\\n    status: \\\"open\\\",\\n    case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  }),\\n});\\n```\\n<a name=\\\"getReferrals\\\"></a>\\n\\n## getReferrals(params, callback) ⇒ <code>Operation</code>\\nGet referrals for a specific case in Primero\\n\\nUse this function to get the list of referrals of one case from Primero.\\nThe search can be done using either `record id` or `case id`.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Get referrals for a case in Primero by record id)*  \\n```js\\ngetReferrals({\\n  externalId: \\\"record_id\\\",\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n**Example** *(Get referrals for a case in Primero by case id)*  \\n```js\\n getReferrals({\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n<a name=\\\"createReferrals\\\"></a>\\n\\n## createReferrals(params, callback) ⇒ <code>Operation</code>\\nCreate referrals in Primero\\n\\nUse this function to bulk refer to one or multiple cases from Primero to a single user\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with referral data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Create referrals for multiple cases in Primero)*  \\n```js\\ncreateReferrals({\\n  data: {\\n    ids: [\\n      \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n      \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n    ],\\n    transitioned_to: \\\"primero_cp\\\",\\n    notes: \\\"This is a bulk referral\\\",\\n  },\\n});\\n```\\n<a name=\\\"updateReferral\\\"></a>\\n\\n## updateReferral(params, callback) ⇒ <code>Operation</code>\\nUpdate a single referral for a specific case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an caseExternalId value to use, the id and the referral id to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Update referral by record id)*  \\n```js\\nupdateReferral({\\n  caseExternalId: \\\"record_id\\\",\\n  id: \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n  caseId: \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n  data: (state) => state.data,\\n});\\n```\\n<a name=\\\"getForms\\\"></a>\\n\\n## getForms(query, callback) ⇒ <code>Operation</code>\\nGet forms from Primero\\n\\nUse this function to get forms from Primero that are accessible to this user based on a set of query parameters.\\nThe user can filter the form list by record type and module.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Get the list of all forms)*  \\n```js\\ngetForms();\\n```\\n**Example** *(Get the list of all forms for a specific module)*  \\n```js\\ngetForms({\\n  module_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n<a name=\\\"getLookups\\\"></a>\\n\\n## getLookups(query, callback) ⇒ <code>Operation</code>\\nGet lookups from Primero\\n\\nUse this function to get a paginated list of all lookups that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1)\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Get lookups from Primero with query parameters)*  \\n```js\\ngetLookups({\\n  per: 10000,\\n  page: 5\\n});\\n```\\n<a name=\\\"getLocations\\\"></a>\\n\\n## getLocations(query, callback) ⇒ <code>Operation</code>\\nGet locations from Primero\\n\\nUse this function to get a paginated list of all locations that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1).\\nAnother parameter is `hierarchy: true` (Defaults to false)\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example** *(Get loocations from Primero with query parameters)*  \\n```js\\ngetLocations({\\n  page: 1,\\n  per: 20\\n})\\n```\\n\"","readme":"\"# language-primero\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with UNICEF's\\nPrimero API.\\n\\n**See Update Docs Site: https://docs.openfn.org/adaptors/packages/primero-docs**\\n\\n## Primero API Versions\\n\\n### Adaptor for Primero v2.0\\n\\nThis documentation outlines the functions available for Primero `v2.0` in the\\nmain branch. The API documentation is available at:\\nhttps://github.com/primeroIMS/primero/tree/development_v2/app/controllers/api\\n\\n### Adaptor for Primero v1.0 still available on the `v1` branch.\\n\\n`v1.0.7` of this adaptor was built for the Primero `v1.1` API:\\nhttps://github.com/OpenFn/language-primero/blob/v1/README.md\\n\\n[Primero API v1.1 Documentation](https://docs.google.com/document/d/1jpaT2_UBBnc3PxPYlLMBEzNUkyfuxRZiksywG5MKM0Q/edit)\\n\\n#### Primero Authentication Strategies\\n\\nThe Primero team is considering a shift to Microsoft Azure Active Directory B2C\\nfor auth. We can likely accommodate this with a similar pattern as has been used\\nin our Microsoft Dynamics, Github, or Google Sheets adaptors, but we'll need to\\nawait final doucmentation for Primero's `v2` API before making changes.\\n\\n[Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-primero\\n\\n## 2.10.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.10.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 059c956: added examples in docstring\\n\\n## 2.10.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.10.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.10.0\\n\\n### Minor Changes\\n\\n- 33742bf: Modify `composeNextState` so that `getCases` can pass it a third\\n  argument: the metadata from Primero's response.\\n\\n  `getCases` will now not only return an array of `cases` in `state.data`, but\\n  metadata related to pagination in `state.metadata`.\\n\\n### Patch Changes\\n\\n- 2014694: remove travis url in readme\\n- bb764db: Conditionally check for 'withReferrals' in case no options are\\n  provided\\\"\\n\\n## 2.9.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 2.9.1\\n\\n### Patch Changes\\n\\n- d4ac748: Skipped failing test until we have a new strat (it's working)\\n\\n## 2.9.0\\n\\n### Minor Changes\\n\\n- b37a4ad: add language primero into monorepo\\n\\n### Patch Changes\\n\\n- adb97a0: Fixed issue where upsertCase always took state.data for main params\\n\"","functions":["getCases","createCase","updateCase","upsertCase","getReferrals","createReferrals","updateReferral","getForms","getLookups","getLocations"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Primero host url","format":"uri","minLength":1,"examples":["https://primero.org/some-org"]},"user":{"title":"User","type":"string","description":"The username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Superpass"]},"basicAuth":{"title":"Use Basic Auth","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["url"]}},
{"name":"progres","adaptor":"@openfn/language-progres","version":"1.2.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#postData\\\">postData(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request with a certificate</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"postData\\\"></a>\\n\\n## postData(params, callback) ⇒ <code>Operation</code>\\nMake a POST request with a certificate\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Url, Headers and Body parameters |\\n| callback | <code>function</code> | (Optional) A callback function |\\n\\n**Example**  \\n```js\\npostData({\\n url: urlDTP,\\n body: obj,\\n headers: {\\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\\n },\\n agentOptions: {\\n   key,\\n   cert,\\n },\\n}, callback)(state)\\n```\\n\"","readme":"\"# language-progres\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the UNHCR\\nProGres v4 API.\\n\\n## Design notes\\n\\n- Integration must run through UNHCR's DTP, a middleware layer that provides a\\n  public API for UNHCR internal software.\\n- An API token _and_ a self-signed certificate must be provided for\\n  communication with UNHCR's DTP.\\n- Two-way sync must be possible between Primero and ProGres\\n- Teams still in discussion about whether the most common use-case will be a\\n  timed sync or real-time/event-based sync.\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/language-progres/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/progres-configuration-schema/)\\ndefinition.\\n\\n### Posting data to an endpoint with SSL cert authentication\\n\\n```js\\npostData({\\n  url: urlDTP,\\n  body: { a: 1 },\\n  headers: {\\n    'Subscription-Key': configuration['token'],\\n  },\\n  agentOptions: {\\n    key,\\n    cert,\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-progres\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 039ca0b: Migrate Progres\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["postData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Progres URL","format":"uri","minLength":1,"examples":["https://endpoint/To/DTP"]},"key":{"title":"Private Key","type":"string","description":"Your Progres private key","minLength":1,"examples":["-----BEGIN PRIVATE KEY-----SOMETYPEOFPRIVATEVALUE-----END PRIVATE KEY-----"]},"cert":{"title":"Certificate","type":"string","description":"Your Progres certificate","minLength":1,"examples":["-----BEGIN CERTIFICATE-----SOMETYPEOFVALUE-----END CERTIFICATE-----"]},"token":{"title":"Token","type":"string","description":"Your Progres token","writeOnly":true,"minLength":1,"examples":["[REDACTED]"]}},"type":"object","additionalProperties":true,"required":["url","key","cert","token"]}},
{"name":"rapidpro","adaptor":"@openfn/language-rapidpro","version":"0.5.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state.</p>\\n</dd>\\n<dt><a href=\\\"#addContact\\\">addContact(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Adds a new contact to RapidPro</p>\\n</dd>\\n<dt><a href=\\\"#upsertContact\\\">upsertContact(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upserts a contact to RapidPro by URN</p>\\n</dd>\\n<dt><a href=\\\"#startFlow\\\">startFlow(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Start a RapidPro flow for a number of contacts</p>\\n</dd>\\n<dt><a href=\\\"#sendBroadcast\\\">sendBroadcast(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Sends a message to a list of contacts and/or URNs</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"addContact\\\"></a>\\n\\n## addContact(params, callback) ⇒ <code>Operation</code>\\nAdds a new contact to RapidPro\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\naddContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n<a name=\\\"upsertContact\\\"></a>\\n\\n## upsertContact(params, callback) ⇒ <code>Operation</code>\\nUpserts a contact to RapidPro by URN\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to upsert a contact |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupsertContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n<a name=\\\"startFlow\\\"></a>\\n\\n## startFlow(params, callback) ⇒ <code>Operation</code>\\nStart a RapidPro flow for a number of contacts\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nstartFlow({\\n  flow: \\\"f5901b62-ba76-4003-9c62-72fdacc1b7b7\\\",\\n  restart_participants: false,\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n<a name=\\\"sendBroadcast\\\"></a>\\n\\n## sendBroadcast(params, callback) ⇒ <code>Operation</code>\\nSends a message to a list of contacts and/or URNs\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nsendBroadcast({\\n  text: \\\"Hello world\\\",\\n  urns: [\\\"twitter:sirmixalot\\\"],\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\"","readme":"\"# language-rapidpro\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[RapidPro API](https://rapidpro.io/api/v2/).\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/language-rapidpro/ [In\\n  Progress]\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n## Usage\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/rapidpro-configuration-schema/)\\ndefinition.\\n\\n#### sample job expression using operation\\n\\n```js\\nsendBroadcast({\\n  \\\"text\\\": \\\"Hello friends.\\\",\\n  \\\"urns\\\": [],\\n  \\\"contacts\\\": [],\\n  \\\"groups\\\", [],\\n});\\n```\\n\\n### Key helper functions\\n\\n**sendBroadcast(...) to send broadcast message to multiple contacts**\\n\\n```js\\nsendBroadcast({\\n  text: 'Hello world',\\n  urns: ['twitter:sirmixalot'],\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**startFlow(...) to trigger an automation flow in RapidPro**\\n\\n```js\\nstartFlow({\\n  flow: 'f5901b62-ba76-4003-9c62-72fdacc1b7b7',\\n  restart_participants: false,\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**upsertContact(...) to update/insert a Contact (and check if exists using\\nexternal identifiers)**\\n\\n```js\\nupsertContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n**addContact(...) to insert a Contact**\\n\\n```js\\naddContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-rapidpro\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 11f83ff: Migrate RapidPro\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["addContact","upsertContact","startFlow","sendBroadcast"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","default":"https://app.rapidpro.io/","description":"instance host URL","format":"uri","minLength":1,"examples":["https://app.rapidpro.io/"]},"token":{"title":"Token","type":"string","description":"instance access token","writeOnly":true,"minLength":1,"examples":["#Super-sSCrecrete-token"]},"apiVersion":{"title":"API Version","type":"string","description":"API version to use. Leave this empty to use the default v2","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["host","token"]}},
{"name":"resourcemap","adaptor":"@openfn/language-resourcemap","version":"0.2.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for resourcemap.</p>\\n</dd>\\n<dt><a href=\\\"#submitSite\\\">submitSite(eventData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create an event</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for resourcemap.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"submitSite\\\"></a>\\n\\n## submitSite(eventData) ⇒ <code>Operation</code>\\nCreate an event\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| eventData | <code>object</code> | Payload data for the event |\\n\\n**Example**  \\n```js\\nexecute(\\n  event(eventData)\\n)(state)\\n```\\n\"","readme":"\"# Language ResourceMap\\n\\nLanguage Pack for building expressions and operations for working with the\\n[resourcemap API](https://github.com/instedd/resourcemap/wiki/REST_API).\\n\\n## Documentation\\n\\nWe are working towards this to start:\\nhttps://github.com/instedd/resourcemap/wiki/REST_API#create-site\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/resourcemap-configuration-schema/)\\ndefinition.\\n\\n## Expressions\\n\\n## `submitSite(collectionId, fields)`\\n\\n```js\\nsubmitSite(\\n  303,\\n  fields(\\n    field('name', dataValue('sampleText')),\\n    field('lat', 48.86),\\n    field('lon', 2.35),\\n    field('properties', function (state) {\\n      return {\\n        Comment: state.data.sampleText,\\n        phone: '85512345678',\\n      };\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-resourcemap\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 664dc7f: migrate resourcemap\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","default":"http://some-site-of-yours.com:8080","description":"ResourceMap base URL","format":"uri","minLength":1,"examples":["http://some-site-of-yours.com:8080"]},"username":{"title":"Username","type":"string","description":"Your ResourceMap username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your ResourceMap password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["baseUrl"]}},
{"name":"salesforce","adaptor":"@openfn/language-salesforce","version":"2.12.3","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_FakeAdaptor\\\">FakeAdaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#relationship\\\">relationship(relationshipName, externalId, dataSource)</a> ⇒ <code>object</code></dt>\\n<dd><p>Adds a lookup relation or &#39;dome insert&#39; to a record.</p>\\n</dd>\\n<dt><a href=\\\"#describeAll\\\">describeAll(state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Outputs basic information about available sObjects.</p>\\n</dd>\\n<dt><a href=\\\"#describe\\\">describe(sObject, state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Outputs basic information about an sObject to <code>STDOUT</code>.</p>\\n</dd>\\n<dt><a href=\\\"#retrieve\\\">retrieve(sObject, id, callback, state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Retrieves a Salesforce sObject(s).</p>\\n</dd>\\n<dt><a href=\\\"#query\\\">query(qs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Execute an SOQL query.\\nNote that in an event of a query error,\\nerror logs will be printed but the operation will not throw the error.</p>\\n</dd>\\n<dt><a href=\\\"#bulk\\\">bulk(sObject, operation, options, fun, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Create and execute a bulk job.</p>\\n</dd>\\n<dt><a href=\\\"#destroy\\\">destroy(sObject, attrs, options, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Delete records of an object.</p>\\n</dd>\\n<dt><a href=\\\"#create\\\">create(sObject, attrs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Create a new object.</p>\\n</dd>\\n<dt><a href=\\\"#createIf\\\">createIf(logical, sObject, attrs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Create a new object if conditions are met.</p>\\n</dd>\\n<dt><a href=\\\"#upsert\\\">upsert(sObject, externalId, attrs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Upsert an object.</p>\\n</dd>\\n<dt><a href=\\\"#upsertIf\\\">upsertIf(logical, sObject, externalId, attrs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Upsert if conditions are met.</p>\\n</dd>\\n<dt><a href=\\\"#update\\\">update(sObject, attrs, state)</a> ⇒ <code><a href=\\\"#Operation\\\">Operation</a></code></dt>\\n<dd><p>Update an object.</p>\\n</dd>\\n<dt><a href=\\\"#reference\\\">reference(position, state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Get a reference ID by an index.</p>\\n</dd>\\n<dt><a href=\\\"#createConnection\\\">createConnection(state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Creates a connection.</p>\\n</dd>\\n<dt><a href=\\\"#login\\\">login(state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Performs a login.</p>\\n</dd>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Executes an operation.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code><a href=\\\"#State\\\">State</a></code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#steps\\\">steps()</a> ⇒ <code>Array</code></dt>\\n<dd><p>Flattens an array of operations.</p>\\n</dd>\\n</dl>\\n\\n## Typedefs\\n\\n<dl>\\n<dt><a href=\\\"#State\\\">State</a> : <code>Object</code></dt>\\n<dd></dd>\\n<dt><a href=\\\"#Operation\\\">Operation</a> : <code>function</code></dt>\\n<dd></dd>\\n</dl>\\n\\n<a name=\\\"module_FakeAdaptor\\\"></a>\\n\\n## FakeAdaptor\\n<a name=\\\"relationship\\\"></a>\\n\\n## relationship(relationshipName, externalId, dataSource) ⇒ <code>object</code>\\nAdds a lookup relation or 'dome insert' to a record.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalId | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example**  \\n```js\\nData Sourced Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\nFixed Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n<a name=\\\"describeAll\\\"></a>\\n\\n## describeAll(state) ⇒ [<code>State</code>](#State)\\nOutputs basic information about available sObjects.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ndescribeAll()\\n```\\n<a name=\\\"describe\\\"></a>\\n\\n## describe(sObject, state) ⇒ [<code>State</code>](#State)\\nOutputs basic information about an sObject to `STDOUT`.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ndescribe('obj_name')\\n```\\n<a name=\\\"retrieve\\\"></a>\\n\\n## retrieve(sObject, id, callback, state) ⇒ [<code>State</code>](#State)\\nRetrieves a Salesforce sObject(s).\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | The sObject to retrieve |\\n| id | <code>String</code> | The id of the record |\\n| callback | <code>function</code> | A callback to execute once the record is retrieved |\\n| state | [<code>State</code>](#State) | Runtime state |\\n\\n**Example**  \\n```js\\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');\\n```\\n<a name=\\\"query\\\"></a>\\n\\n## query(qs, state) ⇒ [<code>Operation</code>](#Operation)\\nExecute an SOQL query.\\nNote that in an event of a query error,\\nerror logs will be printed but the operation will not throw the error.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| qs | <code>String</code> | A query string. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nquery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);\\n```\\n<a name=\\\"bulk\\\"></a>\\n\\n## bulk(sObject, operation, options, fun, state) ⇒ [<code>Operation</code>](#Operation)\\nCreate and execute a bulk job.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| operation | <code>String</code> | The bulk operation to be performed |\\n| options | <code>Object</code> | Options passed to the bulk api. |\\n| fun | <code>function</code> | A function which takes state and returns an array. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nbulk('Patient__c', 'insert', { failOnError: true, pollInterval: 3000, pollTimeout: 240000 }, state => {\\n  return state.data.someArray.map(x => {\\n    return { 'Age__c': x.age, 'Name': x.name }\\n  })\\n});\\n```\\n<a name=\\\"destroy\\\"></a>\\n\\n## destroy(sObject, attrs, options, state) ⇒ [<code>Operation</code>](#Operation)\\nDelete records of an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Array of IDs of records to delete. |\\n| options | <code>Object</code> | Options for the destroy delete operation. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ndestroy('obj_name', [\\n '0060n00000JQWHYAA5',\\n '0090n00000JQEWHYAA5\\n], { failOnError: true })\\n```\\n<a name=\\\"create\\\"></a>\\n\\n## create(sObject, attrs, state) ⇒ [<code>Operation</code>](#Operation)\\nCreate a new object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ncreate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"createIf\\\"></a>\\n\\n## createIf(logical, sObject, attrs, state) ⇒ [<code>Operation</code>](#Operation)\\nCreate a new object if conditions are met.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateIf(true, 'obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert(sObject, externalId, attrs, state) ⇒ [<code>Operation</code>](#Operation)\\nUpsert an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nupsert('obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"upsertIf\\\"></a>\\n\\n## upsertIf(logical, sObject, externalId, attrs, state) ⇒ [<code>Operation</code>](#Operation)\\nUpsert if conditions are met.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nupsertIf(true, 'obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"update\\\"></a>\\n\\n## update(sObject, attrs, state) ⇒ [<code>Operation</code>](#Operation)\\nUpdate an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nupdate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"reference\\\"></a>\\n\\n## reference(position, state) ⇒ [<code>State</code>](#State)\\nGet a reference ID by an index.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| position | <code>number</code> | Position for references array. |\\n| state | [<code>State</code>](#State) | Array of references. |\\n\\n**Example**  \\n```js\\nreference(0)\\n```\\n<a name=\\\"createConnection\\\"></a>\\n\\n## createConnection(state) ⇒ [<code>State</code>](#State)\\nCreates a connection.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"login\\\"></a>\\n\\n## login(state) ⇒ [<code>State</code>](#State)\\nPerforms a login.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | [<code>State</code>](#State) | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ [<code>State</code>](#State)\\nExecutes an operation.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | [<code>Operation</code>](#Operation) | Operations |\\n\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ [<code>State</code>](#State)\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | [<code>State</code>](#State) | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"steps\\\"></a>\\n\\n## steps() ⇒ <code>Array</code>\\nFlattens an array of operations.\\n\\n**Kind**: global function  \\n**Example**  \\n```js\\nsteps(\\n  createIf(params),\\n  update(params)\\n)\\n```\\n<a name=\\\"State\\\"></a>\\n\\n## State : <code>Object</code>\\n**Kind**: global typedef  \\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | JSON Data. |\\n| references | <code>Array.&lt;Reference&gt;</code> | History of all previous operations. |\\n\\n<a name=\\\"Operation\\\"></a>\\n\\n## Operation : <code>function</code>\\n**Kind**: global typedef  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | [<code>State</code>](#State) | \\n\\n\"","readme":"\"# Language Salesforce\\n\\nSalesforce Language Pack for OpenFn. **See the main docs site:\\nhttp://openfn.github.io/language-salesforce/ **\\n\\n## Release notes and deprecated CHANGELOG.md\\n\\nSee [releases](https://docs.openfn.org/adaptors/packages/salesforce-changelog)\\nfor all changes.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/saleforce-configuration-schema/)\\ndefinition.\\n\\n## Intent\\n\\n---\\n\\nAllow communication with Salesforce using a set of Lisp compatible expressions.\\n\\nUsing simple functions we can create a simplified API, simple enough to generate\\ncode from data.\\n\\n## Expressions\\n\\n---\\n\\nExpressions are a simplified set of function calls. Outlining the operations\\nneeded to be performed.\\n\\nAn uncompiled expression has no knowledge of the internals of the adaptor,\\ncredentials or runtime environment.\\n\\nIt's the responsibility of the build process to provide a wrapper that will\\ninject the functions in.\\n\\nFor example:\\n\\n```javascript\\ndescribe('vera__Test_Event__c'),\\n  create('vera__Test_Event__c', {\\n    vera__Test_Event_Name_Unique__c: 'hello from jsforce',\\n  }),\\n  create('vera__Boat__c', {\\n    Name: 'Catatafish redux!',\\n    vera__Test_Event__c: reference(0),\\n  });\\n```\\n\\n## ## API\\n\\n`field(\\\"key\\\",\\\"value\\\")` Returns `{ \\\"key\\\": \\\"value\\\" }`\\n\\n[`relationship(\\\"relationship_name__r\\\", \\\"externalID\\\", dataSource(\\\"path\\\"))`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L23-L44)\\n\\n[`describe(\\\"obj_name\\\")`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L46-L71)\\n\\n[`query('queryString')`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L107-L136)\\n\\n[`bulk('obj_name', 'operation', 'options', arrayOfFields)`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L138-L210)\\n\\n[`create('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L212-L238)\\n\\n[`destroy('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#225-259)\\n\\n[`createIf(logical, 'obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L240-L279)\\n\\n[`upsert(sObject, 'externalID', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L281-L315)\\n\\n[`upsertIf(logical, 'obj_name', 'externalID', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L317-L370)\\n\\n[`update('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L372-L398)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\\n## ## Other\\n\\nCreate SOAP session\\n\\n```sh\\ncurl https://test.salesforce.com/services/Soap/u/47.0 -H \\\"Content-Type: text/xml; charset=UTF-8\\\" -H \\\"SOAPAction: login\\\" -d @tmp/login.txt | xmllint --format -\\n```\\n\\nClose jobs\\n\\n```sh\\ncurl\\nhttps://openfn.my.salesforce.com/services/async/47.0/job/some_id -H 'X-SFDC-Session: abc123sessionID456xyz' -H \\\"Content-Type: application/xml; charset=UTF-8\\\" -d @tmp/close_job.txt | xmllint --format -\\n```\\n\"","changelog":"\"# @openfn/language-salesforce\\n\\n## 2.12.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.12.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.12.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.12.0\\n\\n### Minor Changes\\n\\n- 5c883c6: Allow expansion for describe(), add describeAll()\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.11.1\\n\\n### Patch Changes\\n\\n- e7bf865: chore(deps): update dependency sinon to v14\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.11.0\\n\\n### Minor Changes\\n\\n- edff578: Migrate salesforce\\n\"","functions":["relationship","describeAll","describe","retrieve","query","bulk","destroy","create","createIf","upsert","upsertIf","update","reference"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"The Salesforce instance login URL","format":"uri","minLength":1,"examples":["https://somesalesforcelogin.url"]},"username":{"title":"Username","type":"string","description":"The username to log in the Salesforce instance","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"The password to log in the Salesforce instance","writeOnly":true,"minLength":1,"examples":["@super(!)SecretPass"]},"securityToken":{"title":"Security Token","type":"string","description":"The security token to access the Salesforce instance","minLength":1,"examples":["salesforcesecuritytoken"]}},"type":"object","additionalProperties":true,"required":["host","database"]}},
{"name":"sftp","adaptor":"@openfn/language-sftp","version":"0.6.7","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#list\\\">list(dirPath)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>List files present in a directory</p>\\n</dd>\\n<dt><a href=\\\"#getCSV\\\">getCSV(filePath)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get a CSV and return a JSON array of strings for each item separated by the delimiter</p>\\n</dd>\\n<dt><a href=\\\"#putCSV\\\">putCSV(localFilePath, remoteFilePath, parsingOptions)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Convert JSON to CSV and upload to an FTP server</p>\\n</dd>\\n<dt><a href=\\\"#getJSON\\\">getJSON(filePath, encoding)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Fetch a json file from an FTP server</p>\\n</dd>\\n<dt><a href=\\\"#normalizeCSVarray\\\">normalizeCSVarray(options, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Convert JSON array of strings into a normalized object</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"list\\\"></a>\\n\\n## list(dirPath) ⇒ <code>Operation</code>\\nList files present in a directory\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\nlist('/some/path/')\\n```\\n<a name=\\\"getCSV\\\"></a>\\n\\n## getCSV(filePath) ⇒ <code>Operation</code>\\nGet a CSV and return a JSON array of strings for each item separated by the delimiter\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\ngetCSV(\\n  '/some/path/to_file.csv'\\n);\\n```\\n<a name=\\\"putCSV\\\"></a>\\n\\n## putCSV(localFilePath, remoteFilePath, parsingOptions) ⇒ <code>Operation</code>\\nConvert JSON to CSV and upload to an FTP server\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| localFilePath | <code>string</code> | Data source for data to copy to the remote server. |\\n| remoteFilePath | <code>string</code> | Path to the remote file to be created on the server. |\\n| parsingOptions | <code>object</code> | Options which can be passed to adjust the read and write stream used in sending the data to the remote server |\\n\\n**Example**  \\n```js\\nputCSV(\\n  '/some/path/to_local_file.csv',\\n  '/some/path/to_remove_file.csv',\\n  { delimiter: ';', noheader: true }\\n);\\n```\\n<a name=\\\"getJSON\\\"></a>\\n\\n## getJSON(filePath, encoding) ⇒ <code>Operation</code>\\nFetch a json file from an FTP server\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| encoding | <code>string</code> | Character encoding for the json |\\n\\n**Example**  \\n```js\\ngetJSON(\\n  '/path/To/File',\\n  'utf8',\\n);\\n```\\n<a name=\\\"normalizeCSVarray\\\"></a>\\n\\n## normalizeCSVarray(options, callback) ⇒ <code>Operation</code>\\nConvert JSON array of strings into a normalized object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>options</code> | Options passed to csvtojson parser |\\n| callback | <code>callback</code> | Options passed to csvtojson parser |\\n\\n**Example**  \\n```js\\nnormalizeCSVarray({ delimiter: ';', noheader: true });\\n```\\n\"","readme":"\"# Language SFTP\\n\\nLanguage Pack for building expressions and operations to work with SFTP servers.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/sftp-configuration-schema/)\\ndefinition.\\n\\n## List the content of a directory\\n\\n```js\\nalterState(state => {\\n  return list('/path/To/Directory')(state).then(response => {\\n    console.log(`There are ${response.data.length} files.`);\\n    return response;\\n  });\\n});\\n```\\n\\n## sample getCSV expression\\n\\n```js\\ngetCSV('path/to/file.csv', 'utf8', {\\n  quote: 'off',\\n  delimiter: ';',\\n  noheader: true,\\n  filter: {\\n    type: 'startsWith',\\n    key: 'field1',\\n    value: 'JO',\\n  },\\n});\\n```\\n\\nA more complex example that breaks up the CSV file into multiple payloads for\\nquicker processing.\\n\\n```js\\nfn(state => {\\n  return list('/')(state).then(state => {\\n    const targetNames = [\\n      'exportContacts', //example fileName\\n    ];\\n    console.log(`Fetching files: ${targetNames}`);\\n    const files = state.data\\n      .filter(file => file.name.split('.')[1] === 'csv')\\n      .filter(file =>\\n        targetNames.some(targetName =>\\n          file.name.toLowerCase().includes(targetName)\\n        )\\n      );\\n\\n    if (files.length === 0) console.log('No new CSV files found.');\\n    return { ...state, data: {}, files };\\n  });\\n});\\n\\neach(\\n  '$.files[*]',\\n  fn(state => {\\n    const { configuration, data } = state;\\n\\n    return getCSV(`/${data.name}`)(state).then(async state => {\\n      const headers = state.data\\n        .shift()\\n        .split(';')\\n        .map(h => (h = h.replace(/\\\"/g, '')));\\n\\n      function toObject(item) {\\n        const values = item.split(';');\\n\\n        return Object.fromEntries(\\n          headers.map((k, i) => {\\n            return values[i]\\n              ? [k, values[i].replace(/\\\"/g, '')]\\n              : [k, values[i]];\\n          })\\n        );\\n      }\\n\\n      let countInbox = 0;\\n\\n      //to post CSV data as individual Messages to OpenFn Inbox\\n      const postToInbox = async data => {\\n        countInbox++;\\n\\n        console.log(`Sending request ${countInbox} to inbox`);\\n\\n        await new Promise(resolve => setTimeout(resolve, 200));\\n\\n        await http.post({\\n          url: configuration.openfnInboxUrl,\\n          data: data,\\n          maxContentLength: Infinity,\\n          maxBodyLength: Infinity,\\n        })(state);\\n      };\\n\\n      //To split up into multiple, smaller payloads before send to OpenFn Inbox\\n      const chunkSize = 500;\\n\\n      console.log(\\n        state.data.length,\\n        'rows will be sent in',\\n        Math.ceil(state.data.length / chunkSize),\\n        'requests of',\\n        chunkSize,\\n        'rows each.'\\n      );\\n\\n      while (state.data.length > 0) {\\n        console.log('data.length', state.data.length);\\n        await postToInbox({\\n          fileName: data.name,\\n          fileType: data.name.split('-')[0],\\n          uploadDate: new Date(data.modifyTime).toISOString(),\\n          json: state.data.splice(0, chunkSize).map(toObject),\\n        });\\n      }\\n\\n      return { configuration, references: [], data: {} };\\n    });\\n  })\\n);\\n```\\n\\n## sample putCSV expression\\n\\nThis function converts JSON to CSV and post to a server\\n\\n```js\\nputCSV('/some/path/to_file.csv', 'utf8', { delimiter: ';', noheader: true });\\n```\\n\\n### Get JSON from FTP server\\n\\n```js\\ngetJSON('path/to/file.json', 'utf8');\\n```\\n\\n### Custom request to an http endpoint\\n\\nThis adaptor exports `http` from `language-common`. Here, we outline the usage\\nin order to make custom requests to an endpoint. It returns a promise\\n\\n```js\\nalterState(state => {\\n  return http\\n    .post({ url: 'yourURL', data: { name: 'Mamadou' } })(state)\\n    .then(response => {\\n      // do something with response;\\n      return response;\\n    });\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build the docs for this repo, `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-sftp\\n\\n## 0.6.7\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.6.6\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.6.5\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.6.4\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.6.3\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 4126a62: Fix built bundle\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.6.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 0.6.1\\n\\n### Patch Changes\\n\\n- 28dfbfa: add todo, fix build pack\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- f294a62: Added credential-schema.json for new ui\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 2c04894: added sftp package\\n\"","functions":["list","getCSV","putCSV","getJSON","normalizeCSVarray"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The SFTP server host url or ip address","format":"uri","minLength":1,"examples":["191.173.128.88"]},"port":{"title":"Port","type":"integer","default":21,"description":"The SFTP server port","minLength":1,"examples":[22]},"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["host"]}},
{"name":"smpp","adaptor":"@openfn/language-smpp","version":"1.2.2","docs":"\"<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language SMPP\\n\\nLanguage Pack for building expressions and operations to make calls to an OpenFn\\nSMPP client API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/smpp-configuration-schema/)\\ndefinition.\\n\\n#### sample send expression\\n\\n```js\\nsend({\\n  text: dataValue('text'),\\n  smsId: dataValue('messageId'),\\n  recipient: dataValue('to'),\\n  sender: dataValue('from'),\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-smpp\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 3aedd05: migrate smpp\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"clientHost":{"title":"Client host","type":"string","description":"Your SMPP client host URL","format":"uri","minLength":1,"examples":["https://some-smpp.com:3000"]},"systemId":{"title":"System ID","type":"string","description":"Your SMPP client name","minLength":1,"examples":["some_smpp_client_name"]},"inboxId":{"title":"Inbox ID","type":"string","description":"Your SMPP client inbox ID","minLength":1,"examples":["1c908151-8273-431c-b1d4-blah"]},"password":{"title":"Password","type":"string","description":"Your SMPP client password","writeOnly":true,"minLength":1,"examples":["@some(!)StrongPassword"]}},"type":"object","additionalProperties":true,"required":["clientHost","systemId","inboxId","password"]}},
{"name":"surveycto","adaptor":"@openfn/language-surveycto","version":"1.1.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#fetchSubmissions\\\">fetchSubmissions(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request and POST it somewhere else</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetchSubmissions\\\"></a>\\n\\n## fetchSubmissions(params) ⇒ <code>Operation</code>\\nMake a GET request and POST it somewhere else\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**  \\n```js\\nexecute(\\n  fetch(params)\\n)(state)\\n```\\n\"","readme":"\"# Language SurveyCTO\\n\\nLanguage Pack for building expressions and operations to make HTTP calls to\\nSurveyCTO.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/surveycto-configuration-schema/)\\ndefinition.\\n\\n## fetchSubmissions\\n\\n`fetchSubmissions(1,2,3)` takes three arguments:\\n\\n1. the `formId` of the form on SurveyCTO\\n\\n2. the `initialAfterDate`, a date string or UNIX timestamp which instructs the\\n   job to only fetch submissions after a certain date. After the first run of\\n   the job, subsequent runs will only fetch _NEW_ submissions.\\n\\n3. the `postUrl` is where the wide-format JSON representation of each form\\n   submission should be sent. Note that a `formId` key will be added to each\\n   form submission for later filtering/routing.\\n\\n### sample `fetchSubmissions` expression\\n\\n```js\\nfetchSubmissions(\\n  // formId on SurveyCTO server\\n  'household_survey',\\n  // initialAfterDate: this will only be accessed if \\\"lastSubmissionDate\\\" is empty in your job_state\\\".\\n  // After the initial run of the job, OpenFn will only pull new submissions from SurveyCTO.\\n  'Aug 29, 2016 4:44:26 PM',\\n  // postUrl is where you want to send the JSON submissions, appended with a new \\\"formId\\\" key\\n  'https://www.openfn.org/inbox/secret-inbox-uuid'\\n);\\n```\\n\\n## Development\\n\\nClone the repo, run `npm install`.\\n\\nRun tests using `npm run test` or `npm run test:watch`\\n\\nBuild the project using `make`.\\n\"","changelog":"\"# @openfn/language-surveycto\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 776bb13: migrate surveycto\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"instanceName":{"title":"Instance name","type":"string","description":"Your Surveycto instance name","minLength":1,"examples":["openfn_test"]},"username":{"title":"Username","type":"string","description":"Your Surveycto instance username","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"Your Surveycto instance password","writeOnly":true,"minLength":1,"examples":["@some(%)!Password"]}},"type":"object","additionalProperties":true,"required":["instanceName","username","password"]}},
{"name":"telerivet","adaptor":"@openfn/language-telerivet","version":"0.1.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for telerivet.</p>\\n</dd>\\n<dt><a href=\\\"#send\\\">send(sendData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Send a message</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for telerivet.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"send\\\"></a>\\n\\n## send(sendData) ⇒ <code>Operation</code>\\nSend a message\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sendData | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nexecute(\\n  send(data)\\n)(state)\\n```\\n\"","readme":"\"# Language Telerivet\\n\\nLanguage Pack for sending messages using the\\n[telerivet API](https://telerivet.com/api/rest/curl).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/telerivet-configuration-schema/)\\ndefinition.\\n\\n## Send message\\n\\n#### Current `send` expression:\\n\\n```js\\nsend(\\n  fields(\\n    field('to_number', dataValue('recipient_number')),\\n    field('content', dataValue('recipient_text')),\\n    // Lots of optional parameters...\\n    field('message_type', 'sms'),\\n    field('route_id', dataValue('some_route'))\\n  )\\n);\\n```\\n\\n## sendBulk messages - WIP\\n\\n#### Current `sendBulk` expression:\\n\\n```js\\nsend(fields(\\n  field(\\\"content\\\", dataValue(\\\"recipient_text\\\")),\\n  field(\\\"to_numbers\\\", [\\n        \\\"+14155550123\\\",\\n        \\\"+14255550234\\\",\\n        \\\"+16505550345\\\"\\n    ]\\n  // Lots of optional parameters...\\n  field(\\\"message_type\\\", \\\"sms\\\"),\\n  field(\\\"route_id\\\", dataValue(\\\"some_route\\\"))\\n))\\n```\\n\\nNote that \\\"recipient_text\\\" may be a concatenation like this:\\n\\n```js\\nfield('content', function (state) {\\n  return dataValue('salutation')(state).concat(\\n    '. ',\\n    dataValue('last_name')(state),\\n    ', )'\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-telerivet\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 83ede44: migrate telerivet\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"projectId":{"title":"Project ID","type":"string","description":"Your Telerivet project id","minLength":1,"examples":["telerivet_project_id"]},"apiKey":{"title":"API Key","type":"string","description":"Your Telerivet API Key","writeOnly":true,"minLength":1,"examples":["telerivet_api_key"]}},"type":"object","additionalProperties":true,"required":["projectId","apiKey"]}},
{"name":"template","adaptor":"@openfn/language-template","version":"1.7.7","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#create\\\">create(path, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a fictional resource in a fictional destination system using a POST request</p>\\n</dd>\\n<dt><a href=\\\"#createPatient\\\">createPatient(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create a fictional patient in a fictional universe with a fictional REST api</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"create\\\"></a>\\n\\n## create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a fictional resource in a fictional destination system using a POST request\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"createPatient\\\"></a>\\n\\n## createPatient(params, callback) ⇒ <code>Operation</code>\\nCreate a fictional patient in a fictional universe with a fictional REST api\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreatePatient({\\\"foo\\\": \\\"bar\\\"})\\n```\\n\"","readme":"\"# language-template\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the \\\\_\\\\_\\\\_\\\\_\\nAPI.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/template-configuration-schema/)\\ndefinition.\\n\\n### post\\n\\n#### sample expression using operation\\n\\n```js\\npost({\\n  \\\"url\\\": \\\"api/v1/forms/data/wide/json/formId\\\",\\n  \\\"body\\\": {\\\"a\\\":1}\\n  \\\"headers\\\": {}\\n})\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-template\\n\\n## 1.7.7\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.7.6\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.7.5\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.7.4\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.7.3\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 1.7.2\\n\\n### Patch Changes\\n\\n- f4b3dd6: remove travis build url\\n\\n## 1.7.1\\n\\n### Patch Changes\\n\\n- Fixed package.json for template adaptor\\n\\n## 1.7.0\\n\\n### Minor Changes\\n\\n- 554e905: Migrated to monorepo\\n\"","functions":["create","createPatient"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
{"name":"twilio","adaptor":"@openfn/language-twilio","version":"0.3.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#sendSMS\\\">sendSMS(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Sends an SMS message to a specific phone number</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sendSMS\\\"></a>\\n\\n## sendSMS(params) ⇒ <code>Operation</code>\\nSends an SMS message to a specific phone number\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | an object containing 'body', 'from', and 'to' keys. |\\n\\n**Example**  \\n```js\\nsendSMS({\\n body: dataValue('sampleText'),\\n from: dataValue('myFromNumber'),\\n to: dataValue('ukMobile'),\\n});\\n```\\n\"","readme":"\"# Language twilio\\n\\nLanguage Pack for building expressions and operations to interact with the\\ntwilio API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/twilio-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression, sending an sms\\n\\n```js\\nsendSMS({\\n  body: dataValue('text'),\\n  from: '+15005550006',\\n  to: dataValue('recipient'),\\n});\\n```\\n\\n## local usage\\n\\n```sh\\n~/devtools/core/bin/core execute \\\\\\n  -l ~/devtools/adaptors/language-twilio \\\\\\n  -s ./tmp/state.json \\\\\\n  -o ./tmp/output.json \\\\\\n  -e ./tmp/expression.js\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-twilio\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- a36a072: ymigrated twilio to monorepo\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["sendSMS"],"configuration-schema":"No Configuration Schema"},
{"name":"vtiger","adaptor":"@openfn/language-vtiger","version":"1.1.2","docs":"\"<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language Vtiger\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nVtiger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/vtiger-configuration-schema/)\\ndefinition.\\n\\n#### sample listTypes expression\\n\\n```js\\nlistTypes();\\n```\\n\\n#### sample postElement expression\\n\\n```js\\npostElement({\\n  operation: \\\"create\\\"\\n  elementType: \\\"leads\\\",\\n  element: {\\n    \\\"name\\\": dataValue(\\\"name\\\")(state),\\n    \\\"surname\\\": dataValue(\\\"surname\\\")(state),\\n    \\\"email\\\": dataValue(\\\"email\\\")(state)\\n  }\\n});\\n\\n\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-vtiger\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- b4a13ff: migrate vtiger\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"VTiger instance host URL","format":"uri","minLength":1,"examples":["https://openfunction.od2.vtiger.com"]},"username":{"title":"Username","type":"string","description":"VTiger instance username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"VTiger instance access token","writeOnly":true,"minLength":1,"examples":["@some()!veryHugeToke"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","accessToken"]}},
{"name":"zoho","adaptor":"@openfn/language-zoho","version":"0.2.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for zoho.</p>\\n</dd>\\n<dt><a href=\\\"#addRow\\\">addRow(db, table, rowData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>To add a row data to a database table</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for zoho.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"addRow\\\"></a>\\n\\n## addRow(db, table, rowData) ⇒ <code>Operation</code>\\nTo add a row data to a database table\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| db | <code>string</code> | Database |\\n| table | <code>string</code> | Database table |\\n| rowData | <code>object</code> | row data to be added into the database |\\n\\n**Example**  \\n```js\\naddRow(\\n'testing_openfn',\\n'Customers',\\nfields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\"","readme":"\"# Language Zoho\\n\\nLanguage Pack for sending messages using the Zoho API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/zoho-configuration-schema/)\\ndefinition.\\n\\n### addRow\\n\\nTo add a row to the \\\"Customers\\\" table in the \\\"testing_openfn\\\" database, use the\\nfollowing `addRow` function.\\n\\n```js\\naddRow(\\n  'testing_openfn',\\n  'Customers',\\n  fields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\\n### updateRow\\n\\nComing soon. Want to help?\\nhttps://zohoreportsapi.wiki.zoho.com/Updating-Data.html\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-zoho\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f9ac74a: migrate zoho\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"account":{"title":"Account","type":"string","description":"Your Zoho account","minLength":1,"examples":["yourzohoaccount"]},"authToken":{"title":"Auth Token","type":"string","description":"Your Zoho authentication token","writeOnly":true,"minLength":1,"examples":["secreauthtoken"]},"apiVersion":{"title":"API Version","type":"string","default":"v2","enum":["v1","v2"],"description":"Zoho API version","minLength":1,"examples":["v2","v1"]}},"type":"object","additionalProperties":true,"required":["account","authToken","apiVersion"]}}
]
