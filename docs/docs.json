[
{"name":"asana","adaptor":"@openfn/language-asana","version":"4.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createtask\\\">createTask(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createtaskstory\\\">createTaskStory(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#gettask\\\">getTask(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#gettasks\\\">getTasks(projectGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatetask\\\">updateTask(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upserttask\\\">upsertTask(projectGid, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createTask\\n\\n<p><code>createTask(params, callback) ⇒ Operation</code></p>\\n\\nCreate a task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ncreateTask({\\n  name: \\\"test\\\",\\n  approval_status: \\\"pending\\\",\\n  assignee: \\\"12345\\\",\\n  projects: [\\\"1206933955023739\\\"],\\n});\\n```\\n\\n* * *\\n\\n### createTaskStory\\n\\n<p><code>createTaskStory(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nCreate a story to a specific task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | [<code>StoryOptions</code>](#storyoptions) | Story parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example:** Create a plain text comment\\n```js\\ncreateTaskStory(\\\"1206933955023739\\\", {\\n  text: \\\"This is a comment\\\",\\n});\\n```\\n**Example:** Create a HTML formatted text comment\\n```js\\ncreateTaskStory(\\\"1206933955023739\\\", {\\n  html_text: \\\"<body>This is a comment</body>\\\",\\n});\\n```\\n\\n* * *\\n\\n### getTask\\n\\n<p><code>getTask(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nGet a single task of a given project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetTask(\\\"1206933955023739\\\", {\\n  opt_fields: \\\"name,notes,assignee\\\",\\n});\\n```\\n\\n* * *\\n\\n### getTasks\\n\\n<p><code>getTasks(projectGid, params, callback) ⇒ Operation</code></p>\\n\\nGet the list of tasks for a given project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectGid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetTasks(\\\"1206933955023739\\\", {\\n  opt_fields: \\\"name,notes,assignee\\\",\\n});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a HTTP request against the Asana API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (excluding api/version) |\\n| params | [<code>RequestOptions</code>](#requestoptions) | (Optional) Query, body and method parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nGet a task by id\\nrequest(\\\"/tasks/1234\\\");\\n```\\n**Example**\\n```js\\nQuery for tasks in a given project\\nrequest(\\\"/tasks\\\", {\\n  query: { project: \\\"abc\\\" },\\n});\\n```\\n**Example**\\n```js\\nCreate a new task\\nrequest(\\\"/tasks\\\", {\\n  method: \\\"POST\\\",\\n  body: { data: { name: \\\"do the thing\\\", completed: false } },\\n});\\n```\\n\\n* * *\\n\\n### updateTask\\n\\n<p><code>updateTask(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nUpdate a specific task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupdateTask(\\\"1206933955023739\\\", {\\n  name: \\\"test\\\",\\n  approval_status: \\\"pending\\\",\\n  assignee: \\\"12345\\\",\\n});\\n```\\n\\n* * *\\n\\n### upsertTask\\n\\n<p><code>upsertTask(projectGid, params, callback) ⇒ Operation</code></p>\\n\\nUpdate or create a task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectGid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | an object with an externalId and some task data. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertTask(\\\"1201382240880\\\", {\\n  externalId: \\\"name\\\",\\n  data: {\\n    name: \\\"test\\\",\\n    approval_status: \\\"pending\\\",\\n    projects: [\\\"1201382240880\\\"],\\n    assignee: \\\"12345\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the Asana API request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> | Body data to append to the request. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| method | <code>string</code> | The HTTP method to use. Defaults to `GET` |\\n\\n\\n* * *\\n\\n### StoryOptions\\n\\nOptions provided to the createTaskStory request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | The plain text of the comment to add. Cannot be used with html_text. |\\n| html_text | <code>string</code> | Opt In. HTML formatted text for a comment. This will not include the name of the creator. |\\n| is_pinned | <code>boolean</code> | Default to `false`. Whether the story should be pinned on the resource. |\\n| sticker_name | <code>string</code> | The name of the sticker in this story. `null` if there is no sticker. |\\n| opt_fields | <code>array</code> | Opt In. This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. |\\n| opt_pretty | <code>boolean</code> | Defaults to `false`. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-asana\\n\\nLanguage Pack for connecting with Asana.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/asana-configuration-schema/)\\ndefinition.\\n\\n### How to create an API token\\n\\nUsing Asana's API requires having an API token. To generate that token, head to\\nthe [Asana developer console](https://app.asana.com/0/developer-console) and\\nenter the **Personal access tokens** section.\\n[For API Reference docs](https://developers.asana.com/docs/api-explorer)\\n\\nThere you can click on **+New access token**. A prompt will be opened allowing\\nyou to give the token a name and then create it.\\n\\n_Note: Treat your PAT like you would with a password. Do not share it or display\\nit online._\\n\\n### Sample expression\\n\\n## Find a single task of a given project using the task id.\\n\\n```js\\ngetTask('1234', {\\n  opt_fields: 'name,assignee',\\n});\\n```\\n\\n## Find the list of tasks of a given project using the project id.\\n\\n```js\\ngetTasks('22889593722', {\\n  opt_fields: 'name,notes,assignee',\\n});\\n```\\n\\n## Update a specific task\\n\\n```js\\nupdateTask('12344', {\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Create a task\\n\\n```js\\ncreateTask({\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Update a task or create a new one\\n\\nYou can use a field name literal as `externalId` to match a specific task. If\\nthe task does not exist, a new one will be created. The first parameter in this\\nfunction should be the `project_id`.\\n\\n```js\\nupsertTask('12344', {\\n  externalId: 'name',\\n  data: {\\n    name: 'A new task',\\n    projects: ['12344'],\\n    notes: 'This is a new task',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-asana\\n\\n## 4.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 4.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 4.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 3.3.1\\n\\n### Patch Changes\\n\\n- 510354a: Don't allow HTTP helpers to call out to different domains. This can\\n  cause a security violation where credentials are sent to external servers. Use\\n  generic HTTP helpers like `http.get` or `fetch` instead.\\n- 510354a: Fix an issue where not passing a params argument would trigger an\\n  exception\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 673e41e8: - Add `createTaskStory()` function\\n  - Replaced common `http` with a more efficient implementation from\\n    `common/util` http\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.1.6\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.1.5\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 5f40dcf: Migrated language-asana\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["createTask","createTaskStory","getTask","getTasks","request","updateTask","upsertTask"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiVersion":{"title":"API Version","type":"string","description":"The API version","examples":["1.0"]},"token":{"title":"Token","type":"string","description":"The API token","examples":["sample-tokenyWSJdXBACMLLWMNGgADFA"]}},"type":"object","additionalProperties":true,"required":["apiVersion","token"]}},
[
  {
    "id": "createTask",
    "longname": "createTask",
    "name": "createTask",
    "kind": "function",
    "scope": "global",
    "description": "Create a task.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createTask({\n  name: \"test\",\n  approval_status: \"pending\",\n  assignee: \"12345\",\n  projects: [\"1206933955023739\"],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createTaskStory",
    "longname": "createTaskStory",
    "name": "createTaskStory",
    "kind": "function",
    "scope": "global",
    "description": "Create a story to a specific task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "StoryOptions"
          ]
        },
        "description": "Story parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a plain text comment</caption>\ncreateTaskStory(\"1206933955023739\", {\n  text: \"This is a comment\",\n});",
      "<caption>Create a HTML formatted text comment</caption>\ncreateTaskStory(\"1206933955023739\", {\n  html_text: \"<body>This is a comment</body>\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 229,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "getTask",
    "longname": "getTask",
    "name": "getTask",
    "kind": "function",
    "scope": "global",
    "description": "Get a single task of a given project.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query params to include.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getTask(\"1206933955023739\", {\n  opt_fields: \"name,notes,assignee\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "getTasks",
    "longname": "getTasks",
    "name": "getTasks",
    "kind": "function",
    "scope": "global",
    "description": "Get the list of tasks for a given project.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the project",
        "name": "projectGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query params to include.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getTasks(\"1206933955023739\", {\n  opt_fields: \"name,notes,assignee\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a HTTP request against the Asana API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding api/version)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "(Optional) Query, body and method parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "Get a task by id\nrequest(\"/tasks/1234\");",
      "Query for tasks in a given project\nrequest(\"/tasks\", {\n  query: { project: \"abc\" },\n});",
      "Create a new task\nrequest(\"/tasks\", {\n  method: \"POST\",\n  body: { data: { name: \"do the thing\", completed: false } },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 286,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Asana API request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use. Defaults to `GET`",
        "name": "method"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 257,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "StoryOptions",
    "longname": "StoryOptions",
    "name": "StoryOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the createTaskStory request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The plain text of the comment to add. Cannot be used with html_text.",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Opt In. HTML formatted text for a comment. This will not include the name of the creator.",
        "name": "html_text"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Default to `false`. Whether the story should be pinned on the resource.",
        "name": "is_pinned"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the sticker in this story. `null` if there is no sticker.",
        "name": "sticker_name"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Opt In. This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.",
        "name": "opt_fields"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Defaults to `false`. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.",
        "name": "opt_pretty"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 200,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "updateTask",
    "longname": "updateTask",
    "name": "updateTask",
    "kind": "function",
    "scope": "global",
    "description": "Update a specific task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "updateTask(\"1206933955023739\", {\n  name: \"test\",\n  approval_status: \"pending\",\n  assignee: \"12345\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertTask",
    "longname": "upsertTask",
    "name": "upsertTask",
    "kind": "function",
    "scope": "global",
    "description": "Update or create a task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the project",
        "name": "projectGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId and some task data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertTask(\"1201382240880\", {\n  externalId: \"name\",\n  data: {\n    name: \"test\",\n    approval_status: \"pending\",\n    projects: [\"1201382240880\"],\n    assignee: \"12345\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 169,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"azure-storage","adaptor":"@openfn/language-azure-storage","version":"2.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#downloadblob\\\">downloadBlob(blobName, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#getblobproperties\\\">getBlobProperties(blobName, options)</a></dt>\\n<dt>\\n    <a href=\\\"#uploadblob\\\">uploadBlob(blobName, content, uploadOptions, [options])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### downloadBlob\\n\\n<p><code>downloadBlob(blobName, [options]) ⇒ Operation</code></p>\\n\\nDownload a blob from Azure Blob Storage.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| blobName | <code>string</code> |  | Name of the blob to download. |\\n| [options] | <code>Object</code> | <code>{}</code> | Additional options for the download process. |\\n\\n**Example**\\n```js\\ndownloadBlob('mycontainer', 'myblob.txt', { downloadAs: 'string' })\\n```\\n\\n* * *\\n\\n### getBlobProperties\\n\\n<p><code>getBlobProperties(blobName, options) ⇒ Operation</code></p>\\n\\nGet properties of a blob in Azure Blob Storage.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| blobName | <code>string</code> | Name of the blob to get properties for. |\\n| options | <code>string</code> | Additional options for the getBlobProperties process. |\\n\\n**Example**\\n```js\\ngetBlobProperties('mycontainer', 'myblob.txt')\\n```\\n\\n* * *\\n\\n### uploadBlob\\n\\n<p><code>uploadBlob(blobName, content, uploadOptions, [options]) ⇒ Operation</code></p>\\n\\nUpload content to Azure Blob Storage.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| blobName | <code>string</code> |  | Name of the blob to create or replace. |\\n| content | <code>string</code> |  | Content to upload. |\\n| uploadOptions | <code>object</code> |  | See BlockBlobUploadOptions in Azure Blob Storage docs |\\n| [options] | <code>Object</code> | <code>{}</code> | Additional options for the upload process. |\\n| [options.createContainer] | <code>boolean</code> | <code>false</code> | Whether to create the container if it doesn't exist. |\\n| [options.overwrite] | <code>boolean</code> | <code>false</code> | Whether to overwrite an existing blob with the same name. |\\n| [options.containerName] | <code>string</code> |  | Container name. Overrides state.configuration. |\\n\\n**Example**\\n```js\\nuploadBlob('mycontainer', 'myblob.txt', {foo:\\\"bar\\\"}, { blobHTTPHeaders: { blobContentType: 'application/json' } })\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-azure-storage <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Azure\\nStorage APIs. At present, this adaptor only supports the Azure Blob Storage,\\nAPI, but could be expanded for future Azure Storage services (e.g., Files,\\nTables, Queues, etc.).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/azure-storage-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/azure-storage-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### An example showing multiple capabilties of this adaptor\\n\\nAssume you have a simple `state.json` file as follows:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n\\t\\\"foo\\\": \\\"bar\\\",\\n\\t\\\"bif\\\": \\\"baz\\\",\\n\\t\\\"sunday\\\": \\\"monday\\\",\\n\\t\\\"answer\\\": \\\"42\\\"\\n  },\\n  \\\"configuration\\\": {\\n      \\\"accountName\\\": \\\"myaccountname\\\",\\n      \\\"accountKey\\\": \\\"myaccountkey\\\",\\n      \\\"containerName\\\": \\\"mycontainer\\\"\\n  }\\n}\\n```\\n\\nCreate a file `job.js`, as shown below, to run with the OpenFn CLI. This\\nexample uploads the blob with a year/month partitioning scheme, then\\ndownloads the same blob and fetches the blob properties. It would be extremely\\nunusual to perform all of these actions in a single job.\\n\\n```js\\nuploadBlob(\\n  state => {\\n    const date = new Date();\\n    const id = '0e82962a-6ed0-4a88-92c1-51ae785b4126';\\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${id}.json`;\\n  },\\n  state.data,\\n  {\\n    blobHTTPHeaders: { blobContentType: 'application/json' }\\n  },\\n  { createContainer: true, overwrite: true }\\n);\\n\\ndownloadBlob(\\n   dataValue('blobName');\\n);\\n\\ngetBlobProperties(\\n state => {\\n    return state.references[1].blobName;\\n  }\\n);\\n```\\n\\nRun the job as follows:\\n\\n```bash\\nopenfn job -a azure-storage -s state.json -O\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-azure-storage\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 6afba70: Add proper variable declaration (linting)\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\nIntial adaptor release with support for Blob storage.\\n\\n- uploadBlob\\n- downloadBlob\\n- getBlobProperties\\n\"","functions":["downloadBlob","getBlobProperties","uploadBlob"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accountName":{"title":"Account Name","type":"string","description":"Azure Storage Account Name","examples":["examplestorageaccount01"]},"accountKey":{"title":"Account Key","type":"string","description":"Azure Account Key","writeOnly":true,"examples":["zzUx5rA4BZkjPet8ztLTEll7azF65Sez7WxGKsJv5B+rp/dby8ARgYpEVe93xFCQDqGBi3FUlxjP+ASt4uepZg=="]},"containerName":{"title":"Container Name","type":"string","description":"Name of Azure Blob Storage Container","writeOnly":true,"examples":["mycontainername"]}},"type":"object","additionalProperties":true,"required":["accountName","accountKey"]}},
[
  {
    "id": "downloadBlob",
    "longname": "downloadBlob",
    "name": "downloadBlob",
    "kind": "function",
    "scope": "global",
    "description": "Download a blob from Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to download.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Additional options for the download process.",
        "name": "options"
      }
    ],
    "examples": [
      "downloadBlob('mycontainer', 'myblob.txt', { downloadAs: 'string' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 163,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getBlobProperties",
    "longname": "getBlobProperties",
    "name": "getBlobProperties",
    "kind": "function",
    "scope": "global",
    "description": "Get properties of a blob in Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to get properties for.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Additional options for the getBlobProperties process.",
        "name": "options"
      }
    ],
    "examples": [
      "getBlobProperties('mycontainer', 'myblob.txt')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 208,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "uploadBlob",
    "longname": "uploadBlob",
    "name": "uploadBlob",
    "kind": "function",
    "scope": "global",
    "description": "Upload content to Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to create or replace.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Content to upload.",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "See BlockBlobUploadOptions in Azure Blob Storage docs",
        "name": "uploadOptions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Additional options for the upload process.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to create the container if it doesn't exist.",
        "name": "options.createContainer"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to overwrite an existing blob with the same name.",
        "name": "options.overwrite"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Container name. Overrides state.configuration.",
        "name": "options.containerName"
      }
    ],
    "examples": [
      "uploadBlob('mycontainer', 'myblob.txt', {foo:\"bar\"}, { blobHTTPHeaders: { blobContentType: 'application/json' } })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 87,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.3.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createcollectionrequest\\\">createCollectionRequest(data)</a></dt>\\n<dt>\\n    <a href=\\\"#createcontact\\\">createContact(data)</a></dt>\\n<dt>\\n    <a href=\\\"#createpayment\\\">createPayment(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createCollectionRequest\\n\\n<p><code>createCollectionRequest(data) ⇒ Operation</code></p>\\n\\nCreate a collection request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the collection request |\\n\\n**Example**\\n```js\\nexecute(\\n  createCollectionRequest(data)\\n)(state)\\n```\\n\\n* * *\\n\\n### createContact\\n\\n<p><code>createContact(data) ⇒ Operation</code></p>\\n\\nCreate a contact\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the contact |\\n\\n**Example**\\n```js\\nexecute(\\n  createContact(data)\\n)(state)\\n```\\n\\n* * *\\n\\n### createPayment\\n\\n<p><code>createPayment(data) ⇒ Operation</code></p>\\n\\nCreate a payment\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the payment |\\n\\n**Example**\\n```js\\nexecute(\\n  createPayment(data)\\n)(state)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Beyonic\\n\\nLanguage Pack for building expressions and operations for working with the\\n[beyonic API](http://apidocs.beyonic.com/).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/beyonic-configuration-schema/)\\ndefinition.\\n\\n## Payments API\\n\\n#### `createPayment(...)`\\n\\n```js\\ncreatePayment(\\n  fields(\\n    field('phonenumber', '+256773712831'),\\n    field('first_name', 'Gideon'),\\n    field('last_name', 'Zelalem'),\\n    field('amount', 100.2),\\n    field('currency', 'USD'),\\n    field('account', 1),\\n    field('description', 'Long-term contract for Arseal'),\\n    field('payment_type', 'money'),\\n    field('callback_url', 'https://my.website/payments/callback')\\n  )\\n);\\n```\\n\\n## Collection Requests API\\n\\n#### `createCollectionRequest(...)`\\n\\n```js\\ncreateCollectionRequest(\\n  fields(\\n    field('instructions', 'Send me some money, please!'),\\n    field('phonenumber', '+256773712831'),\\n    field('amount', 5.0),\\n    field('currency', 'USD')\\n  )\\n);\\n```\\n\\n## Contacts API\\n\\n#### `createContact(...)`\\n\\n```js\\ncreateContact(\\n  fields(\\n    field('first_name', 'Granit'),\\n    field('last_name', 'Xhaka'),\\n    field('phone_number', '+256773712831'),\\n    field('email', 'granit@arsenal.com')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-beyonic\\n\\n## 0.3.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.9\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.8\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.7\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.6\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.1.5\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- 63080d0: Update common for build\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- 0d358b6: Add ast.json for beyonic\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 06ff25f: Update superagent to v8\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 28ceb1f: Moving language-beyonic to adaptors/packages/beyonic\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["createCollectionRequest","createContact","createPayment"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"API URL","format":"uri","minLength":1,"examples":["https://beyonic.com/api"]},"apiToken":{"title":"API Token","type":"string","description":"API token","minLength":1,"examples":["cdjhiooiSIUJHDYSYUIHASIOHKAANOAJJjsiujhaka"]}},"type":"object","additionalProperties":true,"required":["apiUrl","apiToken"]}},
[
  {
    "id": "createCollectionRequest",
    "longname": "createCollectionRequest",
    "name": "createCollectionRequest",
    "kind": "function",
    "scope": "global",
    "description": "Create a collection request",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the collection request",
        "name": "data"
      }
    ],
    "examples": [
      "execute(\n  createCollectionRequest(data)\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 100,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createContact",
    "longname": "createContact",
    "name": "createContact",
    "kind": "function",
    "scope": "global",
    "description": "Create a contact",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the contact",
        "name": "data"
      }
    ],
    "examples": [
      "execute(\n  createContact(data)\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 71,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "createPayment",
    "longname": "createPayment",
    "name": "createPayment",
    "kind": "function",
    "scope": "global",
    "description": "Create a payment",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the payment",
        "name": "data"
      }
    ],
    "examples": [
      "execute(\n  createPayment(data)\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 42,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"bigquery","adaptor":"@openfn/language-bigquery","version":"3.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#load\\\">load(dirPath, projectId, datasetId, tableId, loadOptions, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### load\\n\\n<p><code>load(dirPath, projectId, datasetId, tableId, loadOptions, callback) ⇒ Operation</code></p>\\n\\nLoad files to BigQuery\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | the path to your local directory |\\n| projectId | <code>string</code> | your bigquery project id |\\n| datasetId | <code>string</code> | your bigquery dataset id |\\n| tableId | <code>string</code> | the name of the table you'd like to load |\\n| loadOptions | <code>object</code> | options to pass to the bigquery.load() API |\\n| callback | <code>function</code> | and optional callback |\\n\\n**Example**\\n```js\\nload(\\n  './tmp/files',\\n  'my-bg-project',\\n  'test01',\\n  'product-codes',\\n  {\\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    createDisposition: 'CREATE_IF_NEEDED',\\n  }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language BigQuery\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### state.json\\n\\nThe configuration key must be a valid GCP credential as JSON.\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"type\\\": \\\"service_account\\\",\\n    \\\"project_id\\\": \\\"some-project\\\",\\n    \\\"private_key_id\\\": \\\"670b9e3c8c366e83aa569dd57cbfc5c575b72e42\\\",\\n    \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nblah\\\\nmoreblah=\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n    \\\"client_email\\\": \\\"bigquery@some-project.iam.gserviceaccount.com\\\",\\n    \\\"client_id\\\": \\\"someid\\\",\\n    \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n    \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n    \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n    \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1 }\\n}\\n```\\n\\n### operations (expression.js)\\n\\n#### load(...)\\n\\nLoad data to a table in bigquery from a CSV. See full\\n[options here](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad).\\n\\n```js\\nload(\\n  '/home/taylor/Desktop/type-C_r-ALL_ps-201012_freq-M_px-HS_pub-20200731_fmt-csv_ex-20200818.csv',\\n  'awesome-solutions-project', // project\\n  'test01', // dataset\\n  'mytable', // table\\n  {\\n    schema:\\n      'classification:STRING,year:STRING,period:STRING,period_desc:STRING,aggregate_level:STRING,is_leaf_code:STRING,trade_flow_code:STRING,trade_flow:STRING,reporter_code:STRING,reporter:STRING,reporter_iso:STRING,partner_code:STRING,partner:STRING,partner_iso:STRING,commodity_code:STRING,commodity:STRING,qty_unit_code:STRING,qty_unit:STRING,qty:INTEGER,netweight_kg:INTEGER,trade_value:INTEGER,flag:STRING',\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    // createDisposition: 'CREATE_IF_NEEDED',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n  } // loadOptions\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-bigquery\\n\\n## 3.0.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.0.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.0.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 2.0.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 2.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 0b6f20b: use parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.5\\n\\n### Patch Changes\\n\\n- 5895eb9: update dependencies\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 57f3513: Fix exports in index.js\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- e4c6114: bigquery migration and build\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["load"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","additionalProperties":true,"properties":{"type":{"title":"Type","type":"string","description":"","examples":["service_acconut"]},"project_id":{"title":"Prokect id","type":"string","description":"Project id","examples":["some-project-id"]},"private_key_id":{"title":"Private Key Id","type":"string","description":"Private key id","examples":["670b9e3c8c366e83aa569dd57cbfc5c575b72e42"]},"private_key":{"title":"Private Key","type":"string","description":"Private key","examples":["-----BEGIN PRIVATE KEY-----\nblah\nmoreblah=\n-----END PRIVATE KEY-----\n"]},"client_email":{"title":"Client Email","type":"string","description":"Client email","examples":["bigquery@some-project.iam.gserviceaccount.com"]},"client_id":{"title":"Client Id","type":"string","description":"Client id","examples":["someid"]},"auth_uri":{"title":"Auth Uri","type":"string","description":"Auth Uri","examples":["https://accounts.google.com/o/oauth2/auth"]},"token_uri":{"title":"Token Uri","type":"string","description":"Token Uri","examples":["https://oauth2.googleapis.com/token"]},"auth_provider_x509_cert_url":{"title":"Auth Provider x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/oauth2/v1/certs"]},"client_x509_cert_url":{"title":"Client x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com"]}},"required":["type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url"]}},
[
  {
    "id": "load",
    "longname": "load",
    "name": "load",
    "kind": "function",
    "scope": "global",
    "description": "Load files to BigQuery",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the path to your local directory",
        "name": "dirPath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "your bigquery project id",
        "name": "projectId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "your bigquery dataset id",
        "name": "datasetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the name of the table you'd like to load",
        "name": "tableId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to pass to the bigquery.load() API",
        "name": "loadOptions"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "and optional callback",
        "name": "callback"
      }
    ],
    "examples": [
      "load(\n  './tmp/files',\n  'my-bg-project',\n  'test01',\n  'product-codes',\n  {\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\n    writeDisposition: 'WRITE_APPEND',\n    skipLeadingRows: 1,\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\n    createDisposition: 'CREATE_IF_NEEDED',\n  }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 55,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/bigquery/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"cartodb","adaptor":"@openfn/language-cartodb","version":"0.4.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addrow\\\">addRow(table, rowData)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(sqlQuery)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addRow\\n\\n<p><code>addRow(table, rowData) ⇒ Operation</code></p>\\n\\nAdd rows to a table\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>String</code> | Table name |\\n| rowData | <code>object</code> | data to add in the row |\\n\\n**Example**\\n```js\\nexecute(\\n  addRow(table, rowData)\\n)\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(sqlQuery) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>object</code> | Payload data for the message |\\n\\n**Example**\\n```js\\nexecute(\\n  sql(sqlQuery)\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language cartodb\\n\\nLanguage Pack for sending messages using the\\n[cartodb API](http://docs.cartodb.com/cartodb-platform/sql-api/).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/cartodb-configuration-schema/)\\ndefinition.\\n\\n## Examples\\n\\n```js\\naddRow(\\n  'your_table',\\n  fields(\\n    field('name', 'taylor'),\\n    field('lat', dataValue('lat')),\\n    field('long', dataValue('long')),\\n    field('mookie', dataValue('form.blaylock')),\\n    field('description', dataValue('type_description')),\\n    field('date', dataValue('SubmissionDate'))\\n  )\\n);\\n```\\n\\n```js\\nsql(function (state) {\\n  return (\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-cartodb\\n\\n## 0.4.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.4.0\\n\\nRepublish to npmjs.com. No changes.\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- Fix example code\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 792d495: Migrate CartoDB\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\"","functions":["addRow","sql"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"account":{"title":"Account","type":"string","description":"CartoDB account name","minLength":1,"examples":["openfn"]},"apiKey":{"title":"API Key","type":"string","description":"CartoDB API key","minLength":1,"examples":["longsecretkey"]}},"type":"object","additionalProperties":true,"required":["account","apiKey"]}},
[
  {
    "id": "addRow",
    "longname": "addRow",
    "name": "addRow",
    "kind": "function",
    "scope": "global",
    "description": "Add rows to a table",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Table name",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to add in the row",
        "name": "rowData"
      }
    ],
    "examples": [
      "execute(\n  addRow(table, rowData)\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 75,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cartodb/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "sqlQuery"
      }
    ],
    "examples": [
      "execute(\n  sql(sqlQuery)\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cartodb/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"cht","adaptor":"@openfn/language-cht","version":"1.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, data, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a GET request against the base URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get a list of contacts\\n```js\\nget(\\\"/api/v2/export/contacts\\\");\\n```\\n**Example:** Filter contacts given a name\\n```js\\nget(\\\"/api/v2/export/contacts\\\", {\\n  query: {\\\"filters\\\": {\\n    \\\"search\\\": \\\"jim\\\"\\n  }}\\n});\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request against the base url\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Create a new person\\n```js\\npost(\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a PUT request against the base url\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update settings\\n```js\\nput(\\\"/api/v1/settings\\\",{query:{overwrite:true}});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a general HTTP request to CHT\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"POST\\\",\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-cht <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the cht API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/cht-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/cht-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost(\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-cht\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.0\\n\\nInitial release for cht adaptor with `get`, `post`, and `put`\\n\"","functions":["post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Community Health Kit base URL","format":"uri","minLength":1,"examples":["https://demo-cht.dev.medicmobile.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["somenamehere"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
[
  {
    "id": "CHTHttpState",
    "longname": "CHTHttpState",
    "name": "CHTHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the CHT HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "order": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request against the base URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a list of contacts</caption>\nget(\"/api/v2/export/contacts\");",
      "<caption>Filter contacts given a name</caption>\nget(\"/api/v2/export/contacts\", {\n  query: {\"filters\": {\n    \"search\": \"jim\"\n  }}\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 43,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request against the base url",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new person</caption>\npost(\"/api/v1/people\", {  \n  \"name\": \"Hannah\",\n  \"phone\": \"+254712345678\",\n  \"type\": \"contact\",\n  \"contact_type\": \"patient\", });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 64,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request against the base url",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update settings</caption>\nput(\"/api/v1/settings\",{query:{overwrite:true}});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 80,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request to CHT",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"POST\",\"/api/v1/people\", {  \n  \"name\": \"Hannah\",\n  \"phone\": \"+254712345678\",\n  \"type\": \"contact\",\n  \"contact_type\": \"patient\", });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 102,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "order": 1
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"collections","adaptor":"@openfn/language-collections","version":"0.6.0","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#collections_each\\\">collections.each(name, query, callback)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_get\\\">collections.get(name, query)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_remove\\\">collections.remove(name, query)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_set\\\">collections.set(keygen, values)</a>\\n</dt>\\n</dl>\\n\\n\\n\\n## collections\\n\\nThese functions belong to the collections namespace.\\n### collections.each {#collections_each}\\n\\n<p><code>each(name, query, callback)</code></p>\\n\\nIterate over all values in a collection which match the provided query.\\neach() maintains a low memory footprint by streaming items individually.\\nYou can pass a string key-pattern as a query, or pass a query object.\\nThe callback function will be invoked for each value with three parameters:\\n`state`, `value` and `key`.\\nChanging the page size does not affect the callback function (only one item is\\never passed at a time).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to remove from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to remove, or a query object |\\n| callback | <code>function</code> | A callback invoked for each item `(state,  value, key) => void` |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data.cursor | if values are still left on the server, a cursor string will be written to state.data |\\n**Example:** Iterate over a range of values with wildcards\\n```js\\ncollections.each('my-collection', 'record-2024*-appointment-*', (state, value, key) => {\\n  state.cumulativeCost += value.cost;\\n})\\n```\\n**Example:** Iterate over a range of values with date filters\\n```js\\ncollections.each('my-collection', { createdBefore: new Date().toString() }, (state, value, key) => {\\n  state.cumulativeCost += value.cost;\\n})\\n```\\n\\n* * *\\n\\n\\n### collections.get {#collections_get}\\n\\n<p><code>get(name, query)</code></p>\\n\\nFetch one or more values from a collection.\\nFor large datasets, we recommend using each(), which streams data.\\nYou can pass a specific key as a string to only fetch one item, or pass a query\\nwith a key-pattern or a date filter.\\nIf not all matching values are returned, the cursor position is written to state.data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to fetch from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to fetch, or a query object |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the downloaded values as an array unless a specific key was specified, in which case state.data is the value |\\n**Example:** Get a specific value from a collection\\n```js\\ncollections.get('my-collection', '556e0a62')\\n```\\n**Example:** Get a range of values from a collection with a key pattern\\n```js\\ncollections.get('my-collection', '2024*')\\n```\\n**Example:** Get all values created since the end of January 2024\\n```js\\ncollections.get('my-collection', { createdAfter: '202401')\\n```\\n\\n* * *\\n\\n\\n### collections.remove {#collections_remove}\\n\\n<p><code>remove(name, query)</code></p>\\n\\nRemove one or more values from a collection.\\nYou can pass a specific key as a string to only fetch one item, or pass a query\\nwith a key-pattern or a date filter.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to remove from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to remove, or a query object |\\n\\n**Example:** Remove a specific value from a collection\\n```js\\ncollections.remove('my-collection', '556e0a62')\\n```\\n**Example:** Remove a range of values from a collection with a key pattern\\n```js\\ncollections.remove('my-collection', '2024*')\\n```\\n**Example:** Remove all values created since the end of January 2024\\n```js\\ncollections.remove('my-collection', { createdAfter: '202401')\\n```\\n\\n* * *\\n\\n\\n### collections.set {#collections_set}\\n\\n<p><code>set(keygen, values)</code></p>\\n\\nAdds one or more values to a collection. If a key already exists, its value will\\nbe replaced by the new value.\\nYou can pass a string key and a single value, or a key generator function and an array of values.\\nThe function will be called for each value, passing each value as the first argument, and should return\\na string key.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| keygen | a function which generates a key for each value: (value, index) => key. Pass a string to set a static key for a single item. |\\n| values | an array of values to set, or a single value. |\\n\\n**Example:** Set a number of values using each value's id property as a key\\n```js\\ncollections.set('my-collection', (item) => item.id, $.data)\\n```\\n**Example:** Set a number of values, generating an id from a string template\\n```js\\ncollections.set('my-collection', (item) => `${item.category}-${Date.now()}`, $.data)\\n```\\n**Example:** Set a single value with a static key\\n```js\\ncollections.set('my-collection', 'city-codes', { NY: 'New York', LDN: 'London' }})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### QueryOptions\\n\\nQuery options. All dates should be parseable as ISO 8601 strings, see https://simple.wikipedia.org/wiki/ISO_8601\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | key or key pattern to match against. Patterns support wildcards,  eg `2024-01*` |\\n| createdBefore | <code>string</code> | matches values that were created before the start of the provided date |\\n| createdAfter | <code>string</code> | matches values that were created after the end of the provided date |\\n| limit | <code>number</code> | limit the maximum amount of results. If Infinity or unset, all items will be fetched. Default: Infnity. |\\n| pageSize | <code>number</code> | specify the number of values downloaded per page (or chunk). Default 1000. |\\n| cursor | <code>string</code> | set the cursor position to start searching from a specific index. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-collections <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn **_adaptor_** for using the OpenFn Collections API.\\n\\nThe Collections adaptor is not designed to be used alone, but in conjunction\\nwith other adaptors. As a result, it's a bit different to other adaptors.\\n\\nThe Collections API is a key/value store, which can act as a high performance\\ncache, buffer or storage solution. All values are strings (but can contain\\nJSON).\\n\\n## Usage\\n\\nAll collections functions are exposed through the `collections` namespace:\\n\\nTo iterate over all values with `2024` somewhere in the key\\n\\n```\\ncollections.each($.collectionName, '*2024*', (state, value, key) => {\\n  console.log(value)\\n})\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/collections-docs)\\nfor full technical documentation.\\n\\n## CLI\\n\\nCollections can be used from the CLI since v1.8.7, but you will need to:\\n\\n- Set the job to use two adaptors\\n- Pass a Personal Access Token\\n- Set the Collections endpoint\\n\\nYou can get a Personal Access Token from any v2 deployment.\\n\\n### For a single job\\n\\nYou can pass multiple adaptors from the CLI:\\n\\n```\\nopenfn job.js -a collections -a http -s state.json\\n```\\n\\nYou'll need to set configuration on the state.json:\\n\\n```\\n{\\n  \\\"configuration\\\": {\\n    \\\"collections_endpoint\\\": \\\"http://localhost:4000/collections\\\",\\n    \\\"collections_token\\\": \\\"...paste the token from the app...\\\"\\n  }\\n}\\n\\n```\\n\\n### For a workflow\\n\\nIf you're using `workflow.json`, set the token and endpoint on\\n`workflow.credentials`:\\n\\n```json\\n{\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [ ... ],\\n    \\\"credentials\\\": {\\n      \\\"collections_endpoint\\\": \\\"http://localhost:4000/collections\\\",\\n      \\\"collections_token\\\": \\\"...paste the token from the app...\\\"\\n    }\\n  }\\n}\\n```\\n\\nAnd make sure that any steps which use collections have multiple adaptors set:\\n\\n```json\\n{\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [\\n      {\\n        \\\"expression\\\": \\\"...\\\",\\n        \\\"adaptors\\\": [\\\"@openfn/language-http\\\", \\\"@openfn/language-collections\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\nNote that steps cannot generally use multiple adaptors. Collections are special\\nin this regard.\\n\\n## Deployments\\n\\nCollections must be configured for your platform instance (v2 only).\\n\\nSet the `WORKER_COLLECTIONS_URL` env var on the Worker instance to enable\\ncollections for that worker. The URL should point to\\n`https://<lightning>/collections`\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-collections\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- Various stability fixes\\n\\n### Patch Changes\\n\\n- 39fb894: Allow a single key to be set to an array value\\n- ad9fca2: Throw if insufficient arguments passed to set()\\n- 29a6ce0: Throw a nice error if the collection does not exist\\n- 26aa57c: Fix an issue where requesting a single key that does not exist throws\\n  an error, as in:\\n\\n  ```\\n  collections.get('my-collection', 'some-item')\\n  ```\\n\\n  Note that this requires Lightning v2.10.5+\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Fix an issue where sometimes the JSON stream would skip tokens and result in a\\n  smaller payload being returned\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- set() will now upsert items in batches of 1000\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- b73b063: - Added pagination support\\n  - Removed `updated_*` time filters\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- Fixed support for delete\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 1e472ed: Update new GET request structure Fix streaming API\\n\\n### Patch Changes\\n\\n- 32e5a03: Fix an issue where the query object isn't getting sent to the server\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f4deb81: Updates to latest spec\\n\\n## 0.1.0\\n\\nInitial experiemntal release, with `collections.get`, `collections.each`,\\n`collections.remove` and `collections.set`\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"collections_endpoint":{"title":"Collections api endpoint","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://app.openfn.org)","format":"uri","minLength":1,"examples":["https://app.openfn.org"],"default":"https://app.openfn.org"},"collections_token":{"title":"Access Token","type":"string","description":"Access token for the collection","examples":["x.y.z"]}},"type":"object","additionalProperties":true,"required":["collections_endpoint","collections_token"]}},
[
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "collections",
    "description": "Iterate over all values in a collection which match the provided query.\neach() maintains a low memory footprint by streaming items individually.\nYou can pass a string key-pattern as a query, or pass a query object.\nThe callback function will be invoked for each value with three parameters:\n`state`, `value` and `key`.\nChanging the page size does not affect the callback function (only one item is\never passed at a time).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to remove from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to remove, or a query object",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A callback invoked for each item `(state,  value, key) => void`",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Iterate over a range of values with wildcards</caption>\ncollections.each('my-collection', 'record-2024*-appointment-*', (state, value, key) => {\n  state.cumulativeCost += value.cost;\n})",
      "<caption>Iterate over a range of values with date filters</caption>\ncollections.each('my-collection', { createdBefore: new Date().toString() }, (state, value, key) => {\n  state.cumulativeCost += value.cost;\n})"
    ],
    "access": "public",
    "meta": {
      "lineno": 284,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "state": [
      {
        "name": "data.cursor",
        "description": "if values are still left on the server, a cursor string will be written to state.data",
        "type": null
      }
    ],
    "order": 5,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "collections",
    "description": "Fetch one or more values from a collection.\nFor large datasets, we recommend using each(), which streams data.\nYou can pass a specific key as a string to only fetch one item, or pass a query\nwith a key-pattern or a date filter.\nIf not all matching values are returned, the cursor position is written to state.data",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to fetch from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to fetch, or a query object",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Get a specific value from a collection</caption>\ncollections.get('my-collection', '556e0a62')",
      "<caption>Get a range of values from a collection with a key pattern</caption>\ncollections.get('my-collection', '2024*')",
      "<caption>Get all values created since the end of January 2024</caption>\ncollections.get('my-collection', { createdAfter: '202401')"
    ],
    "access": "public",
    "meta": {
      "lineno": 58,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the downloaded values as an array unless a specific key was specified, in which case state.data is the value",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "QueryOptions",
    "longname": "QueryOptions",
    "name": "QueryOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Query options. All dates should be parseable as ISO 8601 strings, see https://simple.wikipedia.org/wiki/ISO_8601",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "key or key pattern to match against. Patterns support wildcards,  eg `2024-01*`",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "matches values that were created before the start of the provided date",
        "name": "createdBefore"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "matches values that were created after the end of the provided date",
        "name": "createdAfter"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "limit the maximum amount of results. If Infinity or unset, all items will be fetched. Default: Infnity.",
        "name": "limit"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "specify the number of values downloaded per page (or chunk). Default 1000.",
        "name": "pageSize"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor position to start searching from a specific index.",
        "name": "cursor"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 28,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "remove",
    "longname": "remove",
    "name": "remove",
    "kind": "function",
    "scope": "collections",
    "description": "Remove one or more values from a collection.\nYou can pass a specific key as a string to only fetch one item, or pass a query\nwith a key-pattern or a date filter.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to remove from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to remove, or a query object",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Remove a specific value from a collection</caption>\ncollections.remove('my-collection', '556e0a62')",
      "<caption>Remove a range of values from a collection with a key pattern</caption>\ncollections.remove('my-collection', '2024*')",
      "<caption>Remove all values created since the end of January 2024</caption>\ncollections.remove('my-collection', { createdAfter: '202401')"
    ],
    "access": "public",
    "meta": {
      "lineno": 233,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "set",
    "longname": "set",
    "name": "set",
    "kind": "function",
    "scope": "collections",
    "description": "Adds one or more values to a collection. If a key already exists, its value will\nbe replaced by the new value.\nYou can pass a string key and a single value, or a key generator function and an array of values.\nThe function will be called for each value, passing each value as the first argument, and should return\na string key.",
    "params": [
      {
        "description": "a function which generates a key for each value: (value, index) => key. Pass a string to set a static key for a single item.",
        "name": "keygen"
      },
      {
        "description": "an array of values to set, or a single value.",
        "name": "values"
      }
    ],
    "examples": [
      "<caption>Set a number of values using each value's id property as a key</caption>\ncollections.set('my-collection', (item) => item.id, $.data)",
      "<caption>Set a number of values, generating an id from a string template</caption>\ncollections.set('my-collection', (item) => `${item.category}-${Date.now()}`, $.data)",
      "<caption>Set a single value with a static key</caption>\ncollections.set('my-collection', 'city-codes', { NY: 'New York', LDN: 'London' }})"
    ],
    "access": "public",
    "meta": {
      "lineno": 138,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 3,
    "level": 0
  }
],
{"name":"commcare","adaptor":"@openfn/language-commcare","version":"3.2.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#bulk\\\">bulk(type, data, params)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchreportdata\\\">fetchReportData(reportId, params, postUrl)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, [params], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, [params], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#submit\\\">submit(data)</a></dt>\\n<dt>\\n    <a href=\\\"#submitxls\\\">submitXls(data, params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### bulk\\n\\n<p><code>bulk(type, data, params) ⇒ Operation</code></p>\\n\\nBulk upload data to CommCare for case-data or lookup-table. Accepts an array of objects, converts them into\\nan XLS representation, and uploads.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>&#x27;case-data&#x27;</code> \\\\| <code>&#x27;lookup-table&#x27;</code> | The type of data being processed. |\\n| data | <code>Object</code> \\\\| <code>Array.&lt;Object&gt;</code> | An object or an array of objects to upload. - If type is `'case-data'`, this should be an object array of objects. - If type is `'lookup-table'`, this should be an object. |\\n| params | <code>Object</code> | Input parameters, see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data) for case-data and [Commcare Docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946023/Bulk+upload+Lookup+Tables) for lookup-table. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Upload a single row of a case-data resource\\n```js\\nbulk('case-data', [{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n**Example:** Upload a single row of a lookup-table resource\\n```js\\nbulk(\\n  'lookup-table',\\n  {\\n    types: [\\n      {\\n        'DELETE(Y/N)': 'N',\\n        table_id: 'fruit',\\n        'is_global?': 'yes',\\n        'field 1': 'type',\\n        'field 2': 'name',\\n      },\\n    ],\\n    fruit: [\\n      {\\n        UID: '',\\n        'DELETE(Y/N)': 'N',\\n        'field:type': 'citrus',\\n        'field:name': 'Orange',\\n      },\\n    ],\\n  },\\n  { replace: false }\\n);\\n```\\n\\n* * *\\n\\n### fetchReportData\\n\\n<p><code>fetchReportData(reportId, params, postUrl) ⇒ Operation</code></p>\\n\\nMake a GET request to CommCare's Reports API\\nand POST the response somewhere else.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reportId | <code>String</code> | API name of the report. |\\n| params | <code>Object</code> | Input parameters for the request, see [Commcare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957341/Download+Report+Data). |\\n| postUrl | <code>String</code> | URL to which the response object will be posted. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get 10 records from a report and post them to example.com. Equivalent to `<baseUrl>/configurablereportdata/abcde?limit=10`\\n```js\\nfetchReportData(\\n  \\\"abcde\\\",\\n  { limit: 10 },\\n  \\\"https://www.example.com/api/\\\"\\n)\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, [params], [callback]) ⇒ Operation</code></p>\\n\\nMake a GET request to CommCare. Use this to fetch resources directly from Commcare REST API.\\nYou can pass Commcare query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\nThe response body will be returned to `state.data` as JSON.\\nPaginated responses will be fully downloaded and returned as a single array, _unless_ an `offset` is passed.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| [params] | <code>Object</code> | Input parameters for the request. These vary by endpoint,  see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957366/Data+APIs). |\\n| [callback] | <code>function</code> | Optional callback function. Invoked once per page of data retrieved. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource by Id. Equivalent to GET `<baseUrl>/case/12345`\\n```js\\nget(\\\"/case/12345\\\")\\n```\\n**Example:** Get a resource with exactly 20 items. Equivalent to `<baseUrl>/case?offset=0&limit=20`\\n```js\\nget(\\\"/case\\\", { offset:0, limit: 20 })\\n```\\n**Example:** Get all items in a resource, and add them to state. Equivalent to `<baseUrl>/case`\\n```js\\nget(\\\"/case\\\", {}, (state) => {\\n  state.cases.push(...state.data) // adds all cases to the cases array\\n  return state;\\n})\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, [params], [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to CommCare. Use this to send resources directly to Commcare REST API.\\nYou can pass Commcare body data as a JSON object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object or JSON to create a resource |\\n| [params] | <code>Object</code> | Optional request params |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Create a user resource.Equivalent to `<baseUrl>/user`\\n```js\\npost(\\\"/user\\\", { \\\"username\\\":\\\"test\\\", \\\"password\\\":\\\"somepassword\\\" })\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the Commcare server. Use this to make any request to Commcare REST API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the body |\\n| options | <code>RequestOptions</code> | Optional request params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource. Equivalent to `<baseUrl>/a/asri/api/v0.5/case`\\n```js\\nrequest(\\\"GET\\\", \\\"/a/asri/api/v0.5/case\\\");\\n```\\n\\n* * *\\n\\n### submit\\n\\n<p><code>submit(data) ⇒ Operation</code></p>\\n\\nSubmit forms to CommCare. Use this to send forms directly to Commcare REST API. Accepts an array of JSON\\nobjects, converts them into XML, and submits to CommCare as an x-form.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>Object</code> | The form as a JSON object |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Submit a form resource.\\n```js\\nsubmit(\\n fields(\\n   field('@', state => ({\\n     xmlns: `http://openrosa.org/formdesigner/${state.formId}`,\\n   })),\\n   field('question1', state => state.data.answer1),\\n   field('question2', state => state.data.answer2)\\n )\\n);\\n```\\n\\n* * *\\n\\n### submitXls\\n\\n<p><code>submitXls(data, params) ⇒ Operation</code></p>\\n\\nBulk upload data to CommCare. Use this to send multiple items for a single resource at once to Commcare. It accepts an array of objects, converts them into\\nan XLS representation, and uploads.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>array</code> | Array of objects to upload |\\n| params | <code>Object</code> | Input parameters, see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Upload a single row of data for a resource.\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language CommCare\\n\\nLanguage Pack for interacting with the CommCare API.\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Download+Report+Data\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Submission+API\\n\\nhttps://bitbucket.org/javarosa/javarosa/wiki/FormSubmissionAPI\\n\\nAccepted X-Form Spec from Dimagi: http://dimagi.github.io/xform-spec Accepted\\nX-Form Spec for Cases from Dimagi:\\nhttps://github.com/dimagi/commcare/wiki/casexml20\\n\\n## Documentation\\n\\n## Configuration\\n\\nView all the required and optional properties for `state.configuration` in the official [configuration-schema](https://docs.openfn.org/adaptors/packages/commcare-configuration-schema/) definition.\\n\\n- The \\\"appId\\\" is the UUID which designates your commcare project as different from\\neveryone elses. It can be found in the URL of your application when you first\\nenter it from the project screen. I.e., the last part of this url:\\n`https://www.commcarehq.org/a/YOUR_PROJECT/apps/view/YOUR_APP_ID/`\\n\\n- Note that the username is your full email address.\\n\\n## `fetchReportData` to pull aggregate data from CommCare\\n\\nIt takes 3 arguments: reportId, params, and postUrl.\\n\\n```js\\nfetchReportData(\\n  'reportId',\\n  { limit: 10, offset: 2, state: 'Vermont' },\\n  'http://www.openfn.org/inbox/secret-uuid'\\n);\\n```\\n\\nsimple body target:\\n\\n```xml\\n<data xmlns=\\\"http://openrosa.org/formdesigner/39A2CA97-2EB8-4A9C-A0D1-6AA666666A66\\\">\\n    <firstname>Something</firstname>\\n    <lastname>Else</lastname>\\n    <age>29</age>\\n</data>\\n```\\n\\ncomplex body target:\\n\\n```xml\\n<?xml version='1.0' ?>\\n<data uiVersion=\\\"1\\\" version=\\\"17\\\" name=\\\"New Form\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\" xmlns=\\\"http://openrosa.org/formdesigner/1DFD8610-91E3-4409-BF8B-02D3B4FF3530\\\">\\n    <foo>bar</foo>\\n    <n0:case case_id=\\\"ddb8e2b3-7ce0-43e4-ad45-d7a2eebe9169\\\" user_id=\\\"user-xxx-eve\\\" date_modified=\\\"2013-04-19T16:53:02.799-04\\\" xmlns:n0=\\\"http://commcarehq.org/case/transaction/v2\\\">\\n        <n0:create>\\n            <n0:case_name>bar</n0:case_name>\\n            <n0:owner_id>user-xxx-eve</n0:owner_id>\\n            <n0:case_type>member</n0:case_type>\\n        </n0:create>\\n    </n0:case>\\n    <n1:meta xmlns:n1=\\\"http://openrosa.org/jr/xforms\\\">\\n        <n1:deviceID>A00000245706EE</n1:deviceID>\\n        <n1:timeStart>2013-04-19T16:52:41.000-04</n1:timeStart>\\n        <n1:timeEnd>2013-04-19T16:53:02.799-04</n1:timeEnd>\\n        <n1:username>eve</n1:username>\\n        <n1:userID>user-xxx-eve</n1:userID>\\n        <n1:instanceID>b58df19c-efd5-4ecf-9581-65dda8b8787c</n1:instanceID>\\n        <n2:appVersion xmlns:n2=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version \\\"2.4.1\\\"(10083). App v19. CommCare Version 2.4. Build 10083, built on: March-12-2013</n2:appVersion>\\n    </n1:meta>\\n</data>\\n```\\n\\n## Submitting data to CommCare HQ\\n\\n### Submit an XLS file\\n\\nThis function bulk submit a JSON object as xls file to CommCare HQ\\n\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n### submit\\n\\nHere we're just building the most basic JSON object, that will be converted to\\nan XML object and posted as the <data /> element.\\n\\n```js\\nsubmit(\\n  fields(\\n    field('@', function (state) {\\n      return {\\n        xmlns:\\n          'http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9',\\n      };\\n    }),\\n    field('paitent_namentosh', dataValue('first_name')),\\n    field('question2', 'Some answer here.'),\\n    field('question3', 'HKS'),\\n    field('question4', 'item1'),\\n    field('question5', 69855),\\n    field('question6', 12)\\n  )\\n);\\n```\\n\\nAn open rosa form submission body should look like this:\\n\\n```xml\\n<?xml version=\\\"1.0\\\" ?>\\n<data name=\\\"Patient Registration\\\" uiVersion=\\\"1\\\" version=\\\"9\\\" xmlns=\\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\">\\n  <paitent_namentosh>Taylor</paitent_namentosh>\\n  <question2>Moruki</question2>\\n  <question3>Hks</question3>\\n  <question4>item1</question4>\\n  <question5>69855</question5>\\n  <question6>12</question6>\\n  <n0:meta xmlns:n0=\\\"http://openrosa.org/jr/xforms\\\">\\n    <n0:deviceID>358239055789384</n0:deviceID>\\n    <n0:timeStart>2015-08-21T16:21:59.807+02</n0:timeStart>\\n    <n0:timeEnd>2015-08-21T16:22:15.987+02</n0:timeEnd>\\n    <n0:username>openfn</n0:username>\\n    <n0:userID>5fe615b3af2834cb5dca59f7466d6174</n0:userID>\\n    <n0:instanceID>195e79eb-d823-46fe-9e4f-59b8327d5db2</n0:instanceID>\\n    <n1:appVersion xmlns:n1=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version &quot;2.22.0&quot;(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015</n1:appVersion>\\n  </n0:meta>\\n</data>\\n```\\n\\nSo the JSON emitted by your expression should look like this:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n    \\\"name\\\": \\\"Patient Registration\\\",\\n    \\\"uiVersion\\\": \\\"1\\\",\\n    \\\"version\\\": \\\"9\\\",\\n    \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\",\\n    \\\"xmlns:jrm\\\": \\\"http://dev.commcarehq.org/jr/xforms\\\",\\n    \\\"paitent_namentosh\\\": \\\"Taylor\\\",\\n    \\\"question2\\\": \\\" Moruki\\\",\\n    \\\"question3\\\": \\\"Hks\\\",\\n    \\\"question4\\\": \\\"item1\\\",\\n    \\\"question5\\\": \\\"69855\\\",\\n    \\\"question6\\\": \\\"12\\\",\\n    \\\"n0:meta\\\": {\\n      \\\"xmlns:n0\\\": \\\"http://openrosa.org/jr/xforms\\\",\\n      \\\"n0:deviceID\\\": \\\"358239055789384\\\",\\n      \\\"n0:timeStart\\\": \\\"2015-08-21T16:21:59.807+02\\\",\\n      \\\"n0:timeEnd\\\": \\\"2015-08-21T16:22:15.987+02\\\",\\n      \\\"n0:username\\\": \\\"openfn\\\",\\n      \\\"n0:userID\\\": \\\"5fe615b3af2834cb5dca59f7466d6174\\\",\\n      \\\"n0:instanceID\\\": \\\"195e79eb-d823-46fe-9e4f-59b8327d5db2\\\",\\n      \\\"n1:appVersion\\\": {\\n        \\\"xmlns:n1\\\": \\\"http://commcarehq.org/xforms\\\",\\n        \\\"$t\\\": \\\"CommCare ODK, version \\\\\\\"2.22.0\\\\\\\"(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-commcare\\n\\n## 3.2.5\\n\\n### Patch Changes\\n\\n- 2fc7d82: Update example docs and configuration\\n\\n## 3.2.4\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.2.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- 8d85bb4: Implement resolved body and resolved params in bulk\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- c800948: Implement a generic request funciton for generic HTTP calls\\n- cff886e: Implement bulk function for lookup-table and case-data bulk uploads\\n\\n## 3.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- Add `cursor()` function from common\\n- Add `dateFns` helper from common\\n\\n### Patch Changes\\n\\n- 90d74c7: Revise documentation\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.3.0\\n\\n### Minor Changes\\n\\n- ac4b4a0: `get()` will now automatically paginate responses (unless an offset\\n  is passed)\\n\\n## 2.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 0719de00: Implement better error handling and make post a public function\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.0.0\\n\\nRebase the commcare adaptor on the new HTTP helpers.\\n\\n### Major Changes\\n\\n- Remove superagents and language-http dependencies\\n- configuration schema: change applicationName to domain to match commcare's\\n  configuration.\\n- remove the `clientPost` function\\n\\n### Minor Changes\\n\\n- Implemented a get function for all get requests in commcare\\n- Create a generic post function that allows for posting JSON data\\n- Standardize auth to use either basic or APIKey across all operations\\n- configuration schema: add apiKey\\n- configuration schema: demote username and appId are optional\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.6.14\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.6.13\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.6.12\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.6.11\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.6.10\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n  - @openfn/language-http@5.0.4\\n\\n## 1.6.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n  - @openfn/language-http@5.0.3\\n\\n## 1.6.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n  - @openfn/language-http@5.0.2\\n\\n## 1.6.7\\n\\n### Patch Changes\\n\\n- 52c02c8: update xlsx package\\n\\n## 1.6.6\\n\\n### Patch Changes\\n\\n- 8205673: update superagent\\n\\n## 1.6.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n  - @openfn/language-http@5.0.1\\n\\n## 1.6.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [0b6f20b]\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-http@5.0.0\\n  - @openfn/language-common@1.10.1\\n\\n## 1.6.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n  - @openfn/language-http@4.3.3\\n\\n## 1.6.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n  - @openfn/language-http@4.3.2\\n\\n## 1.6.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n  - @openfn/language-http@4.3.1\\n\\n## 1.6.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n  - @openfn/language-http@4.3.0\\n\\n## 1.5.6\\n\\n### Patch Changes\\n\\n- e0406fa: update dependencies\\n\\n## 1.5.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n  - @openfn/language-http@4.2.8\\n\\n## 1.5.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n- Updated dependencies [14f481e]\\n  - @openfn/language-common@1.7.6\\n  - @openfn/language-http@4.2.7\\n\\n## 1.5.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n- Updated dependencies [f2aed32]\\n  - @openfn/language-http@4.2.5\\n\\n## 1.5.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 57f3513: Fix exports in index.js\\n- Updated dependencies [6d8de03]\\n  - @openfn/language-http@4.2.4\\n\\n## 1.5.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n  - @openfn/language-http@4.2.3\\n\\n## 1.5.0\\n\\n### Minor Changes\\n\\n- 5c050ed: Migrate CommCare\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 94076b9: update dependency xlsx to ^0.18.0\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [9a2755e]\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-http@4.2.2\\n  - @openfn/language-common@1.7.4\\n\"","functions":["bulk","fetchReportData","get","post","request","submit","submitXls"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The CommCare host url","format":"uri","minLength":1,"examples":["https://www.commcarehq.org"]},"domain":{"title":"Domain","type":"string","description":"The CommCare domain name","minLength":1,"examples":["some-proof-of-concept"]},"apiKey":{"title":"API Key","type":"string","description":"The CommCare API Key","minLength":1,"examples":["the-long-uuid-provided-by-commcare-that-authenticates-requests"]},"appId":{"title":"App ID","type":"string","description":"Your CommCare project UUID","minLength":1,"examples":["the-long-uuid-in-the-url-that-designates-a-unique-commcare-project"]},"username":{"title":"Username","type":"string","description":"The username to log in to CommCare","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to CommCare","writeOnly":true,"minLength":1,"examples":["superscretepassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","domain","appId"]}},
[
  {
    "id": "bulk",
    "longname": "bulk",
    "name": "bulk",
    "kind": "function",
    "scope": "global",
    "description": "Bulk upload data to CommCare for case-data or lookup-table. Accepts an array of objects, converts them into\nan XLS representation, and uploads.",
    "params": [
      {
        "type": {
          "names": [
            "'case-data'",
            "'lookup-table'"
          ]
        },
        "description": "The type of data being processed.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "An object or an array of objects to upload.\n- If type is `'case-data'`, this should be an object array of objects.\n- If type is `'lookup-table'`, this should be an object.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data CommCare docs} for case-data and {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946023/Bulk+upload+Lookup+Tables Commcare Docs} for lookup-table.",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Upload a single row of a case-data resource</caption>\nbulk('case-data', [{ name: 'Mamadou', phone: '000000' }], {\n  case_type: 'student',\n  search_field: 'external_id',\n  create_new_cases: 'on',\n});",
      "<caption>Upload a single row of a lookup-table resource</caption>\nbulk(\n  'lookup-table',\n  {\n    types: [\n      {\n        'DELETE(Y/N)': 'N',\n        table_id: 'fruit',\n        'is_global?': 'yes',\n        'field 1': 'type',\n        'field 2': 'name',\n      },\n    ],\n    fruit: [\n      {\n        UID: '',\n        'DELETE(Y/N)': 'N',\n        'field:type': 'citrus',\n        'field:name': 'Orange',\n      },\n    ],\n  },\n  { replace: false }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 388,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "CommcareHttpState",
    "longname": "CommcareHttpState",
    "name": "CommcareHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the CommCare server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "order": 0
  },
  {
    "id": "fetchReportData",
    "longname": "fetchReportData",
    "name": "fetchReportData",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to CommCare's Reports API\nand POST the response somewhere else.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "API name of the report.",
        "name": "reportId"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters for the request, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957341/Download+Report+Data Commcare docs}.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "URL to which the response object will be posted.",
        "name": "postUrl"
      }
    ],
    "examples": [
      "<caption>Get 10 records from a report and post them to example.com. Equivalent to `<baseUrl>/configurablereportdata/abcde?limit=10`</caption>\nfetchReportData(\n  \"abcde\",\n  { limit: 10 },\n  \"https://www.example.com/api/\"\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 293,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to CommCare. Use this to fetch resources directly from Commcare REST API.\nYou can pass Commcare query parameters as an object of key value pairs, which will map to parameters\nin the URL.\nThe response body will be returned to `state.data` as JSON.\nPaginated responses will be fully downloaded and returned as a single array, _unless_ an `offset` is passed.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Input parameters for the request. These vary by endpoint,  see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957366/Data+APIs CommCare docs}.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback function. Invoked once per page of data retrieved.",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a resource by Id. Equivalent to GET `<baseUrl>/case/12345`</caption>\nget(\"/case/12345\")",
      "<caption>Get a resource with exactly 20 items. Equivalent to `<baseUrl>/case?offset=0&limit=20`</caption>\nget(\"/case\", { offset:0, limit: 20 })",
      "<caption>Get all items in a resource, and add them to state. Equivalent to `<baseUrl>/case`</caption>\nget(\"/case\", {}, (state) => {\n  state.cases.push(...state.data) // adds all cases to the cases array\n  return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 62,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to CommCare. Use this to send resources directly to Commcare REST API.\nYou can pass Commcare body data as a JSON object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object or JSON to create a resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional request params",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a user resource.Equivalent to `<baseUrl>/user`</caption>\npost(\"/user\", { \"username\":\"test\", \"password\":\"somepassword\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 150,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the Commcare server. Use this to make any request to Commcare REST API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get a resource. Equivalent to `<baseUrl>/a/asri/api/v0.5/case`</caption>\nrequest(\"GET\", \"/a/asri/api/v0.5/case\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 330,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "submit",
    "longname": "submit",
    "name": "submit",
    "kind": "function",
    "scope": "global",
    "description": "Submit forms to CommCare. Use this to send forms directly to Commcare REST API. Accepts an array of JSON\nobjects, converts them into XML, and submits to CommCare as an x-form.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The form as a JSON object",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Submit a form resource.</caption>\nsubmit(\n fields(\n   field('@', state => ({\n     xmlns: `http://openrosa.org/formdesigner/${state.formId}`,\n   })),\n   field('question1', state => state.data.answer1),\n   field('question2', state => state.data.answer2)\n )\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 253,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "submitXls",
    "longname": "submitXls",
    "name": "submitXls",
    "kind": "function",
    "scope": "global",
    "description": "Bulk upload data to CommCare. Use this to send multiple items for a single resource at once to Commcare. It accepts an array of objects, converts them into\nan XLS representation, and uploads.",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Array of objects to upload",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data CommCare docs}.",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Upload a single row of data for a resource.</caption>\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\n  case_type: 'student',\n  search_field: 'external_id',\n  create_new_cases: 'on',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 195,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"common","adaptor":"@openfn/language-common","version":"2.1.1","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#arraytostring\\\">arrayToString(arr, separator)</a></dt>\\n<dt>\\n    <a href=\\\"#asdata\\\">asData(data, state)</a></dt>\\n<dt>\\n    <a href=\\\"#chunk\\\">chunk(array, chunkSize)</a></dt>\\n<dt>\\n    <a href=\\\"#combine\\\">combine(operations)</a></dt>\\n<dt>\\n    <a href=\\\"#composenextstate\\\">composeNextState(state, response)</a></dt>\\n<dt>\\n    <a href=\\\"#cursor\\\">cursor(value, options)</a></dt>\\n<dt>\\n    <a href=\\\"#datapath\\\">dataPath(path)</a></dt>\\n<dt>\\n    <a href=\\\"#datavalue\\\">dataValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#each\\\">each(dataSource, operation)</a></dt>\\n<dt>\\n    <a href=\\\"#expandreferences\\\">expandReferences(value, [skipFilter])</a></dt>\\n<dt>\\n    <a href=\\\"#field\\\">field(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#fields\\\">fields(fields)</a></dt>\\n<dt>\\n    <a href=\\\"#fn\\\">fn(func)</a></dt>\\n<dt>\\n    <a href=\\\"#fnif\\\">fnIf(condition, operation)</a></dt>\\n<dt>\\n    <a href=\\\"#group\\\">group(arrayOfObjects, keyPath, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#humanproper\\\">humanProper(str)</a></dt>\\n<dt>\\n    <a href=\\\"#index\\\">index()</a></dt>\\n<dt>\\n    <a href=\\\"#join\\\">join(targetPath, sourcePath, targetKey)</a></dt>\\n<dt>\\n    <a href=\\\"#jsonvalue\\\">jsonValue(obj, path)</a></dt>\\n<dt>\\n    <a href=\\\"#lastreferencevalue\\\">lastReferenceValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#map\\\">map(path, operation, state)</a></dt>\\n<dt>\\n    <a href=\\\"#merge\\\">merge(dataSource, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#parsecsv\\\">parseCsv(csvData, [parsingOptions], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#referencepath\\\">referencePath(path)</a></dt>\\n<dt>\\n    <a href=\\\"#scrubemojis\\\">scrubEmojis(text, replacementChars)</a></dt>\\n<dt>\\n    <a href=\\\"#source\\\">source(path)</a></dt>\\n<dt>\\n    <a href=\\\"#sourcevalue\\\">sourceValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#splitkeys\\\">splitKeys(obj, keys)</a></dt>\\n<dt>\\n    <a href=\\\"#toarray\\\">toArray(arg)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#helpers_decode\\\">helpers.decode(base64Data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#helpers_encode\\\">helpers.encode(data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#helpers_uuid\\\">helpers.uuid()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#beta_each\\\">beta.each(dataSource, operation)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#dateFns_format\\\">dateFns.format()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#dateFns_parse\\\">dateFns.parse()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(url, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_options\\\">http.options(options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(url, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, url, options)</a>\\n</dt>\\n</dl>\\n\\n\\n## Functions\\n### arrayToString\\n\\n<p><code>arrayToString(arr, separator) ⇒ string</code></p>\\n\\nTurns an array into a string, separated by X.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arr | <code>array</code> | Array of toString'able primatives. |\\n| separator | <code>string</code> | Separator string. |\\n\\n**Example**\\n```js\\nfield(\\\"destination_string__c\\\", function(state) {\\n  return arrayToString(dataValue(\\\"path_of_array\\\")(state), ', ')\\n})\\n```\\n\\n* * *\\n\\n### asData\\n\\n<p><code>asData(data, state) ⇒ array</code></p>\\n\\nSimple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.\\n- JSONPath referencing a point in `state`\\n- Object Literal of the data itself.\\n- Function to be called with state.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> \\\\| <code>object</code> \\\\| <code>function</code> |  |\\n| state | <code>object</code> | The current state. |\\n\\n**Example**\\n```js\\nasData('$.key'| key | callback)\\n```\\n\\n* * *\\n\\n### chunk\\n\\n<p><code>chunk(array, chunkSize) ⇒ Object</code></p>\\n\\nChunks an array into an array of arrays, each with no more than a certain size.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| array | <code>Object</code> | Array to be chunked |\\n| chunkSize | <code>Integer</code> | The maxiumum size of each chunks |\\n\\n**Example**\\n```js\\nchunk([1,2,3,4,5], 2)\\n```\\n\\n* * *\\n\\n### combine\\n\\n<p><code>combine(operations) ⇒ Operation</code></p>\\n\\nCombines two operations into one\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**\\n```js\\ncombine(\\n  create('foo'),\\n  delete('bar')\\n)\\n```\\n\\n* * *\\n\\n### composeNextState\\n\\n<p><code>composeNextState(state, response) ⇒ State</code></p>\\n\\nPrepares next state\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | state |\\n| response | <code>Object</code> | Response to be added |\\n\\n**Example**\\n```js\\ncomposeNextState(state, response)\\n```\\n\\n* * *\\n\\n### cursor\\n\\n<p><code>cursor(value, options) ⇒ Operation</code></p>\\n\\nSets a cursor property on state.\\nSupports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\\nwhich will be converted relative to the environment (ie, the Lightning or CLI locale). Custom timezones\\nare not yet supported.\\nYou can provide a formatter to customise the final cursor value, which is useful for normalising\\ndifferent inputs. The custom formatter runs after natural language date conversion.\\nSee the usage guide at [https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors](https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>any</code> | the cursor value. Usually an ISO date, natural language date, or page number |\\n| options | <code>object</code> | options to control the cursor. |\\n| options.key | <code>string</code> | set the cursor key. Will persist through the whole run. |\\n| options.defaultValue | <code>any</code> | the value to use if value is falsy |\\n| options.format | <code>function</code> | custom formatter for the final cursor value |\\n\\n**Example:** Use a cursor from state if present, or else use the default value\\n```js\\ncursor($.cursor, { defaultValue: 'today' })\\n```\\n**Example:** Use a pagination cursor\\n```js\\ncursor(22)\\n```\\n\\n* * *\\n\\n### dataPath\\n\\n<p><code>dataPath(path) ⇒ string</code></p>\\n\\nEnsures a path points at the data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**\\n```js\\ndataPath('key')\\n```\\n\\n* * *\\n\\n### dataValue\\n\\n<p><code>dataValue(path) ⇒ Operation</code></p>\\n\\nPicks out a single value from the source data object—usually `state.data`.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**\\n```js\\ndataValue('key')\\n```\\n\\n* * *\\n\\n### each\\n\\n<p><code>each(dataSource, operation) ⇒ Operation</code></p>\\n\\nIterates over an array of items and invokes an operation upon each one, where the state\\nobject is _scoped_ so that state.data is the item under iteration.\\nThe rest of the state object is untouched and can be referenced as usual.\\nYou can pass an array directly, or use lazy state or a JSONPath string to\\nreference a slice of state.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example:** Using lazy state ($) to iterate over items in state.data and pass each into an \\\"insert\\\" operation\\n```js\\neach(\\n  $.data,\\n  // Inside the callback operation, `$.data` is scoped to the item under iteration\\n  insert(\\\"patient\\\", {\\n    patient_name: $.data.properties.case_name,\\n    patient_id: $.data.case_id,\\n  })\\n);\\n```\\n**Example:** Iterate over items in state.data and pass each one into an \\\"insert\\\" operation\\n```js\\neach(\\n  $.data,\\n  insert(\\\"patient\\\", (state) => ({\\n    patient_id: state.data.case_id,\\n    ...state.data\\n  }))\\n);\\n```\\n**Example:** Using JSON path to iterate over items in state.data and pass each one into an \\\"insert\\\" operation\\n```js\\neach(\\n  \\\"$.data[*]\\\",\\n  insert(\\\"patient\\\", (state) => ({\\n    patient_name: state.data.properties.case_name,\\n    patient_id: state.data.case_id,\\n  }))\\n);\\n```\\n\\n* * *\\n\\n### expandReferences\\n\\n<p><code>expandReferences(value, [skipFilter]) ⇒ Operation</code></p>\\n\\nRecursively resolves objects that have resolvable values (functions).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n| [skipFilter] | <code>function</code> | a function which returns true if a value should be skipped |\\n\\n\\n* * *\\n\\n### field\\n\\n<p><code>field(key, value) ⇒ Field</code></p>\\n\\nReturns a key, value pair in an array.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | Name of the field |\\n| value | <code>Value</code> | The value itself or a sourceable operation. |\\n\\n**Example**\\n```js\\nfield('destination_field_name__c', 'value')\\n```\\n\\n* * *\\n\\n### fields\\n\\n<p><code>fields(fields) ⇒ Object</code></p>\\n\\nZips key value pairs into an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fields | <code>Fields</code> | a list of fields |\\n\\n**Example**\\n```js\\nfields(list_of_fields)\\n```\\n\\n* * *\\n\\n### fn\\n\\n<p><code>fn(func) ⇒ Operation</code></p>\\n\\nCreates a custom step (or operation) for more flexible job writing.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n**Example**\\n```js\\nfn(state => {\\n  // do some things to state\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n### fnIf\\n\\n<p><code>fnIf(condition, operation) ⇒ Operation</code></p>\\n\\nA custom operation that will only execute the function if the condition returns true\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| condition | <code>Boolean</code> | The condition that returns true |\\n| operation | <code>Operation</code> | The operation needed to be executed. |\\n\\n**Example**\\n```js\\nfnIf((state) => state?.data?.name, get(\\\"https://example.com\\\"));\\n```\\n\\n* * *\\n\\n### group\\n\\n<p><code>group(arrayOfObjects, keyPath, callback) ⇒ Operation</code></p>\\n\\nGroups an array of objects by a specified key path.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arrayOfObjects | <code>Array.&lt;Object&gt;</code> | The array of objects to be grouped. |\\n| keyPath | <code>string</code> | The key path to group by. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nconst users = [\\n  { name: 'Alice', age: 25, city: 'New York' },\\n  { name: 'Bob', age: 30, city: 'San Francisco' },\\n  { name: 'Charlie', age: 25, city: 'New York' },\\n  { name: 'David', age: 30, city: 'San Francisco' }\\n];\\ngroup(users, 'city');\\n// state is { data: { 'New York': [/Alice, Charlie/], 'San Francisco': [ /Bob, David / ] }\\n```\\n\\n* * *\\n\\n### humanProper\\n\\n<p><code>humanProper(str) ⇒ string</code></p>\\n\\nSubstitutes underscores for spaces and proper-cases a string\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| str | <code>string</code> | String that needs converting |\\n\\n**Example**\\n```js\\nfield(\\\"destination_string__c\\\", humanProper(state.data.path_to_string))\\n```\\n\\n* * *\\n\\n### index\\n\\n<p><code>index() ⇒ DataSource</code></p>\\n\\nReturns the index of the current array being iterated.\\nTo be used with `each` as a data source.\\n\\n**Example**\\n```js\\nindex()\\n```\\n\\n* * *\\n\\n### join\\n\\n<p><code>join(targetPath, sourcePath, targetKey) ⇒ Operation</code></p>\\n\\nAdds data from a target object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| targetPath | <code>String</code> | Target path |\\n| sourcePath | <code>String</code> | Source path |\\n| targetKey | <code>String</code> | Target Key |\\n\\n**Example**\\n```js\\njoin('$.key','$.data','newKey')\\n```\\n\\n* * *\\n\\n### jsonValue\\n\\n<p><code>jsonValue(obj, path) ⇒ Operation</code></p>\\n\\nPicks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>object</code> | A valid JSON object. |\\n| path | <code>String</code> | JSONPath referencing a point in given JSON object. |\\n\\n**Example**\\n```js\\njsonValue({ a:1 }, 'a')\\n```\\n\\n* * *\\n\\n### lastReferenceValue\\n\\n<p><code>lastReferenceValue(path) ⇒ Operation</code></p>\\n\\nPicks out the last reference value from source data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**\\n```js\\nlastReferenceValue('key')\\n```\\n\\n* * *\\n\\n### map\\n\\n<p><code>map(path, operation, state) ⇒ State</code></p>\\n\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `state.data`. |\\n| operation | <code>function</code> | The operation needed to be repeated. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**\\n```js\\nmap(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n\\n* * *\\n\\n### merge\\n\\n<p><code>merge(dataSource, fields) ⇒ DataSource</code></p>\\n\\nMerges fields into each item in an array.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> |  |\\n| fields | <code>Object</code> | Group of fields to merge in. |\\n\\n**Example**\\n```js\\nmerge(\\n  \\\"$.books[*]\\\",\\n  fields(\\n    field( \\\"publisher\\\", sourceValue(\\\"$.publisher\\\") )\\n  )\\n)\\n```\\n\\n* * *\\n\\n### parseCsv\\n\\n<p><code>parseCsv(csvData, [parsingOptions], [callback]) ⇒ Operation</code></p>\\n\\nTakes a CSV file string or stream and parsing options as input, and returns a promise that\\nresolves to the parsed CSV data as an array of objects.\\nOptions for `parsingOptions` include:\\n- `delimiter` {string/Buffer/[string/Buffer]} - Defines the character(s) used to delineate the fields inside a record. Default: `','`\\n- `quote` {string/Buffer/[string/Buffer]} - Defines the characters used to surround a field. Default: `'\\\"'`\\n- `escape` {Buffer/string/null/boolean} - Set the escape character as one character/byte only. Default: `\\\"`\\n- `columns` {boolean / array / function} - Generates record in the form of object literals. Default: `true`\\n- `bom` {boolean} - Strips the [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark) from the input string or buffer. Default: `true`\\n- `trim` {boolean} - Ignore whitespace characters immediately around the `delimiter`. Default: `true`\\n- `ltrim` {boolean} - Ignore whitespace characters from the left side of a CSV field. Default: `true`\\n- `rtrim` {boolean} - Ignore whitespace characters from the right side of a CSV field. Default: `true`\\n- `chunkSize` {number} - The size of each chunk of CSV data. Default: `Infinity`\\n- `skip_empty_lines` {boolean} - Ignore empty lines in the CSV file. Default: `true`\\n\\n**Returns**: <code>Operation</code> - The function returns a Promise that resolves to the result of parsing a CSV `stringOrStream`.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| csvData | <code>String</code> \\\\| <code>Stream</code> | A CSV string or a readable stream |\\n| [parsingOptions] | <code>Object</code> | Optional. Parsing options for converting CSV to JSON. |\\n| [callback] | <code>function</code> | (Optional) callback function. If used it will be called state and an array of rows. |\\n\\n\\n* * *\\n\\n### referencePath\\n\\n<p><code>referencePath(path) ⇒ string</code></p>\\n\\nEnsures a path points at references.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**\\n```js\\nreferencePath('key')\\n```\\n\\n* * *\\n\\n### scrubEmojis\\n\\n<p><code>scrubEmojis(text, replacementChars) ⇒ string</code></p>\\n\\nReplaces emojis in a string.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | String that needs to be cleaned |\\n| replacementChars | <code>string</code> | Characters that replace the emojis |\\n\\n**Example**\\n```js\\nscrubEmojis('Dove🕊️⭐ 29')\\n```\\n\\n* * *\\n\\n### source\\n\\n<p><code>source(path) ⇒ Array.&lt;(String|Object)&gt;</code></p>\\n\\nPicks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use `sourceValue` instead.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**\\n```js\\nsource('$.key')\\n```\\n\\n* * *\\n\\n### sourceValue\\n\\n<p><code>sourceValue(path) ⇒ Operation</code></p>\\n\\nPicks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**\\n```js\\nsourceValue('$.key')\\n```\\n\\n* * *\\n\\n### splitKeys\\n\\n<p><code>splitKeys(obj, keys) ⇒ Array.&lt;Object&gt;</code></p>\\n\\nSplits an object into two objects based on a list of keys.\\nThe first object contains the keys that are not in the list,\\nand the second contains the keys that are.\\n\\n**Returns**: <code>Array.&lt;Object&gt;</code> - - Tuple of objects, first object contains keys not in list, second contains keys that are.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>Object</code> | The object to split. |\\n| keys | <code>Array.&lt;string&gt;</code> | List of keys to split on. |\\n\\n\\n* * *\\n\\n### toArray\\n\\n<p><code>toArray(arg) ⇒ array</code></p>\\n\\nEnsures primitive data types are wrapped in an array.\\nDoes not affect array objects.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arg | <code>any</code> | Data required to be in an array |\\n\\n**Example**\\n```js\\neach(function(state) {\\n  return toArray( dataValue(\\\"path_of_array\\\")(state) )\\n}, ...)\\n```\\n\\n* * *\\n\\n\\n## helpers\\n\\nThese functions belong to the helpers namespace.\\n### helpers.decode {#helpers_decode}\\n\\n<p><code>decode(base64Data) ⇒ string</code></p>\\n\\nDecodes a Base64 encoded string back to its original format.\\n\\n**Returns**: <code>string</code> - - The decoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| base64Data | <code>string</code> | The Base64 encoded string. |\\n\\n**Example:** Decode a Base64 string\\n```js\\nconst decoded = decode('SGVsbG8gV29ybGQ=');\\nconsole.log(decoded); // Output: Hello World\\n```\\n\\n* * *\\n\\n\\n### helpers.encode {#helpers_encode}\\n\\n<p><code>encode(data) ⇒ string</code></p>\\n\\nEncodes a given string into Base64 format.\\n\\n**Returns**: <code>string</code> - - The Base64 encoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>string</code> | The string to be encoded. |\\n\\n**Example:** Encode a string\\n```js\\nconst encoded = encode('Hello World');\\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=\\n```\\n\\n* * *\\n\\n\\n### helpers.uuid {#helpers_uuid}\\n\\n<p><code>uuid() ⇒ string</code></p>\\n\\nGenerates a UUID (Universally Unique Identifier).\\n\\n**Returns**: <code>string</code> - - A newly generated UUID.  \\n**Example:** Generate a UUID\\n```js\\nconst id = uuid();\\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\\n```\\n\\n* * *\\n\\n\\n## beta\\n\\nThese functions belong to the beta namespace.\\n### beta.each {#beta_each}\\n\\n<p><code>each(dataSource, operation) ⇒ Operation</code></p>\\n\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**\\n```js\\neach(\\\"$.[*]\\\",\\n   create(\\\"SObject\\\",\\n   field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\")))\\n )\\n```\\n\\n* * *\\n\\n\\n## dateFns\\n\\nThese functions belong to the dateFns namespace.\\n### dateFns.format {#dateFns_format}\\n\\n<p><code>format()</code></p>\\n\\nThe format function from the date-fns library. See [https://date-fns.org/v3.6.0/docs/parse](https://date-fns.org/v3.6.0/docs/parse)\\n\\n\\n* * *\\n\\n\\n### dateFns.parse {#dateFns_parse}\\n\\n<p><code>parse()</code></p>\\n\\nThe parse function from the date-fns library. See [https://date-fns.org/v3.6.0/docs/parse](https://date-fns.org/v3.6.0/docs/parse)\\n\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(url, options) ⇒ Operation</code></p>\\n\\nMake a GET request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| url | <code>string</code> | URL to access |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Request a resource\\n```js\\nhttp.get('https://jsonplaceholder.typicode.com/todos')\\n```\\n**Example:** Request a resource with basic auth\\n```js\\nhttp.get(\\n 'https://jsonplaceholder.typicode.com/todos',\\n http.options().basic('user', 'pass')\\n)\\n```\\n**Example:** Request a resource with oauth\\n```js\\nhttp.get(\\n 'https://jsonplaceholder.typicode.com/todos',\\n http.options().oauth($.configuration.access_token)\\n)\\n```\\n\\n* * *\\n\\n\\n### http.options {#http_options}\\n\\n<p><code>options(options) ⇒ OptionsHelpers</code></p>\\n\\nBuilder function to create request options. Returns an object with helpers to\\neasily add commonly used options. The return object is chainable so you can set\\nas many options as you want.\\nPass an object to set your own options.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | options to pass to the request |\\n\\n**Example:** Get with a query an oath token\\n```js\\nget($.data.url, http.options({ query: $.query }).oath($.configuration.access_token)\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(url, options) ⇒ Operation</code></p>\\n\\nMake a POST request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| url | <code>string</code> | URL to access |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Post a JSON object (setting the content-type header)\\n```js\\n http.post(\\n   'https://jsonplaceholder.typicode.com/todos',\\n   $.data,\\n   options().json(),\\n })\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, url, options) ⇒ Operation</code></p>\\n\\nMake a HTTP request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method to use. |\\n| url | <code>string</code> | URL to resource. |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nhttp.request(\\n  'GET',\\n  'https://jsonplaceholder.typicode.com/todos'\\n)\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### OptionsHelpers\\n\\nHelper functions provided by `http.options`.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| json | <code>function</code> | Sets the `content-type' header to 'application/json' |\\n| basic | <code>function</code> | Sets basic auth on the Authorization header. Pass username and password |\\n| bearer | <code>function</code> | Sets a Bearer token on the Authorization header. Pass the token. |\\n| oauth | <code>function</code> | Sets a Bearer token on the Authorization header. Pass the oauth token. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language Common [![CircleCI](https://circleci.com/gh/OpenFn/language-common.svg?style=svg)](https://circleci.com/gh/OpenFn/language-common)\\n\\nCommon and generic expressions and operations for [OpenFn](http://openfn.org).\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"## 2.0.0\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 03a1a74: Add `encode`, `decode` and `uuid` helpers\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- 33973a2: Fix a critical security issue in jsonpath-plus\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- 77a690f: improve cursor setup message\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n\\nThe 2.0 version of common removes axios and re-writes the `http` namespace.\\n\\nYou can now use `http.request()` from any adaptor that exports it:\\n\\n```\\nhttp.request(\\n  'GET',\\n  'https://jsonplaceholder.typicode.com/todos',\\n  http.options().basic('user', 'pass')\\n)\\n```\\n\\n`http.get()` and `http.post()` are also available.\\n\\nThese functions behave just like the HTTP adaptor's operations (except that they\\ndon't handle auth for you).\\n\\nUse the `http.options()` helper functiosn to set basic auth headers and set the\\ncontent type to JSON.\\n\\n### Major Changes\\n\\n- Replace axios-based http operations with cleaner, undici-based ones\\n- Removed axios export\\n\\n### Minor Changes\\n\\n- Add options helpers to http namespace\\n\\n### Patch Changes\\n\\n- 4c08444: document `date-fns` functions\\n\\n## 1.15.0\\n\\n### Minor Changes\\n\\n- 5fb82f07: - Add `group()` operation\\n  - Initialize `state.references` in `composeNextState()`\\n\\n## 1.14.0\\n\\n### Minor Changes\\n\\n- 106ecf6d: Add `fnIf` operation\\n\\n## 1.13.5\\n\\n### Patch Changes\\n\\n- http helpers: Fix an issue where query parameters in the URL did not get sent\\n  to the server\\n\\n## 1.13.4\\n\\n### Patch Changes\\n\\n- 12f02ed5: http helpers: Ensure redirects append base url\\n\\n## 1.13.3\\n\\n### Patch Changes\\n\\n- 88f99a8f: cursor: support format option\\n\\n## 1.13.2\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n\\n## 1.13.1\\n\\n### Patch Changes\\n\\n- Fix jsdoc link\\n\\n## 1.13.0\\n\\n### Minor Changes\\n\\n- 1ad86651: Added cursor() helper\\n\\n## 1.12.0\\n\\n### Minor Changes\\n\\n- 7f52699: New HTTP helper functions have been added to common in\\n  `src/util/http.js`\\n\\n  These are based on the `undici` library. They are functions, not operations,\\n  so they do not get and return state, and do not expand references.\\n\\n  They are designed to be used by other adaptors to make HTTP requests easier.\\n\\n  ## Usage\\n\\n  ```\\n  // Import the helper function\\n  import { get } from '@openfn/language-common/util'\\n\\n  // This is an example operation\\n  export function get(id, callback) {\\n    return async (state) => {\\n      const [resolvedId] = expandReferences(\\n        state,\\n        id,\\n      );\\n\\n      // Call the new common helper to fetch some json\\n      const response = await get(`www.example.com/resource/{$resolvedId}`, { parseAs: 'json' });\\n\\n      // Return the response body as data, and also include the response object as a convenience\\n      return {\\n        ...state,\\n        response,\\n        data: response.body\\n      }\\n    }\\n  }\\n  ```\\n\\n  See the http adaptor for a reference implementation.\\n\\n  ## Deprecation notice\\n\\n  The existing http operations in `src/http.js` have been deprecated, and\\n  adaptors should migrate to the new helpers.\\n\\n## 1.11.1\\n\\n### Patch Changes\\n\\n- c19efbe: don't attempt to expand references for a buffer\\n\\n## 1.11.0\\n\\n### Minor Changes\\n\\n- 85c35b8: Add validate function to validate data against a JSON schema\\n\\n## 1.10.3\\n\\n### Patch Changes\\n\\n- df09270: Fix streaming interface to parseCSV\\n\\n## 1.10.2\\n\\n### Patch Changes\\n\\n- 26a303e: add expandReferences for csvData and parsingOptions\\n\\n## 1.10.1\\n\\n### Patch Changes\\n\\n- 8c32eb3: - update parseCsv to await callback\\n  - Added documentation for splitKeys\\n\\n## 1.10.0\\n\\n### Minor Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n\\n## 1.9.0\\n\\n### Minor Changes\\n\\n- 111807f: Add support for `parseCsv` in common\\n\\n## 1.8.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n\\n## 1.8.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n## 1.7.7\\n\\n### Patch Changes\\n\\n- 929bca6: Export metadata helper function\\n\\n## 1.7.6\\n\\n### Patch Changes\\n\\n- 2b4c61a: mark execute private and ast build\\n\\n## 1.7.5\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n\\n## 1.7.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- # ecf5d30: remove sinon since it was not being used\\n\\nBumped all package versions to their latest.\\n\\n# v0.0.4\\n\\n- Added `arrayToString` helper.  \\n  Allowing you to join an array of string'able primitives (strings and integers)\\n  into a string.\\n- Added `toArray` helper.  \\n  This can be used to coerce certain types of data into an array, this can be\\n  useful when the source data has an ambiguous format. For example a given key\\n  in the data may have an object as it's value (when there is only one item),\\n  and an array of objects when there is more than one. `toArray` can be used to\\n  reconcile this inconsistency.\\n\"","functions":["arrayToString","asData","chunk","combine","composeNextState","cursor","dataPath","dataValue","each","execute","expandReferences","field","fields","fn","fnIf","group","humanProper","index","join","jsonValue","lastReferenceValue","map","merge","parseCsv","referencePath","scrubEmojis","source","sourceValue","splitKeys","toArray"],"configuration-schema":"No Configuration Schema"},
[
  {
    "id": "arrayToString",
    "longname": "arrayToString",
    "name": "arrayToString",
    "kind": "function",
    "scope": "global",
    "description": "Turns an array into a string, separated by X.",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Array of toString'able primatives.",
        "name": "arr"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Separator string.",
        "name": "separator"
      }
    ],
    "examples": [
      "field(\"destination_string__c\", function(state) {\n  return arrayToString(dataValue(\"path_of_array\")(state), ', ')\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 500,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 22,
    "newscope": true,
    "level": 0
  },
  {
    "id": "asData",
    "longname": "asData",
    "name": "asData",
    "kind": "function",
    "scope": "global",
    "description": "Simple switcher allowing other expressions to use either a JSONPath or\nobject literals as a data source.\n- JSONPath referencing a point in `state`\n- Object Literal of the data itself.\n- Function to be called with state.",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "object",
            "function"
          ]
        },
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The current state.",
        "name": "state"
      }
    ],
    "examples": [
      "asData('$.key'| key | callback)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "array"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 248,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "chunk",
    "longname": "chunk",
    "name": "chunk",
    "kind": "function",
    "scope": "global",
    "description": "Chunks an array into an array of arrays, each with no more than a certain size.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Array to be chunked",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "The maxiumum size of each chunks",
        "name": "chunkSize"
      }
    ],
    "examples": [
      "chunk([1,2,3,4,5], 2)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 625,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 28,
    "level": 0
  },
  {
    "id": "combine",
    "longname": "combine",
    "name": "combine",
    "kind": "function",
    "scope": "global",
    "description": "Combines two operations into one",
    "params": [
      {
        "type": {
          "names": [
            "Operations"
          ]
        },
        "description": "Operations to be performed.",
        "name": "operations"
      }
    ],
    "examples": [
      "combine(\n  create('foo'),\n  delete('bar')\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 326,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "CommonHttpState",
    "longname": "CommonHttpState",
    "name": "CommonHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 72,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 38
  },
  {
    "id": "CommonRequestOptions",
    "longname": "CommonRequestOptions",
    "name": "CommonRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "meta": {
      "lineno": 60,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 37
  },
  {
    "id": "composeNextState",
    "longname": "composeNextState",
    "name": "composeNextState",
    "kind": "function",
    "scope": "global",
    "description": "Prepares next state",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "description": "state",
        "name": "state"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Response to be added",
        "name": "response"
      }
    ],
    "examples": [
      "composeNextState(state, response)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 530,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 24,
    "level": 0
  },
  {
    "id": "cursor",
    "longname": "cursor",
    "name": "cursor",
    "kind": "function",
    "scope": "global",
    "description": "Sets a cursor property on state.\nSupports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\nwhich will be converted relative to the environment (ie, the Lightning or CLI locale). Custom timezones\nare not yet supported.\nYou can provide a formatter to customise the final cursor value, which is useful for normalising\ndifferent inputs. The custom formatter runs after natural language date conversion.\nSee the usage guide at {@link https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors}",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the cursor value. Usually an ISO date, natural language date, or page number",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to control the cursor.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor key. Will persist through the whole run.",
        "name": "options.key"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to use if value is falsy",
        "name": "options.defaultValue"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "custom formatter for the final cursor value",
        "name": "options.format"
      }
    ],
    "examples": [
      "<caption>Use a cursor from state if present, or else use the default value</caption>\ncursor($.cursor, { defaultValue: 'today' })",
      "<caption>Use a pagination cursor</caption>\ncursor(22)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 860,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 31,
    "level": 0
  },
  {
    "id": "dataPath",
    "longname": "dataPath",
    "name": "dataPath",
    "kind": "function",
    "scope": "global",
    "description": "Ensures a path points at the data.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `data`.",
        "name": "path"
      }
    ],
    "examples": [
      "dataPath('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 146,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "dataValue",
    "longname": "dataValue",
    "name": "dataValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from the source data object—usually `state.data`.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `data`.",
        "name": "path"
      }
    ],
    "examples": [
      "dataValue('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "decode",
    "longname": "decode",
    "name": "decode",
    "kind": "function",
    "scope": "helpers",
    "description": "Decodes a Base64 encoded string back to its original format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Base64 encoded string.",
        "name": "base64Data"
      }
    ],
    "examples": [
      "<caption>Decode a Base64 string</caption>\nconst decoded = decode('SGVsbG8gV29ybGQ=');\nconsole.log(decoded); // Output: Hello World"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The decoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 25,
      "filename": "helpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "order": 44,
    "newscope": true,
    "level": 0
  },
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "global",
    "description": "Iterates over an array of items and invokes an operation upon each one, where the state\nobject is _scoped_ so that state.data is the item under iteration.\nThe rest of the state object is untouched and can be referenced as usual.\nYou can pass an array directly, or use lazy state or a JSONPath string to\nreference a slice of state.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      }
    ],
    "examples": [
      "<caption>Using lazy state ($) to iterate over items in state.data and pass each into an \"insert\" operation</caption>\neach(\n  $.data,\n  // Inside the callback operation, `$.data` is scoped to the item under iteration\n  insert(\"patient\", {\n    patient_name: $.data.properties.case_name,\n    patient_id: $.data.case_id,\n  })\n);",
      "<caption>Iterate over items in state.data and pass each one into an \"insert\" operation</caption>\neach(\n  $.data,\n  insert(\"patient\", (state) => ({\n    patient_id: state.data.case_id,\n    ...state.data\n  }))\n);",
      "<caption>Using JSON path to iterate over items in state.data and pass each one into an \"insert\" operation</caption>\neach(\n  \"$.data[*]\",\n  insert(\"patient\", (state) => ({\n    patient_name: state.data.properties.case_name,\n    patient_id: state.data.case_id,\n  }))\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 296,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "beta",
    "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.\n\nIt also ensures the results of an operation make their way back into\nthe state's references.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      }
    ],
    "examples": [
      "each(\"$.[*]\",\n   create(\"SObject\",\n   field(\"FirstName\", sourceValue(\"$.firstName\")))\n )"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 22,
      "filename": "beta.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 32,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encode",
    "longname": "encode",
    "name": "encode",
    "kind": "function",
    "scope": "helpers",
    "description": "Encodes a given string into Base64 format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The string to be encoded.",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Encode a string</caption>\nconst encoded = encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ="
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The Base64 encoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "helpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "order": 43,
    "level": 0
  },
  {
    "id": "expandReferences",
    "longname": "expandReferences",
    "name": "expandReferences",
    "kind": "function",
    "scope": "global",
    "description": "Recursively resolves objects that have resolvable values (functions).",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "a function which returns true if a value should be skipped",
        "name": "skipFilter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 367,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "field",
    "longname": "field",
    "name": "field",
    "kind": "function",
    "scope": "global",
    "description": "Returns a key, value pair in an array.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the field",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "Value"
          ]
        },
        "description": "The value itself or a sourceable operation.",
        "name": "value"
      }
    ],
    "examples": [
      "field('destination_field_name__c', 'value')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Field"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 398,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "fields",
    "longname": "fields",
    "name": "fields",
    "kind": "function",
    "scope": "global",
    "description": "Zips key value pairs into an object.",
    "params": [
      {
        "type": {
          "names": [
            "Fields"
          ]
        },
        "description": "a list of fields",
        "name": "fields"
      }
    ],
    "examples": [
      "fields(list_of_fields)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 411,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "fn",
    "longname": "fn",
    "name": "fn",
    "kind": "function",
    "scope": "global",
    "description": "Creates a custom step (or operation) for more flexible job writing.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "is the function",
        "name": "func"
      }
    ],
    "examples": [
      "fn(state => {\n  // do some things to state\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 63,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "fnIf",
    "longname": "fnIf",
    "name": "fnIf",
    "kind": "function",
    "scope": "global",
    "description": "A custom operation that will only execute the function if the condition returns true",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "The condition that returns true",
        "name": "condition"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be executed.",
        "name": "operation"
      }
    ],
    "examples": [
      "fnIf((state) => state?.data?.name, get(\"https://example.com\"));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 79,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "format",
    "longname": "format",
    "name": "format",
    "kind": "function",
    "scope": "dateFns",
    "description": "The format function from the date-fns library. See {@link https://date-fns.org/v3.6.0/docs/parse}",
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "dateFns.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 34,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to access",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Request a resource</caption>\nhttp.get('https://jsonplaceholder.typicode.com/todos')",
      "<caption>Request a resource with basic auth</caption>\nhttp.get(\n 'https://jsonplaceholder.typicode.com/todos',\n http.options().basic('user', 'pass')\n)",
      "<caption>Request a resource with oauth</caption>\nhttp.get(\n 'https://jsonplaceholder.typicode.com/todos',\n http.options().oauth($.configuration.access_token)\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 140,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 40,
    "newscope": true,
    "level": 0
  },
  {
    "id": "group",
    "longname": "group",
    "name": "group",
    "kind": "function",
    "scope": "global",
    "description": "Groups an array of objects by a specified key path.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "The array of objects to be grouped.",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key path to group by.",
        "name": "keyPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "const users = [\n  { name: 'Alice', age: 25, city: 'New York' },\n  { name: 'Bob', age: 30, city: 'San Francisco' },\n  { name: 'Charlie', age: 25, city: 'New York' },\n  { name: 'David', age: 30, city: 'San Francisco' }\n];\ngroup(users, 'city');\n// state is { data: { 'New York': [/Alice, Charlie/], 'San Francisco': [ /Bob, David / ] }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 461,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "humanProper",
    "longname": "humanProper",
    "name": "humanProper",
    "kind": "function",
    "scope": "global",
    "description": "Substitutes underscores for spaces and proper-cases a string",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "String that needs converting",
        "name": "str"
      }
    ],
    "examples": [
      "field(\"destination_string__c\", humanProper(state.data.path_to_string))"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 550,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 25,
    "level": 0
  },
  {
    "id": "index",
    "longname": "index",
    "name": "index",
    "kind": "function",
    "scope": "global",
    "description": "Returns the index of the current array being iterated.\nTo be used with `each` as a data source.",
    "examples": [
      "index()"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 482,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "join",
    "longname": "join",
    "name": "join",
    "kind": "function",
    "scope": "global",
    "description": "Adds data from a target object",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Target path",
        "name": "targetPath"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Source path",
        "name": "sourcePath"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Target Key",
        "name": "targetKey"
      }
    ],
    "examples": [
      "join('$.key','$.data','newKey')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 351,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "jsonValue",
    "longname": "jsonValue",
    "name": "jsonValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from a JSON object.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A valid JSON object.",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in given JSON object.",
        "name": "path"
      }
    ],
    "examples": [
      "jsonValue({ a:1 }, 'a')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 99,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "lastReferenceValue",
    "longname": "lastReferenceValue",
    "name": "lastReferenceValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out the last reference value from source data.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `references`.",
        "name": "path"
      }
    ],
    "examples": [
      "lastReferenceValue('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 193,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "map",
    "longname": "map",
    "name": "map",
    "kind": "function",
    "scope": "global",
    "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `state.data`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "description": "Runtime state.",
        "name": "state"
      }
    ],
    "examples": [
      "map(\"$.[*]\",\n  create(\"SObject\",\n    field(\"FirstName\", sourceValue(\"$.firstName\"))\n  )\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 218,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "merge",
    "longname": "merge",
    "name": "merge",
    "kind": "function",
    "scope": "global",
    "description": "Merges fields into each item in an array.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Group of fields to merge in.",
        "name": "fields"
      }
    ],
    "examples": [
      "merge(\n  \"$.books[*]\",\n  fields(\n    field( \"publisher\", sourceValue(\"$.publisher\") )\n  )\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 431,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "options",
    "longname": "options",
    "name": "options",
    "kind": "function",
    "scope": "http",
    "description": "Builder function to create request options. Returns an object with helpers to\neasily add commonly used options. The return object is chainable so you can set\nas many options as you want.\nPass an object to set your own options.",
    "params": [
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "options to pass to the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get with a query an oath token</caption>\nget($.data.url, http.options({ query: $.query }).oath($.configuration.access_token)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "OptionsHelpers"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 36,
    "level": 0
  },
  {
    "id": "OptionsHelpers",
    "longname": "OptionsHelpers",
    "name": "OptionsHelpers",
    "kind": "typedef",
    "scope": "global",
    "description": "Helper functions provided by `http.options`.",
    "properties": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets the `content-type' header to 'application/json'",
        "name": "json"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets basic auth on the Authorization header. Pass username and password",
        "name": "basic"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets a Bearer token on the Authorization header. Pass the token.",
        "name": "bearer"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets a Bearer token on the Authorization header. Pass the oauth token.",
        "name": "oauth"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 35,
    "level": 0
  },
  {
    "id": "parse",
    "longname": "parse",
    "name": "parse",
    "kind": "function",
    "scope": "dateFns",
    "description": "The parse function from the date-fns library. See {@link https://date-fns.org/v3.6.0/docs/parse}",
    "access": "public",
    "meta": {
      "lineno": 7,
      "filename": "dateFns.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 33,
    "level": 0
  },
  {
    "id": "parseCsv",
    "longname": "parseCsv",
    "name": "parseCsv",
    "kind": "function",
    "scope": "global",
    "description": "Takes a CSV file string or stream and parsing options as input, and returns a promise that\nresolves to the parsed CSV data as an array of objects.\nOptions for `parsingOptions` include:\n- `delimiter` {string/Buffer/[string/Buffer]} - Defines the character(s) used to delineate the fields inside a record. Default: `','`\n- `quote` {string/Buffer/[string/Buffer]} - Defines the characters used to surround a field. Default: `'\"'`\n- `escape` {Buffer/string/null/boolean} - Set the escape character as one character/byte only. Default: `\"`\n- `columns` {boolean / array / function} - Generates record in the form of object literals. Default: `true`\n- `bom` {boolean} - Strips the {@link https://en.wikipedia.org/wiki/Byte_order_mark byte order mark (BOM)} from the input string or buffer. Default: `true`\n- `trim` {boolean} - Ignore whitespace characters immediately around the `delimiter`. Default: `true`\n- `ltrim` {boolean} - Ignore whitespace characters from the left side of a CSV field. Default: `true`\n- `rtrim` {boolean} - Ignore whitespace characters from the right side of a CSV field. Default: `true`\n- `chunkSize` {number} - The size of each chunk of CSV data. Default: `Infinity`\n- `skip_empty_lines` {boolean} - Ignore empty lines in the CSV file. Default: `true`",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Stream"
          ]
        },
        "description": "A CSV string or a readable stream",
        "name": "csvData"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. Parsing options for converting CSV to JSON.",
        "name": "parsingOptions"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback function. If used it will be called state and an array of rows.",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The function returns a Promise that resolves to the result of parsing a CSV `stringOrStream`."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 665,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 29,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to access",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Post a JSON object (setting the content-type header)</caption>\n http.post(\n   'https://jsonplaceholder.typicode.com/todos',\n   $.data,\n   options().json(),\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 159,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 41,
    "level": 0
  },
  {
    "id": "referencePath",
    "longname": "referencePath",
    "name": "referencePath",
    "kind": "function",
    "scope": "global",
    "description": "Ensures a path points at references.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `references`.",
        "name": "path"
      }
    ],
    "examples": [
      "referencePath('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 177,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a HTTP request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use.",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to resource.",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "http.request(\n  'GET',\n  'https://jsonplaceholder.typicode.com/todos'\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 81,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 39,
    "level": 0
  },
  {
    "id": "scrubEmojis",
    "longname": "scrubEmojis",
    "name": "scrubEmojis",
    "kind": "function",
    "scope": "global",
    "description": "Replaces emojis in a string.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "String that needs to be cleaned",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Characters that replace the emojis",
        "name": "replacementChars"
      }
    ],
    "examples": [
      "scrubEmojis('Dove🕊️⭐ 29')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 595,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 27,
    "level": 0
  },
  {
    "id": "source",
    "longname": "source",
    "name": "source",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a value from source data.\nWill return whatever JSONPath returns, which will always be an array.\nIf you need a single value use `sourceValue` instead.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "path"
      }
    ],
    "examples": [
      "source('$.key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<(String|Object)>"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 131,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "sourceValue",
    "longname": "sourceValue",
    "name": "sourceValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from source data.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "path"
      }
    ],
    "examples": [
      "sourceValue('$.key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 114,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "splitKeys",
    "longname": "splitKeys",
    "name": "splitKeys",
    "kind": "function",
    "scope": "global",
    "description": "Splits an object into two objects based on a list of keys.\nThe first object contains the keys that are not in the list,\nand the second contains the keys that are.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to split.",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "List of keys to split on.",
        "name": "keys"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- Tuple of objects, first object contains keys not in list, second contains keys that are."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 570,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 26,
    "level": 0
  },
  {
    "id": "toArray",
    "longname": "toArray",
    "name": "toArray",
    "kind": "function",
    "scope": "global",
    "description": "Ensures primitive data types are wrapped in an array.\nDoes not affect array objects.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "Data required to be in an array",
        "name": "arg"
      }
    ],
    "examples": [
      "each(function(state) {\n  return toArray( dataValue(\"path_of_array\")(state) )\n}, ...)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "array"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 516,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "uuid",
    "longname": "uuid",
    "name": "uuid",
    "kind": "function",
    "scope": "helpers",
    "description": "Generates a UUID (Universally Unique Identifier).",
    "examples": [
      "<caption>Generate a UUID</caption>\nconst id = uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- A newly generated UUID."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 37,
      "filename": "helpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "order": 45,
    "level": 0
  }
],
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"6.0.1","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#attr\\\">attr(attribute, value)</a></dt>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, data, [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#destroy\\\">destroy(resourceType, path, [data], [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#discover\\\">discover(httpMethod, endpoint)</a></dt>\\n<dt>\\n    <a href=\\\"#dv\\\">dv(dataElement, value)</a></dt>\\n<dt>\\n    <a href=\\\"#findattributevalue\\\">findAttributeValue(trackedEntity, attributeDisplayName)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(resourceType, query, [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#patch\\\">patch(resourceType, path, data, [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(resourceType, data, [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(resourceType, path, data, [options], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(resourceType, query, data, [options], [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### attr\\n\\n<p><code>attr(attribute, value) ⇒ object</code></p>\\n\\nConverts an attribute ID and value into a DHIS2 attribute object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attribute | <code>string</code> | A tracked entity instance (TEI) attribute ID. |\\n| value | <code>string</code> | The value for that attribute. |\\n\\n**Example**\\n```js\\nattr('w75KJ2mc4zz', 'Elias')\\n```\\n\\n* * *\\n\\n### create\\n\\n<p><code>create(resourceType, data, [options], [callback]) ⇒ Operation</code></p>\\n\\nCreate a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `trackedEntities`, `programs`, `events`, ... |\\n| data | <code>Dhis2Data</code> | Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Create a program\\n```js\\ncreate('programs', {\\n  name: 'name 20',\\n  shortName: 'n20',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example:** Create a single event\\n```js\\ncreate('events', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'DiszpKrYNg8',\\n  status: 'COMPLETED',\\n});\\n```\\n**Example:** Create a single tracker entity. See [Create tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\ncreate('trackedEntities', {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Gigiwe',\\n    },\\n  ]\\n});\\n```\\n**Example:** Create a dataSet\\n```js\\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });\\n```\\n**Example:** a dataSetNotification\\n```js\\ncreate('dataSetNotificationTemplates', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example:** Create a dataElement\\n```js\\ncreate('dataElements', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example:** Create a dataElementGroup\\n```js\\ncreate('dataElementGroups', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example:** Create a dataElementGroupSet\\n```js\\ncreate('dataElementGroupSets', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example:** Create a dataValueSet\\n```js\\ncreate('dataValueSets', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example:** Create a dataValueSet with related dataValues\\n```js\\ncreate('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example:** Create an enrollment\\n```js\\ncreate('enrollments', {\\n  trackedEntity: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-09-17',\\n  incidentDate: '2013-09-17',\\n});\\n```\\n**Example:** Create an multiple objects with the Tracker API\\n```js\\n create(\\\"tracker\\\", {\\n  enrollments: [\\n    {\\n      trackedEntity: \\\"bmshzEacgxa\\\",\\n      orgUnit: \\\"TSyzvBiovKh\\\",\\n      program: \\\"gZBxv9Ujxg0\\\",\\n      enrollmentDate: \\\"2013-09-17\\\",\\n      incidentDate: \\\"2013-09-17\\\",\\n    },\\n  ],\\n  trackedEntities: [\\n    {\\n      orgUnit: \\\"TSyzvBiovKh\\\",\\n      trackedEntityType: \\\"nEenWmSyUEp\\\",\\n      attributes: [\\n        {\\n          attribute: \\\"w75KJ2mc4zz\\\",\\n          value: \\\"Gigiwe\\\",\\n        },\\n      ],\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n### destroy\\n\\n<p><code>destroy(resourceType, path, [data], [options], [callback]) ⇒ Operation</code></p>\\n\\nDelete a record. A generic helper function to delete an object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be deleted. E.g. `trackedEntities`, `organisationUnits`, etc. |\\n| path | <code>string</code> | Can be an `id` of an `object` or `path` to the `nested object` to `delete`. |\\n| [data] | <code>Object</code> | Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\\\"identifiableObjects\\\": [{\\\"id\\\": \\\"IDA\\\"}, {\\\"id\\\": \\\"IDB\\\"}, {\\\"id\\\": \\\"IDC\\\"}]}`. See more [on DHIS2 API docs](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects) |\\n| [options] | <code>Object</code> | Optional `options` for `del` operation including params e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see [DHIS2 documentation](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters). Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** a tracked entity instance. See [Delete tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\ndestroy('trackedEntities', 'LcRd6Nyaq7T');\\n```\\n\\n* * *\\n\\n### discover\\n\\n<p><code>discover(httpMethod, endpoint) ⇒ Operation</code></p>\\n\\nDiscover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| httpMethod | <code>string</code> | The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete` |\\n| endpoint | <code>string</code> | The path for a given endpoint. E.g. `/trackedEntities` or `/dataValueSets` |\\n\\n**Example:** a list of parameters allowed on a given endpoint for specific http method\\n```js\\ndiscover('post', '/trackedEntities')\\n```\\n\\n* * *\\n\\n### dv\\n\\n<p><code>dv(dataElement, value) ⇒ object</code></p>\\n\\nConverts a dataElement and value into a DHIS2 dataValue object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataElement | <code>string</code> | A data element ID. |\\n| value | <code>string</code> | The value for that data element. |\\n\\n**Example**\\n```js\\ndv('f7n9E0hX8qk', 12)\\n```\\n\\n* * *\\n\\n### findAttributeValue\\n\\n<p><code>findAttributeValue(trackedEntity, attributeDisplayName) ⇒ string</code></p>\\n\\nGets an attribute value by its case-insensitive display name\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntity | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeDisplayName | <code>string</code> | The 'displayName' to search for in the TEI's attributes |\\n\\n**Example**\\n```js\\nfindAttributeValue(state.data.trackedEntities[0], 'first name')\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(resourceType, query, [options], [callback]) ⇒ Operation</code></p>\\n\\nGet data. Generic helper method for getting data of any kind from DHIS2.\\n- This can be used to get `DataValueSets`,`events`,`trackers`,`etc.`\\n\\n**Returns**: <code>Operation</code> - state  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to get(use its `plural` name). E.g. `dataElements`, `tracker/trackedEntities`,`organisationUnits`, etc. |\\n| query | <code>Object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params beyond filters, request configuration (e.g. `auth`) and DHIS2 api version to use. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Get all data values for the 'pBOMPrpg1QX' dataset\\n```js\\nget('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n});\\n```\\n**Example:** Get all programs for an organization unit\\n```js\\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });\\n```\\n**Example:** Get a single tracked entity given the provided ID. See [TrackedEntities docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#tracked-entities-get-apitrackertrackedentities)\\n```js\\nget('tracker/trackedEntities/F8yKM85NbxW');\\n```\\n**Example:** Get an enrollment given the provided ID. See [Enrollment docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#enrollments-get-apitrackerenrollments)\\n```js\\nget('tracker/enrollments/abcd');\\n```\\n**Example:** Get all events matching given criteria. See [Events docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#events-get-apitrackerevents)\\n```js\\nget('tracker/events');\\n```\\n**Example:** Get the relationship between two tracker entities. The only required parameters are 'trackedEntity', 'enrollment' or 'event'. See [Relationships docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#relationships-get-apitrackerrelationships)\\n```js\\nget('tracker/relationships', {\\n  trackedEntity:['F8yKM85NbxW'],\\n});\\n```\\n\\n* * *\\n\\n### patch\\n\\n<p><code>patch(resourceType, path, data, [options], [callback]) ⇒ Operation</code></p>\\n\\nPatch a record. A generic helper function to send partial updates on one or more object properties.\\n- You are not required to send the full body of object properties.\\n- This is useful for cases where you don't want or need to update all properties on a object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. Include only the fields you want to update. E.g. `{name: \\\"New Name\\\"}` |\\n| [options] | <code>Object</code> | Optional configuration, including params for the update ({preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}). Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** a dataElement\\n```js\\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(resourceType, data, [options], [callback]) ⇒ Operation</code></p>\\n\\nPost data. Generic helper method for posting data of any kind to DHIS2.\\nThis can be used to create `DataValueSets`,`events`,`trackers`,etc.\\n\\n**Returns**: <code>Operation</code> - state  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `trackedEntities`, `programs`, `events`, ... |\\n| data | <code>Dhis2Data</code> | Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Create an event\\n```js\\npost(\\\"tracker\\\", {\\n  events: [\\n    {\\n      program: \\\"eBAyeGv0exc\\\",\\n      orgUnit: \\\"DiszpKrYNg8\\\",\\n      status: \\\"COMPLETED\\\",\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(resourceType, path, data, [options], [callback]) ⇒ Operation</code></p>\\n\\nUpdate data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send `all required fields` or the `full body`\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** a program\\n```js\\nupdate('programs', 'qAZJCrNJK8H', {\\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\\n  shortName: '14e1aa02',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example:** an event\\n```js\\nupdate('events', 'PVqUD2hvU4E', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'Ngelehun CHC',\\n  status: 'COMPLETED',\\n  storedBy: 'admin',\\n  dataValues: [],\\n});\\n```\\n**Example:** Update a tracker entity. See [Update tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\nupdate('trackedEntities', '', {\\n  createdAt: '2015-08-06T21:12:37.256',\\n  orgUnit: 'TSyzvBiovKh',\\n  createdAtClient: '2015-08-06T21:12:37.256',\\n  trackedEntity: 'IeQfgUtGPq2',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  inactive: false,\\n  deleted: false,\\n  featureType: 'NONE',\\n  programOwners: [\\n    {\\n      ownerOrgUnit: 'TSyzvBiovKh',\\n      program: 'IpHINAT79UW',\\n      trackedEntity: 'IeQfgUtGPq2',\\n    },\\n  ],\\n  attributes: [\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      displayName: 'Last name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'zDhUuAYrxNC',\\n      value: 'Russell',\\n    },\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      code: 'MMD_PER_NAM',\\n      displayName: 'First name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Catherine',\\n    },\\n  ],\\n});\\n```\\n**Example:** Update a dataSet\\n```js\\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });\\n```\\n**Example:** a dataSetNotification\\n```js\\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello Updated',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example:** Update a dataElement\\n```js\\nupdate('dataElements', 'FTRrcoaog83', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example:** Update a dataElementGroup\\n```js\\nupdate('dataElementGroups', 'QrprHT61XFk', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example:** Update a dataElementGroupSet\\n```js\\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example:** Update a dataValueSet\\n```js\\nupdate('dataValueSets', 'AsQj6cDsUq4', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example:** Update a dataValueSet with related dataValues\\n```js\\nupdate('dataValueSets', 'Ix2HsbDMLea', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example:** Update an enrollment given the provided ID\\n```js\\nupdate('enrollments', 'CmsHzercTBa' {\\n  trackedEntity: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-10-17',\\n  incidentDate: '2013-10-17',\\n});\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(resourceType, query, data, [options], [callback]) ⇒ Operation</code></p>\\n\\nUpsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.\\n\\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntities` |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [options] | <code>Object</code> | Optional configuration that will be applied to both the `get` and the `create` or `update` operations. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Upsert a trackedEntity\\n```js\\nupsert('trackedEntities', {\\n orgUnit: 'TSyzvBiovKh',\\n filter: ['w75KJ2mc4zz:Eq:Qassim'],\\n}, {\\n orgUnit: 'TSyzvBiovKh',\\n trackedEntityType: 'nEenWmSyUEp',\\n attributes: [\\n   {\\n     attribute: 'w75KJ2mc4zz',\\n     value: 'Qassim',\\n   },\\n ],\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language DHIS2\\n\\nAn OpenFn language Pack for building expressions and operations for working with\\nthe\\n[DHIS2 API](http://dhis2.github.io/dhis2-docs/master/en/developer/html/dhis2_developer_manual.html).\\nUsed most commonly via OpenFn.org or by hand with\\n[OpenFn/core](https://github.com/OpenFn/core) from the root of this repo:\\n\\n```sh\\ncore execute \\\\\\n -l ../language-dhis2 \\\\\\n -e ./tmp/expression.js \\\\\\n -s ./tmp/state.json \\\\\\n -o ./tmp/output.json\\n```\\n\\n> **Important Note:**  \\n> This adaptor uses the old tracker version and is only compatible with DHIS2\\n> API versions before 42 (2.42). For later API versions and the new tracker, use\\n> adaptor 6.0+. See\\n> [DHIS2 documentation](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html)\\n> for more information.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/dhis2-docs) for\\nfull technical documentation.\\n\\nThere are lots of **examples** for how to use the various helper functions on\\nthe main\\n[Adaptor docs](https://docs.openfn.org/adaptors/packages/dhis2-docs#modules)\\npage.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dhis2-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`. (NB: that this repo\\nalso contain integration tests which can be run with\\n`pnpm run integration-test`.)\\n\\n⚠️ NB: Make changes to the files in `src/` and then use `npm run build` to\\ngenerate output files in `lib/`.\\n\\nThe documentation is autogenerated, so please **rebuild the docs** after making\\nchanges by running `pnpm build docs`\\n\\n### Unit Tests\\n\\nUnit tests allows to test the functionalities of the adaptor helper functions\\nsuch as:\\n\\n> Does `create('events', payload)` perform a post request to the correct DHIS2\\n> API?\\n\\nTo run unit tests execute `pnpm run test` (they're the default tests).\\n\\nAnytime a new functionality is added to the helper functions, more unit tests\\nneeds to be added.\\n\\n### End-to-end integration tests\\n\\nIntegration tests allow us to test the end-to-end behavior of the helper\\nfunctions and also to test the examples we provide via inline documentation.\\n\\nFor example with integration tests we answer the following question:\\n\\n> Does `create('events', eventPayload)` actually create a new event in a live\\n> DHIS2 system?\\n\\nTo run integration tests, execute `npm run integration-test`. These tests use\\nnetwork I/O and a public connection to a DHIS2 \\\"play\\\" server so their timing and\\nperformance is unpredictable. Consider adding an increased timeout, and\\nmodifying the orgUnit, program, etc., IDs set in `globalState`.\\n\\n#### Troubleshooting the tests\\n\\n- Depending on your internet strength please consider changing the **global\\n  timeout** in the `test/mocha.opts` file to avoid faillures related to network\\n  timeouts.\\n\\n- The behavior of the tests in `test/integration.js` is very unpredictable; they\\n  depend on the **configuration of a target DHIS2 instance**. Currently you need\\n  to have at least one organisation unit with one program, one\\n  trackedEntityInstance and one programStage in it. These components need to be\\n  well configured for the integration tests to work. For example: the\\n  trackedEntityInstance need to be enrolled to the program, which should be\\n  created in that organisation unit and contains at least that programStage. If\\n  the tests fail, you must adjust these attributes in the\\n  [before hook](https://github.com/OpenFn/adaptors/tree/main/packages/dhis2/test/integration.js):\\n\\n```javascript\\nbefore(done => {\\n  fixture.initialState = {\\n    configuration: {\\n      username: 'admin',\\n      password: 'district',\\n      hostUrl: 'https://play.dhis2.org/2.36.6',\\n    },\\n    program: 'IpHINAT79UW',\\n    orgUnit: 'DiszpKrYNg8',\\n    trackedEntityInstance: 'uhubxsfLanV',\\n    programStage: 'eaDHS084uMp',\\n  };\\n  done();\\n});\\n```\\n\\n- Make sure the `update` and `upsert` integration tests don't affect those\\n  initial organisation units, programs, programStage and trackedEntityInstance\\n  required. Otherwise the create integration tests would be broken again; and\\n  that's an endless faillure loop :(\\n\\nAnytime a new example is added in the documentation of a helper function, a new\\nintegration test should be built.\\n\"","changelog":"\"# @openfn/language-dhis2\\n\\n## 6.0.1\\n\\n### Patch Changes\\n\\n- ab94b7c: Fix links in docs examples\\n\\n## 6.0.0\\n\\n### Major Changes\\n\\n- b44a3b1: Migrates the adaptor to the new Tracker API (v36+) for\\n  `trackedEntities`, `enrollments`, `events` and `relationships`. Note that\\n  `trackedEntities` is no longer used.\\n\\n  This release is designed for compatibility with DHIS2 v42, which drops support\\n  for a number of endpoints.\\n\\n  The `create`, `update`, `upsert` and `destroy` functions will automatically\\n  map affected resources to the new tracker API endpoint.\\n\\n  If you have an existing workflow which uses these functions with\\n  `trackedEntities`, `enrollments`, `events` or `relationships`, the data and\\n  options you pass may be incompatible with the new tracker API. You should\\n  review your code carefully against the\\n  [DHIS2 Tracker Migration Guide](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker-deprecated.html#webapi_tracker_migration)\\n  to see what's changed.\\n\\n  For example, if you used to do:\\n\\n  ```js\\n  create('trackedEntityInstances', {\\n    /*...*/\\n  });\\n  ```\\n\\n  You should now do:\\n\\n  ```js\\n  create('trackedEntities', {\\n    /*...*/\\n  });\\n  ```\\n\\n  The payloads have also changed shape, so for example if you used to:\\n\\n  ```js\\n  create('events', {\\n    trackedEntityInstance: 'eBAyeGv0exc',\\n    eventDate: '2024-01-01',\\n    /* ... */\\n  });\\n  ```\\n\\n  You should now do:\\n\\n  ```js\\n  create('events', {\\n    trackedEntity: 'eBAyeGv0exc',\\n    occurredAt: '2024-01-01',\\n    /* ... */\\n  });\\n  ```\\n\\n  The HTTP APIs `get()`, `patch()`, and `post()` do not automatically map to the\\n  new tracker: they continue to call the URL you provide with the data you send.\\n  You can use this to continue to call the old tracker API directly.\\n\\n### Minor Changes\\n\\n- d30f39f: Added new post() operation\\n\\n## 5.0.8\\n\\n### Patch Changes\\n\\n- 94be282: Fix an issue where the path argument of update does not accept a\\n  function value\\n\\n## 5.0.7\\n\\n### Patch Changes\\n\\n- 6cb5377: Removed support for DHIS2 v42\\n\\n## 5.0.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 5.0.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 5.0.3\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 5.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.0.5\\n\\n### Patch Changes\\n\\n- Fix attribute metadata\\n\\n## 4.0.4\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.0.3\\n\\n### Patch Changes\\n\\n- 222184d: remove Class Log and replaced\\n\\n  - `Log.success` with `console.log`\\n  - `Log.warn` with `console.warn`\\n  - `Log.error` with `console.error`\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- 1bd612e: improve error logs response\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.2.12\\n\\n### Patch Changes\\n\\n- 57742d1: improve logs output\\n\\n## 3.2.11\\n\\n### Patch Changes\\n\\n- 705caab: Remove tools as devdependencies\\n\\n## 3.2.10\\n\\n### Patch Changes\\n\\n- 929bca6: Use metadata helper function from common\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.2.9\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.2.8\\n\\n### Patch Changes\\n\\n- Fix metadata function export\\n\\n## 3.2.7\\n\\n### Patch Changes\\n\\n- c09b821: Add @magic annotations\\n\\n## 3.2.6\\n\\n### Patch Changes\\n\\n- df6098d: replace sample state with configuration\\n\\n## 3.2.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.4\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.2.3\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n  - @openfn/buildtools@1.0.2\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 8d6e8ce: Migrate dhis2 into repo\\n\\n### Patch Changes\\n\\n- Updated dependencies [4671e89]\\n- Updated dependencies [8d6e8ce]\\n  - @openfn/buildtools@1.0.1\\n\"","functions":["attr","create","destroy","discover","dv","findAttributeValue","get","patch","post","update","upsert"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The base DHIS2 instance URL","format":"uri","minLength":1,"examples":["https://play.dhis2.org/2.36.6"]},"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Password"]},"apiVersion":{"title":"API Version","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"38","description":"DHIS2 api version","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["hostUrl","password","username"]}},
[
  {
    "id": "attr",
    "longname": "attr",
    "name": "attr",
    "kind": "function",
    "scope": "global",
    "description": "Converts an attribute ID and value into a DHIS2 attribute object",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A tracked entity instance (TEI) attribute ID.",
        "name": "attribute"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value for that attribute.",
        "name": "value"
      }
    ],
    "examples": [
      "attr('w75KJ2mc4zz', 'Elias')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 887,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 11,
    "newscope": true,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of resource to create. E.g. `trackedEntities`, `programs`, `events`, ...",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Dhis2Data"
          ]
        },
        "description": "Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a program</caption>\ncreate('programs', {\n  name: 'name 20',\n  shortName: 'n20',\n  programType: 'WITHOUT_REGISTRATION',\n});",
      "<caption>Create a single event</caption>\ncreate('events', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'DiszpKrYNg8',\n  status: 'COMPLETED',\n});",
      "<caption>Create a single tracker entity. See [Create tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\ncreate('trackedEntities', {\n  orgUnit: 'TSyzvBiovKh',\n  trackedEntityType: 'nEenWmSyUEp',\n  attributes: [\n    {\n      attribute: 'w75KJ2mc4zz',\n      value: 'Gigiwe',\n    },\n  ]\n});",
      "<caption>Create a dataSet</caption>\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });",
      "<caption>a dataSetNotification</caption>\ncreate('dataSetNotificationTemplates', {\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\n  name: 'Notification',\n  messageTemplate: 'Hello',\n  deliveryChannels: ['SMS'],\n  dataSets: [],\n});",
      "<caption>Create a dataElement</caption>\ncreate('dataElements', {\n  aggregationType: 'SUM',\n  domainType: 'AGGREGATE',\n  valueType: 'NUMBER',\n  name: 'Paracetamol',\n  shortName: 'Para',\n});",
      "<caption>Create a dataElementGroup</caption>\ncreate('dataElementGroups', {\n  name: 'Data Element Group 1',\n  dataElements: [],\n});",
      "<caption>Create a dataElementGroupSet</caption>\ncreate('dataElementGroupSets', {\n  name: 'Data Element Group Set 4',\n  dataDimension: true,\n  shortName: 'DEGS4',\n  dataElementGroups: [],\n});",
      "<caption>Create a dataValueSet</caption>\ncreate('dataValueSets', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '12',\n});",
      "<caption>Create a dataValueSet with related dataValues</caption>\ncreate('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});",
      "<caption>Create an enrollment</caption>\ncreate('enrollments', {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-09-17',\n  incidentDate: '2013-09-17',\n});",
      "<caption>Create an multiple objects with the Tracker API</caption>\n create(\"tracker\", {\n  enrollments: [\n    {\n      trackedEntity: \"bmshzEacgxa\",\n      orgUnit: \"TSyzvBiovKh\",\n      program: \"gZBxv9Ujxg0\",\n      enrollmentDate: \"2013-09-17\",\n      incidentDate: \"2013-09-17\",\n    },\n  ],\n  trackedEntities: [\n    {\n      orgUnit: \"TSyzvBiovKh\",\n      trackedEntityType: \"nEenWmSyUEp\",\n      attributes: [\n        {\n          attribute: \"w75KJ2mc4zz\",\n          value: \"Gigiwe\",\n        },\n      ],\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "customTags": [
      {
        "tag": "magic",
        "value": "resourceType $.children.resourceTypes[*]"
      }
    ],
    "meta": {
      "lineno": 252,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "destroy",
    "longname": "destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "global",
    "description": "Delete a record. A generic helper function to delete an object",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be deleted. E.g. `trackedEntities`, `organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Can be an `id` of an `object` or `path` to the `nested object` to `delete`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\"identifiableObjects\": [{\"id\": \"IDA\"}, {\"id\": \"IDB\"}, {\"id\": \"IDC\"}]}`. See more {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects on DHIS2 API docs}",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional `options` for `del` operation including params e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters DHIS2 documentation}. Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>a tracked entity instance. See [Delete tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\ndestroy('trackedEntities', 'LcRd6Nyaq7T');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 814,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "discover",
    "longname": "discover",
    "name": "discover",
    "kind": "function",
    "scope": "global",
    "description": "Discover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete`",
        "name": "httpMethod"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The path for a given endpoint. E.g. `/trackedEntities` or `/dataValueSets`",
        "name": "endpoint"
      }
    ],
    "examples": [
      "<caption>a list of parameters allowed on a given endpoint for specific http method</caption>\ndiscover('post', '/trackedEntities')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 666,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "dv",
    "longname": "dv",
    "name": "dv",
    "kind": "function",
    "scope": "global",
    "description": "Converts a dataElement and value into a DHIS2 dataValue object",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A data element ID.",
        "name": "dataElement"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value for that data element.",
        "name": "value"
      }
    ],
    "examples": [
      "dv('f7n9E0hX8qk', 12)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 901,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "findAttributeValue",
    "longname": "findAttributeValue",
    "name": "findAttributeValue",
    "kind": "function",
    "scope": "global",
    "description": "Gets an attribute value by its case-insensitive display name",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A tracked entity instance (TEI) object",
        "name": "trackedEntity"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The 'displayName' to search for in the TEI's attributes",
        "name": "attributeDisplayName"
      }
    ],
    "examples": [
      "findAttributeValue(state.data.trackedEntities[0], 'first name')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 871,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get data. Generic helper method for getting data of any kind from DHIS2.\n- This can be used to get `DataValueSets`,`events`,`trackers`,`etc.`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to get(use its `plural` name). E.g. `dataElements`, `tracker/trackedEntities`,`organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A query object that will limit what resources are retrieved when converted into request params.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional `options` to define URL parameters via params beyond filters, request configuration (e.g. `auth`) and DHIS2 api version to use.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get all data values for the 'pBOMPrpg1QX' dataset</caption>\nget('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  orgUnit: 'DiszpKrYNg8',\n  period: '201401',\n  fields: '*',\n});",
      "<caption>Get all programs for an organization unit</caption>\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });",
      "<caption>Get a single tracked entity given the provided ID. See [TrackedEntities docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#tracked-entities-get-apitrackertrackedentities)</caption>\nget('tracker/trackedEntities/F8yKM85NbxW');",
      "<caption>Get an enrollment given the provided ID. See [Enrollment docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#enrollments-get-apitrackerenrollments)</caption>\nget('tracker/enrollments/abcd');",
      "<caption>Get all events matching given criteria. See [Events docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#events-get-apitrackerevents)</caption>\nget('tracker/events');",
      "<caption>Get the relationship between two tracker entities. The only required parameters are 'trackedEntity', 'enrollment' or 'event'. See [Relationships docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#relationships-get-apitrackerrelationships)</caption>\nget('tracker/relationships', {\n  trackedEntity:['F8yKM85NbxW'],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "state"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 500,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "global",
    "description": "Patch a record. A generic helper function to send partial updates on one or more object properties.\n- You are not required to send the full body of object properties.\n- This is useful for cases where you don't want or need to update all properties on a object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data to update. Include only the fields you want to update. E.g. `{name: \"New Name\"}`",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional configuration, including params for the update ({preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}). Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}`",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>a dataElement</caption>\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 767,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Post data. Generic helper method for posting data of any kind to DHIS2.\nThis can be used to create `DataValueSets`,`events`,`trackers`,etc.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of resource to create. E.g. `trackedEntities`, `programs`, `events`, ...",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Dhis2Data"
          ]
        },
        "description": "Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create an event</caption>\npost(\"tracker\", {\n  events: [\n    {\n      program: \"eBAyeGv0exc\",\n      orgUnit: \"DiszpKrYNg8\",\n      status: \"COMPLETED\",\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "state"
      }
    ],
    "access": "public",
    "customTags": [
      {
        "tag": "magic",
        "value": "resourceType $.children.resourceTypes[*]"
      }
    ],
    "meta": {
      "lineno": 545,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update data. A generic helper function to update a resource object of any type.\nUpdating an object requires to send `all required fields` or the `full body`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>a program</caption>\nupdate('programs', 'qAZJCrNJK8H', {\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\n  shortName: '14e1aa02',\n  programType: 'WITHOUT_REGISTRATION',\n});",
      "<caption>an event</caption>\nupdate('events', 'PVqUD2hvU4E', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'Ngelehun CHC',\n  status: 'COMPLETED',\n  storedBy: 'admin',\n  dataValues: [],\n});",
      "<caption>Update a tracker entity. See [Update tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\nupdate('trackedEntities', '', {\n  createdAt: '2015-08-06T21:12:37.256',\n  orgUnit: 'TSyzvBiovKh',\n  createdAtClient: '2015-08-06T21:12:37.256',\n  trackedEntity: 'IeQfgUtGPq2',\n  trackedEntityType: 'nEenWmSyUEp',\n  inactive: false,\n  deleted: false,\n  featureType: 'NONE',\n  programOwners: [\n    {\n      ownerOrgUnit: 'TSyzvBiovKh',\n      program: 'IpHINAT79UW',\n      trackedEntity: 'IeQfgUtGPq2',\n    },\n  ],\n  attributes: [\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      displayName: 'Last name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'zDhUuAYrxNC',\n      value: 'Russell',\n    },\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      code: 'MMD_PER_NAM',\n      displayName: 'First name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'w75KJ2mc4zz',\n      value: 'Catherine',\n    },\n  ],\n});",
      "<caption>Update a dataSet</caption>\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });",
      "<caption>a dataSetNotification</caption>\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\n  name: 'Notification',\n  messageTemplate: 'Hello Updated',\n  deliveryChannels: ['SMS'],\n  dataSets: [],\n});",
      "<caption>Update a dataElement</caption>\nupdate('dataElements', 'FTRrcoaog83', {\n  aggregationType: 'SUM',\n  domainType: 'AGGREGATE',\n  valueType: 'NUMBER',\n  name: 'Paracetamol',\n  shortName: 'Para',\n});",
      "<caption>Update a dataElementGroup</caption>\nupdate('dataElementGroups', 'QrprHT61XFk', {\n  name: 'Data Element Group 1',\n  dataElements: [],\n});",
      "<caption>Update a dataElementGroupSet</caption>\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\n  name: 'Data Element Group Set 4',\n  dataDimension: true,\n  shortName: 'DEGS4',\n  dataElementGroups: [],\n});",
      "<caption>Update a dataValueSet</caption>\nupdate('dataValueSets', 'AsQj6cDsUq4', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '12',\n});",
      "<caption>Update a dataValueSet with related dataValues</caption>\nupdate('dataValueSets', 'Ix2HsbDMLea', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});",
      "<caption>Update an enrollment given the provided ID</caption>\nupdate('enrollments', 'CmsHzercTBa' {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-10-17',\n  incidentDate: '2013-10-17',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 423,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Upsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of a resource to `upsert`. E.g. `trackedEntities`",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The data to use for update or create depending on the result of the query.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional configuration that will be applied to both the `get` and the `create` or `update` operations.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Upsert a trackedEntity</caption>\nupsert('trackedEntities', {\n orgUnit: 'TSyzvBiovKh',\n filter: ['w75KJ2mc4zz:Eq:Qassim'],\n}, {\n orgUnit: 'TSyzvBiovKh',\n trackedEntityType: 'nEenWmSyUEp',\n attributes: [\n   {\n     attribute: 'w75KJ2mc4zz',\n     value: 'Qassim',\n   },\n ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "exceptions": [
      {
        "type": {
          "names": [
            "RangeError"
          ]
        },
        "description": "- Throws range error"
      }
    ],
    "meta": {
      "lineno": 601,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"dynamics","adaptor":"@openfn/language-dynamics","version":"0.5.9","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Dynamics\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nMicrosoft Dynamics API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dynamics-configuration-schema/)\\ndefinition.\\n\\n- _Dynamics uses oauth2. The language-package will expect to be given a valid\\n  oauth token. If a valid token is not provided, it will fail. On OpenFn.org,\\n  the `CredentialService` is responsible for making sure the the oauth token is\\n  valid each time it assembles state to hand to `execute`._\\n\\n#### sample createEntity expression\\n\\n```js\\ncreateEntity({\\n  entityName: 'accounts',\\n  body: {\\n    name: 'Open Function',\\n    creditonhold: false,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample query expression\\n\\n_Can be used to retrieve or query a specific Entity if an entityId is declared\\nin the expression. Otherwise it will perform a query on all data with the\\ndefined Entity Name_\\n\\n```js\\nquery({\\n  entityName: 'contacts',\\n  entityId: '51a0e5b9-88df-e311-b8e5-6c3be5a8b200',\\n  query: {\\n    fields: ['fullname', 'birthdate'],\\n    limit: 10,\\n    orderBy: {\\n      field: 'lastname',\\n      direction: 'asc',\\n    },\\n    filter: \\\"firstname eq 'Cat'\\\",\\n  },\\n});\\n```\\n\\n#### sample update expression\\n\\n```js\\nupdateEntity({\\n  entityName: 'accounts',\\n  entityId: 'f4301865-c64a-e711-80f3-e0071b6fd061',\\n  body: {\\n    name: 'wilder 2',\\n    creditonhold: true,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample delete expression\\n\\n```js\\ndeleteEntity({\\n  entityName: 'accounts',\\n  entityId: 'aeef941b-254a-e711-80f1-e0071b685921',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-dynamics\\n\\n## 0.5.9\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.7\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.14\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.4.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.4.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.4.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.4.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.4.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.4.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- b032b9c: Migrate Dynamics\\n\\n### Patch Changes\\n\\n- e81561f: Updated ast and package.json\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"resource":{"title":"Resource","type":"string","description":"Dynamics resource URL","format":"uri","minLength":1,"examples":["https://openfn.crm2.dynamics.com"]},"apiVersion":{"title":"API Version","type":"string","default":"8.2.0","description":"Dynamics API version to use","minLength":1,"examples":["8.2.0"]},"access_token":{"title":"Access Token","type":"string","description":"Dynamics API access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["resource","apiVersion","access_token"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"facebook","adaptor":"@openfn/language-facebook","version":"0.4.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#postmessage\\\">postMessage(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### postMessage\\n\\n<p><code>postMessage(params) ⇒ Operation</code></p>\\n\\nPost a message\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\npostMessage({\\n \\\"recipient\\\": {\\n    \\\"id\\\": \\\"your-psid\\\"\\n  },\\n  \\\"message\\\": {\\n    \\\"text\\\": \\\"your-message\\\"\\n  }\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Facebook\\n\\nLanguage Pack for building expressions and operations to interact with the\\nFacebook Messenger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/facebook-configuration-schema/)\\ndefinition.\\n\\n### postMessage\\n\\n#### sample expression using operation\\n\\n```js\\npostMessage({\\n  recipient: {\\n    id: '<PSID>',\\n  },\\n  message: {\\n    text: '<YOUR MESSAGE GOES HERE>',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-facebook\\n\\n## 0.4.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- d5a326f5: Add example `access_token` in the `configuration-schema`\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f7669d2: migrate facebook\\n\"","functions":["postMessage"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Facebook API access token","writeOnly":true,"minLength":1,"examples":["EAAGm0PX4ZCpsBAEHuZBwZBZCDEZDZD7ZC8ZBZBt7MbZA7sVZA"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "postMessage",
    "longname": "postMessage",
    "name": "postMessage",
    "kind": "function",
    "scope": "global",
    "description": "Post a message",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "postMessage({\n \"recipient\": {\n    \"id\": \"your-psid\"\n  },\n  \"message\": {\n    \"text\": \"your-message\"\n  }\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 52,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/facebook/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir-fr","adaptor":"@openfn/language-fhir-fr","version":"1.0.4","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#utils_addExtension\\\">utils.addExtension(resource, url, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_cc\\\">utils.cc()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_coding\\\">utils.coding(code, system)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_composite\\\">utils.composite(object, key, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_concept\\\">utils.concept()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_findExtension\\\">utils.findExtension(obj, targetUrl, [path])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_id\\\">utils.id()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_identifier\\\">utils.identifier(input, [system])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_ref\\\">utils.ref()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_reference\\\">utils.reference(ref)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_setSystemMap\\\">utils.setSystemMap()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_address\\\">builders.address(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_appointment\\\">builders.appointment(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_contactPoint\\\">builders.contactPoint(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_encounter\\\">builders.encounter(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_extension\\\">builders.extension(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_healthcareService\\\">builders.healthcareService(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_humanName\\\">builders.humanName(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_location\\\">builders.location(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationAdministration\\\">builders.medicationAdministration(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observation\\\">builders.observation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_organization\\\">builders.organization(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_patient\\\">builders.patient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitioner\\\">builders.practitioner(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitionerRole\\\">builders.practitionerRole(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_relatedPerson\\\">builders.relatedPerson(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_schedule\\\">builders.schedule(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_slot\\\">builders.slot(type, props)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n## utils\\n\\nThese functions belong to the utils namespace.\\n### utils.addExtension {#utils_addExtension}\\n\\n<p><code>addExtension(resource, url, value)</code></p>\\n\\nAdd an extension to a resource (or object).\\nAn object will be created and added to an `extension` array on the provided resource.\\nThe extension array will be set if it does not exist on the resource.\\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource |  | a FHIR resource object to add an extension too |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n\\n\\n* * *\\n\\n\\n### utils.cc {#utils_cc}\\n\\n<p><code>cc()</code></p>\\n\\nAlias for util.concept()\\n\\n\\n* * *\\n\\n\\n### utils.coding {#utils_coding}\\n\\n<p><code>coding(code, system)</code></p>\\n\\nCreate a coding object { code, system }. Systems will be mapped using the system map.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| code | <code>string</code> | the code value |\\n| system | <code>string</code> | URL to the system. Well be mapped using the system map. |\\n\\n\\n* * *\\n\\n\\n### utils.composite {#utils_composite}\\n\\n<p><code>composite(object, key, value)</code></p>\\n\\nWrite a value to the target object using a typed key\\nIe, if key is `value` and the value is a date time string,\\nthis function will write `valueDateTime` to the object.\\n\\nThis function is poorly named.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| object |  | the object to write the composite key to |\\n| key | <code>string</code> | the base key to use to write the value |\\n| value |  | some value to write to the object |\\n\\n\\n* * *\\n\\n\\n### utils.concept {#utils_concept}\\n\\n<p><code>concept()</code></p>\\n\\nCreate a codeableConcept. Codings can be coding objects or\\n[code, system] tuples\\nif the first argument is a string, it will be set as the text.\\nSystems will be mapped with the system map\\n\\n**Example:** <Create a codeableConcept\\n```js\\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n* @example <caption><Create a codeableConcept with text</caption>\\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n\\n* * *\\n\\n\\n### utils.findExtension {#utils_findExtension}\\n\\n<p><code>findExtension(obj, targetUrl, [path])</code></p>\\n\\nFind an extension with a given url in some array\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj |  | a fhir resource |\\n| targetUrl | <code>string</code> | the extension URL you want to find |\\n| [path] | <code>string</code> | a path to extract from the resource. Optional. |\\n\\n\\n* * *\\n\\n\\n### utils.id {#utils_id}\\n\\n<p><code>id()</code></p>\\n\\nAlias for util.identifier()\\n\\n\\n* * *\\n\\n\\n### utils.identifier {#utils_identifier}\\n\\n<p><code>identifier(input, [system])</code></p>\\n\\nCreate an identifier resource. Systems will be mapped against the system map.\\nThe input can be a string value, or an identifier object.\\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input |  | an array of strings, or a identifier value as a string or object |\\n| [system] | <code>string</code> | the string system to use by default if |\\n\\n\\n* * *\\n\\n\\n### utils.ref {#utils_ref}\\n\\n<p><code>ref()</code></p>\\n\\nAlias for util.reference()\\n\\n\\n* * *\\n\\n\\n### utils.reference {#utils_reference}\\n\\n<p><code>reference(ref)</code></p>\\n\\nCreate a reference object of the form { reference }\\nIf ref is an array, each item will be mapped and an array returned.\\nIf ref is a FHIR resource, a reference to it will be generated\\nIf ref is a string, it'll be treated as a reference id and returned as an object\\nIf ref is a valid FHIR reference, it'll just be returned.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| ref | the thing to generate a reference from |\\n\\n\\n* * *\\n\\n\\n### utils.setSystemMap {#utils_setSystemMap}\\n\\n<p><code>setSystemMap()</code></p>\\n\\nDefine a set of mapped system values.\\n\\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.\\n\\n**Example:** Set shortcut sustem mappings\\n```js\\nutil.setSystemMap({\\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\\n});\\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\\n};\\n```\\n\\n* * *\\n\\n\\n## builders\\n\\nThese functions belong to the builders namespace.\\n### builders.address {#builders_address}\\n\\n<p><code>address(type, props)</code></p>\\n\\nCreate a FHIR Address resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.appointment {#builders_appointment}\\n\\n<p><code>appointment(type, props)</code></p>\\n\\nCreate a FHIR Appointment resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.contactPoint {#builders_contactPoint}\\n\\n<p><code>contactPoint(type, props)</code></p>\\n\\nCreate a FHIR ContactPoint resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.encounter {#builders_encounter}\\n\\n<p><code>encounter(type, props)</code></p>\\n\\nCreate a FHIR Encounter resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.extension {#builders_extension}\\n\\n<p><code>extension(type, props)</code></p>\\n\\nCreate a FHIR Extension resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.healthcareService {#builders_healthcareService}\\n\\n<p><code>healthcareService(type, props)</code></p>\\n\\nCreate a FHIR HealthcareService resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.humanName {#builders_humanName}\\n\\n<p><code>humanName(type, props)</code></p>\\n\\nCreate a FHIR HumanName resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.location {#builders_location}\\n\\n<p><code>location(type, props)</code></p>\\n\\nCreate a FHIR Location resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationAdministration {#builders_medicationAdministration}\\n\\n<p><code>medicationAdministration(type, props)</code></p>\\n\\nCreate a FHIR MedicationAdministration resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.observation {#builders_observation}\\n\\n<p><code>observation(type, props)</code></p>\\n\\nCreate a FHIR Observation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.organization {#builders_organization}\\n\\n<p><code>organization(type, props)</code></p>\\n\\nCreate a FHIR Organization resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.patient {#builders_patient}\\n\\n<p><code>patient(type, props)</code></p>\\n\\nCreate a FHIR Patient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.practitioner {#builders_practitioner}\\n\\n<p><code>practitioner(type, props)</code></p>\\n\\nCreate a FHIR Practitioner resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.practitionerRole {#builders_practitionerRole}\\n\\n<p><code>practitionerRole(type, props)</code></p>\\n\\nCreate a FHIR PractitionerRole resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.relatedPerson {#builders_relatedPerson}\\n\\n<p><code>relatedPerson(type, props)</code></p>\\n\\nCreate a FHIR RelatedPerson resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.schedule {#builders_schedule}\\n\\n<p><code>schedule(type, props)</code></p>\\n\\nCreate a FHIR Schedule resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.slot {#builders_slot}\\n\\n<p><code>slot(type, props)</code></p>\\n\\nCreate a FHIR Slot resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-fhir-fr <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn adaptor for building integration jobs for use with the fhir-fr API.\\n\\nThis adaptor has been auto-generated from a FHIR spec. Do not modify generated\\ncode or changes will be lost.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/fhir-fr-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-fr-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test`\\n\\nBuild the adaptor using `pnpm build`.\\n\\nRe-generate the adaptor source with `pnpm generate-fhir fhir-fr`\\n\\nTo update the spec an re-generate, run `pnpm generate-fhir fhir-fr --respec`.\\nYou can update the spec url with `--spec <www>` or by modifying package.json\\n\"","changelog":"\"# @openfn/language-fhir-fr\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Fix exports\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Attempt to fix typings in lightning using new builder\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Type and build fixes\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Fix typings\\n\\n## 1.0.0\\n\\nInitial release.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"baseUrl":{"title":"Base Url","type":"string","description":"The baseUrl","examples":["https://hapi.fhir.org"]},"apiPath":{"title":"API Path","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"R4","description":"FHIR api path","minLength":1,"examples":["baseR4","R3","R4"]},"username":{"title":"Username","type":"string","description":"Username","examples":["openfn_test"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your FHIR access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"required":["baseUrl","apiPath"]}},
[
  {
    "id": "addExtension",
    "longname": "addExtension",
    "name": "addExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Add an extension to a resource (or object).\nAn object will be created and added to an `extension` array on the provided resource.\nThe extension array will be set if it does not exist on the resource.\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString",
    "params": [
      {
        "description": "a FHIR resource object to add an extension too",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 101,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 20,
    "newscope": true,
    "level": 0
  },
  {
    "id": "address",
    "longname": "address",
    "name": "address",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Address resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 16,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 0,
    "newscope": true,
    "level": 0
  },
  {
    "id": "appointment",
    "longname": "appointment",
    "name": "appointment",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Appointment resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cc",
    "longname": "cc",
    "name": "cc",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.concept()",
    "access": "public",
    "meta": {
      "lineno": 178,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 24,
    "level": 0
  },
  {
    "id": "coding",
    "longname": "coding",
    "name": "coding",
    "kind": "function",
    "scope": "utils",
    "description": "Create a coding object { code, system }. Systems will be mapped using the system map.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the code value",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to the system. Well be mapped using the system map.",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "composite",
    "longname": "composite",
    "name": "composite",
    "kind": "function",
    "scope": "utils",
    "description": "Write a value to the target object using a typed key\nIe, if key is `value` and the value is a date time string,\nthis function will write `valueDateTime` to the object.\n\nThis function is poorly named.",
    "params": [
      {
        "description": "the object to write the composite key to",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the base key to use to write the value",
        "name": "key"
      },
      {
        "description": "some value to write to the object",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 236,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 27,
    "level": 0
  },
  {
    "id": "concept",
    "longname": "concept",
    "name": "concept",
    "kind": "function",
    "scope": "utils",
    "description": "Create a codeableConcept. Codings can be coding objects or\n[code, system] tuples\nif the first argument is a string, it will be set as the text.\nSystems will be mapped with the system map",
    "examples": [
      "<caption><Create a codeableConcept</caption>\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\n* @example <caption><Create a codeableConcept with text</caption>\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])"
    ],
    "access": "public",
    "meta": {
      "lineno": 151,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "contactPoint",
    "longname": "contactPoint",
    "name": "contactPoint",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ContactPoint resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 285,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "encounter",
    "longname": "encounter",
    "name": "encounter",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Encounter resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 345,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "extension",
    "longname": "extension",
    "name": "extension",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Extension resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 750,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "findExtension",
    "longname": "findExtension",
    "name": "findExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Find an extension with a given url in some array",
    "params": [
      {
        "description": "a fhir resource",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the extension URL you want to find",
        "name": "targetUrl"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a path to extract from the resource. Optional.",
        "name": "path"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 120,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "healthcareService",
    "longname": "healthcareService",
    "name": "healthcareService",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR HealthcareService resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2132,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "humanName",
    "longname": "humanName",
    "name": "humanName",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR HumanName resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2410,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "id",
    "longname": "id",
    "name": "id",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.identifier()",
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "identifier",
    "longname": "identifier",
    "name": "identifier",
    "kind": "function",
    "scope": "utils",
    "description": "Create an identifier resource. Systems will be mapped against the system map.\nThe input can be a string value, or an identifier object.\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.",
    "params": [
      {
        "description": "an array of strings, or a identifier value as a string or object",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the string system to use by default if",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 57,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "location",
    "longname": "location",
    "name": "location",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Location resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2478,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "medicationAdministration",
    "longname": "medicationAdministration",
    "name": "medicationAdministration",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationAdministration resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2730,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "observation",
    "longname": "observation",
    "name": "observation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Observation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2933,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "organization",
    "longname": "organization",
    "name": "organization",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Organization resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5322,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "patient",
    "longname": "patient",
    "name": "patient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Patient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6051,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "practitioner",
    "longname": "practitioner",
    "name": "practitioner",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Practitioner resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6715,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "practitionerRole",
    "longname": "practitionerRole",
    "name": "practitionerRole",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PractitionerRole resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6884,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "ref",
    "longname": "ref",
    "name": "ref",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.reference()",
    "access": "public",
    "meta": {
      "lineno": 222,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 26,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "utils",
    "description": "Create a reference object of the form { reference }\nIf ref is an array, each item will be mapped and an array returned.\nIf ref is a FHIR resource, a reference to it will be generated\nIf ref is a string, it'll be treated as a reference id and returned as an object\nIf ref is a valid FHIR reference, it'll just be returned.",
    "params": [
      {
        "description": "the thing to generate a reference from",
        "name": "ref"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 190,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 25,
    "level": 0
  },
  {
    "id": "relatedPerson",
    "longname": "relatedPerson",
    "name": "relatedPerson",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RelatedPerson resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7290,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "schedule",
    "longname": "schedule",
    "name": "schedule",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Schedule resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7443,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "setSystemMap",
    "longname": "setSystemMap",
    "name": "setSystemMap",
    "kind": "function",
    "scope": "utils",
    "description": "Define a set of mapped system values.\n\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.",
    "examples": [
      "<caption>Set shortcut sustem mappings</caption>\nutil.setSystemMap({\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\n});\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\n};"
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "slot",
    "longname": "slot",
    "name": "slot",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Slot resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7537,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir-ndr-et","adaptor":"@openfn/language-fhir-ndr-et","version":"0.1.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, resource, params, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#utils_addExtension\\\">utils.addExtension(resource, url, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_cc\\\">utils.cc()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_coding\\\">utils.coding(code, system)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_composite\\\">utils.composite(object, key, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_concept\\\">utils.concept()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_findExtension\\\">utils.findExtension(obj, targetUrl, [path])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_id\\\">utils.id()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_identifier\\\">utils.identifier(input, [system])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_ref\\\">utils.ref()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_reference\\\">utils.reference(ref)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_setSystemMap\\\">utils.setSystemMap()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_carePlan\\\">builders.carePlan(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_encounter\\\">builders.encounter(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medication\\\">builders.medication(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationAdministration\\\">builders.medicationAdministration(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationDispense\\\">builders.medicationDispense(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationRequest\\\">builders.medicationRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observation\\\">builders.observation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_patient\\\">builders.patient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_relatedPerson\\\">builders.relatedPerson(type, props)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resourceType, resource, params, callback) ⇒ Operation</code></p>\\n\\nCreates a new resource with a server assigned resourceType.\\nThe resource object doesn't need resourceType or id\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>FhirResourceTypes</code> | The resource type to create |\\n| resource | <code>FhirResource</code> | The resource to create |\\n| params | <code>object</code> | (Optional) FHIR parameters to control and configure resource creation. You can specify a version ie r4 here. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n**Example:** Create a new patient\\n```js\\ncreate('Patient', {\\n  name: [\\n    {\\n      use: 'official',\\n      family: 'La Paradisio',\\n      given: ['Josephine', 'Nessa'],\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n\\n## utils\\n\\nThese functions belong to the utils namespace.\\n### utils.addExtension {#utils_addExtension}\\n\\n<p><code>addExtension(resource, url, value)</code></p>\\n\\nAdd an extension to a resource (or object).\\nAn object will be created and added to an `extension` array on the provided resource. \\nThe extension array will be set if it does not exist on the resource.\\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource |  | a FHIR resource object to add an extension too |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n\\n\\n* * *\\n\\n\\n### utils.cc {#utils_cc}\\n\\n<p><code>cc()</code></p>\\n\\nAlias for util.concept()\\n\\n\\n* * *\\n\\n\\n### utils.coding {#utils_coding}\\n\\n<p><code>coding(code, system)</code></p>\\n\\nCreate a coding object { code, system }. Systems will be mapped using the system map.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| code | <code>string</code> | the code value |\\n| system | <code>string</code> | URL to the system. Well be mapped using the system map. |\\n\\n\\n* * *\\n\\n\\n### utils.composite {#utils_composite}\\n\\n<p><code>composite(object, key, value)</code></p>\\n\\nWrite a value to the target object using a typed key\\nIe, if key is `value` and the value is a date time string,\\nthis function will write `valueDateTime` to the object.\\n\\nThis function is poorly named.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| object |  | the object to write the composite key to |\\n| key | <code>string</code> | the base key to use to write the value |\\n| value |  | some value to write to the object |\\n\\n\\n* * *\\n\\n\\n### utils.concept {#utils_concept}\\n\\n<p><code>concept()</code></p>\\n\\nCreate a codeableConcept. Codings can be coding objects or\\n[code, system] tuples\\nif the first argument is a string, it will be set as the text.\\nSystems will be mapped with the system map\\n\\n**Example:** <Create a codeableConcept\\n```js\\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])  \\n* @example <caption><Create a codeableConcept with text</caption>\\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])  \\n```\\n\\n* * *\\n\\n\\n### utils.findExtension {#utils_findExtension}\\n\\n<p><code>findExtension(obj, targetUrl, [path])</code></p>\\n\\nFind an extension with a given url in some array\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj |  | a fhir resource |\\n| targetUrl | <code>string</code> | the extension URL you want to find |\\n| [path] | <code>string</code> | a path to extract from the resource. Optional. |\\n\\n\\n* * *\\n\\n\\n### utils.id {#utils_id}\\n\\n<p><code>id()</code></p>\\n\\nAlias for util.identifier()\\n\\n\\n* * *\\n\\n\\n### utils.identifier {#utils_identifier}\\n\\n<p><code>identifier(input, [system])</code></p>\\n\\nCreate an identifier resource. Systems will be mapped against the system map.\\nThe input can be a string value, or an identifier object.\\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input |  | an array of strings, or a identifier value as a string or object |\\n| [system] | <code>string</code> | the string system to use by default if |\\n\\n\\n* * *\\n\\n\\n### utils.ref {#utils_ref}\\n\\n<p><code>ref()</code></p>\\n\\nAlias for util.reference()\\n\\n\\n* * *\\n\\n\\n### utils.reference {#utils_reference}\\n\\n<p><code>reference(ref)</code></p>\\n\\nCreate a reference object of the form { reference }\\nIf ref is an array, each item will be mapped and an array returned.\\nIf ref is a FHIR resource, a reference to it will be generated\\nIf ref is a string, it'll be treated as a reference id and returned as an object\\nIf ref is a valid FHIR reference, it'll just be returned.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| ref | the thing to generate a reference from |\\n\\n\\n* * *\\n\\n\\n### utils.setSystemMap {#utils_setSystemMap}\\n\\n<p><code>setSystemMap()</code></p>\\n\\nDefine a set of mapped system values.\\n\\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.\\n\\n**Example:** Set shortcut sustem mappings\\n```js\\nutil.setSystemMap({\\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\\n});\\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\\n};\\n```\\n\\n* * *\\n\\n\\n## builders\\n\\nThese functions belong to the builders namespace.\\n### builders.carePlan {#builders_carePlan}\\n\\n<p><code>carePlan(type, props)</code></p>\\n\\nCreate a FHIR CarePlan resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.encounter {#builders_encounter}\\n\\n<p><code>encounter(type, props)</code></p>\\n\\nCreate a FHIR Encounter resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medication {#builders_medication}\\n\\n<p><code>medication(type, props)</code></p>\\n\\nCreate a FHIR Medication resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationAdministration {#builders_medicationAdministration}\\n\\n<p><code>medicationAdministration(type, props)</code></p>\\n\\nCreate a FHIR MedicationAdministration resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationDispense {#builders_medicationDispense}\\n\\n<p><code>medicationDispense(type, props)</code></p>\\n\\nCreate a FHIR MedicationDispense resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationRequest {#builders_medicationRequest}\\n\\n<p><code>medicationRequest(type, props)</code></p>\\n\\nCreate a FHIR MedicationRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.observation {#builders_observation}\\n\\n<p><code>observation(type, props)</code></p>\\n\\nCreate a FHIR Observation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.patient {#builders_patient}\\n\\n<p><code>patient(type, props)</code></p>\\n\\nCreate a FHIR Patient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.relatedPerson {#builders_relatedPerson}\\n\\n<p><code>relatedPerson(type, props)</code></p>\\n\\nCreate a FHIR RelatedPerson resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-fhir-ndr-et <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the FHIR API\\nfor NDR Ethopia.\\n\\n## Documentation\\n\\nThis adaptor is largely auto-generated from the spec at\\nhttps://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/definitions.json.zip.\\nSee below for more details about that.\\n\\nWe **strongly** recommend not editing generated source files by hand! Better to\\nupdate the spec, mappings, or code generation rules. Otherwise your changes will\\nbe lost.\\n\\nUnlike most adaptors, types are checked-in (because they are largely\\nautogenerated). A custom dts build is used.\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/fhir-ndr-et-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-ndr-et-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Building\\n\\nTo generate the adaptor source, run `pnpm build:src`. This will generate the\\nbuilder functions and typings, but not generate all the other adaptor stuff,\\nlike docs and dist.\\n\\nThe source is NOT rebuilt in CI or during a general repo build (because a change\\nto the remote spec can result in a diff in the source, and a diff in the source\\ncreates problems all over)\\n\\nThe standard `pnpm build` will generate docs and typedefs and stuff, but NOT the\\nsource.\\n\\nSo locally, run `pnpm build:src` to rebuild the adaptor code.\\n\\nThe first time the source build runs, a new \\\"spec\\\" file will be downloaded. To\\nforce a new download (ie to update the spec) delete `./spec/spec.json`\\n\\n## How to use\\n\\nThis adaptor provides a bunch of helper functions to create FHIR resources in\\nthe right structure.\\n\\nUse `builders.*` (or `b.*` for short) namespace to create resource types, like\\nthis:\\n\\n```\\nfn(() => {\\n  const encounter = builders.encounter('target-facility-encounter', {\\n    id,\\n    /* add props as needed */\\n  });\\n})\\n```\\n\\nAll supported resource types have a main function on the `builders` object. The\\nfirst argument is the profile id for that resource, the second is JSON data to\\ndefine the resource.\\n\\nCode assist is available in Lightning for profile ids - just hit ctrl + space to\\nbring up the list. It's also available in VSC (see the\\n[Wiki article](https://github.com/OpenFn/adaptors/wiki/How-to-get-code-assist-for-adaptors-in-VSC))\\n\\nThe json object is designed to be smart and do stuff like generate references\\nautomatically, or map typed keys like effective -> effectiveDateTime.\\n\\nTypescript and documentation should help here although work is needed on this\\nstuff. The design is to give it a sensible value and trust it to do the right\\nthing.\\n\\nSee Resources.tests.js for some examples of creating the supported resources\\nfrom inputs.\\n\\nAs well as the builders, the adaptor also exports util functions to make it a\\nbit easier to create references, codeableconcepts, codings and so on.\\n\\nSo you can do stuff like this:\\n\\n```js\\nfn(() => {\\n  const encounter = builders.encounter('target-facility-encounter', {\\n    id,\\n    subject: util.reference('some-resource-id'),\\n    class: util.coding([value, system]),\\n  });\\n});\\n```\\n\\n## Code Generation\\n\\nA number of files in `src` are auto-generated (you can tell because they have a\\nnice clear comment up at the top).\\n\\nThe build logic is all handled in the `build/` folder.\\n\\nHere is roughly how the code generation works.\\n\\nThe objective is to read in the snapshot definition of all the fhir resources in\\nthe destination system, and for each resource type that we're interested in,\\ngenerate a) an easy-to-use builder function and b) a list of typescript\\ndefinitions to match it.\\n\\nFirst, we check to see whether `./spec/spec.json` exists if it does not,\\ndownload it!\\n\\nThen we load this spec.json into memory. It's a large complex file so we break\\nit down into a simpler JSON representation which we call a schema.\\n\\nThe schema contains a simple expression of rules that our builder function will\\nneed to apply. It looks a bit like this:\\n\\n```json\\n{\\n  \\\"id\\\": \\\"arv-regimen-medication\\\",\\n  \\\"type\\\": \\\"Medication\\\",\\n  \\\"url\\\": \\\"http://moh.gov.et/fhir/hiv/StructureDefinition/arv-regimen-medication\\\",\\n  \\\"props\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"isArray\\\": false,\\n      \\\"desc\\\": \\\"Logical id of this artifact\\\",\\n      \\\"isComposite\\\": false,\\n      \\\"defaults\\\": {}\\n    }\\n    // ...\\n  }\\n}\\n```\\n\\nThis tells us for exaple that an arv-regimen-medication has a property called\\n`id`, which is a type string. So our builder function will need to handle that.\\n\\nWe only generate a simple schema for the resource types we're interested in.\\nThat's controlled by a file called `./build/mappings.ts`. The mappings has two\\njobs:\\n\\n1. Specific which resource types to generate builder functions for\\n2. Provide manual override rules for those builders. This lets us provide\\n   special mappings on keys for example, or provide defaults if the schema is\\n   missing some information.\\n\\nSo now we've generated simple schema objects for the resource types we're\\ninterested in.\\n\\nNext we generate the builder functions. We use a library call `ast-types` to\\nhelp us do this. Mostly we build an AST tree directly - that is, we\\nprogrammatically define the structure of the code using a neat API. And from\\nthis structure we generate code strings with nice formatting.\\n\\nThis keeps our code generation nice and robust. The API ensures that the\\ngenerated code is syntactically valid, and throws errors if we ask it do do\\nsomething illegal - like nest a statement inside the condition of an\\nif-statement. If we were generating strings directly, we'd have to be very\\ncareful about things like typos and couldn't apply smart transformations to the\\ncode.\\n\\nUsing the schema information and mapping overrides, we generate code statements\\nto take the input data passed as the second argument, and apply it smartly to a\\nnew FHIR resource, which we finally return. We lean heavily on the util\\nfunctions in `src/utils.js` to simplify this.\\n\\nOnce we've got our code, we have to generate matching TypeScript definitions for\\neach builder. This ensures that we get code assist and intellisense on our\\ngenerated functions, making the builders much safer and easier to use.\\n\\nWe use the TypeScript compiler to do this, just like how we use `ast-types` to\\ngenerate the code (although it has to be said that the TypeScript compiler has a\\nway less nice API).\\n\\nOnce finished, generated files are written into `src/`, where they can be\\ntested.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-fhir-ndr-et\\n\\n## 0.1.7\\n\\n### Patch Changes\\n\\n- Fix typescript definitions\\n\\n## 0.1.6\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n  - @openfn/language-fhir@5.0.3\\n\\n## 0.1.5\\n\\n### Patch Changes\\n\\n- Order the generated code alphabetically\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 47bf58f: Adjust build process to fix docs\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- Update spec version\\n\\n## 0.1.0\\n\\nInitial release\\n\\n## 0..19\\n\\n- Map text values into \\\"code\\\"\\n\\n## 0.0.18\\n\\n- Make composite types smarter when passed a Resource (convert it to a\\n  reference)\\n\\n## 0.0.17\\n\\n- support more types in addExtension\\n\\n## 0.0.16\\n\\n- Add `text` to each resource type\\n\\n## 0.0.15\\n\\n- Update schema to lateest version\\n\\n## 0.0.14\\n\\n- add relatedPerson builder\\n\\n## 0.0.13\\n\\n- reference will generate a reference to a resource if you pass it in (in form\\n  type/id)\\n- add aliases for util.ref, util.id, util.cc\\n- properly track arrays of references\\n\\n## 0.0.12\\n\\n- Make util.findExtension safe for resources without an extension\\n\\n## 0.0.11\\n\\n- Add builders for MedicationDispense and Medication\\n- Tighten extension mapping\\n\\n## 0.0.10\\n\\n- Improvements to observation (map references, default static values, and handle\\n  value)\\n\\n## 0.0.9\\n\\n- Fix prop mapping which arent in an array util.\\n- concept accepts codings as anarray allow systems map to map system shorthands\\n  and longhands to new values\\n- Fix utils namespace\\n\\n## 0.0.8\\n\\nIgnore nullish keys in mapping (ie, passing undefined will not set a key on the\\nnew object)\\n\\n## 0.0.7\\n\\n- restore all builders\\n- more docs in type defs\\n\\n## 0.0.6\\n\\n- Support more types\\n- remove generic property mapping - most props should map now\\n\\n## 0.0.5\\n\\n- restore patient and observation types\\n- hide internal builder functions\\n\\n## 0.0.4\\n\\nadd type variants add flat assignment of props to resource\\n\\n## 0.0.3\\n\\nexpose more stuff from common\\n\\n## 0.0.2\\n\\nexpose fn\\n\\n## 0.0.1\\n\\nInitial alpha release.\\n\"","functions":["create"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
[
  {
    "id": "addExtension",
    "longname": "addExtension",
    "name": "addExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Add an extension to a resource (or object).\nAn object will be created and added to an `extension` array on the provided resource. \nThe extension array will be set if it does not exist on the resource.\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString",
    "params": [
      {
        "description": "a FHIR resource object to add an extension too",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 98,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 13,
    "newscope": true,
    "level": 0
  },
  {
    "id": "carePlan",
    "longname": "carePlan",
    "name": "carePlan",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CarePlan resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 16,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "cc",
    "longname": "cc",
    "name": "cc",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.concept()",
    "access": "public",
    "meta": {
      "lineno": 175,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "coding",
    "longname": "coding",
    "name": "coding",
    "kind": "function",
    "scope": "utils",
    "description": "Create a coding object { code, system }. Systems will be mapped using the system map.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the code value",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to the system. Well be mapped using the system map.",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 134,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "composite",
    "longname": "composite",
    "name": "composite",
    "kind": "function",
    "scope": "utils",
    "description": "Write a value to the target object using a typed key\nIe, if key is `value` and the value is a date time string,\nthis function will write `valueDateTime` to the object.\n\nThis function is poorly named.",
    "params": [
      {
        "description": "the object to write the composite key to",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the base key to use to write the value",
        "name": "key"
      },
      {
        "description": "some value to write to the object",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 233,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "concept",
    "longname": "concept",
    "name": "concept",
    "kind": "function",
    "scope": "utils",
    "description": "Create a codeableConcept. Codings can be coding objects or\n[code, system] tuples\nif the first argument is a string, it will be set as the text.\nSystems will be mapped with the system map",
    "examples": [
      "<caption><Create a codeableConcept</caption>\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])  \n* @example <caption><Create a codeableConcept with text</caption>\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])  "
    ],
    "access": "public",
    "meta": {
      "lineno": 148,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Creates a new resource with a server assigned resourceType.\nThe resource object doesn't need resourceType or id",
    "params": [
      {
        "type": {
          "names": [
            "FhirResourceTypes"
          ]
        },
        "description": "The resource type to create",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "FhirResource"
          ]
        },
        "description": "The resource to create",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) FHIR parameters to control and configure resource creation. You can specify a version ie r4 here.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new patient</caption>\ncreate('Patient', {\n  name: [\n    {\n      use: 'official',\n      family: 'La Paradisio',\n      given: ['Josephine', 'Nessa'],\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 33,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 0,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encounter",
    "longname": "encounter",
    "name": "encounter",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Encounter resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1120,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "findExtension",
    "longname": "findExtension",
    "name": "findExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Find an extension with a given url in some array",
    "params": [
      {
        "description": "a fhir resource",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the extension URL you want to find",
        "name": "targetUrl"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a path to extract from the resource. Optional.",
        "name": "path"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 117,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "id",
    "longname": "id",
    "name": "id",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.identifier()",
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "identifier",
    "longname": "identifier",
    "name": "identifier",
    "kind": "function",
    "scope": "utils",
    "description": "Create an identifier resource. Systems will be mapped against the system map.\nThe input can be a string value, or an identifier object.\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.",
    "params": [
      {
        "description": "an array of strings, or a identifier value as a string or object",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the string system to use by default if",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 54,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "medication",
    "longname": "medication",
    "name": "medication",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Medication resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1955,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "medicationAdministration",
    "longname": "medicationAdministration",
    "name": "medicationAdministration",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationAdministration resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2428,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "medicationDispense",
    "longname": "medicationDispense",
    "name": "medicationDispense",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationDispense resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3045,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "medicationRequest",
    "longname": "medicationRequest",
    "name": "medicationRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3897,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "observation",
    "longname": "observation",
    "name": "observation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Observation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5195,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "patient",
    "longname": "patient",
    "name": "patient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Patient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 30569,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "ref",
    "longname": "ref",
    "name": "ref",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.reference()",
    "access": "public",
    "meta": {
      "lineno": 219,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "utils",
    "description": "Create a reference object of the form { reference }\nIf ref is an array, each item will be mapped and an array returned.\nIf ref is a FHIR resource, a reference to it will be generated\nIf ref is a string, it'll be treated as a reference id and returned as an object\nIf ref is a valid FHIR reference, it'll just be returned.",
    "params": [
      {
        "description": "the thing to generate a reference from",
        "name": "ref"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 187,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "relatedPerson",
    "longname": "relatedPerson",
    "name": "relatedPerson",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RelatedPerson resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 30977,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "setSystemMap",
    "longname": "setSystemMap",
    "name": "setSystemMap",
    "kind": "function",
    "scope": "utils",
    "description": "Define a set of mapped system values.\n\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.",
    "examples": [
      "<caption>Set shortcut sustem mappings</caption>\nutil.setSystemMap({\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\n});\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\n};"
    ],
    "access": "public",
    "meta": {
      "lineno": 41,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"5.0.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, resource, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createtransactionbundle\\\">createTransactionBundle(entries, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getclaim\\\">getClaim(claimId, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resourceType, resource, params, callback) ⇒ Operation</code></p>\\n\\nCreates a new resource with a server assigned resourceType.\\nThe resource object doesn't need resourceType or id\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The resource type to create |\\n| resource | <code>object</code> | The resource to create |\\n| params | <code>object</code> | (Optional) FHIR parameters to control and configure resource creation |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create a new patient\\n```js\\ncreate('Patient', {\\n  name: [\\n    {\\n      use: 'official',\\n      family: 'La Paradisio',\\n      given: ['Josephine', 'Nessa'],\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n### createTransactionBundle\\n\\n<p><code>createTransactionBundle(entries, callback) ⇒ Operation</code></p>\\n\\nCreate a transaction bundle to process multiple requests at once\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| entries | <code>array</code> | array of transactions |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example**\\n```js\\ncreateTransactionBundle([\\n  {\\n    fullUrl: \\\"https://hapi.fhir.org/baseR4/Patient/592442\\\",\\n    resource: {\\n      resourceType: \\\"Patient\\\",\\n      id: \\\"592442\\\",\\n      name: [{ given: \\\"Caleb\\\", family: \\\"Cushing\\\" }],\\n    },\\n    request: {\\n      method: \\\"POST\\\",\\n      url: \\\"Patient\\\",\\n    },\\n  },\\n]);\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, params, options, callback) ⇒ Operation</code></p>\\n\\nSend a HTTP GET request to the baseURL defined in config\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | (Optional) Parameters to encode into the URL query |\\n| options | [<code>GetOptions</code>](#getoptions) | (Optional) Options to control the request |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get a Patient resource by id\\n```js\\nget('Patient/0bd0038b-8aad-4719-8d55-ff94bd3de5d0');\\n```\\n**Example:** Get a resource with query parameters\\n```js\\nget(\\\"Claim\\\", { _include: \\\"Claim:patient\\\", _sort: \\\"-_lastUpdated\\\", _count: 200 })\\n```\\n\\n* * *\\n\\n### getClaim\\n\\n<p><code>getClaim(claimId, params, callback) ⇒ Operation</code></p>\\n\\nGet Claim in a FHIR system\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| claimId | <code>string</code> | claim id |\\n| params | <code>object</code> | query parameters |\\n| callback | <code>function</code> | callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example**\\n```js\\ngetClaim('',{ _include: \\\"Claim:patient\\\", _sort: \\\"-_lastUpdated\\\", _count: 200 });\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, options, callback) ⇒ Operation</code></p>\\n\\nSend a HTTP POST request to the baseURL defined in config\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | JSON data to append to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | (Optional) Additional options for the request |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create bundle\\n```js\\npost(\\\"Bundle\\\",{\\n  \\\"resourceType\\\": \\\"Bundle\\\"\\n})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### GetOptions\\n\\nOptions provided to a GET HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to a HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| headers | <code>object</code> | Object of headers to append to the request |\\n| body | <code>object</code> | JSON payload to attach to the request |\\n| query | <code>object</code> | Query parameters for the request. Will be encoded into the URL |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-fhir\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HAPI FHIR\\nAPI.\\n\\n## FHIR Documentation\\n\\nThe Restfull API can be seen here: https://www.hl7.org/fhir/http.html\\n\\n## Documentation\\n\\n\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-configuration-schema/)\\ndefinition.\\n\\n#### Creates a resource in a destination system using a POST request\\n\\n```js\\ncreate('/endpoint', { foo: 'bar' });\\n```\\n\\n#### Creates a transactionBundle for HAPI FHIR\\n\\n```js\\ncreateTransactionBundle({\\n  entry: [transactionBundle],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-fhir\\n\\n## 5.0.3\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.1\\n\\n### Patch Changes\\n\\n- 940996b: Use common helper code to handle invalid absolute URLs\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 5.0.0\\n\\n#### Added\\n\\n- Improved type definitions for `request()` and `get()`\\n\\n#### Changed\\n\\n- Updated `request` function to the new signature:\\n\\n  ```js\\n  export const request =\\n    async (method, path, options = {}, callback) =>\\n    state => ({\\n      ...state,\\n      data,\\n      response,\\n    });\\n  ```\\n\\n- Updated `post` function to the new signature:\\n\\n  ```js\\n  export const post = (path, data, options, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `get` function to the new signature:\\n\\n  ```js\\n  export const get = (path, params, options, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `create` function to the new signature:\\n\\n  ```js\\n  export const create = (resource, resource, params, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `createTransactionBundle` function:\\n\\n  ```js\\n  export const createTransactionBundle = (entries, callback) => state => ({\\n    ...state,\\n    data,\\n  });\\n  ```\\n\\n- Updated `getClaim` function to the new signature:\\n  ```js\\n  export const getClaim =\\n    (claimId, params, callback = s => s) =>\\n    state => ({\\n      ...state,\\n      data,\\n    });\\n  ```\\n- Updated `configuration-schema.json`\\n  - Removed `authType`\\n  - Rename `token` to `access_token`\\n  - Add `username` and `password`\\n\\n#### Removed\\n\\n- Removed `parseAs` from the options.\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- a42ffeb9: - All HTTP methods now write `{ data, response }` to state, where\\n  data is the response body and response is the raw response\\n  - All HTTP methods now support a `throwOnError` param, which defaults to true.\\n    If false, the adaptor will not throw if the HTTP status is <=400\\n  - request: return { data, response } directly\\n  - request: fix an issue where default headers would override user headers\\n  - request: if the body contains application/json content, parse it as JSON\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.1.2\\n\\n### Patch Changes\\n\\n- 2b283549: - Update `create()` example\\n  - Update required properties in configuration schema\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- d94e9ee: Migrate from axios to using `fetch` from `undici` and add uniti tests\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- d4b4094: - Update configuration schema,\\n  - Add `get()` function\\n  - Fix `create()` axios config\\n  - Remove unused code\\n  - Improve error handling\\n  - Improve response handling\\n\\n## 1.1.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- fee607e: Migrate FHIR, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["create","createTransactionBundle","get","getClaim","post"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"baseUrl":{"title":"Base Url","type":"string","description":"The baseUrl","examples":["https://hapi.fhir.org"]},"apiPath":{"title":"API Path","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"R4","description":"FHIR api path","minLength":1,"examples":["baseR4","R3","R4"]},"username":{"title":"Username","type":"string","description":"Username","examples":["openfn_test"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your FHIR access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"required":["baseUrl","apiPath"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Creates a new resource with a server assigned resourceType.\nThe resource object doesn't need resourceType or id",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The resource type to create",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The resource to create",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) FHIR parameters to control and configure resource creation",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new patient</caption>\ncreate('Patient', {\n  name: [\n    {\n      use: 'official',\n      family: 'La Paradisio',\n      given: ['Josephine', 'Nessa'],\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 178,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 7,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createTransactionBundle",
    "longname": "createTransactionBundle",
    "name": "createTransactionBundle",
    "kind": "function",
    "scope": "global",
    "description": "Create a transaction bundle to process multiple requests at once",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "array of transactions",
        "name": "entries"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createTransactionBundle([\n  {\n    fullUrl: \"https://hapi.fhir.org/baseR4/Patient/592442\",\n    resource: {\n      resourceType: \"Patient\",\n      id: \"592442\",\n      name: [{ given: \"Caleb\", family: \"Cushing\" }],\n    },\n    request: {\n      method: \"POST\",\n      url: \"Patient\",\n    },\n  },\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 222,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "FHIRHttpState",
    "longname": "FHIRHttpState",
    "name": "FHIRHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the FHIR HTTP server (with the body removed)",
        "name": "response"
      },
      {
        "description": "an array of all the previous data values",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 6,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP GET request to the baseURL defined in config",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Parameters to encode into the URL query",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "GetOptions"
          ]
        },
        "description": "(Optional) Options to control the request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a Patient resource by id</caption>\nget('Patient/0bd0038b-8aad-4719-8d55-ff94bd3de5d0');",
      "<caption>Get a resource with query parameters</caption>\nget(\"Claim\", { _include: \"Claim:patient\", _sort: \"-_lastUpdated\", _count: 200 })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "getClaim",
    "longname": "getClaim",
    "name": "getClaim",
    "kind": "function",
    "scope": "global",
    "description": "Get Claim in a FHIR system",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "claim id",
        "name": "claimId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "query parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getClaim('',{ _include: \"Claim:patient\", _sort: \"-_lastUpdated\", _count: 200 });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 250,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "GetOptions",
    "longname": "GetOptions",
    "name": "GetOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to a GET HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 25,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP POST request to the baseURL defined in config",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON data to append to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "(Optional) Additional options for the request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create bundle</caption>\npost(\"Bundle\",{\n  \"resourceType\": \"Bundle\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 103,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to a HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of headers to append to the request",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON payload to attach to the request",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters for the request. Will be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"godata","adaptor":"@openfn/language-godata","version":"3.5.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getcase\\\">getCase(id, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getcontact\\\">getContact(id, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlocation\\\">getLocation(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getoutbreak\\\">getOutbreak(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getreferencedata\\\">getReferenceData(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listcases\\\">listCases(id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listcontacts\\\">listContacts(id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listlocations\\\">listLocations(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listoutbreaks\\\">listOutbreaks(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listreferencedata\\\">listReferenceData(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcase\\\">upsertCase(id, externalId, goDataCase, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcontact\\\">upsertContact(id, externalId, goDataContact, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertlocation\\\">upsertLocation(externalId, goDataLocation, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertoutbreak\\\">upsertOutbreak(outbreak, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertreferencedata\\\">upsertReferenceData(externalId, goDataReferenceData, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getCase\\n\\n<p><code>getCase(id, query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple cases within an outbreak from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetCase(\\n   '3b55-cdf4',\\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\\n   state => {\\n     console.log(state);\\n     return state;\\n   }\\n);\\n```\\n\\n* * *\\n\\n### getContact\\n\\n<p><code>getContact(id, query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple contacts within an outbreak from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetContact(\\\"343d-dc3e\\\", {\\\"where\\\":{\\\"firstName\\\": \\\"Luca\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getLocation\\n\\n<p><code>getLocation(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple locations from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetLocation({\\\"where\\\":{\\\"name\\\": \\\"30 DE OCTUBRE\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getOutbreak\\n\\n<p><code>getOutbreak(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple outbreaks from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetOutbreak({\\\"where\\\":{\\\"name\\\": \\\"Outbreak demo\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getReferenceData\\n\\n<p><code>getReferenceData(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple reference data from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetReferenceData({\\\"where\\\":{\\\"categoryId\\\": \\\"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listCases\\n\\n<p><code>listCases(id, callback) ⇒ Operation</code></p>\\n\\nFetch the list of cases within a particular outbreak using its ID.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistCases(\\\"343d-dc3e\\\", state => {\\n   console.log(state);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listContacts\\n\\n<p><code>listContacts(id, callback) ⇒ Operation</code></p>\\n\\nFetch the list of contacts within a particular outbreak using its ID.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistContacts(\\\"343d-dc3e\\\", // Outbreak Id\\n   state => {\\n      console.log(state);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listLocations\\n\\n<p><code>listLocations(callback) ⇒ Operation</code></p>\\n\\nFetch the list of locations\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistLocations(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listOutbreaks\\n\\n<p><code>listOutbreaks(callback) ⇒ Operation</code></p>\\n\\nFetch the list of outbreaks\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistOutbreaks(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listReferenceData\\n\\n<p><code>listReferenceData(callback) ⇒ Operation</code></p>\\n\\nFetch the list of reference data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistReferenceData(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### upsertCase\\n\\n<p><code>upsertCase(id, externalId, goDataCase, callback) ⇒ Operation</code></p>\\n\\nUpsert case to godata using an external id to mach a specific record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataCase | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertCase(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   data: state => {\\n     const patient = state.data.body;\\n      return {\\n        firstName: patient.Patient_name.split(' ')[0],\\n        lastName: patient.Patient_name.split(' ')[1],\\n        visualId: patient.Case_ID,\\n        'age:years': patient.Age_in_year,\\n        gender: patient.Sex,\\n      };\\n })\\n```\\n\\n* * *\\n\\n### upsertContact\\n\\n<p><code>upsertContact(id, externalId, goDataContact, callback) ⇒ Operation</code></p>\\n\\nUpsert contact to godata using an external id to match a specific record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataContact | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertContact(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   {\\n     firstName: 'Luca',\\n     gender: 'male',\\n     'age:years': '20'\\n     ...\\n   }\\n )\\n```\\n\\n* * *\\n\\n### upsertLocation\\n\\n<p><code>upsertLocation(externalId, goDataLocation, callback) ⇒ Operation</code></p>\\n\\nUpsert location to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataLocation | <code>object</code> | an object with some location data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertLocation('name', {...})\\n```\\n\\n* * *\\n\\n### upsertOutbreak\\n\\n<p><code>upsertOutbreak(outbreak, callback) ⇒ Operation</code></p>\\n\\nUpsert outbreak to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| outbreak | <code>object</code> | an object with an externalId and some outbreak data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertOutbreak({externalId: \\\"3dec33-ede3\\\", data: {...}})\\n```\\n\\n* * *\\n\\n### upsertReferenceData\\n\\n<p><code>upsertReferenceData(externalId, goDataReferenceData, callback) ⇒ Operation</code></p>\\n\\nUpsert reference data to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataReferenceData | <code>object</code> | an object with some reference data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertReferenceData('id', {...})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-godata\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the WHO\\nGo.Data API.\\n\\n[Go.Data](https://www.who.int/godata) is an outbreak investigation tool for\\nfield data collection during public health emergencies. The tool includes\\nfunctionality for case investigation, contact follow-up, visualization of chains\\nof transmission including secure data exchange and is designed for flexibility\\nin the field, to adapt to the wide range of outbreak scenarios.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/godata-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/godata-configuration-schema/)\\ndefinition.\\n\\n## Helper Functions\\n\\n### post(...)\\n\\n## Fetch the list of outbreaks\\n\\nThis function is used to fetch the whole list of outbreaks in Go.Data.\\n\\n```js\\nlistOutbreaks(state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Get a specific outbreak\\n\\nThis function can be used to fetch one specific outbreak. A filtering mechanism\\nis used to specify a criteria to match. Mutliple outbreaks could be returned if\\nmatched by the filter.\\n\\n```js\\ngetOutbreak({ where: { name: 'Outbreak demo' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update an outbreak using a unique id as a key\\n\\nThis function is used to either update a record in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertOutbreak({\\n  externalId: '3dec33-ede3',\\n  data: {\\n    name: 'string',\\n    description: 'string',\\n    disease: 'string',\\n    countries: [\\n      {\\n        id: 'SENEGAL',\\n      },\\n    ],\\n    startDate: '2020-12-17T14:54:19.498Z',\\n    endDate: '2020-12-17T14:54:19.498Z',\\n    longPeriodsBetweenCaseOnset: 0,\\n    periodOfFollowup: 0,\\n  },\\n});\\n```\\n\\n## Fetch the list of cases\\n\\nThis function is used to fetch the whole list of cases for a specific outbreak\\nin Go.Data.\\n\\n```js\\nlistCases('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific case\\n\\nThis function can be used to fetch one specific case for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple cases could be\\nreturned if matched by the filter.\\n\\n```js\\ngetCase(\\n  '4c444f7-4e11-41d0-c1af-331dd15a892e',\\n  { 'where.relationship': { active: true }, where: { firstName: 'Luca' } },\\n  state => {\\n    console.log(state);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a case using a unique id as a key\\n\\nThis function is used to either update a case in Go.Data if matched or insert a\\nnew one if no record matched the unique id.\\n\\n```js\\nupsertCase('4dce-3eedce3-rd33', 'visualId',\\n  data: state => {\\n    const patient = state.data.body;\\n    return {\\n      firstName: patient.Patient_name.split(' ')[0],\\n      lastName: patient.Patient_name.split(' ')[1],\\n      visualId: patient.Case_ID,\\n      'age:years': patient.Age_in_year,\\n      gender: patient.Sex,\\n    };\\n  });\\n```\\n\\n## Fetch the list of contacts\\n\\nThis function is used to fetch the whole list of contacts for a specific\\noutbreak in Go.Data.\\n\\n```js\\nlistContacts('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific contact\\n\\nThis function can be used to get one specific contact for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple contacts could be\\nreturned if matched by the filter.\\n\\n```js\\ngetContact('343d-dc3e', { where: { firstName: 'Luca' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a contact using a unique id as a key\\n\\nThis function is used to either update a contact in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertContact('4dce-3eedce3-rd33', 'visualId', {\\n  firstName: 'Luca',\\n  gender: 'male',\\n  'age:years': '20',\\n});\\n```\\n\\n## Fetch the list of locations\\n\\nThis function is used to fetch the list of locations.\\n\\n```js\\nlistLocations(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific location\\n\\nThis function can be used to get one specific location. A filtering mechanism\\ncan specify a criteria to match. Mutliple locations could be returned if matched\\nby the filter.\\n\\n```js\\ngetLocation({ where: { name: '30 DE MAYO' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a location using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertLocation('name', {\\n  name: '30 DE DECIEMBRE',\\n  synonyms: [],\\n  identifiers: [],\\n  active: true,\\n  populationDensity: 0,\\n  geoLocation: {\\n    lat: -45.343244,\\n    lng: -67.193873,\\n  },\\n});\\n```\\n\\n## Fetch the list of reference data\\n\\nThis function is used to fetch the list of reference data.\\n\\n```js\\nlistReferenceData(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific reference data\\n\\nThis function can be used to get one specific reference data. A filtering\\nmechanism can specify a criteria to match.\\n\\n```js\\ngetReferenceData(\\n  { where: { categoryId: 'LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME' } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a reference data using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertReferenceData('id', {\\n  categoryId: 'CATEGORY',\\n  value: 'VALUE',\\n  readOnly: false,\\n  active: true,\\n  id: 'ID',\\n  createdAt: '2020-10-01T18:48:31.784Z',\\n  createdBy: '95d31ea9',\\n  updatedAt: '2020-10-01T18:48:31.784Z',\\n  updatedBy: '95d31ea9',\\n  createdOn: 'API',\\n  deleted: false,\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-godata\\n\\n## 3.5.4\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.5.3\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 3.5.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.5.0\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.4.0\\n\\n### Minor Changes\\n\\n- df4cfca: Switch from `'writeOnly: true'` to `'format: email'` in the godata\\n  configuration schema.\\n\\n## 3.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.2.4\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- 8e7a79e: Migrate Godata\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\"","functions":["getCase","getContact","getLocation","getOutbreak","getReferenceData","listCases","listContacts","listLocations","listOutbreaks","listReferenceData","upsertCase","upsertContact","upsertLocation","upsertOutbreak","upsertReferenceData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"Godata API URL","default":"https://www.who-godata.com/api","format":"uri","minLength":1,"examples":["https://www.who-godata.com/api"]},"email":{"title":"Email","type":"string","description":"Your Godata login email","format":"email","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Godata login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["apiUrl","email","password"]}},
[
  {
    "id": "getCase",
    "longname": "getCase",
    "name": "getCase",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple cases within an outbreak from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getCase(\n   '3b55-cdf4',\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\n   state => {\n     console.log(state);\n     return state;\n   }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 441,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getContact",
    "longname": "getContact",
    "name": "getContact",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple contacts within an outbreak from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getContact(\"343d-dc3e\", {\"where\":{\"firstName\": \"Luca\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 122,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getLocation",
    "longname": "getLocation",
    "name": "getLocation",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple locations from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getLocation({\"where\":{\"name\": \"30 DE OCTUBRE\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 609,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "getOutbreak",
    "longname": "getOutbreak",
    "name": "getOutbreak",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple outbreaks from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getOutbreak({\"where\":{\"name\": \"Outbreak demo\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 286,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getReferenceData",
    "longname": "getReferenceData",
    "name": "getReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple reference data from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getReferenceData({\"where\":{\"categoryId\": \"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 768,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "listCases",
    "longname": "listCases",
    "name": "listCases",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of cases within a particular outbreak using its ID.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listCases(\"343d-dc3e\", state => {\n   console.log(state);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 400,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "listContacts",
    "longname": "listContacts",
    "name": "listContacts",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of contacts within a particular outbreak using its ID.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listContacts(\"343d-dc3e\", // Outbreak Id\n   state => {\n      console.log(state);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "listLocations",
    "longname": "listLocations",
    "name": "listLocations",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of locations",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listLocations(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 573,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "listOutbreaks",
    "longname": "listOutbreaks",
    "name": "listOutbreaks",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of outbreaks",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listOutbreaks(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 250,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "listReferenceData",
    "longname": "listReferenceData",
    "name": "listReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of reference data",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listReferenceData(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 732,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "upsertCase",
    "longname": "upsertCase",
    "name": "upsertCase",
    "kind": "function",
    "scope": "global",
    "description": "Upsert case to godata using an external id to mach a specific record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "goDataCase"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertCase(\"4dce-3eedce3-rd33\", 'visualId',\n   data: state => {\n     const patient = state.data.body;\n      return {\n        firstName: patient.Patient_name.split(' ')[0],\n        lastName: patient.Patient_name.split(' ')[1],\n        visualId: patient.Case_ID,\n        'age:years': patient.Age_in_year,\n        gender: patient.Sex,\n      };\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 489,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "upsertContact",
    "longname": "upsertContact",
    "name": "upsertContact",
    "kind": "function",
    "scope": "global",
    "description": "Upsert contact to godata using an external id to match a specific record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "goDataContact"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertContact(\"4dce-3eedce3-rd33\", 'visualId',\n   {\n     firstName: 'Luca',\n     gender: 'male',\n     'age:years': '20'\n     ...\n   }\n )"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertLocation",
    "longname": "upsertLocation",
    "name": "upsertLocation",
    "kind": "function",
    "scope": "global",
    "description": "Upsert location to godata",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some location data.",
        "name": "goDataLocation"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertLocation('name', {...})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 646,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "upsertOutbreak",
    "longname": "upsertOutbreak",
    "name": "upsertOutbreak",
    "kind": "function",
    "scope": "global",
    "description": "Upsert outbreak to godata",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId and some outbreak data.",
        "name": "outbreak"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertOutbreak({externalId: \"3dec33-ede3\", data: {...}})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 322,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "upsertReferenceData",
    "longname": "upsertReferenceData",
    "name": "upsertReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Upsert reference data to godata",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some reference data.",
        "name": "goDataReferenceData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertReferenceData('id', {...})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 805,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"googlehealthcare","adaptor":"@openfn/language-googlehealthcare","version":"1.1.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createfhirresource\\\">createFhirResource([fhirStore], resource, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createFhirResource\\n\\n<p><code>createFhirResource([fhirStore], resource, callback) ⇒ Operation</code></p>\\n\\nCreate some resource in Google Cloud Healthcare\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| [fhirStore] | <code>Object</code> | The FHIR store information.    - `cloudRegion` (string): The cloud region where the FHIR store is located.    - `projectId` (string): The ID of the project that contains the FHIR store.    - `datasetId` (string): The ID of the dataset that contains the FHIR store.    - `fhirStoreId` (string): The ID of the FHIR store. |\\n| resource | <code>object</code> | The FHIR resource data to be created |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateFhirResource(\\n  {\\n    cloudRegion: \\\"us-central1\\\",\\n    projectId: \\\"adjective-noun-123\\\",\\n    datasetId: \\\"my-dataset\\\",\\n    fhirStoreId: \\\"my-fhir-store\\\",\\n  },\\n  {\\n    resourceType: \\\"Patient\\\",\\n    name: [{ use: \\\"official\\\", family: \\\"Smith\\\", given: [\\\"Darcy\\\"] }],\\n    gender: \\\"female\\\",\\n    birthDate: \\\"1970-01-01\\\",\\n  }\\n);\\n```\\n**Example**\\n```js\\ncreateFhirResource(\\n  {\\n    cloudRegion: \\\"us-central1\\\",\\n    projectId: \\\"adjective-noun-123\\\",\\n    datasetId: \\\"my-dataset\\\",\\n    fhirStoreId: \\\"my-fhir-store\\\",\\n  },\\n  (state) => ({\\n    resourceType: \\\"Encounter\\\",\\n    status: \\\"finished\\\",\\n    class: {\\n      system: \\\"http://hl7.org/fhir/v3/ActCode\\\",\\n      code: \\\"IMP\\\",\\n      display: \\\"inpatient encounter\\\",\\n    },\\n    reasonCode: [\\n      {\\n        text: \\\"The patient had an abnormal heart rate. She was concerned about this.\\\",\\n      },\\n    ],\\n    subject: {\\n      reference: `Patient/${state.data.id}`,\\n    },\\n  })\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-googlehealthcare <img src='assets/sq-256x256.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[Google Cloud Healthcare API](https://cloud.google.com/healthcare-api/docs/how-tos/fhir-resources#healthcare-create-patient-nodejs).\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/googlehealthcare-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googlehealthcare-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-googlehealthcare\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 7df7e20: remove `projectId`, `dataSetId`, `cloudRegion`, and `fhirStoreId` out\\n  of configuration\\n\\n  The new implementation of `createFhirResource(fhirStore, resource, callback)`\\n  allows you to use one set of credentials to access different Google Healthcare\\n  Cloud FHIR stores. `fhirStore` is an object that contains the FHIR store\\n  information\\n  (`{cloudRegion: string, projectId: string, datasetId: string, fhirStoreId: string}`).\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 861d774: add createFhirResource function\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\"","functions":["createFhirResource"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","type":"object","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Google Cloud Healthcare access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]},"apiVersion":{"title":"API Version","type":"string","description":"The API version","default":"v1","examples":["v1","v1beta1"]}},"required":["access_token"]}},
[
  {
    "id": "createFhirResource",
    "longname": "createFhirResource",
    "name": "createFhirResource",
    "kind": "function",
    "scope": "global",
    "description": "Create some resource in Google Cloud Healthcare",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The FHIR store information.\n   - `cloudRegion` (string): The cloud region where the FHIR store is located.\n   - `projectId` (string): The ID of the project that contains the FHIR store.\n   - `datasetId` (string): The ID of the dataset that contains the FHIR store.\n   - `fhirStoreId` (string): The ID of the FHIR store.",
        "name": "fhirStore"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The FHIR resource data to be created",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createFhirResource(\n  {\n    cloudRegion: \"us-central1\",\n    projectId: \"adjective-noun-123\",\n    datasetId: \"my-dataset\",\n    fhirStoreId: \"my-fhir-store\",\n  },\n  {\n    resourceType: \"Patient\",\n    name: [{ use: \"official\", family: \"Smith\", given: [\"Darcy\"] }],\n    gender: \"female\",\n    birthDate: \"1970-01-01\",\n  }\n);",
      "createFhirResource(\n  {\n    cloudRegion: \"us-central1\",\n    projectId: \"adjective-noun-123\",\n    datasetId: \"my-dataset\",\n    fhirStoreId: \"my-fhir-store\",\n  },\n  (state) => ({\n    resourceType: \"Encounter\",\n    status: \"finished\",\n    class: {\n      system: \"http://hl7.org/fhir/v3/ActCode\",\n      code: \"IMP\",\n      display: \"inpatient encounter\",\n    },\n    reasonCode: [\n      {\n        text: \"The patient had an abnormal heart rate. She was concerned about this.\",\n      },\n    ],\n    subject: {\n      reference: `Patient/${state.data.id}`,\n    },\n  })\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 94,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlehealthcare/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"googlesheets","adaptor":"@openfn/language-googlesheets","version":"3.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#appendvalues\\\">appendValues(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#batchupdatevalues\\\">batchUpdateValues(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getvalues\\\">getValues(spreadsheetId, range, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### appendValues\\n\\n<p><code>appendValues(params, callback) ⇒ Operation</code></p>\\n\\nAdd an array of rows to the spreadsheet.\\nhttps://developers.google.com/sheets/api/samples/writing#append_values\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n| [params.spreadsheetId] | <code>string</code> | The spreadsheet ID. |\\n| [params.range] | <code>string</code> | The range of values to update. |\\n| [params.values] | <code>array</code> | A 2d array of values to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\\n* * *\\n\\n### batchUpdateValues\\n\\n<p><code>batchUpdateValues(params, callback) ⇒ Operation</code></p>\\n\\nBatch update values in a Spreadsheet.\\n\\n**Returns**: <code>Operation</code> - spreadsheet information  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n| [params.spreadsheetId] | <code>string</code> | The spreadsheet ID. |\\n| [params.range] | <code>string</code> | The range of values to update. |\\n| [params.valueInputOption] | <code>string</code> | (Optional) Value update options. Defaults to 'USER_ENTERED' |\\n| [params.values] | <code>array</code> | A 2d array of values to update. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nbatchUpdateValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\\n* * *\\n\\n### getValues\\n\\n<p><code>getValues(spreadsheetId, range, callback) ⇒ Operation</code></p>\\n\\nGets cell values from a Spreadsheet.\\n\\n**Returns**: <code>Operation</code> - spreadsheet information  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spreadsheetId | <code>string</code> | The spreadsheet ID. |\\n| range | <code>string</code> | The sheet range. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetValues('1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos','Sheet1!A1:E1')\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Google Sheets\\n\\nLanguage Pack for building expressions and operations to make Google Sheets API\\ncalls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googlesheets-configuration-schema/)\\ndefinition.\\n\\n### appendValues()\\n\\nAdd rows to an existing sheet:\\n`https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED`\\n\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-googlesheets\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.5.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.4.0\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.3.1\\n\\n### Patch Changes\\n\\n- 4594a324: add callback jsdocs\\n\\n## 2.3.0\\n\\n### Minor Changes\\n\\n- 8405fc9a: - Add `getValues()` function\\n  - Improve connection handling\\n  - Improve error logs\\n\\n## 2.2.2\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.1.6\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.1.5\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 9e7d458: Migrate googlesheets\\n\"","functions":["appendValues","batchUpdateValues","getValues"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Google Sheets access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "appendValues",
    "longname": "appendValues",
    "name": "appendValues",
    "kind": "function",
    "scope": "global",
    "description": "Add an array of rows to the spreadsheet.\nhttps://developers.google.com/sheets/api/samples/writing#append_values",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data object to add to the spreadsheet.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The spreadsheet ID.",
        "name": "params.spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The range of values to update.",
        "name": "params.range"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "optional": true,
        "description": "A 2d array of values to update.",
        "name": "params.values"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "appendValues({\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\n  range: 'Sheet1!A1:E1',\n  values: [\n    ['From expression', '$15', '2', '3/15/2016'],\n    ['Really now!', '$100', '1', '3/20/2016'],\n  ],\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 97,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "batchUpdateValues",
    "longname": "batchUpdateValues",
    "name": "batchUpdateValues",
    "kind": "function",
    "scope": "global",
    "description": "Batch update values in a Spreadsheet.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data object to add to the spreadsheet.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The spreadsheet ID.",
        "name": "params.spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The range of values to update.",
        "name": "params.range"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "(Optional) Value update options. Defaults to 'USER_ENTERED'",
        "name": "params.valueInputOption"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "optional": true,
        "description": "A 2d array of values to update.",
        "name": "params.values"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "batchUpdateValues({\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\n  range: 'Sheet1!A1:E1',\n  values: [\n    ['From expression', '$15', '2', '3/15/2016'],\n    ['Really now!', '$100', '1', '3/20/2016'],\n  ],\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "spreadsheet information"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 155,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getValues",
    "longname": "getValues",
    "name": "getValues",
    "kind": "function",
    "scope": "global",
    "description": "Gets cell values from a Spreadsheet.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spreadsheet ID.",
        "name": "spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The sheet range.",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getValues('1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos','Sheet1!A1:E1')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "spreadsheet information"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 200,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"hive","adaptor":"@openfn/language-hive","version":"0.3.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#query\\\">query(qs, options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### query\\n\\n<p><code>query(qs, options, callback) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| qs | <code>string</code> | SQL statement |\\n| options | <code>object</code> | (Optional) options for executing sql statement |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example:** Get patient count from hive database\\n```js\\nquery(\\\"select count(*) from patient\\\");\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-hive <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HIVE API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/hive-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/hive-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `query` function\\n\\n```js\\nquery('select count(*) from patient');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-hive\\n\\n## 0.3.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.3.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- e53b30f: Update hive-driver dependency\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- 02ab7a89: - Change `host` format from `uri` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `database`\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- a380347: Add query function\\n\"","functions":["query"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The database instance host URL","format":"string","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":10001,"description":"Database instance port","minLength":1,"examples":[10001]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"username":{"title":"Username","type":"string","description":"The username to log in the database","minLength":1,"examples":["admin-demo"]},"password":{"title":"Password","type":"string","description":"The password to log in the database","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","database","username","password"]}},
[
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "SQL statement",
        "name": "qs"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) options for executing sql statement",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get patient count from hive database</caption>\nquery(\"select count(*) from patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hive/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"http","adaptor":"@openfn/language-http","version":"6.5.1","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#del\\\">del(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#parsexml\\\">parseXML(body, script, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#patch\\\">patch(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, params, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#util_decode\\\">util.decode(base64Data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_encode\\\">util.encode(data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_uuid\\\">util.uuid()</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#humanproper\\\">humanProper()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#splitkeys\\\">splitKeys()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n## Functions\\n### del\\n\\n<p><code>del(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a DELETE request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\ndel(`/myendpoint/${state => state.data.id}`, {\\n   headers: {'content-type': 'application/json'}\\n })\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a GET request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nget('/myEndpoint', {\\n  query: {foo: 'bar', a: 1},\\n  headers: {'content-type': 'application/json'},\\n})\\n```\\n\\n* * *\\n\\n### parseXML\\n\\n<p><code>parseXML(body, script, callback) ⇒ Operation</code></p>\\n\\nParse XML with the Cheerio parser\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| body | <code>String</code> | data string to be parsed |\\n| script | <code>function</code> | script for extracting data |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed XML as a JSON object |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nparseXML(\\n  (state) => state.response,\\n  ($) => {\\n    return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n  }\\n);\\n```\\n**Example:** Using parseXML with a callback\\n```js\\n parseXML(\\n  (state) => state.response,\\n  ($) => {\\n    return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n  },\\n  (next) => ({ ...next, results: next.data.body })\\n);\\n```\\n\\n* * *\\n\\n### patch\\n\\n<p><code>patch(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a PATCH request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\npatch('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n })\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, params, callback) ⇒ operation</code></p>\\n\\nMake a POST request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\npost('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n })\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a PUT request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nput('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n })\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, params, callback) ⇒ Operation</code></p>\\n\\nMake a HTTP request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method to use. |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\n  'GET',\\n  '/myEndpoint',\\n   {\\n     query: {foo: 'bar', a: 1},\\n     headers: {'content-type': 'application/json'},\\n   }\\n)\\n```\\n\\n* * *\\n\\n\\n## util\\n\\nThese functions belong to the util namespace.\\n### util.decode {#util_decode}\\n\\n<p><code>decode(base64Data) ⇒ string</code></p>\\n\\nDecodes a Base64 encoded string back to its original format.\\n\\n**Returns**: <code>string</code> - - The decoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| base64Data | <code>string</code> | The Base64 encoded string. |\\n\\n**Example:** Decode a Base64 string\\n```js\\nconst decoded = Util.decode('SGVsbG8gV29ybGQ=');\\nconsole.log(decoded); // Output: Hello World\\n```\\n\\n* * *\\n\\n\\n### util.encode {#util_encode}\\n\\n<p><code>encode(data) ⇒ string</code></p>\\n\\nEncodes a given string into Base64 format.\\n\\n**Returns**: <code>string</code> - - The Base64 encoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>string</code> | The string to be encoded. |\\n\\n**Example:** Encode a string\\n```js\\nconst encoded = Util.encode('Hello World');\\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=\\n```\\n\\n* * *\\n\\n\\n### util.uuid {#util_uuid}\\n\\n<p><code>uuid() ⇒ string</code></p>\\n\\nGenerates a UUID (Universally Unique Identifier).\\n\\n**Returns**: <code>string</code> - - A newly generated UUID.  \\n**Example:** Generate a UUID\\n```js\\nconst id = Util.uuid();\\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language HTTP\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/http-configuration-schema/)\\ndefinition.\\n\\n### Get data\\n\\nThis helper function allows the use of a get method to fetch data. You can\\nspecify a query string for filter.\\n\\n```js\\nget(\\n  '/myendpoint',\\n  {\\n    query: { foo: 'bar', a: 1 },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'taylor', password: 'somethingsecret' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Post existing data\\n\\nSend some data to an existing endpoint.\\n\\n```js\\npost('/endpoint', {\\n  body: state => {\\n    return {\\n      field_1: 'some_data',\\n      field_2: 'some_more_data',\\n      field_id: dataValue('Some.Json.Object.Id')(state),\\n    };\\n  },\\n  headers: {\\n    Authorization: 'AUTH_KEY',\\n    'Content-Type': 'application/json',\\n  },\\n});\\n```\\n\\n### Update existing data with PUT or PATCH\\n\\n```js\\nput(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n```js\\npatch(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Delete data\\n\\n```js\\ndel(\\n  '/myendpoint',\\n  {\\n    query: { id: 'someId' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Parse XML\\n\\nThis function allows you to parse some xml data. A callback function can be use\\nto store in a table.\\n\\n```js\\nparseXML(body, function ($) {\\n  return $('table[class=your_table]').parsetable(true, true, true);\\n});\\n```\\n\\n### Parse CSV\\n\\n```js\\nparseCSV('someData.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n});\\n```\\n\\n### Sample parse local CSV file\\n\\n```js\\nparseCSV('PatientsJan2009.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n  columns: true,\\n  skip_empty_lines: true,\\n  trim: true,\\n  bom: true,\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`.\\n\\nTo build the docs for this repo, run `pnpm build:docs`.\\n\"","changelog":"\"# @openfn/language-http\\n\\n## 6.5.1\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 6.5.0\\n\\n### Minor Changes\\n\\n- b433d7f: Add `util.encode`, `util.decode` and `util.uuid` helpers\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 6.4.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 6.4.5\\n\\n### Patch Changes\\n\\n- e01d7b3: - Fix an issue where an error is thrown if `state.configuration` is\\n  `null`\\n  - better error when `baseUrl` is not set and the passed url is a relative url.\\n  - better error when `baseUrl` is not set and no url is provided.\\n\\n## 6.4.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 6.4.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 6.4.2\\n\\n### Patch Changes\\n\\n- c803bab: In all functions, if baseUrl if set, path MUST be relative.\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 6.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 6.4.0\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 6.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 6.2.3\\n\\n### Patch Changes\\n\\n- Fix an issue where query parameters in the URL did not get sent to the server\\n\\n## 6.2.2\\n\\n### Patch Changes\\n\\n- Automatically apply api/oauth tokens from config\\n\\n## 6.2.1\\n\\n### Patch Changes\\n\\n- Fixed an issue where the Authorization header could be overwritten if username\\n  and password are set on config\\n- Configuration schema: demoted `username` and `password` to optional\\n- Configuration schema: Added `token`. This is not automated and must be\\n  manually add to the HTTP headers.\\n\\n## 6.2.0\\n\\n### Minor Changes\\n\\n- Add cursor() function\\n\\n## 6.1.0\\n\\n### Minor Changes\\n\\n- cfe1ccb: Add callback support for parseXML\\n\\n## 6.0.0\\n\\n### Major Changes\\n\\n- f741086: The axios library has been removed and the operation API simplified.\\n\\n### New features\\n\\n- Error mapping. Provide custom errors to response status codes, eg, Eg:\\n  `{errors: {404: \\\"You don't have access\\\"}}`\\n- parseAs option. Overrides the default response type. Eg: `{parseAs: \\\"json\\\"}`\\n- Request logging. All requests are now logged to stdout.\\n- tls options. Pass SSL certificates using the `tls` option on any request.\\n\\n### Breaking changes\\n\\n- Removed `axios` export\\n- Axios options on `get`, `post`, `put`, `patch`, and `del` are no longer\\n  supported (unless otherwise stated). This includes `gzip`,`qs`, `formData`,\\n  `successCodes`, `transformResponse`, `data` and other options.\\n- `keepCookie` has been removed\\n- Option params `json` and `agentOptions` have been deprecated. They still work,\\n  but you should use `body` and `tls` instead (the behaviour should be the same)\\n\\n### Migration Guide\\n\\n- Use `query` instead of `params` or `qs` parameters to a request.\\n- Convert succcessCodes to the `errorMap`. Ie, `successCodes: [200, 404]`\\n  becomes `errorMap: { 404: false }`\\n- Instead of `transformResponse`, use the callback parameter.\\n- Convert `agentOptions` to `tls`.The values should be the same.\\n- Convert `responseType` to `parseAs`. Note that this is really only useful for\\n  JSON, and only needed if the server does not include a content-type response\\n  header.\\n- Convert `formData` to `form`.The values should be the same.\\n- The `authentication` or `auth` property is no longer needed, use\\n  `state.configuration`.\\n- The `data` parameter is now `body`.\\n\\n### Patch Changes\\n\\n- Updated dependencies [7f52699]\\n  - @openfn/language-common@1.12.0\\n\\n## 5.1.1\\n\\n### Patch Changes\\n\\n- a8d655e: Update `parseXML` to use `expandReferences`\\n\\n## 5.1.0\\n\\n### Minor Changes\\n\\n- 8e2b79c: Clean up `state.response.request` by returning only\\n  `{ method, path, host, protocol, _headers }`\\n\\n## 5.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 5.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 5.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 5.0.0\\n\\n### Major Changes\\n\\n- 0b6f20b: use parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.2.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 4.2.7\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 4.2.6\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.2.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.2.4\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 4.2.3\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 4.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 8e1b86d: update http to new format\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 4671e89: Migrate language-http\\n\"","functions":["del","execute","get","parseXML","patch","post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Password"]},"access_token":{"title":"Access Token","type":"string","description":"OAuth Access token, API key or other Bearer token","writeOnly":true,"examples":["00QCjAl4MlV-WPX"]},"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://instance_name.surveycto.com"]}},"type":"object","additionalProperties":true}},
[
  {
    "id": "decode",
    "longname": "decode",
    "name": "decode",
    "kind": "function",
    "scope": "util",
    "description": "Decodes a Base64 encoded string back to its original format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Base64 encoded string.",
        "name": "base64Data"
      }
    ],
    "examples": [
      "<caption>Decode a Base64 string</caption>\nconst decoded = Util.decode('SGVsbG8gV29ybGQ=');\nconsole.log(decoded); // Output: Hello World"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The decoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 165,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 11,
    "newscope": true,
    "level": 0
  },
  {
    "id": "del",
    "longname": "del",
    "name": "del",
    "kind": "function",
    "scope": "global",
    "description": "Make a DELETE request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Auth parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "del(`/myendpoint/${state => state.data.id}`, {\n   headers: {'content-type': 'application/json'}\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 163,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encode",
    "longname": "encode",
    "name": "encode",
    "kind": "function",
    "scope": "util",
    "description": "Encodes a given string into Base64 format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The string to be encoded.",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Encode a string</caption>\nconst encoded = Util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ="
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The Base64 encoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 154,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "get('/myEndpoint', {\n  query: {foo: 'bar', a: 1},\n  headers: {'content-type': 'application/json'},\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 87,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 18,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 1
  },
  {
    "id": "parseXML",
    "longname": "parseXML",
    "name": "parseXML",
    "kind": "function",
    "scope": "global",
    "description": "Parse XML with the Cheerio parser",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "data string to be parsed",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "script for extracting data",
        "name": "script"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "parseXML(\n  (state) => state.response,\n  ($) => {\n    return $(\"table[class=your_table]\").parsetable(true, true, true);\n  }\n);",
      "<caption>Using parseXML with a callback</caption>\n parseXML(\n  (state) => state.response,\n  ($) => {\n    return $(\"table[class=your_table]\").parsetable(true, true, true);\n  },\n  (next) => ({ ...next, results: next.data.body })\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 193,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the parsed XML as a JSON object",
        "type": null
      },
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "global",
    "description": "Make a PATCH request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Auth parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "patch('/myEndpoint', {\n   body: {'foo': 'bar'},\n   headers: {'content-type': 'application/json'},\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 145,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Authentication parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "post('/myEndpoint', {\n   body: {'foo': 'bar'},\n   headers: {'content-type': 'application/json'},\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 107,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Auth parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "put('/myEndpoint', {\n   body: {'foo': 'bar'},\n   headers: {'content-type': 'application/json'},\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 126,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a HTTP request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use.",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\n  'GET',\n  '/myEndpoint',\n   {\n     query: {foo: 'bar', a: 1},\n     headers: {'content-type': 'application/json'},\n   }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 68,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "uuid",
    "longname": "uuid",
    "name": "uuid",
    "kind": "function",
    "scope": "util",
    "description": "Generates a UUID (Universally Unique Identifier).",
    "examples": [
      "<caption>Generate a UUID</caption>\nconst id = Util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- A newly generated UUID."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 175,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "humanProper",
    "common": true,
    "name": "humanProper",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "splitKeys",
    "common": true,
    "name": "splitKeys",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"khanacademy","adaptor":"@openfn/language-khanacademy","version":"0.5.6","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language KhanAcademy\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/khanacademy-configuration-schema/)\\ndefinition.\\n\\n## fetch\\n\\n#### sample usage\\n\\n```js\\nfetch({\\n  getEndpoint: 'user',\\n  queryParams: {\\n    email: 'thisoneuser@something.org',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/your-uuid',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-khanacademy\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 9137655: migrate khanacademy\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"email":{"title":"Email","type":"string","description":"Your Khanacademy login email","format":"email","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Khanacademy login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"consumerKey":{"title":"Consumer Key","type":"string","description":"Your Khanacademy consumer key","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]},"secretKey":{"title":"Secret Key","type":"string","description":"Your Khanacademy secret key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["email","password","secretKey","consumerKey"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"kobotoolbox","adaptor":"@openfn/language-kobotoolbox","version":"2.4.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getdeploymentinfo\\\">getDeploymentInfo(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmissions\\\">getSubmissions(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getDeploymentInfo\\n\\n<p><code>getDeploymentInfo(params, callback) ⇒ Operation</code></p>\\n\\nGet deployment information for a specific form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form deployment information |\\n\\n**Example**\\n```js\\ngetDeploymentInfo({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(params, callback) ⇒ Operation</code></p>\\n\\nMake a request to get the list of forms\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form list |\\n\\n**Example**\\n```js\\ngetForms({}, state => {\\n   console.log(state.data);\\n   return state;\\n});\\n```\\n\\n* * *\\n\\n### getSubmissions\\n\\n<p><code>getSubmissions(params, callback) ⇒ Operation</code></p>\\n\\nGet submissions for a specific form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form submissions |\\n\\n**Example**\\n```js\\ngetSubmissions({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language KoboToolbox\\n\\nLanguage Pack for building expressions and operations to interact with the\\n[TEMPLATE] API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/kobotoolbox-configuration-schema/)\\ndefinition.\\n\\n#### Get the list of forms\\n\\n```js\\ngetForms({}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n### Get submissions for a specific form\\n\\nA query can be used to filter results.\\n\\n```js\\ngetSubmissions(\\n  { formId: 'aXecHjmbATuF6iGFmvBLBX', query: { end: { $gte: '2020-11-20' } } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-kobotoolbox\\n\\n## 2.4.3\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 2.4.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n\\n## 2.4.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.4.0\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.2.0\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- c85abf3: Removed the API version enum values in the credential configuration\\n  json schema and added a placeholder\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- e48c30c: add getDeploymentInfo function\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 7b5ca3e: add fn and fix adaptors export\\n\\n### Patch Changes\\n\\n- 4067c28: build ast file\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 7fc47d8: Migrate kobotoolbox\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["getDeploymentInfo","getForms","getSubmissions"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseURL":{"title":"Base URL","type":"string","default":"https://kf.kobotoolbox.org","description":"Kobotoolbox URL","format":"uri","minLength":1,"examples":["https://kf.kobotoolbox.org"]},"username":{"title":"Username","type":"string","description":"Kobotoolbox username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Kobotoolbox password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"apiVersion":{"title":"API Version","type":"string","placeholder":"v2","description":"Kobotoolbox API version to use","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["username","baseURL","password","apiVersion"]}},
[
  {
    "id": "getDeploymentInfo",
    "longname": "getDeploymentInfo",
    "name": "getDeploymentInfo",
    "kind": "function",
    "scope": "global",
    "description": "Get deployment information for a specific form",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Form Id and data to make the fetch or filter",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function to execute after fetching form deployment information",
        "name": "callback"
      }
    ],
    "examples": [
      "getDeploymentInfo({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\n  console.log(state.data);\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 127,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Make a request to get the list of forms",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function to execute after fetching form list",
        "name": "callback"
      }
    ],
    "examples": [
      "getForms({}, state => {\n   console.log(state.data);\n   return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 47,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "getSubmissions",
    "longname": "getSubmissions",
    "name": "getSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Get submissions for a specific form",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Form Id and data to make the fetch or filter",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function to execute after fetching form submissions",
        "name": "callback"
      }
    ],
    "examples": [
      "getSubmissions({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\n  console.log(state.data);\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 86,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"magpi","adaptor":"@openfn/language-magpi","version":"1.2.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#fetchsurveydata\\\">fetchSurveyData(params)</a></dt>\\n<dt>\\n    <a href=\\\"#submitrecord\\\">submitRecord(jsonData)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### fetchSurveyData\\n\\n<p><code>fetchSurveyData(params) ⇒ Operation</code></p>\\n\\nMake a POST request to fetch Magpi data and POST it somewhere else\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\nfetchSurveyData({\\n \\\"surveyId\\\": \\\"37479\\\",\\n \\\"afterDate\\\": \\\"2017-09-27\\\",\\n \\\"postUrl\\\": \\\"https://www.openfn.org/inbox/your-inbox-url\\\"\\n})\\n```\\n\\n* * *\\n\\n### submitRecord\\n\\n<p><code>submitRecord(jsonData) ⇒ Operation</code></p>\\n\\nSubmit a record for a form/survey which already exists in a Magpi user account\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| jsonData | <code>object</code> | Payload data for the record |\\n\\n**Example**\\n```js\\nsubmitRecord(jsonData)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Magpi\\n\\nLanguage Pack for building expressions and operations for working with the\\n[Magpi inbound API](http://support.magpi.com/support/solutions/articles/4839-magpi-inbound-api)\\nand the\\n[Magpi outbound API](http://support.magpi.com/support/solutions/articles/4865-magpi-outbound-api).\\n\\n_N.B.: The Magpi API is under development and this pack may change._\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/magpi-configuration-schema/)\\ndefinition.\\n\\n## Fetch data from Magpi\\n\\nAllows you to fetch data from Magpi and post it elsewhere.\\n\\n#### Using `fetchSurveyData`:\\n\\nhttps://www.magpi.com/api/surveydata/v2?username=taylordowns2000&accesstoken=blahblahblah&surveyid=921409679070\\n\\n```js\\nfetchSurveyData({\\n  surveyId: '37479',\\n  afterDate: '2016-01-01',\\n  beforeDate: '2100-01-01',\\n  postUrl: 'https://www.openfn.org/inbox/secret-5c25-inbox-ba2c-url',\\n});\\n```\\n\\n## Submit new records\\n\\n**wip:** This will allow you to push data to Magpi to create a new record for a\\nform which exists in a user account.\\n\\n#### Using `submitRecord`:\\n\\n```js\\nsubmitRecord(1, 2);\\n```\\n\\n#### Magpi Outbound API Parameters:\\n\\n- `username`: The account username.\\n- `accesstoken`: The accesstoken generated on the site. Each accesstoken is\\n  associated with the user who generated.\\n- `surveyid`: The surveyid is not the survey's name. The surveyid can be\\n  obtained from the list of forms generated in 1 above.\\n- `startdate`: Start date of the data to be returned. Filtering is done based on\\n  the DateStamp and is inclusive.(Optional). The date format should be the same\\n  one as the one on the data tab/ The date format should be the same one as the\\n  one on the data tab\\n- `enddate`: End date of the data to be returned. Filtering is done based on the\\n  DateStamp and is inclusive.(Optional)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-magpi\\n\\n## 1.2.4\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 6afba70: Fix variable reference in submitRecord\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- 86fb813: dependencies update\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- e6c2b4a: Update xml2js parser\\n\\n### Minor Changes\\n\\n- df5dd2e: migrate magpi\\n\"","functions":["fetchSurveyData","submitRecord"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"username","type":"string","description":"Magpi username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"Magpi access token","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]}},"type":"object","additionalProperties":true,"required":["username","accessToken"]}},
[
  {
    "id": "fetchSurveyData",
    "longname": "fetchSurveyData",
    "name": "fetchSurveyData",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to fetch Magpi data and POST it somewhere else",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "fetchSurveyData({\n \"surveyId\": \"37479\",\n \"afterDate\": \"2017-09-27\",\n \"postUrl\": \"https://www.openfn.org/inbox/your-inbox-url\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 46,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/magpi/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "submitRecord",
    "longname": "submitRecord",
    "name": "submitRecord",
    "kind": "function",
    "scope": "global",
    "description": "Submit a record for a form/survey which already exists in a Magpi user account",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record",
        "name": "jsonData"
      }
    ],
    "examples": [
      "submitRecord(jsonData)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 165,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/magpi/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mailchimp","adaptor":"@openfn/language-mailchimp","version":"1.0.8","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addmember\\\">addMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#archivemember\\\">archiveMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#deletemember\\\">deleteMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listaudienceinfo\\\">listAudienceInfo(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listaudiences\\\">listAudiences(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listbatches\\\">listBatches(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listmembers\\\">listMembers(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#startbatch\\\">startBatch(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#tagmembers\\\">tagMembers(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#updatemember\\\">updateMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#updatemembertags\\\">updateMemberTags(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmembers\\\">upsertMembers(params, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addMember\\n\\n<p><code>addMember(params, [callback]) ⇒ Operation</code></p>\\n\\naddMember to a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### archiveMember\\n\\n<p><code>archiveMember(params, [callback]) ⇒ Operation</code></p>\\n\\narchiveMember in a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### deleteMember\\n\\n<p><code>deleteMember(params, [callback]) ⇒ Operation</code></p>\\n\\nPermanently delete a member from a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, query, [callback]) ⇒ Operation</code></p>\\n\\nThe get function is used to make a GET request to the Mailchimp API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made |\\n| query | <code>object</code> | An object containing query parameters to be included in the request |\\n| [callback] | <code>function</code> | (Optional) callback to handle the response |\\n\\n**Example:** Get a list of account exports for a given account\\n```js\\nget('/account-exports');\\n```\\n\\n* * *\\n\\n### listAudienceInfo\\n\\n<p><code>listAudienceInfo(query, [callback]) ⇒ Operation</code></p>\\n\\nGet information about a specific list in your Mailchimp account.\\nResults include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | listId and query parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listAudiences\\n\\n<p><code>listAudiences(query, [callback]) ⇒ Operation</code></p>\\n\\nGet information about all lists in the account.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Query parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listBatches\\n\\n<p><code>listBatches(params, [callback]) ⇒ Operation</code></p>\\n\\nlistBatches\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listMembers\\n\\n<p><code>listMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nlistMembers\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, query, [callback]) ⇒ Operation</code></p>\\n\\nThe post function is used to make a POST request to the Mailchimp API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made. |\\n| body | <code>object</code> | The data to be sent in the body of the request |\\n| query | <code>object</code> | An object containing query parameters to be included in the request |\\n| [callback] | <code>function</code> | (Optional) callback to handle the response |\\n\\n**Example:** Create a new account export in your Mailchimp account\\n```js\\npost('/accounts-export', {include_stages:[]});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake an HTTP request to Mailchimp API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE'). |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made. |\\n| options | <code>Object</code> | Additional options for the request (query, body only). |\\n| [callback] | <code>function</code> | (Optional) callback function to handle the response. |\\n\\n**Example:** Get list to all other resources available in the API\\n```js\\nrequest('GET','/');\\n```\\n**Example:** Create a new account export in your Mailchimp account\\n```js\\nrequest('POST','/accounts-export', {include_stages:[]});\\n```\\n\\n* * *\\n\\n### startBatch\\n\\n<p><code>startBatch(params, [callback]) ⇒ Operation</code></p>\\n\\nStart a batch with a list of operations.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | operations batch job |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nstartBatch(params)\\n```\\n\\n* * *\\n\\n### tagMembers\\n\\n<p><code>tagMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nTag members with a particular tag\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a tagId, members, and a list |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\ntagMembers((state) => ({\\n  listId: \\\"someId\\\", // All Subscribers list\\n  tagId: \\\"someTag\\\", // User tag\\n  members: state.response.body.rows.map((u) => u.email),\\n}));\\n```\\n**Example**\\n```js\\ntagMembers((state) => ({\\n  listId: \\\"someId\\\",\\n  tagId: \\\"someTag\\\",\\n  members: state.response.body.rows\\n    .filter((u) => u.allow_other_emails)\\n    .map((u) => u.email),\\n}));\\n```\\n\\n* * *\\n\\n### updateMember\\n\\n<p><code>updateMember(params, [callback]) ⇒ Operation</code></p>\\n\\nupdateMember\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId,subscriberHash and member |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### updateMemberTags\\n\\n<p><code>updateMemberTags(params, [callback]) ⇒ Operation</code></p>\\n\\nupdateMemberTags\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### upsertMembers\\n\\n<p><code>upsertMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nAdd or update a list members\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, users, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nupsertMembers((state) => ({\\n  listId: \\\"someId\\\",\\n  users: state.response.body.rows.map((u) => ({\\n    email: u.email,\\n    status: u.allow_other_emails ? \\\"subscribed\\\" : \\\"unsubscribed\\\",\\n    mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\\n  })),\\n}));\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mailchimp\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Mailchimp\\nmarketing API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailchimp-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailchimp\\n\\n## 1.0.8\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 60dec15: This update contains changes to the HTTP helpers (`get`, `post` etc):\\n\\n  - Properly handle 204 responses (ie, success with no body)\\n  - On error, throw the mailchimp JSON body, which is full of useful info\\n  - Slightly change the shape of the returned state\\n  - Better log output\\n\\n  This update contains one breaking change on the http helpers:\\n\\n  - state.response is now `{ headers, statusCode, body }` (it used to just be\\n    `body`)\\n\\n## 0.8.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.7.4\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.7.3\\n\\n### Patch Changes\\n\\n- 6afba70: Fix updateMember()\\n\\n## 0.7.2\\n\\n### Patch Changes\\n\\n- 1131c34: Remove regex pattern for validation and changed minLength to 1\\n\\n## 0.7.1\\n\\n### Patch Changes\\n\\n- 1f856c4: Update configuration schema\\n- 48394f5: - fix ast docs warnings\\n  - add status code log on request\\n\\n## 0.7.0\\n\\n### Minor Changes\\n\\n- 58fcea9: - Add chunk from common\\n  - Improve error logs\\n  - Return `state` in request finalState\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- 1582873: Add request, get and post functions\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 8e39ee1: Add new functions\\n\\n  - addMember()\\n  - listMembers()\\n  - deleteMember()\\n  - listAudiences()\\n  - archiveMember()\\n  - updateMemberTags()\\n  - listAudienceInfo()\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 88fa3b5: migrate mailchimp\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["addMember","archiveMember","deleteMember","get","listAudienceInfo","listAudiences","listBatches","listMembers","post","request","startBatch","tagMembers","updateMember","updateMemberTags","upsertMembers"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Data Center","type":"string","description":"Mailchimp Data Center for your account","minLength":1,"examples":["us11","uk8","in10"]},"apiKey":{"title":"API Key","type":"string","description":"Mailchimp API Key","minLength":1,"examples":["0eb22c7b4a1c5bcd789379bf8a92902d-us13"]}},"type":"object","additionalProperties":true,"required":["server","apiKey"]}},
[
  {
    "id": "addMember",
    "longname": "addMember",
    "name": "addMember",
    "kind": "function",
    "scope": "global",
    "description": "addMember to a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 201,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 6,
    "newscope": true,
    "level": 0
  },
  {
    "id": "archiveMember",
    "longname": "archiveMember",
    "name": "archiveMember",
    "kind": "function",
    "scope": "global",
    "description": "archiveMember in a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 260,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "deleteMember",
    "longname": "deleteMember",
    "name": "deleteMember",
    "kind": "function",
    "scope": "global",
    "description": "Permanently delete a member from a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 279,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "The get function is used to make a GET request to the Mailchimp API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object containing query parameters to be included in the request",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a list of account exports for a given account</caption>\nget('/account-exports');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 438,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "listAudienceInfo",
    "longname": "listAudienceInfo",
    "name": "listAudienceInfo",
    "kind": "function",
    "scope": "global",
    "description": "Get information about a specific list in your Mailchimp account.\nResults include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "listId and query parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 317,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "listAudiences",
    "longname": "listAudiences",
    "name": "listAudiences",
    "kind": "function",
    "scope": "global",
    "description": "Get information about all lists in the account.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 298,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "listBatches",
    "longname": "listBatches",
    "name": "listBatches",
    "kind": "function",
    "scope": "global",
    "description": "listBatches",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "listMembers",
    "longname": "listMembers",
    "name": "listMembers",
    "kind": "function",
    "scope": "global",
    "description": "listMembers",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 182,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "The post function is used to make a POST request to the Mailchimp API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to be sent in the body of the request",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object containing query parameters to be included in the request",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new account export in your Mailchimp account</caption>\npost('/accounts-export', {include_stages:[]});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 455,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make an HTTP request to Mailchimp API",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE').",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Additional options for the request (query, body only).",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback function to handle the response.",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get list to all other resources available in the API</caption>\nrequest('GET','/');",
      "<caption>Create a new account export in your Mailchimp account</caption>\nrequest('POST','/accounts-export', {include_stages:[]});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 371,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "startBatch",
    "longname": "startBatch",
    "name": "startBatch",
    "kind": "function",
    "scope": "global",
    "description": "Start a batch with a list of operations.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "operations batch job",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "startBatch(params)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 145,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "tagMembers",
    "longname": "tagMembers",
    "name": "tagMembers",
    "kind": "function",
    "scope": "global",
    "description": "Tag members with a particular tag",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a tagId, members, and a list",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "tagMembers((state) => ({\n  listId: \"someId\", // All Subscribers list\n  tagId: \"someTag\", // User tag\n  members: state.response.body.rows.map((u) => u.email),\n}));",
      "tagMembers((state) => ({\n  listId: \"someId\",\n  tagId: \"someTag\",\n  members: state.response.body.rows\n    .filter((u) => u.allow_other_emails)\n    .map((u) => u.email),\n}));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 124,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "updateMember",
    "longname": "updateMember",
    "name": "updateMember",
    "kind": "function",
    "scope": "global",
    "description": "updateMember",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId,subscriberHash and member",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 220,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "updateMemberTags",
    "longname": "updateMemberTags",
    "name": "updateMemberTags",
    "kind": "function",
    "scope": "global",
    "description": "updateMemberTags",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 241,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "upsertMembers",
    "longname": "upsertMembers",
    "name": "upsertMembers",
    "kind": "function",
    "scope": "global",
    "description": "Add or update a list members",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, users, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertMembers((state) => ({\n  listId: \"someId\",\n  users: state.response.body.rows.map((u) => ({\n    email: u.email,\n    status: u.allow_other_emails ? \"subscribed\" : \"unsubscribed\",\n    mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\n  })),\n}));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 74,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mailgun","adaptor":"@openfn/language-mailgun","version":"0.5.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#send\\\">send(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### send\\n\\n<p><code>send(params)</code></p>\\n\\nCreate an event\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Params for sending an email |\\n\\n**Example**\\n```js\\nsend({\\n  from: 'from_email',\\n  to: 'to_email',\\n  subject: 'Your Subject',\\n  text: 'Your message goes here',\\n  attachment: {\\n    url: 'www.google.com/doodle.png',\\n    filename: 'forYou.png',\\n  },\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mailgun\\n\\nLanguage Pack for building expressions and operations for working with the\\nmailgun API.\\n\\n[mailgun-js on npm](https://www.npmjs.com/package/mailgun-js)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailgun-configuration-schema/)\\ndefinition.\\n\\n## send\\n\\n```js\\nsend(\\n  fields(\\n    field('from', 'from_email'),\\n    field('to', 'to_email'),\\n    field('subject', 'Your Subject'),\\n    field('text', 'Your message goes here')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailgun\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- 02ab7a89: Change `host` format from `hostname` to `string` in\\n  `configuration-schema.json`\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- e7ff766: Update configuration-schema\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- f86576d: Security update to mailgun.js\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 4620079: Bump opinionator version\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 9ded25e: Migrate Mailgun\\n\"","functions":["send"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"domain":{"title":"Domain Name","type":"string","description":"Mailgun API Domain Name","format":"string","minLength":1,"examples":["sandbox-123.mailgun.org"]},"apiKey":{"title":"API Key","type":"string","description":"Mailgun API Key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["domain","apiKey"]}},
[
  {
    "id": "send",
    "longname": "send",
    "name": "send",
    "kind": "function",
    "scope": "global",
    "description": "Create an event",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Params for sending an email",
        "name": "params"
      }
    ],
    "examples": [
      "send({\n  from: 'from_email',\n  to: 'to_email',\n  subject: 'Your Subject',\n  text: 'Your message goes here',\n  attachment: {\n    url: 'www.google.com/doodle.png',\n    filename: 'forYou.png',\n  },\n})"
    ],
    "access": "public",
    "meta": {
      "lineno": 69,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailgun/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"maximo","adaptor":"@openfn/language-maximo","version":"0.5.8","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#fetch\\\">fetch(params)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(params)</a></dt>\\n<dt>\\n    <a href=\\\"#update75\\\">update75(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### fetch\\n\\n<p><code>fetch(params) ⇒ Operation</code></p>\\n\\nMake a GET request and POST it somewhere else\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\nfetch({\\n endpoint: 'maxrest/rest/os/mxinventory',\\n query: {\\n   ITEMNUM: '01226',\\n   _format: 'json',\\n },\\n postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(params) ⇒ Operation</code></p>\\n\\nMake an update in Maximo 7.6 and beyond\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example**\\n```js\\nexecute(\\n  update(params)\\n)(state)\\n```\\n\\n* * *\\n\\n### update75\\n\\n<p><code>update75(params) ⇒ Operation</code></p>\\n\\nMake an upadte in Maximo 7.5\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example**\\n```js\\nexecute(\\n  update75(params)\\n)(state)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Maximo\\n\\nLanguage Pack for building expressions and operations to access IBM Maximo EAM.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/maximo-configuration-schema/)\\ndefinition.\\n\\n### Fetch\\n\\n#### sample 'fetch' expression\\n\\n```js\\nfetch({\\n  endpoint: 'maxrest/rest/os/mxinventory',\\n  query: {\\n    ITEMNUM: '01226',\\n    _format: 'json',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n\\n### sample 'create' expression\\n\\n```js\\ncreate({\\n  endpoint: 'maxrest/rest/os/mxinvbal/',\\n  body: function (state) {\\n    return {\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      ISSUEUNIT: 'FOO',\\n      PHYSCNT: dataValue('PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n### sample 'update75' expression\\n\\n```js\\nupdate75({\\n  endpoint: state => {\\n    return (\\n      'maxrest/rest/os/mxinvbal/' +\\n      dataValue('form.question1.INVBALANCESID')(state)\\n    );\\n  },\\n  body: state => {\\n    return {\\n      _action: 'AddChange', //this is required for the old Maximo API!\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      PHYSCNT: dataValue('form.PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-maximo\\n\\n## 0.5.8\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- aed7e0b: fix required field in configuration schema\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 4d4be56: migrate maximo\\n\"","functions":["fetch","update","update75"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Maximo instance base URL","format":"uri","minLength":1,"examples":["https://maximo-demo76.mro.com"]},"username":{"title":"Username","type":"string","description":"Maximo instance username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Maximo instance password","writeOnly":true,"minLength":1,"examples":["@some(!)passowrd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","username","password"]}},
[
  {
    "id": "fetch",
    "longname": "fetch",
    "name": "fetch",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request and POST it somewhere else",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "fetch({\n endpoint: 'maxrest/rest/os/mxinventory',\n query: {\n   ITEMNUM: '01226',\n   _format: 'json',\n },\n postUrl: 'https://www.openfn.org/inbox/not-real',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Make an update in Maximo 7.6 and beyond",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the update",
        "name": "params"
      }
    ],
    "examples": [
      "execute(\n  update(params)\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 196,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "update75",
    "longname": "update75",
    "name": "update75",
    "kind": "function",
    "scope": "global",
    "description": "Make an upadte in Maximo 7.5",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the update",
        "name": "params"
      }
    ],
    "examples": [
      "execute(\n  update75(params)\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 262,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"medicmobile","adaptor":"@openfn/language-medicmobile","version":"0.5.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#changesapi\\\">changesApi(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchsubmissions\\\">fetchSubmissions(formId, params, postUrl)</a></dt>\\n<dt>\\n    <a href=\\\"#pickformdata\\\">pickFormData(formId)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### changesApi\\n\\n<p><code>changesApi(params, callback) ⇒ Operation</code></p>\\n\\nAccess the CouchDB Changes API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nchangesApi(params, callback)\\n```\\n\\n* * *\\n\\n### fetchSubmissions\\n\\n<p><code>fetchSubmissions(formId, params, postUrl) ⇒ Operation</code></p>\\n\\nAccess form submissions and post them as JSON.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Query parameters |\\n| params | <code>object</code> | Starting sequence id |\\n| postUrl | <code>string</code> | Inbox to post form data |\\n\\n**Example**\\n```js\\nfetchSubmissions(\\n  \\\"pregnancy\\\", // formId\\n  { \\\"last-event-id\\\": 334 }, // params\\n  \\\"http://localhost:4000/inbox/abc-123-xyz\\\" // postUrl\\n);\\n```\\n\\n* * *\\n\\n### pickFormData\\n\\n<p><code>pickFormData(formId) ⇒ Operation</code></p>\\n\\nSelect submissions for a specific form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | The form ID. |\\n\\n**Example**\\n```js\\npickFormData(formId)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Medic Mobile\\n\\nLanguage Pack for building expressions and operations to make calls to the Medic\\nMobile API.  \\n**For an overview of Medic's database, check out\\n[Medic's DB Schema v2](https://github.com/medic/medic-docs/blob/master/development/db-schema.md)**  \\nThe exported functions in this language package can be executed by\\n[OpenFn/core](https://github.com/OpenFn/core):\\n\\n```sh\\n../core/lib/cli.js execute -l ./lib/Adaptor -s ./tmp/state.json -e ./tmp/expression.js\\n```\\n\\nFor quick-start help, clone\\n[OpenFn/openfn-devtools](https://github.com/OpenFn/openfn-devtools) and follow\\nthe README.md\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/medicmobile-configuration-schema/)\\ndefinition.\\n\\n#### sample fetchSubmissions expression\\n\\n```js\\nfetchSubmissions(\\n  'pregnancy', // formId\\n  { 'last-event-id': 334 }, // params, last-event-id will be replaced by cursor\\n  'http://localhost:4000/inbox/abc-123-xyz' // postUrl\\n);\\n```\\n\\n#### sample changesApi and pickFormData usage\\n\\n```js\\n// get all the changes...\\nchangesApi({\\n  include_docs: true,\\n  // This only gets used the first time the job is run.\\n  // Subsequent runs take the lastSeq value as their cursor.\\n  // \\\"last-event-id\\\": 789,\\n});\\n\\n// Picks out the field data for a given formId.\\npickFormData('pregnancy');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-medicmobile\\n\\n## 0.5.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 421fad3: Bump query-string\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2cd3236: migrate medicmobile\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["changesApi","fetchSubmissions","pickFormData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","type":"string","description":"Medic's CouchDB api URL","format":"uri","minLength":1,"examples":["https://standard.app.medicmobile.org"]},"db":{"title":"Database","type":"string","description":"Database name","minLength":1,"examples":["medic"]},"username":{"title":"Username","type":"string","description":"Medic instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Medic instance password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["server","username","password","db"]}},
[
  {
    "id": "changesApi",
    "longname": "changesApi",
    "name": "changesApi",
    "kind": "function",
    "scope": "global",
    "description": "Access the CouchDB Changes API",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "changesApi(params, callback)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 89,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "fetchSubmissions",
    "longname": "fetchSubmissions",
    "name": "fetchSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Access form submissions and post them as JSON.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Query parameters",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Starting sequence id",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Inbox to post form data",
        "name": "postUrl"
      }
    ],
    "examples": [
      "fetchSubmissions(\n  \"pregnancy\", // formId\n  { \"last-event-id\": 334 }, // params\n  \"http://localhost:4000/inbox/abc-123-xyz\" // postUrl\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "pickFormData",
    "longname": "pickFormData",
    "name": "pickFormData",
    "kind": "function",
    "scope": "global",
    "description": "Select submissions for a specific form",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The form ID.",
        "name": "formId"
      }
    ],
    "examples": [
      "pickFormData(formId)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 171,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mogli","adaptor":"@openfn/language-mogli","version":"0.5.8","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#sourceHelpers_lookup\\\">sourceHelpers.lookup(relationshipName, externalID, path)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#sourceHelpers_relationship\\\">sourceHelpers.relationship(relationshipName, externalID, dataSource)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#index\\\">index()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#join\\\">join()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#map\\\">map()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#referencepath\\\">referencePath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#source\\\">source()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n\\n## sourceHelpers\\n\\nThese functions belong to the sourceHelpers namespace.\\n### sourceHelpers.lookup {#sourceHelpers_lookup}\\n\\n<p><code>lookup(relationshipName, externalID, path) ⇒ object</code></p>\\n\\nAdds a lookup or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| path | <code>string</code> | JSONPath to data source. |\\n\\n**Example:** Example\\n```js\\nlookup(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"$.path\\\")\\n```\\n\\n* * *\\n\\n\\n### sourceHelpers.relationship {#sourceHelpers_relationship}\\n\\n<p><code>relationship(relationshipName, externalID, dataSource) ⇒ object</code></p>\\n\\nAdds a lookup or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example:** Data Sourced Value\\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\n```\\n**Example:** Fixed Value\\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mogli\\n\\nLanguage Pack for building expressions and operations to interact with Mogli\\nSMS.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mogli-configuration-schema/)\\ndefinition.\\n\\n### Create inbound SMS\\n\\n```js\\ncreateSMS(\\n  fields(\\n    field('sender', dataValue('from_number')),\\n    field('receivedAt', dataValue('timestamp')),\\n    field('message', dataValue('message'))\\n  )\\n);\\n```\\n\\n<!-- TODO: determine update process -->\\n<!-- ### Update SMS status\\n```js\\nupdateSMS(\\n  fields(\\n    field(\\\"Id\\\", dataValue(\\\"externalId\\\")),\\n    field(\\\"status\\\", dataValue(\\\"status\\\"))\\n  )\\n);\\n``` -->\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.1.6\\n\\n## 0.5.8\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- 7cc8efc: remove FakeAdaptor references\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- # c6056e8: migrate mogli\\n\\n* State gets cleaned up after the operations are finished. This means that the\\n  final state is serializable.\\n\\n  The JSForce connection object is provided by `createConnection`, and in turn\\n  `execute` ensures it is run before the user's operations.\\n\\n  The `cleanupState` reducer simply deletes the connection key from state.\\n\\n# v0.1.3\\n\\n- Bumped language-common dependency to v0.0.4.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"Mogli instance login URL","format":"uri","minLength":1,"examples":[" https://www.orange-or-airtel-or-vodafone.com/api/"]},"username":{"title":"Username","type":"string","description":"Mogli instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Mogli instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]},"securityToken":{"title":"Security Token","type":"string","description":"Mogli instance security token","writeOnly":true,"minLength":1,"examples":["dGF5bG9yOnNlY3JldA=="]},"secret":{"title":"Secret","type":"string","description":"Mogli instance secret","writeOnly":true,"minLength":1,"examples":["someotherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["loginUrl","username","password","securityToken","secret"]}},
[
  {
    "id": "lookup",
    "longname": "lookup",
    "name": "lookup",
    "kind": "function",
    "scope": "sourceHelpers",
    "description": "Adds a lookup or 'dome insert' to a record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "`__r` relationship field on the record.",
        "name": "relationshipName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Salesforce ExternalID field.",
        "name": "externalID"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath to data source.",
        "name": "path"
      }
    ],
    "examples": [
      "<caption>Example</caption>\nlookup(\"relationship_name__r\", \"externalID on related object\", \"$.path\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "sourceHelpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "Operation",
    "longname": "Operation",
    "name": "Operation",
    "kind": "typedef",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "name": "state"
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "ignore": true,
    "meta": {
      "lineno": 15,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 1
  },
  {
    "id": "relationship",
    "longname": "relationship",
    "name": "relationship",
    "kind": "function",
    "scope": "sourceHelpers",
    "description": "Adds a lookup or 'dome insert' to a record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "`__r` relationship field on the record.",
        "name": "relationshipName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Salesforce ExternalID field.",
        "name": "externalID"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "resolvable source.",
        "name": "dataSource"
      }
    ],
    "examples": [
      "<caption>Data Sourced Value</caption>\nrelationship(\"relationship_name__r\", \"externalID on related object\", dataSource(\"path\"))",
      "<caption>Fixed Value</caption>\nrelationship(\"relationship_name__r\", \"externalID on related object\", \"hello world\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 33,
      "filename": "sourceHelpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "State",
    "longname": "State",
    "name": "State",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON Data.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Array.<Reference>"
          ]
        },
        "description": "History of all previous operations.",
        "name": "references"
      }
    ],
    "ignore": true,
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "index",
    "common": true,
    "name": "index",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "join",
    "common": true,
    "name": "join",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "map",
    "common": true,
    "name": "map",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "referencePath",
    "common": true,
    "name": "referencePath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "source",
    "common": true,
    "name": "source",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mojatax","adaptor":"@openfn/language-mojatax","version":"1.0.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, data, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### post\\n\\n<p><code>post(path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to any Mojatax endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the request body |\\n| options | [<code>MojataxRequestOptions</code>](#mojataxrequestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Mojatax server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Make a POST request to create an invoice\\n```js\\npost(\\\"CreateInvoice\\\", {\\ninvoice_id: 'PID092',\\ncustomerId: '102',\\nitems: [],\\n});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the Mojatax server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>MojataxRequestOptions</code>](#mojataxrequestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Mojatax server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Make a POST request to create an invoice\\n```js\\nrequest(\\\"POST\\\", \\\"/client/CreateInvoice\\\", {\\ninvoice_id: 'PID092',\\ncustomerId: '102',\\nitems: [],\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### MojataxRequestOptions\\n\\nOptions provided to Mojatax HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-mojatax <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the mojatax\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/mojatax-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mojatax-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('CreateInvoice', {\\n  customerId: '102',\\n  invoice_id: 'PID092',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-mojatax\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.0\\n\\nImplement a post and a generic request function for mojatax adaptor\\n\"","functions":["post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Mojatax base URL","format":"uri","minLength":1,"examples":["https://vfd-staging.mojatax.com"]},"clientId":{"title":"Client Id","type":"string","description":"Your Mojatax client id","examples":["the-long-uuid-provided-by-mojatax"]},"password":{"title":"Password","type":"string","description":"Your Mojatax password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","password","clientId"]}},
[
  {
    "id": "MojataxHttpState",
    "longname": "MojataxHttpState",
    "name": "MojataxHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Mojatax server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "order": 0,
    "newscope": true
  },
  {
    "id": "MojataxRequestOptions",
    "longname": "MojataxRequestOptions",
    "name": "MojataxRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to Mojatax HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to any Mojatax endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "MojataxRequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create an invoice</caption>\npost(\"CreateInvoice\", {\ninvoice_id: 'PID092',\ncustomerId: '102',\nitems: [],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 72,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "MojataxHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the Mojatax server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "MojataxRequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create an invoice</caption>\nrequest(\"POST\", \"/client/CreateInvoice\", {\ninvoice_id: 'PID092',\ncustomerId: '102',\nitems: [],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 94,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "MojataxHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mongodb","adaptor":"@openfn/language-mongodb","version":"2.1.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#finddocuments\\\">findDocuments(params)</a></dt>\\n<dt>\\n    <a href=\\\"#insertdocuments\\\">insertDocuments(params)</a></dt>\\n<dt>\\n    <a href=\\\"#updatedocument\\\">updateDocument(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### findDocuments\\n\\n<p><code>findDocuments(params) ⇒ State</code></p>\\n\\nFind documents in a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\nfindDocuments({\\n   database: 'str',\\n   collection: 'cases',\\n   query: {a:3}\\n  });\\n```\\n\\n* * *\\n\\n### insertDocuments\\n\\n<p><code>insertDocuments(params) ⇒ State</code></p>\\n\\nInserts documents into a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\ninsertDocuments({\\n   database: 'str',\\n   collection: 'kids',\\n   documents: [1,2,3]\\n  });\\n```\\n\\n* * *\\n\\n### updateDocument\\n\\n<p><code>updateDocument(params) ⇒ State</code></p>\\n\\nUpdates document (optionally upserting) into a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\nupdateDocuments({\\n   database: 'str',\\n   collection: 'animals',\\n   filter: { type: 'fuzzy' },\\n   changes: { kind: 'soft' },\\n   options: { upsert: true }\\n  });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MongoDB\\n\\nLanguage Pack for building expressions and operations for use with MongoDB.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mongodb-configuration-schema/)\\ndefinition.\\n\\n### insertDocuments\\n\\n```js\\ninsertDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  documents: state => {\\n    return state.data.map(item => {\\n      return { name: item.name, age: item.age };\\n    });\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n### findDocuments\\n\\n```js\\nfindDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  query: state => {\\n    return { name: 'stu' };\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mongodb\\n\\n## 2.1.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.1.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.1.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.1.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- 38b3e8e0: Change `clusterHostname` format from `hostname` to `string` in\\n  `configuration-schema.json`\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 6afba70: Fix findDocuments\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Update configuration schema for MongoDB adaptor:\\n  - Rename `clusterUrl` to `clusterHostname`\\n  - Change `clusterHostname` format from `uri` to `hostname`\\n  - Update `Adaptor.js` and tests to use new name\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\"","functions":["findDocuments","insertDocuments","updateDocument"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"clusterHostname":{"title":"Cluster Hostname","type":"string","description":"Your MongoDB cluster hostname","format":"string","minLength":1,"examples":["yourCluster-xxxyzzz.mongodb.net"]},"username":{"title":"Username","type":"string","description":"Your MongoDB instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your MongoDB instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]}},"type":"object","additionalProperties":true,"required":["clusterHostname","username","password"]}},
[
  {
    "id": "findDocuments",
    "longname": "findDocuments",
    "name": "findDocuments",
    "kind": "function",
    "scope": "global",
    "description": "Find documents in a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "findDocuments({\n   database: 'str',\n   collection: 'cases',\n   query: {a:3}\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 142,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "insertDocuments",
    "longname": "insertDocuments",
    "name": "insertDocuments",
    "kind": "function",
    "scope": "global",
    "description": "Inserts documents into a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "insertDocuments({\n   database: 'str',\n   collection: 'kids',\n   documents: [1,2,3]\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "updateDocument",
    "longname": "updateDocument",
    "name": "updateDocument",
    "kind": "function",
    "scope": "global",
    "description": "Updates document (optionally upserting) into a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "updateDocuments({\n   database: 'str',\n   collection: 'animals',\n   filter: { type: 'fuzzy' },\n   changes: { kind: 'soft' },\n   options: { upsert: true }\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"msgraph","adaptor":"@openfn/language-msgraph","version":"0.7.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resource, data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getdrive\\\">getDrive(specifier, name, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getfile\\\">getFile(pathOrId, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getfolder\\\">getFolder(pathOrId, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#uploadfile\\\">uploadFile(resource, data, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#Utils_sheetToBuffer\\\">Utils.sheetToBuffer(rows, options)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resource, data, callback) ⇒ Operation</code></p>\\n\\nCreate some resource in msgraph\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource | <code>string</code> | The type of entity that will be created |\\n| data | <code>object</code> | The data to create the new resource |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreate(\\\"applications\\\", {\\\"displayName\\\": \\\"My App\\\"})\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, query, callback) ⇒ Operation</code></p>\\n\\nMake a GET request to msgraph resource\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nget('sites/root/lists')\\n```\\n\\n* * *\\n\\n### getDrive\\n\\n<p><code>getDrive(specifier, name, [callback]) ⇒ Operation</code></p>\\n\\nGet a Drive or SharePoint document library. The drive metadata will be written\\nto state.drives, where it can be used by other adaptor functions.\\nPass { id } to get a drive by id or { id, owner } to get default drive for\\nsome parent resource, like a group\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| specifier | <code>Object</code> |  | A definition of the drive to retrieve    - id {string} - The ID of the resource or owner.    - owner {string} - The type of drive owner (e.g. sites, groups). |\\n| name | <code>string</code> |  | The local name of the drive used to write to state.drives, ie, state.drives[name] |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a drive by ID\\n```js\\ngetDrive({ id: \\\"YXzpkoLwR06bxC8tNdg71m\\\" })\\n```\\n**Example:** Get the default drive for a site\\n```js\\ngetDrive({ id: \\\"openfn.sharepoint.com\\\", owner: \\\"sites\\\" })\\n```\\n\\n* * *\\n\\n### getFile\\n\\n<p><code>getFile(pathOrId, options, [callback]) ⇒ Operation</code></p>\\n\\nGet file metadata or file content.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| pathOrId | <code>string</code> |  | A path to a file or file id |\\n| options | <code>object</code> |  | (Optional) Query parameters |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a file by ID\\n```js\\ngetFile('01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW')\\n```\\n**Example:** Get a file for a named drive by id\\n```js\\ngetFile(\\\"01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW\\\",{ driveName: \\\"mydrive\\\"})\\n```\\n\\n* * *\\n\\n### getFolder\\n\\n<p><code>getFolder(pathOrId, options, [callback]) ⇒ Operation</code></p>\\n\\nGet the contents or metadata of a folder.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| pathOrId | <code>string</code> |  | A path to a folder or folder id |\\n| options | <code>object</code> |  | (Optional) Query parameters |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a folder by ID\\n```js\\ngetFolder('01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3')\\n```\\n**Example:** Get a folder for a named drive by id\\n```js\\ngetFolder(\\\"01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3\\\",{ driveName: \\\"mydrive\\\"})\\n```\\n\\n* * *\\n\\n### uploadFile\\n\\n<p><code>uploadFile(resource, data, callback) ⇒ Operation</code></p>\\n\\nUpload a file to a drive\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource | <code>Object</code> | Resource Object |\\n| [resource.driveId] | <code>String</code> | Drive Id |\\n| [resource.driveId] | <code>String</code> | Site Id |\\n| [resource.folderId] | <code>String</code> | Parent folder id |\\n| [resource.contentType] | <code>String</code> | Resource content-type |\\n| [resource.onConflict] | <code>String</code> | Specify conflict behavior if file with the same name exists. Can be \\\"rename | fail | replace\\\" |\\n| data | <code>Object</code> | A buffer containing the file. |\\n| callback | <code>function</code> | Optional callback function |\\n\\n**Example:** Upload Excel file to a drive using `driveId` and `parantItemId`\\n```js\\nuploadFile(\\n  state => ({\\n    driveId: state.driveId,\\n    folderId: state.folderId,\\n    fileName: `Tracker.xlsx`,\\n  }),\\n  state => state.buffer\\n);\\n```\\n**Example:** Upload Excel file to a SharePoint drive using `siteId` and `parantItemId`\\n```js\\nuploadFile(\\n  state => ({\\n    siteId: state.siteId,\\n    folderId: state.folderId,\\n    fileName: `Report.xlsx`,\\n  }),\\n  state => state.buffer\\n);\\n```\\n\\n* * *\\n\\n\\n## Utils\\n\\nThese functions belong to the Utils namespace.\\n### Utils.sheetToBuffer {#Utils_sheetToBuffer}\\n\\n<p><code>sheetToBuffer(rows, options) ⇒</code></p>\\n\\nThe function `sheetToBuffer` takes in rows, options and optional callback, It creates a workbook\\nand worksheet using the rows, appends the worksheet to the workbook, and returns the workbook as a\\nbuffer.\\n\\n**Returns**: a buffer containing the Excel file in `state.buffer`.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| rows |  | The `rows` parameter is an array of objects representing the data to be written to the Excel sheet. Each object in the array represents a row in the sheet, and the keys of the object represent the column headers. The values of the object represent the data in each cell of the row. |\\n| options |  | The `options` parameter is an object that contains additional configuration options |\\n| [options.wsName] | <code>String</code> | Worksheet name i.e 32 Characters |\\n| [options.bookType] | <code>String</code> | File format of the exported file, Default is 'xlsx'. See [here](https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats) for the function. It can have the following properties: |\\n\\n**Example:** Create a buffer containing excel file with `xlsx` output format  \\n```js\\nsheetToBuffer('$.data[*]', {\\n wsName: 'Invalid Grant Codes',\\n bookType: 'xlsx',\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-msgraph <img src='assets/sq-256x256.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[Microsoft Graph API](https://learn.microsoft.com/en-us/graph/use-the-api).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/msgraph-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/msgraph-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-msgraph\\n\\n## 0.7.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.7.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.7.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.7.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.7.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.7.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.7.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.7.0\\n\\n### Minor Changes\\n\\n- 1d2a641: Normalize configuration keys for oauth. `access_token` and\\n  `accessToken` are now both supported (`access_token` is preferred)\\n\\n## 0.6.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 4cd6587: Add `uploadFile` and `sheetToBuffer` function\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- 1c183e9: Fix getFile unit tests\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- b90e8a2: Add support for stream\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 9cc4952: fix url in request util\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- f45f477: Clean-up state before throwing an error\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 9366e53: - Switch from `nodejs` default `fetch` to `undici` `fetch`\\n  - Added the following `sharepoint` functions\\n    - `getDrive()`\\n    - `getFolder()`\\n    - `getFile()`\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- d33c0ee: export parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 93d82a8: Add msgraph adaptor with get() and create() functions\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\"","functions":["create","get","getDrive","getFile","getFolder","uploadFile"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"apiVersion":{"title":"API Version","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"v1.0","description":"Microsoft Graph api version","minLength":1,"examples":["v1.0","beta"]},"access_token":{"title":"Access Token","type":"string","description":"Your Microsoft Graph access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRl"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create some resource in msgraph",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of entity that will be created",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to create the new resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "create(\"applications\", {\"displayName\": \"My App\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 70,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to msgraph resource",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "get('sites/root/lists')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getDrive",
    "longname": "getDrive",
    "name": "getDrive",
    "kind": "function",
    "scope": "global",
    "description": "Get a Drive or SharePoint document library. The drive metadata will be written\nto state.drives, where it can be used by other adaptor functions.\nPass { id } to get a drive by id or { id, owner } to get default drive for\nsome parent resource, like a group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A definition of the drive to retrieve\n   - id {string} - The ID of the resource or owner.\n   - owner {string} - The type of drive owner (e.g. sites, groups).",
        "name": "specifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The local name of the drive used to write to state.drives, ie, state.drives[name]",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a drive by ID</caption>\ngetDrive({ id: \"YXzpkoLwR06bxC8tNdg71m\" })",
      "<caption>Get the default drive for a site</caption>\ngetDrive({ id: \"openfn.sharepoint.com\", owner: \"sites\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 135,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "getFile",
    "longname": "getFile",
    "name": "getFile",
    "kind": "function",
    "scope": "global",
    "description": "Get file metadata or file content.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A path to a file or file id",
        "name": "pathOrId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Query parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a file by ID</caption>\ngetFile('01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW')",
      "<caption>Get a file for a named drive by id</caption>\ngetFile(\"01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW\",{ driveName: \"mydrive\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 228,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getFolder",
    "longname": "getFolder",
    "name": "getFolder",
    "kind": "function",
    "scope": "global",
    "description": "Get the contents or metadata of a folder.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A path to a folder or folder id",
        "name": "pathOrId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Query parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a folder by ID</caption>\ngetFolder('01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3')",
      "<caption>Get a folder for a named drive by id</caption>\ngetFolder(\"01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3\",{ driveName: \"mydrive\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 174,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "sheetToBuffer",
    "longname": "sheetToBuffer",
    "name": "sheetToBuffer",
    "kind": "function",
    "scope": "Utils",
    "description": "The function `sheetToBuffer` takes in rows, options and optional callback, It creates a workbook\nand worksheet using the rows, appends the worksheet to the workbook, and returns the workbook as a\nbuffer.",
    "params": [
      {
        "description": "The `rows` parameter is an array of objects representing the data to be written to the\nExcel sheet. Each object in the array represents a row in the sheet, and the keys of the object\nrepresent the column headers. The values of the object represent the data in each cell of the row.",
        "name": "rows"
      },
      {
        "description": "The `options` parameter is an object that contains additional configuration options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Worksheet name i.e 32 Characters",
        "name": "options.wsName"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "File format of the exported file, Default is 'xlsx'. See {@link https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats here}\nfor the function. It can have the following properties:",
        "name": "options.bookType"
      }
    ],
    "examples": [
      "<caption>Create a buffer containing excel file with `xlsx` output format  </caption>\nsheetToBuffer('$.data[*]', {\n wsName: 'Invalid Grant Codes',\n bookType: 'xlsx',\n});"
    ],
    "returns": [
      {
        "description": "a buffer containing the Excel file in `state.buffer`."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "uploadFile",
    "longname": "uploadFile",
    "name": "uploadFile",
    "kind": "function",
    "scope": "global",
    "description": "Upload a file to a drive",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Resource Object",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Drive Id",
        "name": "resource.driveId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Site Id",
        "name": "resource.driveId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Parent folder id",
        "name": "resource.folderId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Resource content-type",
        "name": "resource.contentType"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Specify conflict behavior if file with the same name exists. Can be \"rename | fail | replace\"",
        "name": "resource.onConflict"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A buffer containing the file.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Upload Excel file to a drive using `driveId` and `parantItemId`</caption>\nuploadFile(\n  state => ({\n    driveId: state.driveId,\n    folderId: state.folderId,\n    fileName: `Tracker.xlsx`,\n  }),\n  state => state.buffer\n);",
      "<caption>Upload Excel file to a SharePoint drive using `siteId` and `parantItemId`</caption>\nuploadFile(\n  state => ({\n    siteId: state.siteId,\n    folderId: state.folderId,\n    fileName: `Report.xlsx`,\n  }),\n  state => state.buffer\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 319,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mssql","adaptor":"@openfn/language-mssql","version":"5.0.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#describetable\\\">describeTable(tableName, options)</a></dt>\\n<dt>\\n    <a href=\\\"#findvalue\\\">findValue(filter)</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#insertmany\\\">insertMany(table, records, options)</a></dt>\\n<dt>\\n    <a href=\\\"#inserttable\\\">insertTable(tableName, columns, options)</a></dt>\\n<dt>\\n    <a href=\\\"#modifytable\\\">modifyTable(tableName, columns, options)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(params)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, uuid, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertif\\\">upsertIf(logical, table, uuid, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, uuid, records, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### describeTable\\n\\n<p><code>describeTable(tableName, options) ⇒ Operation</code></p>\\n\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ndescribeTable('clinic_visits')\\n```\\n\\n* * *\\n\\n### findValue\\n\\n<p><code>findValue(filter) ⇒ Operation</code></p>\\n\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**\\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\\n   operator: { first_name: 'like', last_name: '='}\\n })\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(table, record, options) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsert(table, record, {setNull: [\\\"'undefined'\\\", \\\"''\\\"], logValues: false})\\n```\\n\\n* * *\\n\\n### insertMany\\n\\n<p><code>insertMany(table, records, options) ⇒ Operation</code></p>\\n\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsertMany(table, records, { setNull: false, writeSql: true, logValues: false })\\n```\\n\\n* * *\\n\\n### insertTable\\n\\n<p><code>insertTable(tableName, columns, options) ⇒ Operation</code></p>\\n\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### modifyTable\\n\\n<p><code>modifyTable(tableName, columns, options) ⇒ Operation</code></p>\\n\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(params) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Payload data for the message |\\n\\n**Example**\\n```js\\nsql({ query, options })\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, uuid, record, options) ⇒ Operation</code></p>\\n\\nInsert or update a record using SQL MERGE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsert(table, uuid, record, { setNull: \\\"'undefined'\\\", logValues: false})\\nupsert(table, [uuid1, uuid2], record, { setNull: \\\"'undefined'\\\", logValues: false})\\n```\\n\\n* * *\\n\\n### upsertIf\\n\\n<p><code>upsertIf(logical, table, uuid, record, options) ⇒ Operation</code></p>\\n\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'uuid', // a DB column with a unique constraint\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true, logValues: false }\\n)\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, uuid, records, options) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsertMany(\\n 'users', 'email', records, { logValues: false }\\n)\\nupsertMany(\\n 'users', ['email', 'phone'], records, { logValues: false }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MSSQL\\n\\nLanguage Pack for connecting to Azure SQL Server via OpenFn.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mssql-configuration-schema/)\\ndefinition.\\n\\n### Sample expression\\n\\n## sql query\\n\\n```js\\nsql({\\n  query: `\\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\\n    WHERE TABLE_TYPE = 'BASE TABLE'\\n    AND TABLE_CATALOG='my-demo'\\n  `,\\n});\\n\\nsql({\\n  query: `SELECT * FROM Household`,\\n  options: {\\n    writeSql: true, // Keep to true to log query (otherwise make it false).\\n    execute: true, // keep to false to not alter DB\\n  },\\n});\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nfn(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert one single record\\n\\n```js\\ninsert(\\n  'SomeDB.dbo.SupplierTest',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Nunya Bihz-Nash',\\n  },\\n  {\\n    // The optional `options` argument allows for global string replacement with\\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\\n    // to NULL. It can be a single string or an array of strings.\\n    // It DEFAULTS to \\\"'undefined'\\\", and can be turned off w/ `false`.\\n    setNull: \\\"'undefined'\\\",\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nThis function insert or update depending on the existence of a record in the\\ndatabase.\\n\\n```js\\nupsert(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Now I can tell!',\\n  },\\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\\n  { setNull: false, logValues: true }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users',\\n  'user_id',\\n  {\\n    name: 'Elodie',\\n    id: 7,\\n  },\\n  // Replace any occurence of '' and 'undefined' to NULL\\n  {\\n    setNull: [\\\"''\\\", \\\"'undefined'\\\"],\\n    writeSql: true,\\n    execute: false,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert Many records\\n\\nThis function allows the insert of a set of records inside a table all at once.\\nPass `logQuery` option to `true` to display the query.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\ninsertMany(\\n  'SomeDB.dbo.Supplier',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update Many records\\n\\nThis function inserts or updates many records all at once depending on their\\nexistence in the database.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\nIn case we need to check on multiple columns before upserting, we can have an\\narray of `uuids`.\\n\\n```js\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  ['SupplierNumber', 'SupplierCode'],\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n        SupplierCode: s.code,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\n## Describe a table from mssql\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: false, execute: true });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mssql\\n\\n## 5.0.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 5.0.6\\n\\n### Patch Changes\\n\\n- d8d84d3: improve logging error message\\n\\n## 5.0.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 5.0.4\\n\\n### Patch Changes\\n\\n- d3ac969: use reject instead of throw\\n\\n## 5.0.3\\n\\n### Patch Changes\\n\\n- 6d38a48: Removed process.exit(1) to prevent workflow crashes on errors\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 5.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 4.3.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 4.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 4.3.2\\n\\n### Patch Changes\\n\\n- bb5436c: Add title and description for `port` configuration\\n\\n## 4.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.2.4\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.2.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.2.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- 2964fc8d: - Add `cursor()` function\\n  - Update `configuration-schema.json`\\n\\n## 4.1.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.1.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.1.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.1.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.1.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.1.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.1.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.1.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.0.8\\n\\n### Patch Changes\\n\\n- 57742d1: remove request dependency\\n\\n## 4.0.7\\n\\n### Patch Changes\\n\\n- 04ed74f: update dependencies\\n\\n## 4.0.6\\n\\n### Patch Changes\\n\\n- 43c3669: patch versions\\n\\n## 4.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 4.0.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 4.0.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 3878624: Modify composeNextState function, to flattern all rows into an array\\n  of rows with their corresponding column names\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- c9b7ed7: Add language-mssql in monorepo\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"],"configuration-schema":{"$schema":"https://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","description":"The database instance server URL or IP address","type":"string","minLength":1,"examples":["something.database.windows.net","192.168.12.10"]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"userName":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Password"]},"port":{"title":"Port","description":"Database instance port","type":"integer","default":1433,"examples":[1432]},"encrypt":{"type":"boolean","default":true,"examples":[false]},"rowCollectionOnRequestCompletion":{"type":"boolean","default":true,"examples":[false]},"trustServerCertificate":{"type":"boolean","default":true,"examples":[false]}},"type":"object","additionalProperties":true,"required":["server","database","userName","password"]}},
[
  {
    "id": "describeTable",
    "longname": "describeTable",
    "name": "describeTable",
    "kind": "function",
    "scope": "global",
    "description": "List the columns of a table in a database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to describe",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "describeTable('clinic_visits')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 650,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 12,
    "newscope": true,
    "level": 0
  },
  {
    "id": "findValue",
    "longname": "findValue",
    "name": "findValue",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a uuid key given a condition",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A filter object with the lookup table, a uuid and the condition",
        "name": "filter"
      }
    ],
    "examples": [
      "findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\n   operator: { first_name: 'like', last_name: '='}\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 257,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insert(table, record, {setNull: [\"'undefined'\", \"''\"], logValues: false})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 317,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "insertMany",
    "longname": "insertMany",
    "name": "insertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert many records, using the keys of the first as the column template",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A function that takes state and returns an array of records",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insertMany(table, records, { setNull: false, writeSql: true, logValues: false })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 362,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "insertTable",
    "longname": "insertTable",
    "name": "insertTable",
    "kind": "function",
    "scope": "global",
    "description": "Create a table in database when given an array of columns and a table_name.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to create",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 688,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "modifyTable",
    "longname": "modifyTable",
    "name": "modifyTable",
    "kind": "function",
    "scope": "global",
    "description": "Alter an existing table in the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to alter",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 747,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "params"
      }
    ],
    "examples": [
      "sql({ query, options })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record using SQL MERGE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsert(table, uuid, record, { setNull: \"'undefined'\", logValues: false})\nupsert(table, [uuid1, uuid2], record, { setNull: \"'undefined'\", logValues: false})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 412,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "upsertIf",
    "longname": "upsertIf",
    "name": "upsertIf",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record based on a logical condition using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "a data to check existing value for.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'uuid', // a DB column with a unique constraint\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true, logValues: false }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 491,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON CONFLICT UPDATE and excluded",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A function that takes state and returns an array of records",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsertMany(\n 'users', 'email', records, { logValues: false }\n)\nupsertMany(\n 'users', ['email', 'phone'], records, { logValues: false }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 574,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mysql","adaptor":"@openfn/language-mysql","version":"2.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#query\\\">query(options)</a></dt>\\n<dt>\\n    <a href=\\\"#sqlstring\\\">sqlString(queryString)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### insert\\n\\n<p><code>insert(table, fields) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example**\\n```js\\nexecute(\\n  insert('table', fields(\\n     field('name', dataValue('name'))\\n  ))\\n)(state)\\n```\\n\\n* * *\\n\\n### query\\n\\n<p><code>query(options) ⇒ Operation</code></p>\\n\\nExecute a SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Payload data for the message |\\n\\n**Example**\\n```js\\nexecute(\\n  query({ sql: 'select * from users;' })\\n)(state)\\n```\\n\\n* * *\\n\\n### sqlString\\n\\n<p><code>sqlString(queryString) ⇒ Operation</code></p>\\n\\nExecute a SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| queryString | <code>String</code> | A query string (or function which takes state and returns a string) |\\n\\n**Example**\\n```js\\nexecute(\\n  sqlString(state => \\\"select * from items;\\\")\\n)(state)\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, fields) ⇒ Operation</code></p>\\n\\nInsert or Update a record if matched\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example**\\n```js\\nexecute(\\n  upsert('table', fields(\\n     field('name', dataValue('name'))\\n  ))\\n)(state)\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, data) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON DUPLICATE KEY\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n\\n**Example**\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MySQL\\n\\nLanguage Pack for building expressions and operations to run MySQL queries.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/mysql-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mysql-configuration-schema/)\\ndefinition.\\n\\n## Execute a query\\n\\nExecute an sql query with the node mysql package.\\n\\n```js\\nquery({\\n  sql: state => {\\n    return `select * from ${state.data.table} where id = ?;`;\\n  },\\n  timeout: 4000,\\n  values: ['007'],\\n});\\n```\\n\\n## Execute a sql query\\n\\nThis function takes either a `string` or a `function` that takes states and\\nreturns a string.\\n\\n```js\\nsqlString(state => {\\n  return (\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    state.data.version +\\n    `', ` +\\n    dataValue('form.Choix_tache')(state) +\\n    `)`\\n  );\\n});\\n```\\n\\n## Insert a single record\\n\\nThis function is used to insert a single record in a MySQL database.\\n\\n```js\\ninsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Insert or update a single record\\n\\nThis function is used to insert a single record in a MySQL database or update it\\nif there is a match.\\n\\n```js\\nupsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Upsert many records\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n);\\n```\\n\\nor\\n\\n```js\\nupsertMany('users', state =>\\n  state.data.users.map(user => {\\n    name: user['name'],\\n    email: user['email']\\n  })\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mysql\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.5.2\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.4.15\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.4.14\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.4.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.4.12\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.4.11\\n\\n### Patch Changes\\n\\n- e9d0dac9: - Change `host` format from `uri` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `user` and `password`\\n\\n## 1.4.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.4.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.4.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.4.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.4.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.4.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.3.4\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 9d674c5: Migrate MySQL\\n\"","functions":["insert","query","sqlString","upsert","upsertMany"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The database instance host URL","format":"string","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":3306,"description":"Database instance port","minLength":1,"examples":[3306]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"Username","type":"string","description":"The username to log in the database","minLength":1,"examples":["admin-demo"]},"password":{"title":"Password","type":"string","description":"The password to log in the database","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","database","user","password"]}},
[
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A fields object",
        "name": "fields"
      }
    ],
    "examples": [
      "execute(\n  insert('table', fields(\n     field('name', dataValue('name'))\n  ))\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 77,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Execute a SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "options"
      }
    ],
    "examples": [
      "execute(\n  query({ sql: 'select * from users;' })\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 269,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "sqlString",
    "longname": "sqlString",
    "name": "sqlString",
    "kind": "function",
    "scope": "global",
    "description": "Execute a SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "A query string (or function which takes state and returns a string)",
        "name": "queryString"
      }
    ],
    "examples": [
      "execute(\n  sqlString(state => \"select * from items;\")\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 311,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or Update a record if matched",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A fields object",
        "name": "fields"
      }
    ],
    "examples": [
      "execute(\n  upsert('table', fields(\n     field('name', dataValue('name'))\n  ))\n)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 138,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON DUPLICATE KEY",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of objects or a function that returns an array",
        "name": "data"
      }
    ],
    "examples": [
      "upsertMany(\n  'users', // the DB table\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 217,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"nexmo","adaptor":"@openfn/language-nexmo","version":"0.5.9","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSMS(from, toNumber, message)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### sendSMS\\n\\n<p><code>sendSMS(from, toNumber, message) ⇒ Operation</code></p>\\n\\nSends an SMS message to a specific phone number\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| from | <code>String</code> | Name or number the message should be sent from. |\\n| toNumber | <code>String</code> | Destination phone number. |\\n| message | <code>String</code> | Text message |\\n\\n**Example**\\n```js\\nsendSMS(\\\"OpenFn\\\", \\\"phoneNumber\\\", \\\"Hello World!\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Nexmo\\n\\nLanguage Pack for building expressions and operations to interact with the Nexmo\\nAPI.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/nexmo-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression\\n\\n```js\\nsendSMS('OpenFn', '0123456789', 'HelloWorld!');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-nexmo\\n\\n## 0.5.9\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.7\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.9\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.4.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.4.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 8591b67: - update nexmo to `v2.9.1``\\n  - expandReferences on sendSMS\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f0f2495: migrate nexmo\\n\"","functions":["sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiKey":{"title":"API Key","type":"string","description":"Your Nexmo API Key","minLength":1,"examples":["mYaP1K3y"]},"apiSecret":{"title":"API Secret","type":"string","description":"Your Nexmo API Secret key","writeOnly":true,"minLength":1,"examples":["supersecret"]}},"type":"object","additionalProperties":true,"required":["apiKey","apiSecret"]}},
[
  {
    "id": "sendSMS",
    "longname": "sendSMS",
    "name": "sendSMS",
    "kind": "function",
    "scope": "global",
    "description": "Sends an SMS message to a specific phone number",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Name or number the message should be sent from.",
        "name": "from"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Destination phone number.",
        "name": "toNumber"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Text message",
        "name": "message"
      }
    ],
    "examples": [
      "sendSMS(\"OpenFn\", \"phoneNumber\", \"Hello World!\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 45,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/nexmo/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"ocl","adaptor":"@openfn/language-ocl","version":"1.2.8","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getmappings\\\">getMappings(ownerId, repositoryId, [options], callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, query, callback) ⇒ Operation</code></p>\\n\\nGet a resource in OCL\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nget(\\n  \\\"orgs/MSFOCG/collections/lime-demo/HEAD/mappings\\\",\\n  {\\n    page: 1,\\n    exact_match: \\\"off\\\",\\n    limit: 200,\\n    verbose: false,\\n    sortDesc: \\\"_score\\\",\\n  },\\n  (state) => {\\n    // Add state oclMappings\\n    const oclMappings = state.data;\\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\\n  }\\n);\\n```\\n\\n* * *\\n\\n### getMappings\\n\\n<p><code>getMappings(ownerId, repositoryId, [options], callback) ⇒ Operation</code></p>\\n\\nGet a source repository in OCL\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| ownerId | <code>string</code> | An OCL user or organization |\\n| repositoryId | <code>string</code> | An OCL collection id or source id |\\n| [options] | <code>Object</code> | Optional. `options`  which can be passed to  See more [on OCL swagger docs](https://api.openconceptlab.org/swagger/) |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetMappings(\\n  \\\"MSFOCG\\\",\\n  \\\"lime-demo\\\",\\n  { page: 1, exact_match: \\\"off\\\", verbose: false },\\n  (state) => {\\n    // Add state oclMappings\\n    const oclMappings = state.data;\\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\\n  }\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language OCL\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OCL API](http://ocl.github.io/ocl-docs/master/en/developer/html/ocl_developer_manual.html).\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/ocl-configuration-schema/)\\ndefinition.\\n\\n## Mapping source concepts to destination API\\n\\n#### Recieve form data from source application and convert data element keys to destination application.\\n\\n```js\\nmap(  \\\"data\\\": {\\n    \\\"a\\\": 1,\\n    \\\"b\\\": 2},\\n  {users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" }\\n  );\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-ocl\\n\\n## 1.2.8\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.2.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.2.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.2.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.1.13\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.1.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.1.11\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.1.10\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.1.9\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.1.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.1.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.1.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.1.5\\n\\n### Patch Changes\\n\\n- 67a09fb: Add `fn` in OCL adaptor\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 3f3c0c5: update tests\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 29e335d: remove body in get request\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 63232eb: Add `get()` and `getMappings()` function\\n\\n## 0.2.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.2.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 5a06d7f: Migrate OCL, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["get","getMappings"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The OCL API URL","default":"https://api.openconceptlab.org/","format":"uri","minLength":1,"examples":["https://api.openconceptlab.org/"]},"username":{"title":"Username","type":"string","description":"The username to log in to OCL","minLength":1,"examples":["usernmame"]},"password":{"title":"Password","type":"string","description":"The password to log in to OCL","writeOnly":true,"minLength":1,"examples":["supersecretpassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","password"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get a resource in OCL",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A query object that will limit what resources are retrieved when converted into request params.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "get(\n  \"orgs/MSFOCG/collections/lime-demo/HEAD/mappings\",\n  {\n    page: 1,\n    exact_match: \"off\",\n    limit: 200,\n    verbose: false,\n    sortDesc: \"_score\",\n  },\n  (state) => {\n    // Add state oclMappings\n    const oclMappings = state.data;\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 108,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ocl/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getMappings",
    "longname": "getMappings",
    "name": "getMappings",
    "kind": "function",
    "scope": "global",
    "description": "Get a source repository in OCL",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "An OCL user or organization",
        "name": "ownerId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "An OCL collection id or source id",
        "name": "repositoryId"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. `options`  which can be passed to  See more {@link https://api.openconceptlab.org/swagger/ on OCL swagger docs}",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getMappings(\n  \"MSFOCG\",\n  \"lime-demo\",\n  { page: 1, exact_match: \"off\", verbose: false },\n  (state) => {\n    // Add state oclMappings\n    const oclMappings = state.data;\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ocl/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"odk","adaptor":"@openfn/language-odk","version":"3.0.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(projectId)</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmissions\\\">getSubmissions(projectId, xmlFormId, query)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get a list of available projects\\n```js\\nget(\\\"v1/projects\\\");\\n```\\n**Example:** Get projects with query parameters\\n```js\\nget(\\\"v1/projects\\\", {\\n query: { datasets: true }\\n});\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(projectId) ⇒ Operation</code></p>\\n\\nFetch all forms for a project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectId | <code>number</code> | Id of the project |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | array of form data objects |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Fetch all forms for project with id 22\\n```js\\ngetForms(22);\\n```\\n\\n* * *\\n\\n### getSubmissions\\n\\n<p><code>getSubmissions(projectId, xmlFormId, query) ⇒ Operation</code></p>\\n\\nFetch all submissions to a given form.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectId | <code>number</code> | Id of the project the form belongs to |\\n| xmlFormId | <code>string</code> | Id of the form to fetch submissions for |\\n| query | <code>string</code> | Query parameters to append to the request, see [https://docs.getodk.org/central-api-odata-endpoints/#data-document](https://docs.getodk.org/central-api-odata-endpoints/#data-document) |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | array of form submission objects |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get all submissions to a form called 'patient-follow-up'\\n```js\\ngetSubmissions(22, 'patient-follow-up');\\n```\\n**Example:** Filter submissions since a given date\\n```js\\ngetSubmissions(22, 'patient-follow-up', { $filter: \\\"$root/Submissions/__system/submissionDate gt 2020-01-31T23:59:59.999Z\\\" });\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options) ⇒ Operation</code></p>\\n\\nMake a POST request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create a new project\\n```js\\npost('v1/projects', { name: 'Project Name' });\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Make a POST request to create a new project\\n```js\\nrequest(\\\"POST\\\", 'v1/projects', { name: 'Project Name' });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-odk <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the odk API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/odk-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/odk-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('v1/projects', { name: 'Project Name' });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-odk\\n\\n## 3.0.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 0b81f06: - `getSubmissions()` now returns submission data (not metadata)\\n  - `getSubmissions()` arguments can be references (functions)\\n  - `getSubmissions()` supports query parameters\\n  - HTTP helper APIs have been slightly streamlined and fixed\\n  - Documentation overhaul\\n  - All callback functions have been removed (use an fn() block instead)\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 9234f83: - configuration-schema: rename `username` to `email`\\n  - Improve logging when authentication fails\\n  - Improve error reporting when requests fail\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.0\\n\\nInitial release for odk adaptor with `get`, `post`, `getForms` and\\n`getSubmissions`\\n\"","functions":["get","getForms","post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"ODK base URL","format":"uri","minLength":1,"examples":["https://sandbox.getodk.cloud/"]},"email":{"title":"Email","type":"string","description":"Email","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your ODK access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"type":"object","additionalProperties":true,"required":["password","email","baseUrl"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get a list of available projects</caption>\nget(\"v1/projects\");",
      "<caption>Get projects with query parameters</caption>\nget(\"v1/projects\", {\n query: { datasets: true }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all forms for a project.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Id of the project",
        "name": "projectId"
      }
    ],
    "examples": [
      "<caption>Fetch all forms for project with id 22</caption>\ngetForms(22);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 78,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      },
      {
        "name": "data",
        "description": "array of form data objects",
        "type": null
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "getSubmissions",
    "longname": "getSubmissions",
    "name": "getSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all submissions to a given form.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Id of the project the form belongs to",
        "name": "projectId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the form to fetch submissions for",
        "name": "xmlFormId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Query parameters to append to the request, see {@link https://docs.getodk.org/central-api-odata-endpoints/#data-document}",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Get all submissions to a form called 'patient-follow-up'</caption>\ngetSubmissions(22, 'patient-follow-up');",
      "<caption>Filter submissions since a given date</caption>\ngetSubmissions(22, 'patient-follow-up', { $filter: \"$root/Submissions/__system/submissionDate gt 2020-01-31T23:59:59.999Z\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 41,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      },
      {
        "name": "data",
        "description": "array of form submission objects",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "ODKHttpState",
    "longname": "ODKHttpState",
    "name": "ODKHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the ODK HTTP server (with the body removed)",
        "name": "response"
      },
      {
        "description": "an array of all the previous data values",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Create a new project</caption>\npost('v1/projects', { name: 'Project Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 121,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create a new project</caption>\nrequest(\"POST\", 'v1/projects', { name: 'Project Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 138,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 16,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openfn","adaptor":"@openfn/language-openfn","version":"2.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#request\\\">request(options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### request\\n\\n<p><code>request(options, callback) ⇒ Operation</code></p>\\n\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nrequest({method: 'get', path: '/jobs/});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language OpenFn\\n\\nAdaptor for building expressions and operations to interact with the OpenFn v1\\nAPI.\\n\\n## Documentation\\n\\n## request\\n\\n```js\\nrequest({\\n  method: 'get',\\n  path: 'jobs',\\n  params: {\\n    project_id: 490,\\n  },\\n});\\nrequest(\\n  {\\n    method: 'post',\\n    path: 'jobs',\\n    data: {\\n      trigger_id: 1,\\n      expression: 'steps()',\\n    },\\n  },\\n  state => {\\n    console.log('cool callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openfn-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openfn\\n\\n## 2.0.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.4.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.3.14\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.3.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.3.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.3.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.3.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.3.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.3.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.3.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.3.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.3.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.2.6\\n\\n### Patch Changes\\n\\n- 779596f: Use native fetch (undici) in template and add icons in openfn\\n\\n## 1.2.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.2.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- be9d3c6: Migrate OpenFn\\n\"","functions":["request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","description":"The OpenFn host url","format":"uri","default":"https://www.openfn.org","minLength":1,"examples":["https://www.openfn.org"]},"projectId":{"title":"Project ID","type":"string","description":"Your OpenFn project ID","minLength":1,"examples":["some-id"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenFn","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenFn","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","username","password"]}},
[
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body, Query, Headers and Authentication parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "request({method: 'get', path: '/jobs/});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openfn/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openhim","adaptor":"@openfn/language-openhim","version":"0.3.5","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language OpenHIM\\n\\nLanguage Pack for building expressions and operations for working with the\\nopenhim API.\\n\\n## [HL7 FHIR Standard](https://www.hl7.org/fhir/patient-example.json.html)\\n\\n```json\\n{\\n  \\\"resourceType\\\": \\\"Patient\\\",\\n  \\\"id\\\": \\\"example\\\",\\n  \\\"text\\\": {\\n    \\\"status\\\": \\\"generated\\\",\\n    \\\"div\\\": \\\"<div>\\\\n      \\\\n      <table>\\\\n        \\\\n        <tbody>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Name</td>\\\\n            \\\\n            <td>Peter James \\\\n              <b>Chalmers</b> (&quot;Jim&quot;)\\\\n            </td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Address</td>\\\\n            \\\\n            <td>534 Erewhon, Pleasantville, Vic, 3999</td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Contacts</td>\\\\n            \\\\n            <td>Home: unknown. Work: (03) 5555 6473</td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Id</td>\\\\n            \\\\n            <td>MRN: 12345 (Acme Healthcare)</td>\\\\n          \\\\n          </tr>\\\\n        \\\\n        </tbody>\\\\n      \\\\n      </table>    \\\\n    \\\\n    </div>\\\"\\n  },\\n  \\\"identifier\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   MRN assigned by ACME healthcare on 6-May 2001   \\\"],\\n      \\\"use\\\": \\\"usual\\\",\\n      \\\"type\\\": {\\n        \\\"coding\\\": [\\n          {\\n            \\\"system\\\": \\\"http://hl7.org/fhir/v2/0203\\\",\\n            \\\"code\\\": \\\"MR\\\"\\n          }\\n        ]\\n      },\\n      \\\"system\\\": \\\"urn:oid:1.2.36.146.595.217.0.1\\\",\\n      \\\"value\\\": \\\"12345\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"2001-05-06\\\"\\n      },\\n      \\\"assigner\\\": {\\n        \\\"display\\\": \\\"Acme Healthcare\\\"\\n      }\\n    }\\n  ],\\n  \\\"active\\\": true,\\n  \\\"name\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   Peter James Chalmers, but called \\\\\\\"Jim\\\\\\\"   \\\"],\\n      \\\"use\\\": \\\"official\\\",\\n      \\\"family\\\": [\\\"Chalmers\\\"],\\n      \\\"given\\\": [\\\"Peter\\\", \\\"James\\\"]\\n    },\\n    {\\n      \\\"use\\\": \\\"usual\\\",\\n      \\\"given\\\": [\\\"Jim\\\"]\\n    }\\n  ],\\n  \\\"telecom\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   home communication details aren't known   \\\"],\\n      \\\"use\\\": \\\"home\\\"\\n    },\\n    {\\n      \\\"system\\\": \\\"phone\\\",\\n      \\\"value\\\": \\\"(03) 5555 6473\\\",\\n      \\\"use\\\": \\\"work\\\"\\n    }\\n  ],\\n  \\\"gender\\\": \\\"male\\\",\\n  \\\"_gender\\\": {\\n    \\\"fhir_comments\\\": [\\\"   use FHIR code system for male / female   \\\"]\\n  },\\n  \\\"birthDate\\\": \\\"1974-12-25\\\",\\n  \\\"_birthDate\\\": {\\n    \\\"extension\\\": [\\n      {\\n        \\\"url\\\": \\\"http://hl7.org/fhir/StructureDefinition/patient-birthTime\\\",\\n        \\\"valueDateTime\\\": \\\"1974-12-25T14:35:45-05:00\\\"\\n      }\\n    ]\\n  },\\n  \\\"deceasedBoolean\\\": false,\\n  \\\"address\\\": [\\n    {\\n      \\\"use\\\": \\\"home\\\",\\n      \\\"type\\\": \\\"both\\\",\\n      \\\"line\\\": [\\\"534 Erewhon St\\\"],\\n      \\\"city\\\": \\\"PleasantVille\\\",\\n      \\\"district\\\": \\\"Rainbow\\\",\\n      \\\"state\\\": \\\"Vic\\\",\\n      \\\"postalCode\\\": \\\"3999\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"1974-12-25\\\"\\n      }\\n    }\\n  ],\\n  \\\"contact\\\": [\\n    {\\n      \\\"relationship\\\": [\\n        {\\n          \\\"coding\\\": [\\n            {\\n              \\\"system\\\": \\\"http://hl7.org/fhir/patient-contact-relationship\\\",\\n              \\\"code\\\": \\\"partner\\\"\\n            }\\n          ]\\n        }\\n      ],\\n      \\\"name\\\": {\\n        \\\"family\\\": [\\\"du\\\", \\\"MarchÃ©\\\"],\\n        \\\"_family\\\": [\\n          {\\n            \\\"extension\\\": [\\n              {\\n                \\\"fhir_comments\\\": [\\n                  \\\"   the \\\\\\\"du\\\\\\\" part is a family name prefix (VV in iso 21090)   \\\"\\n                ],\\n                \\\"url\\\": \\\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\\\",\\n                \\\"valueCode\\\": \\\"VV\\\"\\n              }\\n            ]\\n          },\\n          null\\n        ],\\n        \\\"given\\\": [\\\"BÃ©nÃ©dicte\\\"]\\n      },\\n      \\\"telecom\\\": [\\n        {\\n          \\\"system\\\": \\\"phone\\\",\\n          \\\"value\\\": \\\"+33 (237) 998327\\\"\\n        }\\n      ],\\n      \\\"gender\\\": \\\"female\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"2012\\\",\\n        \\\"_start\\\": {\\n          \\\"fhir_comments\\\": [\\\"   The contact relationship started in 2012   \\\"]\\n        }\\n      }\\n    }\\n  ],\\n  \\\"managingOrganization\\\": {\\n    \\\"reference\\\": \\\"Organization/1\\\"\\n  }\\n}\\n```\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openhim-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openhim\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 1fd9b3b: Migrate OpenHIM\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n- e81561f: Updated ast and package.json\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"The OpenHIM API url","format":"uri","minLength":1,"examples":["http://openhim.com/api"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenHIM","minLength":1,"examples":["admin@openhim.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenHIM","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["apiUrl"]}},
[
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openimis","adaptor":"@openfn/language-openimis","version":"2.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getfhir\\\">getFHIR(path, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getFHIR\\n\\n<p><code>getFHIR(path, params, callback) ⇒ Operation</code></p>\\n\\nGet FHIR resources from OpenIMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetFHIR(\\\"Patient\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-template\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the \\\\_\\\\_\\\\_\\\\_\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/template-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/template-configuration-schema/)\\ndefinition.\\n\\n#### sample expression using operation\\n\\n```js\\npost({\\n  \\\"url\\\": \\\"api/v1/forms/data/wide/json/formId\\\",\\n  \\\"body\\\": {\\\"a\\\":1}\\n  \\\"headers\\\": {}\\n})\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openimis\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 6c588212: Fix configuration-schema and add baseUrl in required\\n\\n## 1.0.0\\n\\nInitial release.\\n\\nIncludes a `getFHIR()` function and authorisation.\\n\"","functions":["getFHIR"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://demo.openimis.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","username","password"]}},
[
  {
    "id": "getFHIR",
    "longname": "getFHIR",
    "name": "getFHIR",
    "kind": "function",
    "scope": "global",
    "description": "Get FHIR resources from OpenIMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getFHIR(\"Patient\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 89,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openimis/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openlmis","adaptor":"@openfn/language-openlmis","version":"1.0.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, body, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options, [callback]) ⇒ Operation</code></p>\\n\\nSend a GET request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all supplyLines\\n```js\\nget(\\\"/supplyLines\\\");\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, [callback]) ⇒ Operation</code></p>\\n\\nSend a POST request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Creates new program\\n```js\\npost(\\\"/programs\\\", { name: \\\"Bukayo\\\", code: \\\"abc\\\" });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, body, [callback]) ⇒ Operation</code></p>\\n\\nSend a PUT request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the PUT body |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update existing program\\n```js\\nput(\\\"/programs/123\\\", { name: \\\"DigTalent\\\", code: \\\"123\\\" });\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options, [callback]) ⇒ Operation</code></p>\\n\\nSend a HTTP request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"POST\\\", \\\"/programs\\\", { name: \\\"WSH\\\", code: \\\"123\\\" });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> | body data to append to the request. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-openlmis <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[openLMIS](https://github.com/OpenLMISf) API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/openlmis-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openlmis-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-openlmis\\n\\n## 1.0.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- 940996b: Use common helper code to handle invalid absolute URLs\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.0.0\\n\\nAdd generic helpers. `request()`, `post()`, `get()` and `put()`\\n\"","functions":["get","post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (https://test.openlmis.org)","format":"uri","minLength":1,"examples":["https://test.openlmis.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["administrator"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your OpenLMIS API access token","writeOnly":true,"minLength":1,"examples":["4739f6c9-3b81-4176-98a1-bf001c8416ea"]},"clientId":{"title":"Client ID","type":"string","description":"Your user based client id","writeOnly":true,"minLength":1,"default":"user-client"},"clientSecret":{"title":"Client Secret Token","type":"string","description":"Your user based client secret","writeOnly":true,"minLength":1,"default":"changeme"}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl","clientId","clientSecret"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Send a GET request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get all supplyLines</caption>\nget(\"/supplyLines\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "OpenLMISState",
    "longname": "OpenLMISState",
    "name": "OpenLMISState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Send a POST request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Creates new program</caption>\npost(\"/programs\", { name: \"Bukayo\", code: \"abc\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 65,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Send a PUT request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the PUT body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update existing program</caption>\nput(\"/programs/123\", { name: \"DigTalent\", code: \"123\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 81,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"POST\", \"/programs\", { name: \"WSH\", code: \"123\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 99,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openmrs","adaptor":"@openfn/language-openmrs","version":"4.1.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, data, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getencounter\\\">getEncounter(uuid, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getencounters\\\">getEncounters(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getpatient\\\">getPatient(uuid, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#searchpatient\\\">searchPatient(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#searchperson\\\">searchPerson(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(resourceType, path, data, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(resourceType, query, data, [callback])</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#fhir_get\\\">fhir.get(path, query, [callback])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resourceType, data, [callback]) ⇒ Operation</code></p>\\n\\nCreate a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `person`, `patient`, `encounter`, ... |\\n| data | <code>OpenMRSData</code> | Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Create a person\\n```js\\ncreate(\\\"person\\\", {\\n  names: [\\n    {\\n      givenName: \\\"Mohit\\\",\\n      familyName: \\\"Kumar\\\",\\n    },\\n  ],\\n  gender: \\\"M\\\",\\n  birthdate: \\\"1997-09-02\\\",\\n  addresses: [\\n    {\\n      address1: \\\"30, Vivekananda Layout, Munnekolal,Marathahalli\\\",\\n      cityVillage: \\\"Bengaluru\\\",\\n      country: \\\"India\\\",\\n      postalCode: \\\"560037\\\",\\n    },\\n  ],\\n});\\n```\\n**Example:** Create an encounter\\n```js\\ncreate(\\\"encounter\\\", {\\n  encounterDatetime: '2023-05-25T06:08:25.000+0000',\\n  patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\\n  encounterType: 'dd528487-82a5-4082-9c72-ed246bd49591',\\n  location: 'ba685651-ed3b-4e63-9b35-78893060758a',\\n  encounterProviders: [],\\n  visit: {\\n    patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\\n    visitType: '7b0f5697-27e3-40c4-8bae-f4049abfb4ed',\\n    startDatetime: '2023-05-25T06:08:25.000+0000',\\n    stopDatetime: '2023-05-25T06:09:25.000+0000',\\n  },\\n})\\n```\\n**Example:** Create a patient\\n```js\\ncreate(\\\"patient\\\", {\\n  identifiers: [\\n    {\\n      identifier: '4023287',\\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\\n      preferred: true,\\n    },\\n  ],\\n  person: {\\n    gender: 'M',\\n    age: 42,\\n    birthdate: '1970-01-01T00:00:00.000+0100',\\n    birthdateEstimated: false,\\n    names: [\\n      {\\n        givenName: 'Doe',\\n        familyName: 'John',\\n      },\\n    ],\\n  },\\n})\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, query, [callback]) ⇒ Operation</code></p>\\n\\nMake a get request to any OpenMRS endpoint\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | parameters for the request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nget(\\\"patient\\\", {\\n  q: \\\"Patient\\\",\\n  limit: 1,\\n});\\n```\\n\\n* * *\\n\\n### getEncounter\\n\\n<p><code>getEncounter(uuid, [callback]) ⇒ Operation</code></p>\\n\\nGets encounter matching a uuid\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| uuid | <code>object</code> | A uuid for the encounter |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\ngetEncounter(\\\"123\\\")\\n```\\n\\n* * *\\n\\n### getEncounters\\n\\n<p><code>getEncounters(query, [callback]) ⇒ Operation</code></p>\\n\\nGets encounters matching params\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Object for the patient |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\ngetEncounters({ patient: \\\"123\\\", fromdate: \\\"2023-05-18\\\" })\\n```\\n\\n* * *\\n\\n### getPatient\\n\\n<p><code>getPatient(uuid, [callback]) ⇒ Operation</code></p>\\n\\nGets patient matching a uuid\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| uuid | <code>string</code> | A uuid for the patient |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Get a patient by uuid\\n```js\\ngetPatient('681f8785-c9ca-4dc8-a091-7b869316ff93')\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, [callback]) ⇒ Operation</code></p>\\n\\nMake a post request to any OpenMRS endpoint\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which defines data that will be used to create a given instance of resource |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\npost(\\n  \\\"idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier\\\",\\n  {}\\n);\\n```\\n\\n* * *\\n\\n### searchPatient\\n\\n<p><code>searchPatient(query, [callback]) ⇒ Operation</code></p>\\n\\nFetch all non-retired patients that match any specified parameters\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Object with query for the patient. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nsearchPatient({ q: \\\"Sarah\\\"})\\n```\\n\\n* * *\\n\\n### searchPerson\\n\\n<p><code>searchPerson(query, [callback]) ⇒ Operation</code></p>\\n\\nFetch all non-retired persons that match any specified parameters\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | object with query for the person |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nsearchPerson({ q: \\\"Sarah\\\" })\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(resourceType, path, data, [callback]) ⇒ Operation</code></p>\\n\\nUpdate data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send `all required fields` or the `full body`\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `person`, `patient`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `e739808f-f166-42ae-aaf3-8b3e8fa13fda` or `e739808f-f166-42ae-aaf3-8b3e8fa13fda/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** a person\\n```js\\nupdate(\\\"person\\\", '3cad37ad-984d-4c65-a019-3eb120c9c373',{\\\"gender\\\":\\\"M\\\",\\\"birthdate\\\":\\\"1997-01-13\\\"})\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(resourceType, query, data, [callback]) ⇒ Operation</code></p>\\n\\nUpsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.\\n\\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntityInstances` |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** For an existing patient using upsert\\n```js\\nupsert('patient', { q: '10007JJ' }, { person: { age: 50 } });\\n```\\n**Example:** For non existing patient creating a patient record using upsert \\n```js\\nupsert(\\n  \\\"patient\\\",\\n  { q: \\\"1000EHE\\\" },\\n  {\\n    identifiers: [\\n      {\\n        identifier: \\\"1000EHE\\\",\\n        identifierType: \\\"05a29f94-c0ed-11e2-94be-8c13b969e334\\\",\\n        location: \\\"44c3efb0-2583-4c80-a79e-1f756a03c0a1\\\",\\n        preferred: true,\\n      },\\n    ],\\n    person: {\\n      gender: \\\"M\\\",\\n      age: 42,\\n    },\\n  }\\n);\\n```\\n\\n* * *\\n\\n\\n## fhir\\n\\nThese functions belong to the fhir namespace.\\n### fhir.get {#fhir_get}\\n\\n<p><code>get(path, query, [callback]) ⇒ Operation</code></p>\\n\\nMake a get request to any FHIR endpoint in OpenMRS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | [<code>FhirParameters</code>](#fhirparameters) | Request parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** Get encounters based on lastUpdated field\\n```js\\nfhir.get('Encounter', { count: 100, lastUpdated: 'ge2024-01-01T00:00:00Z' })\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### FhirParameters\\n\\nOpenMRS FHIR requests parameters options.\\nThis combines [ FHIR search parameters](https://fhir.openmrs.org/artifacts.html), [resource-specific parameters](https://www.hl7.org/fhir/R4/search.html), and pagination options.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| count | <code>string</code> | Number of results to return (_count in FHIR) |\\n| include | <code>string</code> | Resources to include in the response (_include in FHIR) |\\n| revinclude | <code>string</code> | Reverse includes to include in the response (_revinclude in FHIR) |\\n| summary | <code>string</code> | Summary mode for the response (_summary in FHIR) |\\n| total | <code>string</code> | Whether to include a total count of matching resources (_total in FHIR) |\\n| elements | <code>string</code> | List of elements to include in the response (_elements in FHIR) |\\n| contained | <code>string</code> | Whether to include contained resources (_contained in FHIR) |\\n| containedType | <code>string</code> | Type of contained resources (_containedType in FHIR) |\\n| id | <code>string</code> | Logical ID of the resource to filter on (_id in FHIR) |\\n| lastUpdated | <code>string</code> | Timestamp to filter resources last updated after this date (_lastUpdated in FHIR) |\\n| tag | <code>string</code> | Tag to filter resources by (_tag in FHIR) |\\n| profile | <code>string</code> | Profile URL to filter resources by (_profile in FHIR) |\\n| security | <code>string</code> | Security labels to filter resources by (_security in FHIR) |\\n| text | <code>string</code> | Text search on narrative content (_text in FHIR) |\\n| content | <code>string</code> | Full-text search on resource content (_content in FHIR) |\\n| list | <code>string</code> | Search resources included in a particular list (_list in FHIR) |\\n| has | <code>string</code> | Perform search based on reference chains (_has in FHIR) |\\n| getPagesOffset | <code>string</code> | Offset for pagination, used to skip a number of results (_getpagesoffset in OpenMRS) |\\n| getPages | <code>string</code> | Get specific pages of resources (_getpages in OpenMRS) |\\n| bundleType | <code>string</code> | Type of bundle to return (e.g., searchset, batch, history) (_bundleType in FHIR) |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language OpenMRS\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OpenMRS Rest API](https://rest.openmrs.org/?javascript#openmrs-rest-api)\\n\\n[OpenMRS Data Model Explorer](http://burkeware.com/openmrs-data-model/openmrs-data-model-1.11.html#)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openmrs-configuration-schema/)\\ndefinition.\\n\\n### Get a patient by some criteria\\n\\n```js\\n// getPatient({ uuid: '516af9aa-0402-4e11-ad79-e394fdec0c91' });\\n// getPatient({ uuid: dataValue('patientId')(state) });\\ngetPatient({\\n  uuid: state => state.data[0].uuid,\\n});\\n```\\n\\n#### Example of searching for patients based on their `EMR Id`\\n\\n```js\\ngetPatients(\\n  {\\n    identifier: state => state.data.emrId,\\n    v: 'full',\\n  },\\n  {\\n    exactlyOne: true,\\n  }\\n);\\n```\\n\\n### Create an Encounter\\n\\n```js\\ncreateEncounter({\\n  encounterDatetime: dataValue('visit_date'), //dynamically fill with source app data\\n  patient: dataValue('uuid'),\\n  encounterType: dataValue('visit_type'),\\n  location: dataValue('location.uuid'),\\n  encounterProviders: [\\n    {\\n      provider: dataValue('provider_name'),\\n      encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f', //hardcoded value\\n    },\\n  ],\\n});\\n```\\n\\n### Make a request to any OpenMRS endpoint\\n\\n```js\\nget('/ws/rest/v1/patient', { q: 'mohammed' }, state => {\\n  console.log(JSON.stringify(state, null, 2));\\n  return state;\\n});\\n```\\n\\n## Create new patient\\n\\n```js\\ncreatePatient(\\n  fields(\\n    field('gender', 'M'),\\n    field('names', function (state) {\\n      return [\\n        {\\n          patient_id: dataValue('form.patientId')(state),\\n          creator: dataValue('form.user')(state),\\n        },\\n      ];\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openmrs\\n\\n## 4.1.3\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 4.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 4.1.1\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 1227829: Add `fhir.get()` function\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- b1c48c7: improve upsert operation\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- Remove `createEncounter` and `createPatient` functions\\n- Add pagination support on request helper function\\n\\n### Minor Changes\\n\\n- c8dbd21: Add cursor and dateFns helper functions\\n\\n### Migration Guide\\n\\nThe `createEncounter` and `createPatient` functions have been removed from the\\nOpenMRS adaptor. Use the `create` function with the appropriate resource type.\\n\\nTo create a new encounter, you can use the following code:\\n\\n```js\\ncreate('encounter', $.encounter);\\n```\\n\\nTo create a new patient, you can use the following code:\\n\\n```js\\ncreate('patient', $.patient);\\n```\\n\\n## 3.1.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.1.2\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- cadff13b: - Remove superagent dependency.\\n  - Rebase on new common http request helper.\\n  - Remove login function as no longer needed.\\n  - Update log output\\n\\n## 2.0.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 2390129: - replace throw new Error with console.log\\n  - improve Log function\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- d124f67: - Add create, update and upsert function\\n  - Add callback support and improve examples for\\n    - get()\\n    - post()\\n    - getPatient()\\n    - searchPerson()\\n    - getEncounter()\\n    - searchPatient()\\n    - createPatient()\\n    - getEncounters()\\n    - createEncounter()\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 97cc7ce: - Fix checking for empty response\\n  - Style logs output\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- b6478c0: - Removed `request` in favour of `superagent`\\n  - Improve error handling\\n  - Moved `login` to execute function\\n  - Added\\n    - `createPatient`\\n    - `searchPatient`\\n    - `searchPerson`\\n    - `getEncounters`\\n    - `getEncounter`\\n    - `get`\\n    - `post`\\n\\n## 0.10.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.10.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.10.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.10.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.10.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.10.0\\n\\n### Minor Changes\\n\\n- 6786949: Migrate OpenMRS\\n\"","functions":["create","get","getEncounter","getEncounters","getPatient","post","searchPatient","searchPerson","update","upsert"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"instanceUrl":{"title":"Instance URL","type":"string","description":"The OpenMRS host url","format":"uri","minLength":1,"examples":["http://openmrs.com/instance/url"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenMRS","minLength":1,"examples":["admin@openmrs.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenMRS","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]},"fhirVersion":{"title":"FHIR Release Version","type":"string","placeholder":"R4","default":"R4","description":"FHIR Release Version","minLength":1,"examples":["R5","R4B","R4","R3","R2"]}},"type":"object","additionalProperties":true,"required":["instanceUrl"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of resource to create. E.g. `person`, `patient`, `encounter`, ...",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "OpenMRSData"
          ]
        },
        "description": "Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a person</caption>\ncreate(\"person\", {\n  names: [\n    {\n      givenName: \"Mohit\",\n      familyName: \"Kumar\",\n    },\n  ],\n  gender: \"M\",\n  birthdate: \"1997-09-02\",\n  addresses: [\n    {\n      address1: \"30, Vivekananda Layout, Munnekolal,Marathahalli\",\n      cityVillage: \"Bengaluru\",\n      country: \"India\",\n      postalCode: \"560037\",\n    },\n  ],\n});",
      "<caption>Create an encounter</caption>\ncreate(\"encounter\", {\n  encounterDatetime: '2023-05-25T06:08:25.000+0000',\n  patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n  encounterType: 'dd528487-82a5-4082-9c72-ed246bd49591',\n  location: 'ba685651-ed3b-4e63-9b35-78893060758a',\n  encounterProviders: [],\n  visit: {\n    patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n    visitType: '7b0f5697-27e3-40c4-8bae-f4049abfb4ed',\n    startDatetime: '2023-05-25T06:08:25.000+0000',\n    stopDatetime: '2023-05-25T06:09:25.000+0000',\n  },\n})",
      "<caption>Create a patient</caption>\ncreate(\"patient\", {\n  identifiers: [\n    {\n      identifier: '4023287',\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n      preferred: true,\n    },\n  ],\n  person: {\n    gender: 'M',\n    age: 42,\n    birthdate: '1970-01-01T00:00:00.000+0100',\n    birthdateEstimated: false,\n    names: [\n      {\n        givenName: 'Doe',\n        familyName: 'John',\n      },\n    ],\n  },\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 303,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "FhirParameters",
    "longname": "FhirParameters",
    "name": "FhirParameters",
    "kind": "typedef",
    "scope": "global",
    "description": "OpenMRS FHIR requests parameters options.\nThis combines {@link https://fhir.openmrs.org/artifacts.html | FHIR search parameters}, {@link https://www.hl7.org/fhir/R4/search.html resource-specific parameters}, and pagination options.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Number of results to return (_count in FHIR)",
        "name": "count"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Resources to include in the response (_include in FHIR)",
        "name": "include"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Reverse includes to include in the response (_revinclude in FHIR)",
        "name": "revinclude"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Summary mode for the response (_summary in FHIR)",
        "name": "summary"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Whether to include a total count of matching resources (_total in FHIR)",
        "name": "total"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "List of elements to include in the response (_elements in FHIR)",
        "name": "elements"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Whether to include contained resources (_contained in FHIR)",
        "name": "contained"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of contained resources (_containedType in FHIR)",
        "name": "containedType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Logical ID of the resource to filter on (_id in FHIR)",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Timestamp to filter resources last updated after this date (_lastUpdated in FHIR)",
        "name": "lastUpdated"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Tag to filter resources by (_tag in FHIR)",
        "name": "tag"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Profile URL to filter resources by (_profile in FHIR)",
        "name": "profile"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Security labels to filter resources by (_security in FHIR)",
        "name": "security"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Text search on narrative content (_text in FHIR)",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Full-text search on resource content (_content in FHIR)",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Search resources included in a particular list (_list in FHIR)",
        "name": "list"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Perform search based on reference chains (_has in FHIR)",
        "name": "has"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Offset for pagination, used to skip a number of results (_getpagesoffset in OpenMRS)",
        "name": "getPagesOffset"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Get specific pages of resources (_getpages in OpenMRS)",
        "name": "getPages"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of bundle to return (e.g., searchset, batch, history) (_bundleType in FHIR)",
        "name": "bundleType"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5,
      "filename": "fhir.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a get request to any OpenMRS endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "parameters for the request",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "get(\"patient\", {\n  q: \"Patient\",\n  limit: 1,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 69,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "fhir",
    "description": "Make a get request to any FHIR endpoint in OpenMRS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "FhirParameters"
          ]
        },
        "description": "Request parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get encounters based on lastUpdated field</caption>\nfhir.get('Encounter', { count: 100, lastUpdated: 'ge2024-01-01T00:00:00Z' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 43,
      "filename": "fhir.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 12,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getEncounter",
    "longname": "getEncounter",
    "name": "getEncounter",
    "kind": "function",
    "scope": "global",
    "description": "Gets encounter matching a uuid",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A uuid for the encounter",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "getEncounter(\"123\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "getEncounters",
    "longname": "getEncounters",
    "name": "getEncounters",
    "kind": "function",
    "scope": "global",
    "description": "Gets encounters matching params",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object for the patient",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "getEncounters({ patient: \"123\", fromdate: \"2023-05-18\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 221,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "getPatient",
    "longname": "getPatient",
    "name": "getPatient",
    "kind": "function",
    "scope": "global",
    "description": "Gets patient matching a uuid",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A uuid for the patient",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a patient by uuid</caption>\ngetPatient('681f8785-c9ca-4dc8-a091-7b869316ff93')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 38,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a post request to any OpenMRS endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which defines data that will be used to create a given instance of resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "post(\n  \"idgen/identifiersource/8549f706-7e85-4c1d-9424-217d50a2988b/identifier\",\n  {}\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 109,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "searchPatient",
    "longname": "searchPatient",
    "name": "searchPatient",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all non-retired patients that match any specified parameters",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object with query for the patient.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "searchPatient({ q: \"Sarah\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 134,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "searchPerson",
    "longname": "searchPerson",
    "name": "searchPerson",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all non-retired persons that match any specified parameters",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "object with query for the person",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "searchPerson({ q: \"Sarah\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 162,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update data. A generic helper function to update a resource object of any type.\nUpdating an object requires to send `all required fields` or the `full body`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be updated. E.g. `person`, `patient`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The `id` or `path` to the `object` to be updated. E.g. `e739808f-f166-42ae-aaf3-8b3e8fa13fda` or `e739808f-f166-42ae-aaf3-8b3e8fa13fda/{collection-name}/{object-id}`",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>a person</caption>\nupdate(\"person\", '3cad37ad-984d-4c65-a019-3eb120c9c373',{\"gender\":\"M\",\"birthdate\":\"1997-01-13\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 338,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Upsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of a resource to `upsert`. E.g. `trackedEntityInstances`",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The data to use for update or create depending on the result of the query.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>For an existing patient using upsert</caption>\nupsert('patient', { q: '10007JJ' }, { person: { age: 50 } });",
      "<caption>For non existing patient creating a patient record using upsert </caption>\nupsert(\n  \"patient\",\n  { q: \"1000EHE\" },\n  {\n    identifiers: [\n      {\n        identifier: \"1000EHE\",\n        identifierType: \"05a29f94-c0ed-11e2-94be-8c13b969e334\",\n        location: \"44c3efb0-2583-4c80-a79e-1f756a03c0a1\",\n        preferred: true,\n      },\n    ],\n    person: {\n      gender: \"M\",\n      age: 42,\n    },\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "exceptions": [
      {
        "type": {
          "names": [
            "RangeError"
          ]
        },
        "description": "- Throws range error"
      }
    ],
    "meta": {
      "lineno": 393,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openspp","adaptor":"@openfn/language-openspp","version":"2.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addtogroup\\\">addToGroup(group_id, individual_id, role)</a></dt>\\n<dt>\\n    <a href=\\\"#creategroup\\\">createGroup(data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createindividual\\\">createIndividual(data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#enroll\\\">enroll(spp_id, program_id)</a></dt>\\n<dt>\\n    <a href=\\\"#getarea\\\">getArea(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getenrolledprograms\\\">getEnrolledPrograms(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getgroup\\\">getGroup(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getgroupmembers\\\">getGroupMembers(spp_id, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getindividual\\\">getIndividual(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getprogram\\\">getProgram(program_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getprograms\\\">getPrograms([options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getservicepoint\\\">getServicePoint(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#removefromgroup\\\">removeFromGroup(group_id, individual_id)</a></dt>\\n<dt>\\n    <a href=\\\"#searcharea\\\">searchArea(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchgroup\\\">searchGroup(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchindividual\\\">searchIndividual(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchservicepoint\\\">searchServicePoint(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#unenroll\\\">unenroll(spp_id, program_id)</a></dt>\\n<dt>\\n    <a href=\\\"#updategroup\\\">updateGroup(group_id, data)</a></dt>\\n<dt>\\n    <a href=\\\"#updateindividual\\\">updateIndividual(individual_id, data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addToGroup\\n\\n<p><code>addToGroup(group_id, individual_id, role) ⇒ Operation</code></p>\\n\\nadd individual to group in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| individual_id | <code>string</code> | individual registrant id |\\n| role | <code>string</code> | individual role in group |\\n\\n**Example:** create a new head for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\", \\\"Head\\\")\\n```\\n**Example:** create a new ordinary member for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\")\\n```\\n**Example:** create a new member with new role for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\", \\\"new-role-name\\\")\\n```\\n\\n* * *\\n\\n### createGroup\\n\\n<p><code>createGroup(data, callback) ⇒ Operation</code></p>\\n\\ncreate new group for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | registrant create data |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateGroup({ name: \\\"Group 1\\\" })\\n```\\n\\n* * *\\n\\n### createIndividual\\n\\n<p><code>createIndividual(data, callback) ⇒ Operation</code></p>\\n\\ncreate new individual for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | registrant create data |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateIndividual({ name: \\\"Individual 1\\\" })\\n```\\n\\n* * *\\n\\n### enroll\\n\\n<p><code>enroll(spp_id, program_id)</code></p>\\n\\nenroll registrant to program in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to enroll |\\n| program_id | <code>string</code> | program_id of program |\\n\\n**Example**\\n```js\\nenroll(\\\"IND_Q4VGGZPF\\\", \\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### getArea\\n\\n<p><code>getArea(spp_id, callback) ⇒ Operation</code></p>\\n\\nget area by id in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of area |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetArea(\\\"LOC_7M92NLDH\\\")\\n```\\n\\n* * *\\n\\n### getEnrolledPrograms\\n\\n<p><code>getEnrolledPrograms(spp_id, callback) ⇒ Operation</code></p>\\n\\nget programs list for specific registrant from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to search |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetEnrolledPrograms(\\\"IND_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getGroup\\n\\n<p><code>getGroup(spp_id, callback) ⇒ Operation</code></p>\\n\\nget group information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the group |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetGroup(\\\"GRP_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getGroupMembers\\n\\n<p><code>getGroupMembers(spp_id, [options], callback) ⇒ Operation</code></p>\\n\\nget group members information from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| spp_id | <code>string</code> |  | The name of the group |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example**\\n```js\\ngetGroupMembers(\\\"GRP_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getIndividual\\n\\n<p><code>getIndividual(spp_id, callback) ⇒ Operation</code></p>\\n\\nget individual information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the individual |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetIndividual(\\\"IND_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getProgram\\n\\n<p><code>getProgram(program_id, callback) ⇒ Operation</code></p>\\n\\nget program information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| program_id | <code>string</code> | searching domain |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetProgram(\\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### getPrograms\\n\\n<p><code>getPrograms([options], callback) ⇒ Operation</code></p>\\n\\nget programs list from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [options] | <code>number</code> | <code>{}</code> | offset from start |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example**\\n```js\\ngetPrograms(100)\\n```\\n\\n* * *\\n\\n### getServicePoint\\n\\n<p><code>getServicePoint(spp_id, callback) ⇒ Operation</code></p>\\n\\nget service points information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the agent |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetServicePoint(\\\"SVP_8P4KP4RT\\\")\\n```\\n\\n* * *\\n\\n### removeFromGroup\\n\\n<p><code>removeFromGroup(group_id, individual_id) ⇒ Operation</code></p>\\n\\nremove individual from group in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| individual_id | <code>string</code> | individual registrant id |\\n\\n**Example**\\n```js\\nremoveFromGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\")\\n```\\n\\n* * *\\n\\n### searchArea\\n\\n<p><code>searchArea(domain, [options], callback) ⇒ Operation</code></p>\\n\\nsearching for service point in OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search without offset\\n```js\\nsearchArea([[\\\"code\\\", \\\"=\\\", \\\"10732\\\"]])\\n```\\n**Example:** search with offset\\n```js\\nsearchArea([[\\\"kind\\\", \\\"=\\\", 1]], { offset: 10 }})\\n```\\n\\n* * *\\n\\n### searchGroup\\n\\n<p><code>searchGroup(domain, [options], callback) ⇒ Operation</code></p>\\n\\nget groups from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for ordering search, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search group by domain\\n```js\\nsearchGroup([[\\\"spp_id\\\", \\\"=\\\", \\\"GRP_Q4VGGZPF\\\"]])\\n```\\n**Example:** search group by domain with offset\\n```js\\nsearchGroup([[\\\"spp_id\\\", \\\"ilike\\\", \\\"GRP\\\"]], { offset: 100 }})\\n```\\n**Example:** search group by complex domain for more accuracy\\n```js\\nsearchGroup([[\\\"address\\\", \\\"!=\\\", false], [\\\"phone\\\", \\\"!=\\\", false]])\\n```\\n\\n* * *\\n\\n### searchIndividual\\n\\n<p><code>searchIndividual(domain, [options], callback) ⇒ Operation</code></p>\\n\\nget individuals from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search individual by domain\\n```js\\nsearchIndividual([[\\\"spp_id\\\", \\\"=\\\", \\\"IND_Q4VGGZPF\\\"]])\\n```\\n**Example:** search individual by domain with offset\\n```js\\nsearchIndividual([[\\\"spp_id\\\", \\\"ilike\\\", \\\"IND\\\"]], { offset: 100 })\\n```\\n**Example:** search individual by complex domain for more accuracy\\n```js\\nsearchIndividual([[\\\"address\\\", \\\"!=\\\", false], [\\\"birthdate\\\", \\\"=\\\", false]])\\n```\\n\\n* * *\\n\\n### searchServicePoint\\n\\n<p><code>searchServicePoint(domain, [options], callback) ⇒ Operation</code></p>\\n\\nsearching for service point in OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search without offset\\n```js\\nsearchServicePoint([[\\\"name\\\", \\\"ilike\\\", \\\"agent 1\\\"]])\\n```\\n**Example:** search with offset\\n```js\\nsearchServicePoint([[\\\"name\\\", \\\"ilike\\\", \\\"agent 1\\\"]], { offset: 100 })\\n```\\n\\n* * *\\n\\n### unenroll\\n\\n<p><code>unenroll(spp_id, program_id)</code></p>\\n\\nunenroll registrant from program in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to unenroll |\\n| program_id | <code>string</code> | program_id of program |\\n\\n**Example**\\n```js\\nunenroll(\\\"IND_Q4VGGZPF\\\", \\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### updateGroup\\n\\n<p><code>updateGroup(group_id, data) ⇒ Operation</code></p>\\n\\nupdate group for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| data | <code>object</code> | registrant update data |\\n\\n**Example**\\n```js\\nupdateGroup(\\\"GRP_B2BRHJN2\\\", { name: \\\"Group 1\\\" })\\n```\\n\\n* * *\\n\\n### updateIndividual\\n\\n<p><code>updateIndividual(individual_id, data) ⇒ Operation</code></p>\\n\\nupdate individual for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| individual_id | <code>string</code> | individual registrant id |\\n| data | <code>object</code> | registrant update data |\\n\\n**Example**\\n```js\\nupdateIndividual(\\\"IND_8DUQL4M4\\\", { name: \\\"Individual 1\\\" })\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-openspp <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with OpenSPP\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/openspp-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openspp-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `getServicePoint` function\\n\\n```js\\ngetServicePoint(\\\"newagentflour\\\");\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-openspp\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.2.0\\n\\n### Changes\\n\\n- 05defd2: add new functions, correcting docstring and add more examples\\n  - correcting docstring input parameters type\\n  - changing getServicePoint() from get by name into get by unique id\\n  - add more examples in docstring\\n  - getArea(): get existing area by id\\n  - searchArea(): search existing area by domain\\n  - searchServicePoint(): search existing service point by domain\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 48b4e97: update `spp date time now string` format\\n\\n## 1.1.0\\n\\n- Create OpenSPP adaptor with these functions:\\n  - getGroup(): get existing group information\\n  - getIndividual(): get existing individual information\\n  - searchGroup(): search existing group by domain\\n  - searchIndividual(): search existing individual by domain\\n  - getGroupMembers(): get members from group\\n  - getServicePoint(): get service points by name\\n  - getPrograms(): get single program\\n  - getPrograms(): get program list\\n  - getEnrolledPrograms(): get list of enrolled program for each beneficiary\\n  - enroll(): enroll beneficiary to a program\\n  - unenroll(): unenroll beneficiary from program\\n  - createIndividual(): create new individual\\n  - updateIndividual(): update existing individual\\n  - createGroup(): create new group\\n  - updateGroup(): update existing group\\n  - addToGroup(): add individual to group with(out) role\\n  - removeFromGroup(): end membership of individual to group\\n\"","functions":["addToGroup","createGroup","createIndividual","enroll","getArea","getEnrolledPrograms","getGroup","getGroupMembers","getIndividual","getProgram","getPrograms","getServicePoint","removeFromGroup","searchArea","searchGroup","searchIndividual","searchServicePoint","unenroll","updateGroup","updateIndividual"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"default":"http://localhost","examples":["https://dev.newlogic-demo.com"]},"username":{"title":"Username","type":"string","description":"Username","default":"admin","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","default":"admin","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"database":{"title":"Database Name","type":"string","default":"devel","description":"Database Name","examples":["devel"]}},"type":"object","additionalProperties":true,"required":["password","username","database","baseUrl"]}},
[
  {
    "id": "addToGroup",
    "longname": "addToGroup",
    "name": "addToGroup",
    "kind": "function",
    "scope": "global",
    "description": "add individual to group in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual role in group",
        "name": "role"
      }
    ],
    "examples": [
      "<caption>create a new head for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\", \"Head\")",
      "<caption>create a new ordinary member for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\")",
      "<caption>create a new member with new role for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\", \"new-role-name\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 790,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 19,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createGroup",
    "longname": "createGroup",
    "name": "createGroup",
    "kind": "function",
    "scope": "global",
    "description": "create new group for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant create data",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createGroup({ name: \"Group 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 668,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "createIndividual",
    "longname": "createIndividual",
    "name": "createIndividual",
    "kind": "function",
    "scope": "global",
    "description": "create new individual for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant create data",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createIndividual({ name: \"Individual 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 630,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "enroll",
    "longname": "enroll",
    "name": "enroll",
    "kind": "function",
    "scope": "global",
    "description": "enroll registrant to program in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to enroll",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "program_id of program",
        "name": "program_id"
      }
    ],
    "examples": [
      "enroll(\"IND_Q4VGGZPF\", \"PROG_2023_00000001\")"
    ],
    "access": "public",
    "meta": {
      "lineno": 545,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "getArea",
    "longname": "getArea",
    "name": "getArea",
    "kind": "function",
    "scope": "global",
    "description": "get area by id in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of area",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getArea(\"LOC_7M92NLDH\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 970,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "getEnrolledPrograms",
    "longname": "getEnrolledPrograms",
    "name": "getEnrolledPrograms",
    "kind": "function",
    "scope": "global",
    "description": "get programs list for specific registrant from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to search",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getEnrolledPrograms(\"IND_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 505,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "getGroup",
    "longname": "getGroup",
    "name": "getGroup",
    "kind": "function",
    "scope": "global",
    "description": "get group information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the group",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getGroup(\"GRP_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 143,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "getGroupMembers",
    "longname": "getGroupMembers",
    "name": "getGroupMembers",
    "kind": "function",
    "scope": "global",
    "description": "get group members information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the group",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getGroupMembers(\"GRP_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 238,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "getIndividual",
    "longname": "getIndividual",
    "name": "getIndividual",
    "kind": "function",
    "scope": "global",
    "description": "get individual information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the individual",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getIndividual(\"IND_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getProgram",
    "longname": "getProgram",
    "name": "getProgram",
    "kind": "function",
    "scope": "global",
    "description": "get program information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "searching domain",
        "name": "program_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getProgram(\"PROG_2023_00000001\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 426,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "getPrograms",
    "longname": "getPrograms",
    "name": "getPrograms",
    "kind": "function",
    "scope": "global",
    "description": "get programs list from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "offset from start",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getPrograms(100)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 469,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "getServicePoint",
    "longname": "getServicePoint",
    "name": "getServicePoint",
    "kind": "function",
    "scope": "global",
    "description": "get service points information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the agent",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getServicePoint(\"SVP_8P4KP4RT\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 293,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "removeFromGroup",
    "longname": "removeFromGroup",
    "name": "removeFromGroup",
    "kind": "function",
    "scope": "global",
    "description": "remove individual from group in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      }
    ],
    "examples": [
      "removeFromGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 878,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "searchArea",
    "longname": "searchArea",
    "name": "searchArea",
    "kind": "function",
    "scope": "global",
    "description": "searching for service point in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search without offset</caption>\nsearchArea([[\"code\", \"=\", \"10732\"]])",
      "<caption>search with offset</caption>\nsearchArea([[\"kind\", \"=\", 1]], { offset: 10 }})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1005,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "searchGroup",
    "longname": "searchGroup",
    "name": "searchGroup",
    "kind": "function",
    "scope": "global",
    "description": "get groups from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for ordering search, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search group by domain</caption>\nsearchGroup([[\"spp_id\", \"=\", \"GRP_Q4VGGZPF\"]])",
      "<caption>search group by domain with offset</caption>\nsearchGroup([[\"spp_id\", \"ilike\", \"GRP\"]], { offset: 100 }})",
      "<caption>search group by complex domain for more accuracy</caption>\nsearchGroup([[\"address\", \"!=\", false], [\"phone\", \"!=\", false]])"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 339,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "searchIndividual",
    "longname": "searchIndividual",
    "name": "searchIndividual",
    "kind": "function",
    "scope": "global",
    "description": "get individuals from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search individual by domain</caption>\nsearchIndividual([[\"spp_id\", \"=\", \"IND_Q4VGGZPF\"]])",
      "<caption>search individual by domain with offset</caption>\nsearchIndividual([[\"spp_id\", \"ilike\", \"IND\"]], { offset: 100 })",
      "<caption>search individual by complex domain for more accuracy</caption>\nsearchIndividual([[\"address\", \"!=\", false], [\"birthdate\", \"=\", false]])"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 385,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "searchServicePoint",
    "longname": "searchServicePoint",
    "name": "searchServicePoint",
    "kind": "function",
    "scope": "global",
    "description": "searching for service point in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search without offset</caption>\nsearchServicePoint([[\"name\", \"ilike\", \"agent 1\"]])",
      "<caption>search with offset</caption>\nsearchServicePoint([[\"name\", \"ilike\", \"agent 1\"]], { offset: 100 })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 922,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "unenroll",
    "longname": "unenroll",
    "name": "unenroll",
    "kind": "function",
    "scope": "global",
    "description": "unenroll registrant from program in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to unenroll",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "program_id of program",
        "name": "program_id"
      }
    ],
    "examples": [
      "unenroll(\"IND_Q4VGGZPF\", \"PROG_2023_00000001\")"
    ],
    "access": "public",
    "meta": {
      "lineno": 589,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "updateGroup",
    "longname": "updateGroup",
    "name": "updateGroup",
    "kind": "function",
    "scope": "global",
    "description": "update group for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant update data",
        "name": "data"
      }
    ],
    "examples": [
      "updateGroup(\"GRP_B2BRHJN2\", { name: \"Group 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 704,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "updateIndividual",
    "longname": "updateIndividual",
    "name": "updateIndividual",
    "kind": "function",
    "scope": "global",
    "description": "update individual for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant update data",
        "name": "data"
      }
    ],
    "examples": [
      "updateIndividual(\"IND_8DUQL4M4\", { name: \"Individual 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 743,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"postgresql","adaptor":"@openfn/language-postgresql","version":"6.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#describetable\\\">describeTable(tableName, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#findvalue\\\">findValue([filter])</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#insertmany\\\">insertMany(table, records, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#inserttable\\\">insertTable(tableName, columns, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#modifytable\\\">modifyTable(tableName, columns, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(sqlQuery, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, uuid, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertif\\\">upsertIf(logical, table, uuid, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, uuid, data, [options], callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### describeTable\\n\\n<p><code>describeTable(tableName, [options], callback) ⇒ Operation</code></p>\\n\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ndescribeTable('clinic_visits')\\n```\\n\\n* * *\\n\\n### findValue\\n\\n<p><code>findValue([filter]) ⇒ value</code></p>\\n\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| [filter] | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n| [filter.uuid] | <code>string</code> | The uuid value to search for in the specified relation. |\\n| [filter.relation] | <code>string</code> | The name of the relation to search for the uuid value. |\\n| [filter.where] | <code>object</code> | An object that contains key-value pairs to filter the search results. |\\n| [filter.operator] | <code>object</code> | An object that contains key-value pairs to specify the type of comparison to perform on the where clause. |\\n\\n**Example**\\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mamadou' },\\n   operator: { first_name: 'like' }\\n })\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(table, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsert('users', { name: 'Elodie', id: 7 }, { setNull: \\\"'NaN'\\\", logValues: true });\\n```\\n\\n* * *\\n\\n### insertMany\\n\\n<p><code>insertMany(table, records, [options], callback) ⇒ Operation</code></p>\\n\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>array</code> | An array or a function that takes state and returns an array |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsertMany('users', state => state.data.recordArray, { setNull: \\\"'undefined'\\\", logValues: true });\\n```\\n\\n* * *\\n\\n### insertTable\\n\\n<p><code>insertTable(tableName, columns, [options], callback) ⇒ Operation</code></p>\\n\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### modifyTable\\n\\n<p><code>modifyTable(tableName, columns, [options], callback) ⇒ Operation</code></p>\\n\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(sqlQuery, [options], callback) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>string</code> | The SQL query as a string. |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nsql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, uuid, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update a record using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsert(\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql:true, execute: true, logValues: true }\\n)\\n```\\n\\n* * *\\n\\n### upsertIf\\n\\n<p><code>upsertIf(logical, table, uuid, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true }\\n)\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, uuid, data, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n { logValues: true }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language PostgreSQL\\n\\nLanguage Pack for building expressions and operations to run PostgreSQL queries.\\n\\n## Documentation\\n\\n## required configuration for Heroku postgres\\n\\n```json\\n{\\n  \\\"host\\\": \\\"some-host-url.compute-1.amazonaws.com\\\",\\n  \\\"port\\\": \\\"5432\\\",\\n  \\\"database\\\": \\\"wouldntyouliketoknow\\\",\\n  \\\"user\\\": \\\"me\\\",\\n  \\\"password\\\": \\\"noway\\\",\\n  \\\"ssl\\\": true,\\n  \\\"allowSelfSignedCert\\\": true\\n}\\n```\\n\\n## `sql(query)`\\n\\nExecute an sql query. An option can be added to either log the query or not and\\neither execute the query or no. The options can be omitted as well.\\n\\n#### sample usage\\n\\n```js\\nsql(\\n  state =>\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`,\\n  { writeSql: true, execute: true }\\n);\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nalterState(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert a single record\\n\\nThis functions is used to insert a single record in postgres database. An option\\n`writeSql` allows to log the generated sql query. The `setNull` option allows to\\nreplace the specified elements with `NULL`.\\n\\n```js\\ninsert(\\n  'users',\\n  {\\n    email: 'antony@gmail.com',\\n    first_name: 'Antony',\\n    inserted_at: '2020-08-27 00:00:00',\\n    updated_at: '2020-08-27 00:00:00',\\n  },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nInsert or Update if matched. An option, `execute`, allows to either run the\\ngenerated query or no.\\n\\n```js\\nupsert(\\n  'users',\\n  'email',\\n  {\\n    email: 'luca@openfn.org',\\n    first_name: 'Luca',\\n    inserted_at: '2010-01-01 00:00:00',\\n    updated_at: '2010-01-01 00:00:00',\\n  },\\n  {\\n    setNull: [\\\"'NaN'\\\", \\\"'undefined'\\\"],\\n    writeSql: false,\\n    execute: true,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\\n  name: 'Elodie',\\n  id: 7,\\n});\\n```\\n\\n## Insert many records in postgresql\\n\\nThis function allows the insert of a set of records inside a table all at once.\\n\\n```js\\ninsertMany(\\n  'users',\\n  state =>\\n    state.data.people.map(s => {\\n      return {\\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\\n        inserted_at: '2020-01-01 00:00:00',\\n        updated_at: '2020-01-01 00:00:00',\\n      };\\n    }),\\n  { logValues: true }\\n);\\n```\\n\\n## Upsert many records in postgresql\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany('users', 'ON CONSTRAINT users_pkey', state =>\\n  state.data.people.map(s => {\\n    return {\\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\\n      inserted_at: '2020-01-01 00:00:00',\\n      updated_at: '2020-01-01 00:00:00',\\n    };\\n  })\\n);\\n```\\n\\n## Describe a table from postgres\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: true, execute: false });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-postgresql\\n\\n## 6.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 6.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 6.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 6.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 6.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 6.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 5.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 5.0.0\\n\\n### Major Changes\\n\\n- 6a4081b8: - Update all operations to use util `expandReferences`\\n  - Add `findValue` result to state\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.1.15\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.1.14\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.1.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.1.12\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.1.11\\n\\n### Patch Changes\\n\\n- 02ab7a89: - Change `host` format from `uri or ipv4` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `user`, `password` and `database`\\n\\n## 4.1.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.1.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.1.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.1.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.1.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.1.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.1.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.1.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- ecd0b53: add optional callback in sql and update response structure\\n\\n## 3.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.4.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.4.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.4.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 3.4.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.4.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.4.0\\n\\n### Minor Changes\\n\\n- 44ae341: Migrate postgresql\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","description":"Postgres instance host URL or IP address","minLength":1,"examples":["some-host.compute-1.amazonaws.com","201.220.61.246"]},"port":{"title":"Port","type":"integer","default":5432,"description":"Database instance port","minLength":1,"examples":[5432]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"User","type":"string","description":"User name","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]},"ssl":{"title":"Use SSL","type":"boolean","examples":[true]},"allowSelfSignedCert":{"title":"Allow self-signed certificate","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["host","user","database","password"]}},
[
  {
    "id": "describeTable",
    "longname": "describeTable",
    "name": "describeTable",
    "kind": "function",
    "scope": "global",
    "description": "List the columns of a table in a database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to describe",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "describeTable('clinic_visits')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 607,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "findValue",
    "longname": "findValue",
    "name": "findValue",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a uuid key given a condition",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A filter object with the lookup table, a uuid and the condition",
        "name": "filter"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The uuid value to search for in the specified relation.",
        "name": "filter.uuid"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The name of the relation to search for the uuid value.",
        "name": "filter.relation"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object that contains key-value pairs to filter the search results.",
        "name": "filter.where"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object that contains key-value pairs to specify the type of comparison to perform on the where clause.",
        "name": "filter.operator"
      }
    ],
    "examples": [
      "findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mamadou' },\n   operator: { first_name: 'like' }\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "value"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 204,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insert('users', { name: 'Elodie', id: 7 }, { setNull: \"'NaN'\", logValues: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 273,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "insertMany",
    "longname": "insertMany",
    "name": "insertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert many records, using the keys of the first as the column template",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array or a function that takes state and returns an array",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insertMany('users', state => state.data.recordArray, { setNull: \"'undefined'\", logValues: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 323,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "insertTable",
    "longname": "insertTable",
    "name": "insertTable",
    "kind": "function",
    "scope": "global",
    "description": "Create a table in database when given an array of columns and a table_name.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to create",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 651,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "modifyTable",
    "longname": "modifyTable",
    "name": "modifyTable",
    "kind": "function",
    "scope": "global",
    "description": "Alter an existing table in the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to alter",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 715,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The SQL query as a string.",
        "name": "sqlQuery"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "sql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsert(\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { setNull: [\"''\", \"'undefined'\"], writeSql:true, execute: true, logValues: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 386,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsertIf",
    "longname": "upsertIf",
    "name": "upsertIf",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record based on a logical condition using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "a data to check existing value for.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 455,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON CONFLICT UPDATE and excluded",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of objects or a function that returns an array",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertMany(\n  'users', // the DB table\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n { logValues: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 540,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"primero","adaptor":"@openfn/language-primero","version":"3.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createcase\\\">createCase(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createreferrals\\\">createReferrals(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getcases\\\">getCases(query, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlocations\\\">getLocations(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlookups\\\">getLookups(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getreferrals\\\">getReferrals(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatecase\\\">updateCase(id, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatereferral\\\">updateReferral(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcase\\\">upsertCase(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createCase\\n\\n<p><code>createCase(params, callback) ⇒ Operation</code></p>\\n\\nCreate a new case in Primero\\n\\nUse this function to create a new case in Primero based on a set of Data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Create a new case in Primero based on a set of Data\\n```js\\ncreateCase({\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Edwine Edgemont\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### createReferrals\\n\\n<p><code>createReferrals(params, callback) ⇒ Operation</code></p>\\n\\nCreate referrals in Primero\\n\\nUse this function to bulk refer to one or multiple cases from Primero to a single user\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with referral data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Create referrals for multiple cases in Primero\\n```js\\ncreateReferrals({\\n  data: {\\n    ids: [\\n      \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n      \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n    ],\\n    transitioned_to: \\\"primero_cp\\\",\\n    notes: \\\"This is a bulk referral\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### getCases\\n\\n<p><code>getCases(query, options, callback) ⇒ Operation</code></p>\\n\\nUse this function to get cases from Primero based on a set of query parameters.\\nNote that in many implementations, the `remote` attribute should be set to `true` to ensure that only cases marked for remote access will be retrieved.\\nSet `case_id` on the query object to fetch a specific case.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Query parameters to send to primero, which will be built into URL parameters. See [Primero Docs](https://github.com/primeroIMS/primero/blob/master/doc/api/cases/get.md) for a list of valid parameters. |\\n| options | <code>object</code> | (Optional) Additional options |\\n| options.withReferrals | <code>boolean</code> | Set to true to include referrals with each case. This will generate an extra request for each case and may take some time to process. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Fetch all cases\\n```js\\ngetCases();\\n```\\n**Example:** Fetch all cases which match query criteria\\n```js\\ngetCases({\\n  remote: true,\\n  sex: \\\"male\\\",\\n  age: \\\"10..15\\\",\\n  protection_concerns :\\\"unaccompanied,separated\\\",\\n});\\n```\\n**Example:** Fetch a specific case by id\\n```js\\ngetCases({\\n  case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n**Example:** Get all remote cases and their referrals\\n```js\\ngetCases(\\n { remote: true },\\n { withReferrals: true }\\n);\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(query, callback) ⇒ Operation</code></p>\\n\\nGet forms from Primero\\n\\nUse this function to get forms from Primero that are accessible to this user based on a set of query parameters.\\nThe user can filter the form list by record type and module.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get the list of all forms\\n```js\\ngetForms();\\n```\\n**Example:** Get the list of all forms for a specific module\\n```js\\ngetForms({\\n  module_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n\\n* * *\\n\\n### getLocations\\n\\n<p><code>getLocations(query, callback) ⇒ Operation</code></p>\\n\\nGet locations from Primero\\n\\nUse this function to get a paginated list of all locations that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1).\\nAnother parameter is `hierarchy: true` (Defaults to false)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get loocations from Primero with query parameters\\n```js\\ngetLocations({\\n  page: 1,\\n  per: 20\\n})\\n```\\n\\n* * *\\n\\n### getLookups\\n\\n<p><code>getLookups(query, callback) ⇒ Operation</code></p>\\n\\nGet lookups from Primero\\n\\nUse this function to get a paginated list of all lookups that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get lookups from Primero with query parameters\\n```js\\ngetLookups({\\n  per: 10000,\\n  page: 5\\n});\\n```\\n\\n* * *\\n\\n### getReferrals\\n\\n<p><code>getReferrals(params, callback) ⇒ Operation</code></p>\\n\\nGet referrals for a specific case in Primero\\n\\nUse this function to get the list of referrals of one case from Primero.\\nThe search can be done using either `record id` or `case id`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get referrals for a case in Primero by record id\\n```js\\ngetReferrals({\\n  externalId: \\\"record_id\\\",\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n**Example:** Get referrals for a case in Primero by case id\\n```js\\n getReferrals({\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n\\n* * *\\n\\n### updateCase\\n\\n<p><code>updateCase(id, params, callback) ⇒ Operation</code></p>\\n\\nUpdate an existing case in Primero\\n\\nUse this function to update an existing case from Primero.\\nIn this implementation, the function uses a case ID to check for the case to update,\\nThen merge the values submitted in this call into an existing case.\\nFields not specified in this request will not be modified.\\nFor nested subform fields, the subform arrays will be recursively merged,\\nkeeping both the existing values and appending the new\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | A case ID to use for the update. |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Update case for a specific case id\\n```js\\nupdateCase(\\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\", {\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Fiona Edgemont\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### updateReferral\\n\\n<p><code>updateReferral(params, callback) ⇒ Operation</code></p>\\n\\nUpdate a single referral for a specific case in Primero\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an caseExternalId value to use, the id and the referral id to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Update referral by record id\\n```js\\nupdateReferral({\\n  caseExternalId: \\\"record_id\\\",\\n  id: \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n  caseId: \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n  data: (state) => state.data,\\n});\\n```\\n\\n* * *\\n\\n### upsertCase\\n\\n<p><code>upsertCase(params, callback) ⇒ Operation</code></p>\\n\\nUpsert case to Primero\\n\\nUse this function to update an existing case from Primero or to create it otherwise.\\nIn this implementation, we first fetch the list of cases,\\nthen we check if the case exist before choosing the right operation to do.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalIds and some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Upsert case for a specific case id\\n```js\\nupsertCase({\\n  externalIds: [\\\"case_id\\\"],\\n  data: state => ({\\n    age: 20,\\n    sex: \\\"male\\\",\\n    name: \\\"Alex\\\",\\n    status: \\\"open\\\",\\n    case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  }),\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-primero\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with UNICEF's\\nPrimero API.\\n\\n**See Update Docs Site: https://docs.openfn.org/adaptors/packages/primero-docs**\\n\\n## Primero API Versions\\n\\n### Adaptor for Primero v2.0\\n\\nThis documentation outlines the functions available for Primero `v2.0` in the\\nmain branch. The API documentation is available at:\\nhttps://github.com/primeroIMS/primero/tree/development_v2/app/controllers/api\\n\\n### Adaptor for Primero v1.0 still available on the `v1` branch.\\n\\n`v1.0.7` of this adaptor was built for the Primero `v1.1` API:\\nhttps://github.com/OpenFn/language-primero/blob/v1/README.md\\n\\n[Primero API v1.1 Documentation](https://docs.google.com/document/d/1jpaT2_UBBnc3PxPYlLMBEzNUkyfuxRZiksywG5MKM0Q/edit)\\n\\n#### Primero Authentication Strategies\\n\\nThe Primero team is considering a shift to Microsoft Azure Active Directory B2C\\nfor auth. We can likely accommodate this with a similar pattern as has been used\\nin our Microsoft Dynamics, Github, or Google Sheets adaptors, but we'll need to\\nawait final doucmentation for Primero's `v2` API before making changes.\\n\\n[Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-primero\\n\\n## 3.0.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.12.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.12.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.12.2\\n\\n### Patch Changes\\n\\n- 3ad9122: - Improve `getCases()` withReferrals docs\\n  - Add logs when fetching case referrals\\n\\n## 2.12.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.12.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.11.14\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.11.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 2.11.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.11.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 2.11.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 2.11.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.11.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.11.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.11.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.11.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.11.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 2.11.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.11.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 2.11.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.11.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.10.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 2.10.5\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.10.4\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.10.3\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n- 059c956: added examples in docstring\\n\\n## 2.10.2\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.10.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.10.0\\n\\n### Minor Changes\\n\\n- 33742bf: Modify `composeNextState` so that `getCases` can pass it a third\\n  argument: the metadata from Primero's response.\\n\\n  `getCases` will now not only return an array of `cases` in `state.data`, but\\n  metadata related to pagination in `state.metadata`.\\n\\n### Patch Changes\\n\\n- 2014694: remove travis url in readme\\n- bb764db: Conditionally check for 'withReferrals' in case no options are\\n  provided\\\"\\n\\n## 2.9.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 2.9.1\\n\\n### Patch Changes\\n\\n- d4ac748: Skipped failing test until we have a new strat (it's working)\\n\\n## 2.9.0\\n\\n### Minor Changes\\n\\n- b37a4ad: add language primero into monorepo\\n\\n### Patch Changes\\n\\n- adb97a0: Fixed issue where upsertCase always took state.data for main params\\n\"","functions":["createCase","createReferrals","getCases","getForms","getLocations","getLookups","getReferrals","updateCase","updateReferral","upsertCase"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Primero host url","format":"uri","minLength":1,"examples":["https://primero.org/some-org"]},"user":{"title":"User","type":"string","description":"The username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Superpass"]},"basicAuth":{"title":"Use Basic Auth","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["url"]}},
[
  {
    "id": "createCase",
    "longname": "createCase",
    "name": "createCase",
    "kind": "function",
    "scope": "global",
    "description": "Create a new case in Primero\n\nUse this function to create a new case in Primero based on a set of Data.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new case in Primero based on a set of Data</caption>\ncreateCase({\n  data: {\n    age: 16,\n    sex: \"female\",\n    name: \"Edwine Edgemont\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 282,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 6,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createReferrals",
    "longname": "createReferrals",
    "name": "createReferrals",
    "kind": "function",
    "scope": "global",
    "description": "Create referrals in Primero\n\nUse this function to bulk refer to one or multiple cases from Primero to a single user",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with referral data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create referrals for multiple cases in Primero</caption>\ncreateReferrals({\n  data: {\n    ids: [\n      \"749e9c6e-60db-45ec-8f5a-69da7c223a79\",\n      \"dcea6052-07d9-4cfa-9abf-9a36987cdd25\",\n    ],\n    transitioned_to: \"primero_cp\",\n    notes: \"This is a bulk referral\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 571,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "getCases",
    "longname": "getCases",
    "name": "getCases",
    "kind": "function",
    "scope": "global",
    "description": "Use this function to get cases from Primero based on a set of query parameters.\nNote that in many implementations, the `remote` attribute should be set to `true` to ensure that only cases marked for remote access will be retrieved.\nSet `case_id` on the query object to fetch a specific case.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters to send to primero, which will be built into URL parameters. See {@link https://github.com/primeroIMS/primero/blob/master/doc/api/cases/get.md Primero Docs} for a list of valid parameters.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Additional options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Set to true to include referrals with each case. This will generate an extra request for each case and may take some time to process.",
        "name": "options.withReferrals"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Fetch all cases</caption>\ngetCases();",
      "<caption>Fetch all cases which match query criteria</caption>\ngetCases({\n  remote: true,\n  sex: \"male\",\n  age: \"10..15\",\n  protection_concerns :\"unaccompanied,separated\",\n});",
      "<caption>Fetch a specific case by id</caption>\ngetCases({\n  case_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});",
      "<caption>Get all remote cases and their referrals</caption>\ngetCases(\n { remote: true },\n { withReferrals: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Get forms from Primero\n\nUse this function to get forms from Primero that are accessible to this user based on a set of query parameters.\nThe user can filter the form list by record type and module.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get the list of all forms</caption>\ngetForms();",
      "<caption>Get the list of all forms for a specific module</caption>\ngetForms({\n  module_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 729,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "getLocations",
    "longname": "getLocations",
    "name": "getLocations",
    "kind": "function",
    "scope": "global",
    "description": "Get locations from Primero\n\nUse this function to get a paginated list of all locations that are accessible to this user from Primero.\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\nAlso you can specify `page` value to fetch pagination (Defaults to 1).\nAnother parameter is `hierarchy: true` (Defaults to false)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get loocations from Primero with query parameters</caption>\ngetLocations({\n  page: 1,\n  per: 20\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 856,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "getLookups",
    "longname": "getLookups",
    "name": "getLookups",
    "kind": "function",
    "scope": "global",
    "description": "Get lookups from Primero\n\nUse this function to get a paginated list of all lookups that are accessible to this user from Primero.\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\nAlso you can specify `page` value to fetch pagination (Defaults to 1)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get lookups from Primero with query parameters</caption>\ngetLookups({\n  per: 10000,\n  page: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 792,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "getReferrals",
    "longname": "getReferrals",
    "name": "getReferrals",
    "kind": "function",
    "scope": "global",
    "description": "Get referrals for a specific case in Primero\n\nUse this function to get the list of referrals of one case from Primero.\nThe search can be done using either `record id` or `case id`.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get referrals for a case in Primero by record id</caption>\ngetReferrals({\n  externalId: \"record_id\",\n  id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});",
      "<caption>Get referrals for a case in Primero by case id</caption>\n getReferrals({\n  id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 481,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "updateCase",
    "longname": "updateCase",
    "name": "updateCase",
    "kind": "function",
    "scope": "global",
    "description": "Update an existing case in Primero\n\nUse this function to update an existing case from Primero.\nIn this implementation, the function uses a case ID to check for the case to update,\nThen merge the values submitted in this call into an existing case.\nFields not specified in this request will not be modified.\nFor nested subform fields, the subform arrays will be recursively merged,\nkeeping both the existing values and appending the new",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A case ID to use for the update.",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update case for a specific case id</caption>\nupdateCase(\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\", {\n  data: {\n    age: 16,\n    sex: \"female\",\n    name: \"Fiona Edgemont\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 346,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "updateReferral",
    "longname": "updateReferral",
    "name": "updateReferral",
    "kind": "function",
    "scope": "global",
    "description": "Update a single referral for a specific case in Primero",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an caseExternalId value to use, the id and the referral id to update.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update referral by record id</caption>\nupdateReferral({\n  caseExternalId: \"record_id\",\n  id: \"749e9c6e-60db-45ec-8f5a-69da7c223a79\",\n  caseId: \"dcea6052-07d9-4cfa-9abf-9a36987cdd25\",\n  data: (state) => state.data,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 636,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "upsertCase",
    "longname": "upsertCase",
    "name": "upsertCase",
    "kind": "function",
    "scope": "global",
    "description": "Upsert case to Primero\n\nUse this function to update an existing case from Primero or to create it otherwise.\nIn this implementation, we first fetch the list of cases,\nthen we check if the case exist before choosing the right operation to do.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalIds and some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Upsert case for a specific case id</caption>\nupsertCase({\n  externalIds: [\"case_id\"],\n  data: state => ({\n    age: 20,\n    sex: \"male\",\n    name: \"Alex\",\n    status: \"open\",\n    case_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n  }),\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 405,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"progres","adaptor":"@openfn/language-progres","version":"1.4.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#postdata\\\">postData(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### postData\\n\\n<p><code>postData(params, callback) ⇒ Operation</code></p>\\n\\nMake a POST request with a certificate\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Url, Headers and Body parameters |\\n| callback | <code>function</code> | (Optional) A callback function |\\n\\n**Example**\\n```js\\npostData({\\n url: urlDTP,\\n body: obj,\\n headers: {\\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\\n },\\n agentOptions: {\\n   key,\\n   cert,\\n },\\n}, callback)(state)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-progres\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the UNHCR\\nProGres v4 API.\\n\\n## Design notes\\n\\n- Integration must run through UNHCR's DTP, a middleware layer that provides a\\n  public API for UNHCR internal software.\\n- An API token _and_ a self-signed certificate must be provided for\\n  communication with UNHCR's DTP.\\n- Two-way sync must be possible between Primero and ProGres\\n- Teams still in discussion about whether the most common use-case will be a\\n  timed sync or real-time/event-based sync.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/progres-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/progres-configuration-schema/)\\ndefinition.\\n\\n### Posting data to an endpoint with SSL cert authentication\\n\\n```js\\npostData({\\n  url: urlDTP,\\n  body: { a: 1 },\\n  headers: {\\n    'Subscription-Key': configuration['token'],\\n  },\\n  agentOptions: {\\n    key,\\n    cert,\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-progres\\n\\n## 1.4.6\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 1.4.5\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.4.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.4.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.4.0\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.3.14\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.3.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.3.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.3.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.3.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.3.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.3.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.3.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.3.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.3.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.2.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.2.4\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 039ca0b: Migrate Progres\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["postData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Progres URL","format":"uri","minLength":1,"examples":["https://endpoint/To/DTP"]},"key":{"title":"Private Key","type":"string","description":"Your Progres private key","minLength":1,"examples":["-----BEGIN PRIVATE KEY-----SOMETYPEOFPRIVATEVALUE-----END PRIVATE KEY-----"]},"cert":{"title":"Certificate","type":"string","description":"Your Progres certificate","minLength":1,"examples":["-----BEGIN CERTIFICATE-----SOMETYPEOFVALUE-----END CERTIFICATE-----"]},"token":{"title":"Token","type":"string","description":"Your Progres token","writeOnly":true,"minLength":1,"examples":["[REDACTED]"]}},"type":"object","additionalProperties":true,"required":["url","key","cert","token"]}},
[
  {
    "id": "postData",
    "longname": "postData",
    "name": "postData",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request with a certificate",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Url, Headers and Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) A callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "postData({\n url: urlDTP,\n body: obj,\n headers: {\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\n },\n agentOptions: {\n   key,\n   cert,\n },\n}, callback)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/progres/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"rapidpro","adaptor":"@openfn/language-rapidpro","version":"1.1.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addcontact\\\">addContact(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#sendbroadcast\\\">sendBroadcast(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#startflow\\\">startFlow(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcontact\\\">upsertContact(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addContact\\n\\n<p><code>addContact(params, callback) ⇒ Operation</code></p>\\n\\nAdds a new contact to RapidPro\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\naddContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n* * *\\n\\n### sendBroadcast\\n\\n<p><code>sendBroadcast(params, callback) ⇒ Operation</code></p>\\n\\nSends a message to a list of contacts and/or URNs\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nsendBroadcast({\\n  text: \\\"Hello world\\\",\\n  urns: [\\\"twitter:sirmixalot\\\"],\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\\n* * *\\n\\n### startFlow\\n\\n<p><code>startFlow(params, callback) ⇒ Operation</code></p>\\n\\nStart a RapidPro flow for a number of contacts\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nstartFlow({\\n  flow: \\\"f5901b62-ba76-4003-9c62-72fdacc1b7b7\\\",\\n  restart_participants: false,\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\\n* * *\\n\\n### upsertContact\\n\\n<p><code>upsertContact(params, callback) ⇒ Operation</code></p>\\n\\nUpserts a contact to RapidPro by URN\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to upsert a contact |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-rapidpro\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[RapidPro API](https://rapidpro.io/api/v2/).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/rapidpro-docs)\\nfor full technical documentation.\\n\\n## Usage\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/rapidpro-configuration-schema/)\\ndefinition.\\n\\n#### sample job expression using operation\\n\\n```js\\nsendBroadcast({\\n  \\\"text\\\": \\\"Hello friends.\\\",\\n  \\\"urns\\\": [],\\n  \\\"contacts\\\": [],\\n  \\\"groups\\\", [],\\n});\\n```\\n\\n### Key helper functions\\n\\n**sendBroadcast(...) to send broadcast message to multiple contacts**\\n\\n```js\\nsendBroadcast({\\n  text: 'Hello world',\\n  urns: ['twitter:sirmixalot'],\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**startFlow(...) to trigger an automation flow in RapidPro**\\n\\n```js\\nstartFlow({\\n  flow: 'f5901b62-ba76-4003-9c62-72fdacc1b7b7',\\n  restart_participants: false,\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**upsertContact(...) to update/insert a Contact (and check if exists using\\nexternal identifiers)**\\n\\n```js\\nupsertContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n**addContact(...) to insert a Contact**\\n\\n```js\\naddContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-rapidpro\\n\\n## 1.1.5\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.14\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.13\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.12\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.0.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.10\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.0.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.0.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.5.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.5.5\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.5.4\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.5.3\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 11f83ff: Migrate RapidPro\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["addContact","sendBroadcast","startFlow","upsertContact"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","default":"https://app.rapidpro.io/","description":"instance host URL","format":"uri","minLength":1,"examples":["https://app.rapidpro.io/"]},"token":{"title":"Token","type":"string","description":"instance access token","writeOnly":true,"minLength":1,"examples":["#Super-sSCrecrete-token"]},"apiVersion":{"title":"API Version","type":"string","description":"API version to use. Leave this empty to use the default v2","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["host","token"]}},
[
  {
    "id": "addContact",
    "longname": "addContact",
    "name": "addContact",
    "kind": "function",
    "scope": "global",
    "description": "Adds a new contact to RapidPro",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "addContact({\n  name: \"Mamadou\",\n  language: \"ENG\",\n  urns: [\"tel:+250788123123\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 51,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "sendBroadcast",
    "longname": "sendBroadcast",
    "name": "sendBroadcast",
    "kind": "function",
    "scope": "global",
    "description": "Sends a message to a list of contacts and/or URNs",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "sendBroadcast({\n  text: \"Hello world\",\n  urns: [\"twitter:sirmixalot\"],\n  contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 212,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "startFlow",
    "longname": "startFlow",
    "name": "startFlow",
    "kind": "function",
    "scope": "global",
    "description": "Start a RapidPro flow for a number of contacts",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "startFlow({\n  flow: \"f5901b62-ba76-4003-9c62-72fdacc1b7b7\",\n  restart_participants: false,\n  contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 163,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertContact",
    "longname": "upsertContact",
    "name": "upsertContact",
    "kind": "function",
    "scope": "global",
    "description": "Upserts a contact to RapidPro by URN",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to upsert a contact",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertContact({\n  name: \"Mamadou\",\n  language: \"ENG\",\n  urns: [\"tel:+250788123123\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 93,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get the string value of a key.\nIf the key does not exist, null is returned.\nAn error is thrown if the value stored at key is not a string, because `get()` only handles string values.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get the value of the patient key</caption>\nget(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 84,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "hget",
    "longname": "hget",
    "name": "hget",
    "kind": "function",
    "scope": "global",
    "description": "Get the value associated with a specific field in a hash stored at a specified key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Field",
        "name": "field"
      }
    ],
    "examples": [
      "<caption>Get the value of the name field under the patient key</caption>\nhget(\"patient\", \"name\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "hGetAll",
    "longname": "hGetAll",
    "name": "hGetAll",
    "kind": "function",
    "scope": "global",
    "description": "Get all fields and values of a hash, as an object, for a specified key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get the hash obejct at the noderedis:animals:1 key</caption>\nhGetAll(\"noderedis:animals:1\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 168,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      },
      {
        "name": "data",
        "description": "The hash as an object",
        "type": null
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "hset",
    "longname": "hset",
    "name": "hset",
    "kind": "function",
    "scope": "global",
    "description": "Sets the specified fields to their respective values in the hash stored at key.\nThis function overwrites the values of specified fields that exist in the hash.\nIf key doesn't exist, a new key holding a hash is created.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The values to set",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set a field and value for the `patient` key</caption>\nhset('patient', { name: 'mtuchi' });",
      "<caption>Set multiple field values for the `patient` key</caption>\nhset('patient', { name: 'victor', ihs_number: 12345  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 219,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "jGet",
    "longname": "jGet",
    "name": "jGet",
    "kind": "function",
    "scope": "global",
    "description": "Get the value at a specified path in a JSON document stored in a key",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key at which the JSON document is stored.",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get JSON document value of the patient key</caption>\njGet(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 126,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "jSet",
    "longname": "jSet",
    "name": "jSet",
    "kind": "function",
    "scope": "global",
    "description": "Creates a JSON object at the specified key. If the key already exists, the\nexisting value will be replaced by the new value.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key to modify.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string",
            "object"
          ]
        },
        "description": "The JSON object or string value to set.",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set a JSON object for the key `patient`</caption>\njSet('patient', { name: 'victor', ihs_number: 12345  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 244,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 10,
    "level": 0
  },
  {
    "id": "mGet",
    "longname": "mGet",
    "name": "mGet",
    "kind": "function",
    "scope": "global",
    "description": "Get the values at specified paths in JSON documents stored at multiple keys.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "The keys at which the JSON documents are stored.",
        "name": "keys"
      }
    ],
    "examples": [
      "<caption>Get JSON document values of the patient and doctor keys</caption>\nmGet([\"patient\", \"doctor\"]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 147,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "RedisState",
    "longname": "RedisState",
    "name": "RedisState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the result returned from Redis",
        "name": "data"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "order": 1
  },
  {
    "id": "scan",
    "longname": "scan",
    "name": "scan",
    "kind": "function",
    "scope": "global",
    "description": "Returns all keys which match the provided pattern.\nscan iterates the whole database to find the matching keys",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A glob-style pattern",
        "name": "pattern"
      },
      {
        "type": {
          "names": [
            "ScanOptions"
          ]
        },
        "description": "Scan options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Scan for matching keys</caption>\nscan('*:20240524T172736Z*');",
      "<caption>Scan for keys and fetch the string values inside</caption>\nscan('*:20240524T172736Z*');\neach($.data, get($.data).then((state) => {\n   state.results ??= [];\n   state.results.push(state.data)\n   return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 276,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      },
      {
        "name": "data",
        "description": "an array of keys which match the pattern",
        "type": null
      }
    ],
    "order": 11,
    "level": 0
  },
  {
    "id": "ScanOptions",
    "longname": "ScanOptions",
    "name": "ScanOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the scan function",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream).",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "description": "A hint to the server about how many elements to return in the call (default is 10).",
        "name": "count"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 46,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "set",
    "longname": "set",
    "name": "set",
    "kind": "function",
    "scope": "global",
    "description": "Set the string value of a key.\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value to set",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set the \"patient\" key to value \"mtuchi\"</caption>\nset(\"patient\", \"mtuchi\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 191,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"redis","adaptor":"@openfn/language-redis","version":"1.2.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(key)</a></dt>\\n<dt>\\n    <a href=\\\"#hget\\\">hget(key, field)</a></dt>\\n<dt>\\n    <a href=\\\"#hgetall\\\">hGetAll(key)</a></dt>\\n<dt>\\n    <a href=\\\"#hset\\\">hset(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#jget\\\">jGet(key)</a></dt>\\n<dt>\\n    <a href=\\\"#jset\\\">jSet(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#mget\\\">mGet(keys)</a></dt>\\n<dt>\\n    <a href=\\\"#scan\\\">scan(pattern, options)</a></dt>\\n<dt>\\n    <a href=\\\"#set\\\">set(key, value)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(key) ⇒ Operation</code></p>\\n\\nGet the string value of a key.\\nIf the key does not exist, null is returned.\\nAn error is thrown if the value stored at key is not a string, because `get()` only handles string values.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the value of the patient key\\n```js\\nget(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### hget\\n\\n<p><code>hget(key, field) ⇒ Operation</code></p>\\n\\nGet the value associated with a specific field in a hash stored at a specified key.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| field | <code>string</code> | Field |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the value of the name field under the patient key\\n```js\\nhget(\\\"patient\\\", \\\"name\\\");\\n```\\n\\n* * *\\n\\n### hGetAll\\n\\n<p><code>hGetAll(key) ⇒ Operation</code></p>\\n\\nGet all fields and values of a hash, as an object, for a specified key.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The hash as an object |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the hash obejct at the noderedis:animals:1 key\\n```js\\nhGetAll(\\\"noderedis:animals:1\\\");\\n```\\n\\n* * *\\n\\n### hset\\n\\n<p><code>hset(key, value) ⇒ Operation</code></p>\\n\\nSets the specified fields to their respective values in the hash stored at key.\\nThis function overwrites the values of specified fields that exist in the hash.\\nIf key doesn't exist, a new key holding a hash is created.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| value | <code>object</code> | The values to set |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set a field and value for the `patient` key\\n```js\\nhset('patient', { name: 'mtuchi' });\\n```\\n**Example:** Set multiple field values for the `patient` key\\n```js\\nhset('patient', { name: 'victor', ihs_number: 12345  });\\n```\\n\\n* * *\\n\\n### jGet\\n\\n<p><code>jGet(key) ⇒ Operation</code></p>\\n\\nGet the value at a specified path in a JSON document stored in a key\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The key at which the JSON document is stored. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get JSON document value of the patient key\\n```js\\njGet(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### jSet\\n\\n<p><code>jSet(key, value) ⇒ Operation</code></p>\\n\\nCreates a JSON object at the specified key. If the key already exists, the\\nexisting value will be replaced by the new value.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The key to modify. |\\n| value | <code>string</code> \\\\| <code>object</code> | The JSON object or string value to set. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set a JSON object for the key `patient`\\n```js\\njSet('patient', { name: 'victor', ihs_number: 12345  });\\n```\\n\\n* * *\\n\\n### mGet\\n\\n<p><code>mGet(keys) ⇒ Operation</code></p>\\n\\nGet the values at specified paths in JSON documents stored at multiple keys.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| keys | <code>Array.&lt;string&gt;</code> | The keys at which the JSON documents are stored. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get JSON document values of the patient and doctor keys\\n```js\\nmGet([\\\"patient\\\", \\\"doctor\\\"]);\\n```\\n\\n* * *\\n\\n### scan\\n\\n<p><code>scan(pattern, options) ⇒ Operation</code></p>\\n\\nReturns all keys which match the provided pattern.\\nscan iterates the whole database to find the matching keys\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| pattern | <code>string</code> | A glob-style pattern |\\n| options | [<code>ScanOptions</code>](#scanoptions) | Scan options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | an array of keys which match the pattern |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Scan for matching keys\\n```js\\nscan('*:20240524T172736Z*');\\n```\\n**Example:** Scan for keys and fetch the string values inside\\n```js\\nscan('*:20240524T172736Z*');\\neach($.data, get($.data).then((state) => {\\n   state.results ??= [];\\n   state.results.push(state.data)\\n   return state;\\n})\\n```\\n\\n* * *\\n\\n### set\\n\\n<p><code>set(key, value) ⇒ Operation</code></p>\\n\\nSet the string value of a key.\\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| value | <code>string</code> | The value to set |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set the \\\"patient\\\" key to value \\\"mtuchi\\\"\\n```js\\nset(\\\"patient\\\", \\\"mtuchi\\\");\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### ScanOptions\\n\\nOptions provided to the scan function\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream). |\\n| count | <code>integer</code> | A hint to the server about how many elements to return in the call (default is 10). |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-redis <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the redis\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/redis-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/redis-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `hset` function\\n\\n```js\\nhset('patient', { name: 'Bukayo' });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-redis\\n\\n## 1.2.4\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- c1e3221: - Add `mGet()` function\\n  - Remove console.log in `hget()`\\n  - Add logging to `scan()`\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 2b8ec34: - Update host type configuration-schema\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- Add `jGet()` function\\n- Add `jSet()` function\\n- `scan()` now iterates the whole database\\n  - Removed `cursor` option from `scan`\\n  - Removed default value for `type` option\\n  - Mapped `json` data type to the redis internal type\\n\\n## 1.0.0\\n\\nFirst release. Designed as a low-level wrapper around npm redis client.\\n\\n- get(key)\\n- hget(key, field)\\n- hGetAll(key)\\n- hset(key, value)\\n- scan(pattern,options)\\n- set(key, field)\\n\"","functions":["execute","get","hGetAll","hget","hset","jGet","jSet","mGet","scan","set"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","minLength":1,"description":"Redis server hostname","format":"uri","examples":["redis.example.com"]},"database":{"title":"Database Number","type":"integer","description":"Redis database number. New connections always use the database 0.","examples":[0]},"username":{"title":"Username","type":"string","description":"Redis Access Control username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Redis Access Control password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"port":{"title":"Port","type":"string","description":"Redis server port","writeOnly":true,"default":"6379","examples":["16652"]}},"type":"object","additionalProperties":true,"required":["host","password","username"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"resourcemap","adaptor":"@openfn/language-resourcemap","version":"0.4.7","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language ResourceMap\\n\\nLanguage Pack for building expressions and operations for working with the\\n[resourcemap API](https://github.com/instedd/resourcemap/wiki/REST_API).\\n\\n## Documentation\\n\\nWe are working towards this to start:\\nhttps://github.com/instedd/resourcemap/wiki/REST_API#create-site\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/resourcemap-configuration-schema/)\\ndefinition.\\n\\n## Expressions\\n\\n## `submitSite(collectionId, fields)`\\n\\n```js\\nsubmitSite(\\n  303,\\n  fields(\\n    field('name', dataValue('sampleText')),\\n    field('lat', 48.86),\\n    field('lon', 2.35),\\n    field('properties', function (state) {\\n      return {\\n        Comment: state.data.sampleText,\\n        phone: '85512345678',\\n      };\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-resourcemap\\n\\n## 0.4.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 6afba70: Fix submitSite\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 664dc7f: migrate resourcemap\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","default":"http://some-site-of-yours.com:8080","description":"ResourceMap base URL","format":"uri","minLength":1,"examples":["http://some-site-of-yours.com:8080"]},"username":{"title":"Username","type":"string","description":"Your ResourceMap username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your ResourceMap password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["baseUrl"]}},
[
  {
    "id": "bulk",
    "longname": "bulk",
    "name": "bulk",
    "kind": "function",
    "scope": "global",
    "description": "Create and execute a bulk job.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The bulk operation to be performed.Eg \"insert\" | \"update\" | \"upsert\"",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options passed to the bulk api.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 240000,
        "description": "Polling timeout in milliseconds.",
        "name": "options.pollTimeout"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 6000,
        "description": "Polling interval in milliseconds.",
        "name": "options.pollInterval"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "External id field.",
        "name": "options.extIdField"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Fail the operation on error.",
        "name": "options.failOnError"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "an array of records, or a function which returns an array.",
        "name": "records"
      }
    ],
    "examples": [
      "<caption>Bulk insert</caption>\nbulk(\n  \"Patient__c\",\n  \"insert\",\n  { failOnError: true },\n  (state) => state.someArray.map((x) => ({ Age__c: x.age, Name: x.name }))\n);",
      "<caption>Bulk upsert</caption>\nbulk(\n  \"vera__Beneficiary__c\",\n  \"upsert\",\n  { extIdField: \"vera__Result_UID__c\" },\n  [\n    {\n      vera__Reporting_Period__c: 2023,\n      vera__Geographic_Area__c: \"Uganda\",\n      \"vera__Indicator__r.vera__ExtId__c\": 1001,\n      vera__Result_UID__c: \"1001_2023_Uganda\",\n    },\n  ]\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 401,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "bulkQuery",
    "longname": "bulkQuery",
    "name": "bulkQuery",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SOQL Bulk Query.\nThis function uses bulk query to efficiently query large data sets and reduce the number of API requests.\n`bulkQuery()` uses {@link https://sforce.co/4azgczz Bulk API v.2.0 Query} which is available in API version 47.0 and later.\nThis API is subject to {@link https://sforce.co/4b6kn6z rate limits}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A query string.",
        "name": "qs"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options passed to the bulk api.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 90000,
        "description": "Polling timeout in milliseconds.",
        "name": "options.pollTimeout"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 3000,
        "description": "Polling interval in milliseconds.",
        "name": "options.pollInterval"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A callback to execute once the record is retrieved",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>The results will be available on `state.data`</caption>\nbulkQuery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);",
      "bulkQuery(\n  (state) =>\n    `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`,\n  { pollTimeout: 10000, pollInterval: 6000 }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 318,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a new sObject record(s).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Field attributes for the new record.",
        "name": "attrs"
      }
    ],
    "examples": [
      "<caption> Single record creation</caption>\ncreate(\"Account\", { Name: \"My Account #1\" });",
      "<caption> Multiple records creation</caption>\ncreate(\"Account\",[{ Name: \"My Account #1\" }, { Name: \"My Account #2\" }]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 557,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "createIf",
    "longname": "createIf",
    "name": "createIf",
    "kind": "function",
    "scope": "global",
    "description": "Create a new sObject if conditions are met.\n\n**The `createIf()` function has been deprecated. Use `fnIf(condition,create())` instead.**",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "a logical statement that will be evaluated.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "object",
            "Array.<object>"
          ]
        },
        "description": "Field attributes for the new object.",
        "name": "attrs"
      }
    ],
    "examples": [
      "createIf(true, 'obj_name', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 605,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "describe",
    "longname": "describe",
    "name": "describe",
    "kind": "function",
    "scope": "global",
    "description": "Prints an sObject metadata and pushes the result to state.references",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      }
    ],
    "examples": [
      "describe('obj_name')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 93,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "describeAll",
    "longname": "describeAll",
    "name": "describeAll",
    "kind": "function",
    "scope": "global",
    "description": "Prints the total number of all available sObjects and pushes the result to `state.references`.",
    "examples": [
      "describeAll()"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 68,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "destroy",
    "longname": "destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "global",
    "description": "Delete records of an object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Array of IDs of records to delete.",
        "name": "attrs"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options for the destroy delete operation.",
        "name": "options"
      }
    ],
    "examples": [
      "destroy('obj_name', [\n '0060n00000JQWHYAA5',\n '0090n00000JQEWHYAA5\n], { failOnError: true })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 514,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Alias for \"create(sObject, attrs)\".",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Field attributes for the new record.",
        "name": "attrs"
      }
    ],
    "examples": [
      "<caption> Single record creation</caption>\ninsert(\"Account\", { Name: \"My Account #1\" });",
      "<caption> Multiple records creation</caption>\ninsert(\"Account\",[{ Name: \"My Account #1\" }, { Name: \"My Account #2\" }]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 585,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "Operation",
    "longname": "Operation",
    "name": "Operation",
    "kind": "typedef",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "name": "state"
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "ignore": true,
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 1
  },
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SOQL query.\nNote that in an event of a query error,\nerror logs will be printed but the operation will not throw the error.\n\nThe Salesforce query API is subject to rate limits, {@link https://sforce.co/3W9zyaQ See for more details}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A query string. Must be less than `4000` characters in WHERE clause",
        "name": "qs"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options passed to the bulk api.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Fetch next records if available.",
        "name": "options.autoFetch"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A callback to execute once the record is retrieved",
        "name": "callback"
      }
    ],
    "examples": [
      "query(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);",
      "<caption>Query more records if next records are available</caption>\nquery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`, { autoFetch: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "global",
    "description": "Get a reference ID by an index.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Position for references array.",
        "name": "position"
      }
    ],
    "examples": [
      "reference(0)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 774,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "relationship",
    "longname": "relationship",
    "name": "relationship",
    "kind": "function",
    "scope": "global",
    "description": "Adds a lookup relation or 'dome insert' to a record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "`__r` relationship field on the record.",
        "name": "relationshipName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Salesforce ExternalID field.",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "resolvable source.",
        "name": "dataSource"
      }
    ],
    "examples": [
      "Data Sourced Value:\n relationship(\"relationship_name__r\", \"externalID on related object\", dataSource(\"path\"))\nFixed Value:\n relationship(\"relationship_name__r\", \"externalID on related object\", \"hello world\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 51,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "retrieve",
    "longname": "retrieve",
    "name": "retrieve",
    "kind": "function",
    "scope": "global",
    "description": "Retrieves a Salesforce sObject(s).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The sObject to retrieve",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the record",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A callback to execute once the record is retrieved",
        "name": "callback"
      }
    ],
    "examples": [
      "retrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 125,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "State",
    "longname": "State",
    "name": "State",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON Data.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Array.<Reference>"
          ]
        },
        "description": "History of all previous operations.",
        "name": "references"
      }
    ],
    "ignore": true,
    "meta": {
      "lineno": 1,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 0
  },
  {
    "id": "toUTF8",
    "longname": "toUTF8",
    "name": "toUTF8",
    "kind": "function",
    "scope": "global",
    "description": "Transliterates unicode characters to their best ASCII representation",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A string with unicode characters",
        "name": "input"
      }
    ],
    "examples": [
      "fn((state) => {\n  const s = toUTF8(\"άνθρωποι\");\n  console.log(s); // anthropoi\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- ASCII representation of input string"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 915,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update an sObject record or records.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "object",
            "Array.<object>"
          ]
        },
        "description": "Field attributes for the new object.",
        "name": "attrs"
      }
    ],
    "examples": [
      "<caption> Single record update</caption>\nupdate(\"Account\", {\n  Id: \"0010500000fxbcuAAA\",\n  Name: \"Updated Account #1\",\n});",
      "<caption> Multiple records update</caption>\nupdate(\"Account\", [\n  { Id: \"0010500000fxbcuAAA\", Name: \"Updated Account #1\" },\n  { Id: \"0010500000fxbcvAAA\", Name: \"Updated Account #2\" },\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 749,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Create a new sObject record, or updates it if it already exists\nExternal ID field name must be specified in second argument.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The external ID of the sObject.",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object",
            "Array.<object>"
          ]
        },
        "description": "Field attributes for the new object.",
        "name": "attrs"
      }
    ],
    "examples": [
      "<caption> Single record upsert </caption>\nupsert(\"UpsertTable__c\", \"ExtId__c\", { Name: \"Record #1\", ExtId__c : 'ID-0000001' });",
      "<caption> Multiple record upsert </caption>\nupsert(\"UpsertTable__c\", \"ExtId__c\", [\n  { Name: \"Record #1\", ExtId__c : 'ID-0000001' },\n  { Name: \"Record #2\", ExtId__c : 'ID-0000002' },\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "customTags": [
      {
        "tag": "magic",
        "value": "sObject - $.children[?(!@.meta.system)].name"
      },
      {
        "tag": "magic",
        "value": "externalId - $.children[?(@.name==\"{{args.sObject}}\")].children[?(@.meta.externalId)].name"
      },
      {
        "tag": "magic",
        "value": "attrs - $.children[?(@.name==\"{{args.sObject}}\")].children[?(!@.meta.externalId)]"
      }
    ],
    "meta": {
      "lineno": 655,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "upsertIf",
    "longname": "upsertIf",
    "name": "upsertIf",
    "kind": "function",
    "scope": "global",
    "description": "Conditionally create a new sObject record, or updates it if it already exists\n\n**The `upsertIf()` function has been deprecated. Use `fnIf(condition,upsert())` instead.**",
    "params": [
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "a logical statement that will be evaluated.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "ID.",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object",
            "Array.<object>"
          ]
        },
        "description": "Field attributes for the new object.",
        "name": "attrs"
      }
    ],
    "examples": [
      "upsertIf(true, 'obj_name', 'ext_id', {\n  attr1: \"foo\",\n  attr2: \"bar\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 695,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "expandReferences",
    "common": true,
    "name": "expandReferences",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "humanProper",
    "common": true,
    "name": "humanProper",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "index",
    "common": true,
    "name": "index",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "join",
    "common": true,
    "name": "join",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "jsonValue",
    "common": true,
    "name": "jsonValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "map",
    "common": true,
    "name": "map",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "referencePath",
    "common": true,
    "name": "referencePath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "source",
    "common": true,
    "name": "source",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"salesforce","adaptor":"@openfn/language-salesforce","version":"4.8.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#bulk\\\">bulk(sObject, operation, options, records)</a></dt>\\n<dt>\\n    <a href=\\\"#bulkquery\\\">bulkQuery(qs, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#create\\\">create(sObject, attrs)</a></dt>\\n<dt>\\n    <a href=\\\"#createif\\\">createIf(logical, sObject, attrs)</a></dt>\\n<dt>\\n    <a href=\\\"#describe\\\">describe(sObject)</a></dt>\\n<dt>\\n    <a href=\\\"#describeall\\\">describeAll()</a></dt>\\n<dt>\\n    <a href=\\\"#destroy\\\">destroy(sObject, attrs, options)</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(sObject, attrs)</a></dt>\\n<dt>\\n    <a href=\\\"#query\\\">query(qs, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#reference\\\">reference(position)</a></dt>\\n<dt>\\n    <a href=\\\"#relationship\\\">relationship(relationshipName, externalId, dataSource)</a></dt>\\n<dt>\\n    <a href=\\\"#retrieve\\\">retrieve(sObject, id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#toutf8\\\">toUTF8(input)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(sObject, attrs)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(sObject, externalId, attrs)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertif\\\">upsertIf(logical, sObject, externalId, attrs)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#expandreferences\\\">expandReferences()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#humanproper\\\">humanProper()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#index\\\">index()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#join\\\">join()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#jsonvalue\\\">jsonValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#map\\\">map()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#referencepath\\\">referencePath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#source\\\">source()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n## Functions\\n### bulk\\n\\n<p><code>bulk(sObject, operation, options, records) ⇒ Operation</code></p>\\n\\nCreate and execute a bulk job.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| sObject | <code>string</code> |  | API name of the sObject. |\\n| operation | <code>string</code> |  | The bulk operation to be performed.Eg \\\"insert\\\" | \\\"update\\\" | \\\"upsert\\\" |\\n| options | <code>object</code> |  | Options passed to the bulk api. |\\n| [options.pollTimeout] | <code>integer</code> | <code>240000</code> | Polling timeout in milliseconds. |\\n| [options.pollInterval] | <code>integer</code> | <code>6000</code> | Polling interval in milliseconds. |\\n| [options.extIdField] | <code>string</code> |  | External id field. |\\n| [options.failOnError] | <code>boolean</code> | <code>false</code> | Fail the operation on error. |\\n| records | <code>array</code> |  | an array of records, or a function which returns an array. |\\n\\n**Example:** Bulk insert\\n```js\\nbulk(\\n  \\\"Patient__c\\\",\\n  \\\"insert\\\",\\n  { failOnError: true },\\n  (state) => state.someArray.map((x) => ({ Age__c: x.age, Name: x.name }))\\n);\\n```\\n**Example:** Bulk upsert\\n```js\\nbulk(\\n  \\\"vera__Beneficiary__c\\\",\\n  \\\"upsert\\\",\\n  { extIdField: \\\"vera__Result_UID__c\\\" },\\n  [\\n    {\\n      vera__Reporting_Period__c: 2023,\\n      vera__Geographic_Area__c: \\\"Uganda\\\",\\n      \\\"vera__Indicator__r.vera__ExtId__c\\\": 1001,\\n      vera__Result_UID__c: \\\"1001_2023_Uganda\\\",\\n    },\\n  ]\\n);\\n```\\n\\n* * *\\n\\n### bulkQuery\\n\\n<p><code>bulkQuery(qs, options, callback) ⇒ Operation</code></p>\\n\\nExecute an SOQL Bulk Query.\\nThis function uses bulk query to efficiently query large data sets and reduce the number of API requests.\\n`bulkQuery()` uses [Bulk API v.2.0 Query](https://sforce.co/4azgczz) which is available in API version 47.0 and later.\\nThis API is subject to [rate limits](https://sforce.co/4b6kn6z).\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| qs | <code>string</code> |  | A query string. |\\n| options | <code>object</code> |  | Options passed to the bulk api. |\\n| [options.pollTimeout] | <code>integer</code> | <code>90000</code> | Polling timeout in milliseconds. |\\n| [options.pollInterval] | <code>integer</code> | <code>3000</code> | Polling interval in milliseconds. |\\n| callback | <code>function</code> |  | A callback to execute once the record is retrieved |\\n\\n**Example:** The results will be available on `state.data`\\n```js\\nbulkQuery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);\\n```\\n**Example**\\n```js\\nbulkQuery(\\n  (state) =>\\n    `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`,\\n  { pollTimeout: 10000, pollInterval: 6000 }\\n);\\n```\\n\\n* * *\\n\\n### create\\n\\n<p><code>create(sObject, attrs) ⇒ Operation</code></p>\\n\\nCreate a new sObject record(s).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| attrs | <code>object</code> | Field attributes for the new record. |\\n\\n**Example:**  Single record creation\\n```js\\ncreate(\\\"Account\\\", { Name: \\\"My Account #1\\\" });\\n```\\n**Example:**  Multiple records creation\\n```js\\ncreate(\\\"Account\\\",[{ Name: \\\"My Account #1\\\" }, { Name: \\\"My Account #2\\\" }]);\\n```\\n\\n* * *\\n\\n### createIf\\n\\n<p><code>createIf(logical, sObject, attrs) ⇒ Operation</code></p>\\n\\nCreate a new sObject if conditions are met.\\n\\n**The `createIf()` function has been deprecated. Use `fnIf(condition,create())` instead.**\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| attrs | <code>object</code> \\\\| <code>Array.&lt;object&gt;</code> | Field attributes for the new object. |\\n\\n**Example**\\n```js\\ncreateIf(true, 'obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n\\n* * *\\n\\n### describe\\n\\n<p><code>describe(sObject) ⇒ Operation</code></p>\\n\\nPrints an sObject metadata and pushes the result to state.references\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n\\n**Example**\\n```js\\ndescribe('obj_name')\\n```\\n\\n* * *\\n\\n### describeAll\\n\\n<p><code>describeAll() ⇒ Operation</code></p>\\n\\nPrints the total number of all available sObjects and pushes the result to `state.references`.\\n\\n**Example**\\n```js\\ndescribeAll()\\n```\\n\\n* * *\\n\\n### destroy\\n\\n<p><code>destroy(sObject, attrs, options) ⇒ Operation</code></p>\\n\\nDelete records of an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| attrs | <code>object</code> | Array of IDs of records to delete. |\\n| options | <code>object</code> | Options for the destroy delete operation. |\\n\\n**Example**\\n```js\\ndestroy('obj_name', [\\n '0060n00000JQWHYAA5',\\n '0090n00000JQEWHYAA5\\n], { failOnError: true })\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(sObject, attrs) ⇒ Operation</code></p>\\n\\nAlias for \\\"create(sObject, attrs)\\\".\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| attrs | <code>object</code> | Field attributes for the new record. |\\n\\n**Example:**  Single record creation\\n```js\\ninsert(\\\"Account\\\", { Name: \\\"My Account #1\\\" });\\n```\\n**Example:**  Multiple records creation\\n```js\\ninsert(\\\"Account\\\",[{ Name: \\\"My Account #1\\\" }, { Name: \\\"My Account #2\\\" }]);\\n```\\n\\n* * *\\n\\n### query\\n\\n<p><code>query(qs, options, callback) ⇒ Operation</code></p>\\n\\nExecute an SOQL query.\\nNote that in an event of a query error,\\nerror logs will be printed but the operation will not throw the error.\\n\\nThe Salesforce query API is subject to rate limits, [See for more details](https://sforce.co/3W9zyaQ).\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| qs | <code>string</code> |  | A query string. Must be less than `4000` characters in WHERE clause |\\n| options | <code>object</code> |  | Options passed to the bulk api. |\\n| [options.autoFetch] | <code>boolean</code> | <code>false</code> | Fetch next records if available. |\\n| callback | <code>function</code> |  | A callback to execute once the record is retrieved |\\n\\n**Example**\\n```js\\nquery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);\\n```\\n**Example:** Query more records if next records are available\\n```js\\nquery(state=> `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`, { autoFetch: true });\\n```\\n\\n* * *\\n\\n### reference\\n\\n<p><code>reference(position) ⇒ State</code></p>\\n\\nGet a reference ID by an index.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| position | <code>number</code> | Position for references array. |\\n\\n**Example**\\n```js\\nreference(0)\\n```\\n\\n* * *\\n\\n### relationship\\n\\n<p><code>relationship(relationshipName, externalId, dataSource) ⇒ object</code></p>\\n\\nAdds a lookup relation or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalId | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example**\\n```js\\nData Sourced Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\nFixed Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n\\n* * *\\n\\n### retrieve\\n\\n<p><code>retrieve(sObject, id, callback) ⇒ Operation</code></p>\\n\\nRetrieves a Salesforce sObject(s).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | The sObject to retrieve |\\n| id | <code>string</code> | The id of the record |\\n| callback | <code>function</code> | A callback to execute once the record is retrieved |\\n\\n**Example**\\n```js\\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');\\n```\\n\\n* * *\\n\\n### toUTF8\\n\\n<p><code>toUTF8(input) ⇒ string</code></p>\\n\\nTransliterates unicode characters to their best ASCII representation\\n\\n**Returns**: <code>string</code> - - ASCII representation of input string  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input | <code>string</code> | A string with unicode characters |\\n\\n**Example**\\n```js\\nfn((state) => {\\n  const s = toUTF8(\\\"άνθρωποι\\\");\\n  console.log(s); // anthropoi\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(sObject, attrs) ⇒ Operation</code></p>\\n\\nUpdate an sObject record or records.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| attrs | <code>object</code> \\\\| <code>Array.&lt;object&gt;</code> | Field attributes for the new object. |\\n\\n**Example:**  Single record update\\n```js\\nupdate(\\\"Account\\\", {\\n  Id: \\\"0010500000fxbcuAAA\\\",\\n  Name: \\\"Updated Account #1\\\",\\n});\\n```\\n**Example:**  Multiple records update\\n```js\\nupdate(\\\"Account\\\", [\\n  { Id: \\\"0010500000fxbcuAAA\\\", Name: \\\"Updated Account #1\\\" },\\n  { Id: \\\"0010500000fxbcvAAA\\\", Name: \\\"Updated Account #2\\\" },\\n]);\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(sObject, externalId, attrs) ⇒ Operation</code></p>\\n\\nCreate a new sObject record, or updates it if it already exists\\nExternal ID field name must be specified in second argument.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| externalId | <code>string</code> | The external ID of the sObject. |\\n| attrs | <code>object</code> \\\\| <code>Array.&lt;object&gt;</code> | Field attributes for the new object. |\\n\\n**Example:**  Single record upsert \\n```js\\nupsert(\\\"UpsertTable__c\\\", \\\"ExtId__c\\\", { Name: \\\"Record #1\\\", ExtId__c : 'ID-0000001' });\\n```\\n**Example:**  Multiple record upsert \\n```js\\nupsert(\\\"UpsertTable__c\\\", \\\"ExtId__c\\\", [\\n  { Name: \\\"Record #1\\\", ExtId__c : 'ID-0000001' },\\n  { Name: \\\"Record #2\\\", ExtId__c : 'ID-0000002' },\\n]);\\n```\\n\\n* * *\\n\\n### upsertIf\\n\\n<p><code>upsertIf(logical, sObject, externalId, attrs) ⇒ Operation</code></p>\\n\\nConditionally create a new sObject record, or updates it if it already exists\\n\\n**The `upsertIf()` function has been deprecated. Use `fnIf(condition,upsert())` instead.**\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>string</code> | API name of the sObject. |\\n| externalId | <code>string</code> | ID. |\\n| attrs | <code>object</code> \\\\| <code>Array.&lt;object&gt;</code> | Field attributes for the new object. |\\n\\n**Example**\\n```js\\nupsertIf(true, 'obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Salesforce\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nSalesforce API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/salesforce-docs)\\nfor full technical documentation.\\n\\n## Release notes and deprecated CHANGELOG.md\\n\\nSee [releases](https://docs.openfn.org/adaptors/packages/salesforce-changelog)\\nfor all changes.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/saleforce-configuration-schema/)\\ndefinition.\\n\\n## Intent\\n\\n---\\n\\nAllow communication with Salesforce using a set of Lisp compatible expressions.\\n\\nUsing simple functions we can create a simplified API, simple enough to generate\\ncode from data.\\n\\n## Expressions\\n\\n---\\n\\nExpressions are a simplified set of function calls. Outlining the operations\\nneeded to be performed.\\n\\nAn uncompiled expression has no knowledge of the internals of the adaptor,\\ncredentials or runtime environment.\\n\\nIt's the responsibility of the build process to provide a wrapper that will\\ninject the functions in.\\n\\nFor example:\\n\\n```javascript\\ndescribe('vera__Test_Event__c'),\\n  create('vera__Test_Event__c', {\\n    vera__Test_Event_Name_Unique__c: 'hello from jsforce',\\n  }),\\n  create('vera__Boat__c', {\\n    Name: 'Catatafish redux!',\\n    vera__Test_Event__c: reference(0),\\n  });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\\n## Other\\n\\nCreate SOAP session\\n\\n```sh\\ncurl https://test.salesforce.com/services/Soap/u/47.0 -H \\\"Content-Type: text/xml; charset=UTF-8\\\" -H \\\"SOAPAction: login\\\" -d @tmp/login.txt | xmllint --format -\\n```\\n\\nClose jobs\\n\\n```sh\\ncurl\\nhttps://openfn.my.salesforce.com/services/async/47.0/job/some_id -H 'X-SFDC-Session: abc123sessionID456xyz' -H \\\"Content-Type: application/xml; charset=UTF-8\\\" -d @tmp/close_job.txt | xmllint --format -\\n```\\n\"","changelog":"\"# @openfn/language-salesforce\\n\\n## 4.8.6\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 4.8.5\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 4.8.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 4.8.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 4.8.2\\n\\n### Patch Changes\\n\\n- ce08e7f: Fix `autoFetch` behaviour in `query()` function. All records are\\n  merged into a single `records` array, and pushed to `[0]` in\\n  `state.references`.\\n\\n  For jobs which use `references[0][0]` to read query results, this is a\\n  breaking fix.\\n\\n## 4.8.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 4.8.0\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n- b5e0c266: ### Added\\n\\n  - `insert()` function as an alias for `create()`.\\n\\n  ### Improved\\n\\n  - JSDocs for `query`, `bulk`, `describe`, `create`, and `upsert`.\\n\\n  ### Deprecated\\n\\n  - `upsertIf()` and `createIf()` functions are now deprecated. Use\\n    `fnIf(condition, upsert())` instead.\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.7.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.6.11\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.6.10\\n\\n### Patch Changes\\n\\n- 90f44c62: Include the Salesforce query response in the result, even if no\\n  records are found.\\n\\n## 4.6.9\\n\\n### Patch Changes\\n\\n- Fix any-ascii load and add more tests\\n\\n## 4.6.8\\n\\n### Patch Changes\\n\\n- Properly ensure any-ascii is loaded before executing, resolving a critical\\n  race that we are losing in production\\n\\n## 4.6.7\\n\\n### Patch Changes\\n\\n- 332225ec: - Set default API version to `47.0`\\n  - In `bulkQuery` throw errors if API version is less than `47.0`\\n  - Update `bulkQuery` jsdocs with a link to `Bulk API 2.0 Query`\\n\\n## 4.6.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.6.5\\n\\n### Patch Changes\\n\\n- b1c915b0: Add documentation about Salesforce API limits to query and bulkQuery\\n\\n## 4.6.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.6.3\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.6.2\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.6.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.6.0\\n\\n### Minor Changes\\n\\n- cfe1ccb: Add options and callback params in query function\\n\\n## 4.5.2\\n\\n### Patch Changes\\n\\n- 2006e88: fix an issue with bulk jobs not closing\\n\\n## 4.5.1\\n\\n### Patch Changes\\n\\n- fa3e28fe: refactor bulk() to use newExpandReferences\\n\\n## 4.5.0\\n\\n### Minor Changes\\n\\n- 0d2b478: Remove `instance_url` under `other_params` and put it at the root\\n  level of the configuration schema\\n\\n## 4.4.0\\n\\nDeprecated because it does not work with Lightning\\n\\n### Minor Changes\\n\\n- 632b585: Add `OAuth` support\\n- a12f434: Add `request(path, opts, cb)` function\\n\\n## 4.3.1\\n\\n### Patch Changes\\n\\n- 1131c34: Remove regex pattern for validation and changed minLength to 1\\n\\n## 4.3.0\\n\\n### Minor Changes\\n\\n- 1d5b62f: Add `toUTF8` function\\n\\n## 4.2.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- 07debe9: Update bulkQuery to use bulkv2\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- fc58f1c: add options in bulkQuery\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 1e3a083: add bulkQuery function\\n\\n## 4.0.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.0.6\\n\\n### Patch Changes\\n\\n- aceedd2: update jsforce and remove unused packages\\n\\n## 4.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.0.7\\n\\n### Patch Changes\\n\\n- 7cc8efc: remove FakeAdaptor references\\n\\n## 3.0.6\\n\\n### Patch Changes\\n\\n- 705caab: Remove tools as devdependencies\\n\\n## 3.0.5\\n\\n### Patch Changes\\n\\n- 929bca6: Use metadata helper function from common\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.0.4\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.0.3\\n\\n### Patch Changes\\n\\n- 06aced8: Fix dependencies\\n\\n## 3.0.2\\n\\n### Patch Changes\\n\\n- aed7e0b: fix required field in configuration schema\\n\\n## 3.0.1\\n\\n### Patch Changes\\n\\n- c09b821: Add @magic annotations\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 190f667: Remove curry from salesforce\\n\\n## 2.12.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.12.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.12.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 2.12.0\\n\\n### Minor Changes\\n\\n- 5c883c6: Allow expansion for describe(), add describeAll()\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.11.1\\n\\n### Patch Changes\\n\\n- e7bf865: chore(deps): update dependency sinon to v14\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.11.0\\n\\n### Minor Changes\\n\\n- edff578: Migrate salesforce\\n\"","functions":["bulk","bulkQuery","create","createIf","describe","describeAll","destroy","insert","query","reference","relationship","retrieve","toUTF8","update","upsert","upsertIf"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"The Salesforce instance login URL","format":"uri","minLength":1,"examples":["https://somesalesforcelogin.url"]},"username":{"title":"Username","type":"string","description":"The username to log in the Salesforce instance","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"The password to log in the Salesforce instance","writeOnly":true,"minLength":1,"examples":["@super(!)SecretPass"]},"securityToken":{"title":"Security Token","type":"string","description":"The security token to access the Salesforce instance","minLength":1,"examples":["salesforcesecuritytoken"]},"apiVersion":{"title":"API Version","type":"string","placeholder":"52.0","description":"Salesforce API Version","minLength":1,"examples":["59.0"]}},"type":"object","additionalProperties":true,"required":["loginUrl","username","password"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to Satusehat. Use this to fetch resources directly from the Satusehat REST API.\nYou can pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a resource by Id. Equivalent to GET `<baseUrl>/Organization/abcde`</caption>\nget(\"Organization/abcde\")",
      "<caption>Get resources with a query. Equivalent to GET `<baseUrl>/Patient?identifier=https://fhir.kemkes.go.id/id/nik|9271060312000001`</caption>\nget('/Patient', {\n  identifier:'https://fhir.kemkes.go.id/id/nik|9271060312000001'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 60,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "global",
    "description": "Make a PATCH request to Satusehat. Use this to directly update resources on Satusehat REST API.\nYou can pass Satusehat an array of objects which contains `op`, `path`, and `value` as the body. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource and exact item to be partially updated",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "An array of objects which defines data that will be used to partially update a given instance of resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update a property of a resource. Equivalent to PATCH `<baseurl>/Organization/abcde`</caption>\npatch('Organization/abcde', [\n{\n op: 'replace',\n path: '/language', // Name of property/element of resource to be replaced\n value: 'id', // Value to be replaced\n},\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 177,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to Satusehat. Use this to send resources directly to Satusehat REST API.\nYou can pass Satusehat body data as a JSON FHIR object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON FHIR object to create a resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create an encounter resource. Equivalent to POST `<baseUrl>/Encounter`</caption>\npost('Encounter', { resourceType: 'Encounter', ...state.data });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request to Satusehat. Use this to directly update resources on Satusehat REST API.\nYou can pass Satusehat body data as a JSON FHIR object. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource and exact item to be updated",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON FHIR object to update the resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update a resource. Equivalent to PUT `<baseurl>/Organization/abcde`</caption>\nput('Organization/abcde', { resourceType: 'Organization', active: false });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 133,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "SatusehatHttpState",
    "longname": "SatusehatHttpState",
    "name": "SatusehatHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Satusehat server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "order": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"satusehat","adaptor":"@openfn/language-satusehat","version":"2.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#patch\\\">patch(path, data, params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, data, params, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a GET request to Satusehat. Use this to fetch resources directly from the Satusehat REST API.\\nYou can pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Optional object of query parameters to include in the request |\\n| callback | <code>function</code> | An optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource by Id. Equivalent to GET `<baseUrl>/Organization/abcde`\\n```js\\nget(\\\"Organization/abcde\\\")\\n```\\n**Example:** Get resources with a query. Equivalent to GET `<baseUrl>/Patient?identifier=https://fhir.kemkes.go.id/id/nik|9271060312000001`\\n```js\\nget('/Patient', {\\n  identifier:'https://fhir.kemkes.go.id/id/nik|9271060312000001'\\n});\\n```\\n\\n* * *\\n\\n### patch\\n\\n<p><code>patch(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a PATCH request to Satusehat. Use this to directly update resources on Satusehat REST API.\\nYou can pass Satusehat an array of objects which contains `op`, `path`, and `value` as the body. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource and exact item to be partially updated |\\n| data | <code>Array</code> | An array of objects which defines data that will be used to partially update a given instance of resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a property of a resource. Equivalent to PATCH `<baseurl>/Organization/abcde`\\n```js\\npatch('Organization/abcde', [\\n{\\n op: 'replace',\\n path: '/language', // Name of property/element of resource to be replaced\\n value: 'id', // Value to be replaced\\n},\\n]);\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to Satusehat. Use this to send resources directly to Satusehat REST API.\\nYou can pass Satusehat body data as a JSON FHIR object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | JSON FHIR object to create a resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Create an encounter resource. Equivalent to POST `<baseUrl>/Encounter`\\n```js\\npost('Encounter', { resourceType: 'Encounter', ...state.data });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a PUT request to Satusehat. Use this to directly update resources on Satusehat REST API.\\nYou can pass Satusehat body data as a JSON FHIR object. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource and exact item to be updated |\\n| data | <code>object</code> | JSON FHIR object to update the resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a resource. Equivalent to PUT `<baseurl>/Organization/abcde`\\n```js\\nput('Organization/abcde', { resourceType: 'Organization', active: false });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-satusehat <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the satusehat API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/satusehat-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/satusehat-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('Organization', {  \\\"resourceType\\\": \\\"Organization\\\" });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-satusehat\\n\\n## 2.0.6\\n\\n### Patch Changes\\n\\n- 7c528d3: Update docs with examples\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- 218a582: Added extra logging around errors\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.0\\n\\nInitial release.\\n\"","functions":["get","patch","post","put"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Satusehat base URL","format":"uri","minLength":1,"examples":["https://www.satusehat.com"]},"clientId":{"title":"Client Id","type":"string","minLength":1,"description":"Your Satusehat client id","examples":["the-long-uuid-provided-by-satusehat-for-your-organization"]},"clientSecret":{"title":"Client Secret","type":"string","description":"Client Secret","minLength":1,"examples":["the-long-secret-key-provided-by-satusehat"]},"access_token":{"title":"Access Token","type":"string","description":"Your Satusehat access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"type":"object","additionalProperties":true,"required":["baseUrl","clientId","clientSecret"]}},
[
  {
    "id": "getCSV",
    "longname": "getCSV",
    "name": "getCSV",
    "kind": "function",
    "scope": "global",
    "description": "Get a CSV and return a JSON array of strings for each item separated by the delimiter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. `parsingOptions` Parsing options which can be passed to convert csv to json See more {@link https://github.com/Keyang/node-csvtojson#parameters on csvtojson docs}",
        "name": "parsingOptions"
      }
    ],
    "examples": [
      "getCSV(\n  '/some/path/to_file.csv',\n  {delimiter: \";\", flatKeys: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 106,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getJSON",
    "longname": "getJSON",
    "name": "getJSON",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a json file from an FTP server",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Character encoding for the json",
        "name": "encoding"
      }
    ],
    "examples": [
      "getJSON(\n  '/path/To/File',\n  'utf8',\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "list",
    "longname": "list",
    "name": "list",
    "kind": "function",
    "scope": "global",
    "description": "List files present in a directory",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to remote directory",
        "name": "dirPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "a filter function used to select return entries",
        "name": "filter"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>basic files listing</caption>\nlist('/some/path/')",
      "<caption>list files with filters</caption>\nlist('/some/path/', file=> {\n return /foo.\\.txt/.test(file.name);\n})",
      "<caption>list files with filters and use callback</caption>\nlist(\n  \"/some/path/\",\n  (file) => /foo.\\.txt/.test(file.name),\n  (state) => {\n    const latestFile = state.data.filter(\n      (file) => file.modifyTime <= new Date()\n    );\n    return { ...state, latestFile };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "normalizeCSVarray",
    "longname": "normalizeCSVarray",
    "name": "normalizeCSVarray",
    "kind": "function",
    "scope": "global",
    "description": "Convert JSON array of strings into a normalized object",
    "params": [
      {
        "type": {
          "names": [
            "options"
          ]
        },
        "description": "Options passed to csvtojson parser",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "callback"
          ]
        },
        "description": "Options passed to csvtojson parser",
        "name": "callback"
      }
    ],
    "examples": [
      "normalizeCSVarray({ delimiter: ';', noheader: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 230,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "putCSV",
    "longname": "putCSV",
    "name": "putCSV",
    "kind": "function",
    "scope": "global",
    "description": "Convert JSON to CSV and upload to an FTP server",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Data source for data to copy to the remote server.",
        "name": "localFilePath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the remote file to be created on the server.",
        "name": "remoteFilePath"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options which can be passed to adjust the read and write stream used in sending the data to the remote server",
        "name": "parsingOptions"
      }
    ],
    "examples": [
      "putCSV(\n  '/some/path/to_local_file.csv',\n  '/some/path/to_remove_file.csv',\n  { delimiter: ';', noheader: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 166,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"sftp","adaptor":"@openfn/language-sftp","version":"2.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getcsv\\\">getCSV(filePath, [parsingOptions])</a></dt>\\n<dt>\\n    <a href=\\\"#getjson\\\">getJSON(filePath, encoding)</a></dt>\\n<dt>\\n    <a href=\\\"#list\\\">list(dirPath, filter, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#normalizecsvarray\\\">normalizeCSVarray(options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#putcsv\\\">putCSV(localFilePath, remoteFilePath, parsingOptions)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getCSV\\n\\n<p><code>getCSV(filePath, [parsingOptions]) ⇒ Operation</code></p>\\n\\nGet a CSV and return a JSON array of strings for each item separated by the delimiter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| [parsingOptions] | <code>Object</code> | Optional. `parsingOptions` Parsing options which can be passed to convert csv to json See more [on csvtojson docs](https://github.com/Keyang/node-csvtojson#parameters) |\\n\\n**Example**\\n```js\\ngetCSV(\\n  '/some/path/to_file.csv',\\n  {delimiter: \\\";\\\", flatKeys: true }\\n);\\n```\\n\\n* * *\\n\\n### getJSON\\n\\n<p><code>getJSON(filePath, encoding) ⇒ Operation</code></p>\\n\\nFetch a json file from an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| encoding | <code>string</code> | Character encoding for the json |\\n\\n**Example**\\n```js\\ngetJSON(\\n  '/path/To/File',\\n  'utf8',\\n);\\n```\\n\\n* * *\\n\\n### list\\n\\n<p><code>list(dirPath, filter, [callback]) ⇒ Operation</code></p>\\n\\nList files present in a directory\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | Path to remote directory |\\n| filter | <code>function</code> | a filter function used to select return entries |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** basic files listing\\n```js\\nlist('/some/path/')\\n```\\n**Example:** list files with filters\\n```js\\nlist('/some/path/', file=> {\\n return /foo.\\\\.txt/.test(file.name);\\n})\\n```\\n**Example:** list files with filters and use callback\\n```js\\nlist(\\n  \\\"/some/path/\\\",\\n  (file) => /foo.\\\\.txt/.test(file.name),\\n  (state) => {\\n    const latestFile = state.data.filter(\\n      (file) => file.modifyTime <= new Date()\\n    );\\n    return { ...state, latestFile };\\n  }\\n);\\n```\\n\\n* * *\\n\\n### normalizeCSVarray\\n\\n<p><code>normalizeCSVarray(options, callback) ⇒ Operation</code></p>\\n\\nConvert JSON array of strings into a normalized object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>options</code> | Options passed to csvtojson parser |\\n| callback | <code>callback</code> | Options passed to csvtojson parser |\\n\\n**Example**\\n```js\\nnormalizeCSVarray({ delimiter: ';', noheader: true });\\n```\\n\\n* * *\\n\\n### putCSV\\n\\n<p><code>putCSV(localFilePath, remoteFilePath, parsingOptions) ⇒ Operation</code></p>\\n\\nConvert JSON to CSV and upload to an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| localFilePath | <code>string</code> | Data source for data to copy to the remote server. |\\n| remoteFilePath | <code>string</code> | Path to the remote file to be created on the server. |\\n| parsingOptions | <code>object</code> | Options which can be passed to adjust the read and write stream used in sending the data to the remote server |\\n\\n**Example**\\n```js\\nputCSV(\\n  '/some/path/to_local_file.csv',\\n  '/some/path/to_remove_file.csv',\\n  { delimiter: ';', noheader: true }\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language SFTP\\n\\nLanguage Pack for building expressions and operations to work with SFTP servers.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/sftp-configuration-schema/)\\ndefinition.\\n\\n## List the content of a directory\\n\\n```js\\nalterState(state => {\\n  return list('/path/To/Directory')(state).then(response => {\\n    console.log(`There are ${response.data.length} files.`);\\n    return response;\\n  });\\n});\\n```\\n\\n## sample getCSV expression\\n\\n```js\\ngetCSV('path/to/file.csv', 'utf8', {\\n  quote: 'off',\\n  delimiter: ';',\\n  noheader: true,\\n  filter: {\\n    type: 'startsWith',\\n    key: 'field1',\\n    value: 'JO',\\n  },\\n});\\n```\\n\\nA more complex example that breaks up the CSV file into multiple payloads for\\nquicker processing.\\n\\n```js\\nfn(state => {\\n  return list('/')(state).then(state => {\\n    const targetNames = [\\n      'exportContacts', //example fileName\\n    ];\\n    console.log(`Fetching files: ${targetNames}`);\\n    const files = state.data\\n      .filter(file => file.name.split('.')[1] === 'csv')\\n      .filter(file =>\\n        targetNames.some(targetName =>\\n          file.name.toLowerCase().includes(targetName)\\n        )\\n      );\\n\\n    if (files.length === 0) console.log('No new CSV files found.');\\n    return { ...state, data: {}, files };\\n  });\\n});\\n\\neach(\\n  '$.files[*]',\\n  fn(state => {\\n    const { configuration, data } = state;\\n\\n    return getCSV(`/${data.name}`)(state).then(async state => {\\n      const headers = state.data\\n        .shift()\\n        .split(';')\\n        .map(h => (h = h.replace(/\\\"/g, '')));\\n\\n      function toObject(item) {\\n        const values = item.split(';');\\n\\n        return Object.fromEntries(\\n          headers.map((k, i) => {\\n            return values[i]\\n              ? [k, values[i].replace(/\\\"/g, '')]\\n              : [k, values[i]];\\n          })\\n        );\\n      }\\n\\n      let countInbox = 0;\\n\\n      //to post CSV data as individual Messages to OpenFn Inbox\\n      const postToInbox = async data => {\\n        countInbox++;\\n\\n        console.log(`Sending request ${countInbox} to inbox`);\\n\\n        await new Promise(resolve => setTimeout(resolve, 200));\\n\\n        await http.post({\\n          url: configuration.openfnInboxUrl,\\n          data: data,\\n          maxContentLength: Infinity,\\n          maxBodyLength: Infinity,\\n        })(state);\\n      };\\n\\n      //To split up into multiple, smaller payloads before send to OpenFn Inbox\\n      const chunkSize = 500;\\n\\n      console.log(\\n        state.data.length,\\n        'rows will be sent in',\\n        Math.ceil(state.data.length / chunkSize),\\n        'requests of',\\n        chunkSize,\\n        'rows each.'\\n      );\\n\\n      while (state.data.length > 0) {\\n        console.log('data.length', state.data.length);\\n        await postToInbox({\\n          fileName: data.name,\\n          fileType: data.name.split('-')[0],\\n          uploadDate: new Date(data.modifyTime).toISOString(),\\n          json: state.data.splice(0, chunkSize).map(toObject),\\n        });\\n      }\\n\\n      return { configuration, references: [], data: {} };\\n    });\\n  })\\n);\\n```\\n\\n## sample putCSV expression\\n\\nThis function converts JSON to CSV and post to a server\\n\\n```js\\nputCSV('/some/path/to_file.csv', 'utf8', { delimiter: ';', noheader: true });\\n```\\n\\n### Get JSON from FTP server\\n\\n```js\\ngetJSON('path/to/file.json', 'utf8');\\n```\\n\\n### Custom request to an http endpoint\\n\\nThis adaptor exports `http` from `language-common`. Here, we outline the usage\\nin order to make custom requests to an endpoint. It returns a promise\\n\\n```js\\nalterState(state => {\\n  return http\\n    .post({ url: 'yourURL', data: { name: 'Mamadou' } })(state)\\n    .then(response => {\\n      // do something with response;\\n      return response;\\n    });\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build the docs for this repo, `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-sftp\\n\\n## 2.0.5\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.8\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- a666a63: On error disconnect then throw\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- 771c814: - Properly disconnect on error\\n  - Improve operation logs\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- e52ba66: add `filter` option in `list()` function\\n\\n## 0.8.8\\n\\n### Patch Changes\\n\\n- Updated dependencies [c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.8.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.8.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.8.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 0.8.4\\n\\n### Patch Changes\\n\\n- Updated dependencies [8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.8.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.8.2\\n\\n### Patch Changes\\n\\n- d2c980e: Use `parseCsv` from language-common\\n- c5d3ce1: improve connection handling\\n- Updated dependencies [111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 0.8.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.8.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.7.3\\n\\n### Patch Changes\\n\\n- 432dd0a: fix sftp connection wqautoclose\\n\\n## 0.7.2\\n\\n### Patch Changes\\n\\n- 205b806: remove asObjects key before parsing\\n\\n## 0.7.1\\n\\n### Patch Changes\\n\\n- 827c627: error handling\\n\\n## 0.7.0\\n\\n### Minor Changes\\n\\n- fa58216: Add csvtojson convertion option\\n\\n## 0.6.9\\n\\n### Patch Changes\\n\\n- Updated dependencies [929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.6.8\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.6.7\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.6.6\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.6.5\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 0.6.4\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.6.3\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 4126a62: Fix built bundle\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.6.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 0.6.1\\n\\n### Patch Changes\\n\\n- 28dfbfa: add todo, fix build pack\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- f294a62: Added credential-schema.json for new ui\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 2c04894: added sftp package\\n\"","functions":["getCSV","getJSON","list","normalizeCSVarray","putCSV"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The SFTP server host url or ip address","format":"uri","minLength":1,"examples":["191.173.128.88"]},"port":{"title":"Port","type":"integer","default":21,"description":"The SFTP server port","minLength":1,"examples":[22]},"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["host"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"smpp","adaptor":"@openfn/language-smpp","version":"1.4.7","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language SMPP\\n\\nLanguage Pack for building expressions and operations to make calls to an OpenFn\\nSMPP client API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/smpp-configuration-schema/)\\ndefinition.\\n\\n#### sample send expression\\n\\n```js\\nsend({\\n  text: dataValue('text'),\\n  smsId: dataValue('messageId'),\\n  recipient: dataValue('to'),\\n  sender: dataValue('from'),\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-smpp\\n\\n## 1.4.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.4.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.4.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.4.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 1.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.4.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.4.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.2.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 3aedd05: migrate smpp\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"clientHost":{"title":"Client host","type":"string","description":"Your SMPP client host URL","format":"uri","minLength":1,"examples":["https://some-smpp.com:3000"]},"systemId":{"title":"System ID","type":"string","description":"Your SMPP client name","minLength":1,"examples":["some_smpp_client_name"]},"inboxId":{"title":"Inbox ID","type":"string","description":"Your SMPP client inbox ID","minLength":1,"examples":["1c908151-8273-431c-b1d4-blah"]},"password":{"title":"Password","type":"string","description":"Your SMPP client password","writeOnly":true,"minLength":1,"examples":["@some(!)StrongPassword"]}},"type":"object","additionalProperties":true,"required":["clientHost","systemId","inboxId","password"]}},
[
  {
    "id": "cursor",
    "longname": "cursor",
    "name": "cursor",
    "kind": "function",
    "scope": "global",
    "description": "Sets `state.cursor` to a SurveyCTO timestamp string (`MMM dd, yyy h:mm:ss a`).\nThis supports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\nwhich will be converted into timestamp strings.\nSee the usage guide at {@link https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors}",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the cursor value. Usually an ISO date, natural language date, or page number",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to control the cursor.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor key. Will persist through the whole run.",
        "name": "options.key"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to use if value is falsy",
        "name": "options.defaultValue"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "custom formatter for the final cursor value",
        "name": "options.format"
      }
    ],
    "examples": [
      "<caption>Use a cursor from state if present, or else use the default value</caption>\ncursor('today')\nfetchSubmissions('test', { date: $.cursor });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 169,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 5,
    "newscope": true,
    "level": 0
  },
  {
    "id": "FetchSubmissionOptions",
    "longname": "FetchSubmissionOptions",
    "name": "FetchSubmissionOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to `fetchSubmissions()`",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Fetch only submissions from this timestamp. Acccepts SuvreyCTO date strings, unix and epoch timestamps, and ISO dates. By default, all submissions will be retrieved.",
        "name": "date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "json",
        "description": "Format the submission data type as  `csv` or `json`.",
        "name": "format"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Review status. Can be either, `approved`, `rejected`, `pending` or combine eg `approved|rejected`.",
        "name": "status"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 31,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "fetchSubmissions",
    "longname": "fetchSubmissions",
    "name": "fetchSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Fetch form submissions.\n\nIf a date filter is provided, it will be  converted internally to the surveyCTO `MMM dd, yyy h:mm:ss` format (in UTC time).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Form id",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "FetchSubmissionOptions"
          ]
        },
        "description": "Form submission date, format, status parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Fetch all form submissions</caption>\nfetchSubmissions('test');",
      "<caption> With SurveyCTO date format (UTC)</caption>\nfetchSubmissions('test', { date: 'Apr 18, 2024 6:26:21 AM' });",
      "<caption>Using a rolling cursor </caption>\ncursor((state) => state.cursor, { defaultValue: 'today' });\nfetchSubmissions('test', { date: (state) => state.cursor, format: 'csv' });\ncursor('now');",
      "<caption> Formatting the results to CSV String</caption>\nfetchSubmissions('test', { format: 'csv' });",
      "<caption> With reviewStatus filter</caption>\nfetchSubmissions('test', { status: 'approved|rejected' });",
      "<caption> With a callback function</caption>\nfetchSubmissions(\n  'test',\n  {\n    date: 'Apr 18, 2024 6:26:21 AM',\n  },\n  state => {\n    console.log('Hello from the callback!');\n    return state;\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 74,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a request in SurveyCTO API",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, body and method parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"/anEndpoint\", {\n  method: \"POST\",\n  query: { foo: \"bar\", a: 1 },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 140,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to request()",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object of headers parameters.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "GET",
        "description": "The HTTP method to use.",
        "name": "method"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 116,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"surveycto","adaptor":"@openfn/language-surveycto","version":"2.2.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#cursor\\\">cursor(value, options)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchsubmissions\\\">fetchSubmissions(formId, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(path, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### cursor\\n\\n<p><code>cursor(value, options) ⇒ Operation</code></p>\\n\\nSets `state.cursor` to a SurveyCTO timestamp string (`MMM dd, yyy h:mm:ss a`).\\nThis supports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\\nwhich will be converted into timestamp strings.\\nSee the usage guide at [https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors](https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>any</code> | the cursor value. Usually an ISO date, natural language date, or page number |\\n| options | <code>object</code> | options to control the cursor. |\\n| options.key | <code>string</code> | set the cursor key. Will persist through the whole run. |\\n| options.defaultValue | <code>any</code> | the value to use if value is falsy |\\n| options.format | <code>function</code> | custom formatter for the final cursor value |\\n\\n**Example:** Use a cursor from state if present, or else use the default value\\n```js\\ncursor('today')\\nfetchSubmissions('test', { date: $.cursor });\\n```\\n\\n* * *\\n\\n### fetchSubmissions\\n\\n<p><code>fetchSubmissions(formId, options, callback) ⇒ Operation</code></p>\\n\\nFetch form submissions.\\n\\nIf a date filter is provided, it will be  converted internally to the surveyCTO `MMM dd, yyy h:mm:ss` format (in UTC time).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Form id |\\n| options | [<code>FetchSubmissionOptions</code>](#fetchsubmissionoptions) | Form submission date, format, status parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Fetch all form submissions\\n```js\\nfetchSubmissions('test');\\n```\\n**Example:**  With SurveyCTO date format (UTC)\\n```js\\nfetchSubmissions('test', { date: 'Apr 18, 2024 6:26:21 AM' });\\n```\\n**Example:** Using a rolling cursor \\n```js\\ncursor((state) => state.cursor, { defaultValue: 'today' });\\nfetchSubmissions('test', { date: (state) => state.cursor, format: 'csv' });\\ncursor('now');\\n```\\n**Example:**  Formatting the results to CSV String\\n```js\\nfetchSubmissions('test', { format: 'csv' });\\n```\\n**Example:**  With reviewStatus filter\\n```js\\nfetchSubmissions('test', { status: 'approved|rejected' });\\n```\\n**Example:**  With a callback function\\n```js\\nfetchSubmissions(\\n  'test',\\n  {\\n    date: 'Apr 18, 2024 6:26:21 AM',\\n  },\\n  state => {\\n    console.log('Hello from the callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a request in SurveyCTO API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Query, body and method parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nrequest(\\\"/anEndpoint\\\", {\\n  method: \\\"POST\\\",\\n  query: { foo: \\\"bar\\\", a: 1 },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### FetchSubmissionOptions\\n\\nOptions provided to `fetchSubmissions()`\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [date] | <code>string</code> | <code>0</code> | Fetch only submissions from this timestamp. Acccepts SuvreyCTO date strings, unix and epoch timestamps, and ISO dates. By default, all submissions will be retrieved. |\\n| [format] | <code>string</code> | <code>&quot;json&quot;</code> | Format the submission data type as  `csv` or `json`. |\\n| [status] | <code>string</code> |  | Review status. Can be either, `approved`, `rejected`, `pending` or combine eg `approved|rejected`. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to request()\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [headers] | <code>object</code> |  | An object of headers parameters. |\\n| [body] | <code>object</code> |  | Body data to append to the request. |\\n| [query] | <code>object</code> |  | An object of query parameters to be encoded into the URL. |\\n| [method] | <code>string</code> | <code>&quot;GET&quot;</code> | The HTTP method to use. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language SurveyCTO\\n\\nLanguage Pack for building expressions and operations to make HTTP calls to\\nSurveyCTO.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/surveycto-configuration-schema/)\\ndefinition.\\n\\n## fetchSubmissions\\n\\n`fetchSubmissions(1,2,3)` takes three arguments:\\n\\n1. the `formId` of the form on SurveyCTO\\n\\n2. the `initialAfterDate`, a date string or UNIX timestamp which instructs the\\n   job to only fetch submissions after a certain date. After the first run of\\n   the job, subsequent runs will only fetch _NEW_ submissions.\\n\\n3. the `postUrl` is where the wide-format JSON representation of each form\\n   submission should be sent. Note that a `formId` key will be added to each\\n   form submission for later filtering/routing.\\n\\n### sample `fetchSubmissions` expression\\n\\n```js\\nfetchSubmissions(\\n  // formId on SurveyCTO server\\n  'household_survey',\\n  // initialAfterDate: this will only be accessed if \\\"lastSubmissionDate\\\" is empty in your job_state\\\".\\n  // After the initial run of the job, OpenFn will only pull new submissions from SurveyCTO.\\n  'Aug 29, 2016 4:44:26 PM',\\n  // postUrl is where you want to send the JSON submissions, appended with a new \\\"formId\\\" key\\n  'https://www.openfn.org/inbox/secret-inbox-uuid'\\n);\\n```\\n\\n## Development\\n\\nClone the repo, run `npm install`.\\n\\nRun tests using `npm run test` or `npm run test:watch`\\n\\nBuild the project using `make`.\\n\"","changelog":"\"# @openfn/language-surveycto\\n\\n## 2.2.3\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.2.2\\n\\n### Patch Changes\\n\\n- d54ab59: Fix an issue assembling surveyCTO urls (which manifested as\\n  `TypeError: Cannot read properties of undefined (reading 'toString'`)\\n\\n## 2.2.1\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.2.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 6c588212: Fix `servername` typo in the `configuration-schema`\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- b67f81be: Add a `cursor()` function which adds support for the surveyCTO\\n  string format dates.\\n\\n  The date option in `fetchSubmissions` can now accept a surveyCTO date, an\\n  epoch or unix timestamp, or basically anything you can pass into new Date().\\n\\n  Internally, any date you pass into `cursor` will be converted into a\\n  human-readable surveyCTO format in UTC time.\\n\\n### Patch Changes\\n\\n- Updated dependencies [88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 59ae7b50: - Refactor `fetchSubmissions()` function\\n  - Update `instanceName` to `servername` in `configuration-schema.json`\\n  - Add `apiVersion` in `configuration-schema.json`. Defaults to `v1`\\n  - Add `request()` function for surveyCTO API requests\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*_ @module Adaptor _/\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 776bb13: migrate surveycto\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["cursor","fetchSubmissions","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"servername":{"title":"Server Name","type":"string","description":"Your Surveycto server name also known as instance name","minLength":1,"examples":["openfn_test"]},"username":{"title":"Username","type":"string","description":"Your Surveycto server username","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"Your Surveycto server password","writeOnly":true,"minLength":1,"examples":["@some(%)!Password"]},"apiVersion":{"title":"API Version","type":"string","description":"The API version","default":"v1","examples":["v1","v2"]}},"type":"object","additionalProperties":true,"required":["servername","username","password"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"telerivet","adaptor":"@openfn/language-telerivet","version":"0.3.5","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Telerivet\\n\\nLanguage Pack for sending messages using the\\n[telerivet API](https://telerivet.com/api/rest/curl).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/telerivet-configuration-schema/)\\ndefinition.\\n\\n## Send message\\n\\n#### Current `send` expression:\\n\\n```js\\nsend(\\n  fields(\\n    field('to_number', dataValue('recipient_number')),\\n    field('content', dataValue('recipient_text')),\\n    // Lots of optional parameters...\\n    field('message_type', 'sms'),\\n    field('route_id', dataValue('some_route'))\\n  )\\n);\\n```\\n\\n## sendBulk messages - WIP\\n\\n#### Current `sendBulk` expression:\\n\\n```js\\nsend(fields(\\n  field(\\\"content\\\", dataValue(\\\"recipient_text\\\")),\\n  field(\\\"to_numbers\\\", [\\n        \\\"+14155550123\\\",\\n        \\\"+14255550234\\\",\\n        \\\"+16505550345\\\"\\n    ]\\n  // Lots of optional parameters...\\n  field(\\\"message_type\\\", \\\"sms\\\"),\\n  field(\\\"route_id\\\", dataValue(\\\"some_route\\\"))\\n))\\n```\\n\\nNote that \\\"recipient_text\\\" may be a concatenation like this:\\n\\n```js\\nfield('content', function (state) {\\n  return dataValue('salutation')(state).concat(\\n    '. ',\\n    dataValue('last_name')(state),\\n    ', )'\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-telerivet\\n\\n## 0.3.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 83ede44: migrate telerivet\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"projectId":{"title":"Project ID","type":"string","description":"Your Telerivet project id","minLength":1,"examples":["telerivet_project_id"]},"apiKey":{"title":"API Key","type":"string","description":"Your Telerivet API Key","writeOnly":true,"minLength":1,"examples":["telerivet_api_key"]}},"type":"object","additionalProperties":true,"required":["projectId","apiKey"]}},
[
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  }
],
{"name":"testing","adaptor":"@openfn/language-testing","version":"1.0.7","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# language-testing\\n\\nThis is a test adaptor for OpenFn.\\n\\nIt is used to test automation and deployment in the adaptors monorepo.\\n\\nIt is not intended for public use.\\n\"","changelog":"\"# @openfn/language-testing\\n\\n## 1.0.7\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.6\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.4\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies [4c08444]\\n- Updated dependencies [73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.0.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{},"type":"object","additionalProperties":true,"required":[]}},
[
  {
    "id": "sendSMS",
    "longname": "sendSMS",
    "name": "sendSMS",
    "kind": "function",
    "scope": "global",
    "description": "Sends an SMS message to a specific phone number",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "an object containing 'body', 'from', and 'to' keys.",
        "name": "params"
      }
    ],
    "examples": [
      "sendSMS({\n body: dataValue('sampleText'),\n from: dataValue('myFromNumber'),\n to: dataValue('ukMobile'),\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 45,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/twilio/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"twilio","adaptor":"@openfn/language-twilio","version":"0.5.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSMS(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### sendSMS\\n\\n<p><code>sendSMS(params) ⇒ Operation</code></p>\\n\\nSends an SMS message to a specific phone number\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | an object containing 'body', 'from', and 'to' keys. |\\n\\n**Example**\\n```js\\nsendSMS({\\n body: dataValue('sampleText'),\\n from: dataValue('myFromNumber'),\\n to: dataValue('ukMobile'),\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language twilio\\n\\nLanguage Pack for building expressions and operations to interact with the\\ntwilio API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/twilio-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression, sending an sms\\n\\n```js\\nsendSMS({\\n  body: dataValue('text'),\\n  from: '+15005550006',\\n  to: dataValue('recipient'),\\n});\\n```\\n\\n## local usage\\n\\n```sh\\n~/devtools/core/bin/core execute \\\\\\n  -l ~/devtools/adaptors/language-twilio \\\\\\n  -s ./tmp/state.json \\\\\\n  -o ./tmp/output.json \\\\\\n  -e ./tmp/expression.js\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-twilio\\n\\n## 0.5.2\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 0.5.1\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 6afba70: Fix sendSMS\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4\\n\\n### Patch Changes\\n\\n- a22daa6: rename credential-schema to configuration-schemawq\\n\\n## 0.3.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- a36a072: ymigrated twilio to monorepo\\n\\n### Patch Changes\\n\\n- Updated dependencies [f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accountSid":{"title":"Account ID","type":"string","description":"Your Twilio account id","writeOnly":true,"minLength":1,"examples":["account_id"]},"authToken":{"title":"Auth Token","type":"string","description":"Your Twilio auth token","writeOnly":true,"minLength":1,"examples":["evenMoreSecret"]}},"type":"object","additionalProperties":true,"required":["accountSid","authToken"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"vtiger","adaptor":"@openfn/language-vtiger","version":"1.3.7","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Vtiger\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nVtiger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/vtiger-configuration-schema/)\\ndefinition.\\n\\n#### sample listTypes expression\\n\\n```js\\nlistTypes();\\n```\\n\\n#### sample postElement expression\\n\\n```js\\npostElement({\\n  operation: \\\"create\\\"\\n  elementType: \\\"leads\\\",\\n  element: {\\n    \\\"name\\\": dataValue(\\\"name\\\")(state),\\n    \\\"surname\\\": dataValue(\\\"surname\\\")(state),\\n    \\\"email\\\": dataValue(\\\"email\\\")(state)\\n  }\\n});\\n\\n\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-vtiger\\n\\n## 1.3.7\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.3.6\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.3.5\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.3.4\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 1.3.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.3.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- b4a13ff: migrate vtiger\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"VTiger instance host URL","format":"uri","minLength":1,"examples":["https://openfunction.od2.vtiger.com"]},"username":{"title":"Username","type":"string","description":"VTiger instance username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"VTiger instance access token","writeOnly":true,"minLength":1,"examples":["@some()!veryHugeToke"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","accessToken"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"zoho","adaptor":"@openfn/language-zoho","version":"0.4.6","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Zoho\\n\\nLanguage Pack for sending messages using the Zoho API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/zoho-configuration-schema/)\\ndefinition.\\n\\n### addRow\\n\\nTo add a row to the \\\"Customers\\\" table in the \\\"testing_openfn\\\" database, use the\\nfollowing `addRow` function.\\n\\n```js\\naddRow(\\n  'testing_openfn',\\n  'Customers',\\n  fields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\\n### updateRow\\n\\nComing soon. Want to help?\\nhttps://zohoreportsapi.wiki.zoho.com/Updating-Data.html\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-zoho\\n\\n## 0.4.6\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.5\\n\\n### Patch Changes\\n\\n- Updated dependencies [03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.4\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus [33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies [77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies [8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1\\n\\n### Patch Changes\\n\\n- Updated dependencies [4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies [106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies [2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies [2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- f9ac74a: migrate zoho\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"account":{"title":"Account","type":"string","description":"Your Zoho account","minLength":1,"examples":["yourzohoaccount"]},"authToken":{"title":"Auth Token","type":"string","description":"Your Zoho authentication token","writeOnly":true,"minLength":1,"examples":["secreauthtoken"]},"apiVersion":{"title":"API Version","type":"string","default":"v2","enum":["v1","v2"],"description":"Zoho API version","minLength":1,"examples":["v2","v1"]}},"type":"object","additionalProperties":true,"required":["account","authToken","apiVersion"]}}
]
