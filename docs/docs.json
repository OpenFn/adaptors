[
{"name":"asana","adaptor":"@openfn/language-asana","version":"2.1.1","docs":"\"    * [Adaptor](#module_Adaptor)\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n        * [.getTask(task_gid, params, callback)](#module_Adaptor.getTask) ⇒ <code>Operation</code>\\n        * [.getTasks(project_gid, params, callback)](#module_Adaptor.getTasks) ⇒ <code>Operation</code>\\n        * [.updateTask(task_gid, params, callback)](#module_Adaptor.updateTask) ⇒ <code>Operation</code>\\n        * [.createTask(params, callback)](#module_Adaptor.createTask) ⇒ <code>Operation</code>\\n        * [.upsertTask(project_gid, params, callback)](#module_Adaptor.upsertTask) ⇒ <code>Operation</code>\\n\\n\"","readme":"\"# language-asana [![Build Status](https://travis-ci.org/OpenFn/language-asana.svg?branch=master)](https://travis-ci.org/OpenFn/language-asana)\\n\\nLanguage Pack for connecting with Asana.\\n\\n## Documentation\\n\\n### sample configuration\\n\\n```json\\n{\\n  \\\"apiVersion\\\": \\\"1.0\\\",\\n  \\\"token\\\": \\\"shhhhhhhh\\\"\\n}\\n```\\n\\n### How to create an API token\\n\\nUsing Asana's API requires having an API token. To generate that token, head to\\nthe [Asana developer console](https://app.asana.com/0/developer-console) and\\nenter the **Personal access tokens** section.\\n\\nThere you can click on **+New access token**. A prompt will be opened allowing\\nyou to give the token a name and then create it.\\n\\n_Note: Treat your PAT like you would with a password. Do not share it or display\\nit online._\\n\\n### Sample expression\\n\\n## Find a single task of a given project using the task id.\\n\\n```js\\ngetTask('1234', {\\n  opt_fields: 'name,assignee',\\n});\\n```\\n\\n## Find the list of tasks of a given project using the project id.\\n\\n```js\\ngetTasks('22889593722', {\\n  opt_fields: 'name,notes,assignee',\\n});\\n```\\n\\n## Update a specific task\\n\\n```js\\nupdateTask('12344', {\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Create a task\\n\\n```js\\ncreateTask({\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Update a task or create a new one\\n\\nYou can use a field name literal as `externalId` to match a specific task. If\\nthe task does not exist, a new one will be created. The first parameter in this\\nfunction should be the `project_id`.\\n\\n```js\\nupsertTask('12344', {\\n  externalId: 'name',\\n  data: {\\n    name: 'A new task',\\n    projects: ['12344'],\\n    notes: 'This is a new task',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-asana\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 5f40dcf: Migrated language-asana\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":"[\"getTask\",\"getTasks\",\"updateTask\",\"createTask\",\"upsertTask\"]"},
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.1.4","docs":"\"    * [Adaptor](#module_Adaptor)\\n        * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n        * [.createPayment](#module_Adaptor.createPayment)\\n        * [new exports.createPayment(data)](#new_module_Adaptor.createPayment_new)\\n        * [.createContact](#module_Adaptor.createContact)\\n        * [new exports.createContact(data)](#new_module_Adaptor.createContact_new)\\n        * [.createCollectionRequest](#module_Adaptor.createCollectionRequest)\\n        * [new exports.createCollectionRequest(data)](#new_module_Adaptor.createCollectionRequest_new)\\n\\n\"","readme":"\"Language Beyonic\\n================\\n\\nLanguage Pack for building expressions and operations for working with\\nthe [beyonic API](http://apidocs.beyonic.com/).\\n\\nDocumentation\\n-------------\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"apiUrl\\\": \\\"https://beyonic.com/api\\\",\\n  \\\"apiToken\\\": \\\"cdjhiooiSIUJHDYSYUIHASIOHKAANOAJJjsiujhaka\\\"\\n}\\n```\\n\\n## Payments API\\n\\n#### `createPayment(...)`\\n```js\\ncreatePayment(fields(\\n  field(\\\"phonenumber\\\", \\\"+256773712831\\\"),\\n  field(\\\"first_name\\\", \\\"Gideon\\\"),\\n  field(\\\"last_name\\\", \\\"Zelalem\\\"),\\n  field(\\\"amount\\\", 100.2),\\n  field(\\\"currency\\\", \\\"USD\\\"),\\n  field(\\\"account\\\", 1),\\n  field(\\\"description\\\", \\\"Long-term contract for Arseal\\\"),\\n  field(\\\"payment_type\\\", \\\"money\\\"),\\n  field(\\\"callback_url\\\", \\\"https://my.website/payments/callback\\\")\\n))\\n```\\n\\n## Collection Requests API\\n\\n#### `createCollectionRequest(...)`\\n```js\\ncreateCollectionRequest(fields(\\n  field(\\\"instructions\\\", \\\"Send me some money, please!\\\"),\\n  field(\\\"phonenumber\\\", \\\"+256773712831\\\"),\\n  field(\\\"amount\\\", 5.0),\\n  field(\\\"currency\\\", \\\"USD\\\")\\n))\\n```\\n\\n## Contacts API\\n\\n#### `createContact(...)`\\n```js\\ncreateContact(fields(\\n  field(\\\"first_name\\\", \\\"Granit\\\"),\\n  field(\\\"last_name\\\", \\\"Xhaka\\\"),\\n  field(\\\"phone_number\\\", \\\"+256773712831\\\"),\\n  field(\\\"email\\\", \\\"granit@arsenal.com\\\")\\n))\\n```\\n\\nDevelopment\\n-----------\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the `Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-beyonic\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- 63080d0: Update common for build\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- 0d358b6: Add ast.json for beyonic\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 06ff25f: Update superagent to v8\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 28ceb1f: Moving language-beyonic to adaptors/packages/beyonic\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":"[]"},
{"name":"common","adaptor":"@openfn/language-common","version":"1.7.4","docs":"\"ERROR, Cannot find module.\\n\"","readme":"\"# Language Common [![CircleCI](https://circleci.com/gh/OpenFn/language-common.svg?style=svg)](https://circleci.com/gh/OpenFn/language-common)\\n\\nCommon and generic expressions and operations for [OpenFn](http://openfn.org).\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.4.0\\n\\n## 1.7.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- # ecf5d30: remove sinon since it was not being used\\n\\nBumped all package versions to their latest.\\n\\n# v0.0.4\\n\\n- Added `arrayToString` helper.  \\n  Allowing you to join an array of string'able primitives (strings and integers)\\n  into a string.\\n- Added `toArray` helper.  \\n  This can be used to coerce certain types of data into an array, this can be\\n  useful when the source data has an ambiguous format. For example a given key\\n  in the data may have an object as it's value (when there is only one item),\\n  and an array of objects when there is more than one. `toArray` can be used to\\n  reconcile this inconsistency.\\n\"","functions":"[\"execute\",\"fn\",\"jsonValue\",\"sourceValue\",\"source\",\"dataPath\",\"dataValue\",\"referencePath\",\"lastReferenceValue\",\"asData\",\"each\",\"combine\",\"join\",\"expandReferences\",\"field\",\"fields\",\"merge\",\"index\",\"arrayToString\",\"toArray\",\"composeNextState\",\"humanProper\",\"scrubEmojis\",\"chunk\",\"map\"]"},
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"3.2.2","docs":"\"    * [Adaptor](#module_Adaptor)\\n        * _static_\\n            * [.execute](#module_Adaptor.execute)\\n            * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n            * [.create](#module_Adaptor.create)\\n            * [new exports.create(resourceType, data, [options], [callback])](#new_module_Adaptor.create_new)\\n            * [.update](#module_Adaptor.update)\\n            * [new exports.update(resourceType, path, data, [options], [callback])](#new_module_Adaptor.update_new)\\n            * [.get](#module_Adaptor.get)\\n            * [new exports.get(resourceType, query, [options], [callback])](#new_module_Adaptor.get_new)\\n            * [.upsert](#module_Adaptor.upsert)\\n            * [new exports.upsert(resourceType, query, data, [options], [callback])](#new_module_Adaptor.upsert_new)\\n            * [.discover](#module_Adaptor.discover)\\n            * [new exports.discover(httpMethod, endpoint)](#new_module_Adaptor.discover_new)\\n            * [.patch](#module_Adaptor.patch)\\n            * [new exports.patch(resourceType, path, data, [options], [callback])](#new_module_Adaptor.patch_new)\\n            * [.destroy](#module_Adaptor.destroy)\\n            * [new exports.destroy(resourceType, path, [data], [options], [callback])](#new_module_Adaptor.destroy_new)\\n            * [.findAttributeValue](#module_Adaptor.findAttributeValue)\\n            * [new exports.findAttributeValue(trackedEntityInstance, attributeDisplayName)](#new_module_Adaptor.findAttributeValue_new)\\n            * [.attr](#module_Adaptor.attr)\\n            * [new exports.attr(attribute, value)](#new_module_Adaptor.attr_new)\\n            * [.dv](#module_Adaptor.dv)\\n            * [new exports.dv(dataElement, value)](#new_module_Adaptor.dv_new)\\n        * _inner_\\n            * [~configMigrationHelper](#module_Adaptor..configMigrationHelper)\\n            * [new configMigrationHelper(state)](#new_module_Adaptor..configMigrationHelper_new)\\n\\n\"","readme":"\"# Language DHIS2 [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org) [![CircleCI](https://circleci.com/gh/OpenFn/language-dhis2.svg?style=svg)](https://circleci.com/gh/OpenFn/language-dhis2)\\n\\nAn OpenFn language Pack for building expressions and operations for working with\\nthe\\n[DHIS2 API](http://dhis2.github.io/dhis2-docs/master/en/developer/html/dhis2_developer_manual.html).\\nUsed most commonly via OpenFn.org or by hand with\\n[OpenFn/core](https://github.com/OpenFn/core) from the root of this repo:\\n\\n```sh\\ncore execute \\\\\\n -l ../language-dhis2 \\\\\\n -e ./tmp/expression.js \\\\\\n -s ./tmp/state.json \\\\\\n -o ./tmp/output.json\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/dhis2-docs) for full\\ntechnical documentation.\\n\\nThere are lots of **examples** for how to use the various helper functions on\\nthe main\\n[Adaptor docs](https://docs.openfn.org/adaptors/packages/dhis2-docs#modules)\\npage.\\n\\n## Sample State\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"username\\\": \\\"admin\\\",\\n    \\\"password\\\": \\\"district\\\",\\n    \\\"hostUrl\\\": \\\"https://play.dhis2.org/2.36.6\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1, \\\"b\\\": 2 }\\n}\\n```\\n\\n## Development\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`. (NB: that this repo\\nalso contain integration tests which can be run with\\n`pnpm run integration-test`.)\\n\\n⚠️ NB: Make changes to the files in `src/` and then use `npm run build` to\\ngenerate output files in `lib/`.\\n\\nThe documentation is autogenerated, so please **rebuild the docs** after making\\nchanges by running `pnpm build docs`\\n\\n### Unit Tests\\n\\nUnit tests allows to test the functionalities of the adaptor helper functions\\nsuch as:\\n\\n> Does `create('events', payload)` perform a post request to the correct DHIS2\\n> API?\\n\\nTo run unit tests execute `pnpm run test` (they're the default tests).\\n\\nAnytime a new functionality is added to the helper functions, more unit tests\\nneeds to be added.\\n\\n### End-to-end integration tests\\n\\nIntegration tests allow us to test the end-to-end behavior of the helper\\nfunctions and also to test the examples we provide via inline documentation.\\n\\nFor example with integration tests we answer the following question:\\n\\n> Does `create('events', eventPayload)` actually create a new event in a live\\n> DHIS2 system?\\n\\nTo run integration tests, execute `npm run integration-test`. These tests use\\nnetwork I/O and a public connection to a DHIS2 \\\"play\\\" server so their timing and\\nperformance is unpredictable. Consider adding an increased timeout, and\\nmodifying the orgUnit, program, etc., IDs set in `globalState`.\\n\\n#### Troubleshooting the tests\\n\\n- Depending on your internet strength please consider changing the **global\\n  timeout** in the `test/mocha.opts` file to avoid faillures related to network\\n  timeouts.\\n\\n- The behavior of the tests in `test/integration.js` is very unpredictable; they\\n  depend on the **configuration of a target DHIS2 instance**. Currently you need\\n  to have at least one organisation unit with one program, one\\n  trackedEntityInstance and one programStage in it. These components need to be\\n  well configured for the integration tests to work. For example: the\\n  trackedEntityInstance need to be enrolled to the program, which should be\\n  created in that organisation unit and contains at least that programStage. If\\n  the tests fail, you must adjust these attributes in the\\n  [before hook](https://github.com/OpenFn/adaptors/tree/main/packages/dhis2/test/integration.js):\\n\\n```javascript\\nbefore(done => {\\n  fixture.initialState = {\\n    configuration: {\\n      username: 'admin',\\n      password: 'district',\\n      hostUrl: 'https://play.dhis2.org/2.36.6',\\n    },\\n    program: 'IpHINAT79UW',\\n    orgUnit: 'DiszpKrYNg8',\\n    trackedEntityInstance: 'uhubxsfLanV',\\n    programStage: 'eaDHS084uMp',\\n  };\\n  done();\\n});\\n```\\n\\n- Make sure the `update` and `upsert` integration tests don't affect those\\n  initial organisation units, programs, programStage and trackedEntityInstance\\n  required. Otherwise the create integration tests would be broken again; and\\n  that's an endless faillure loop :(\\n\\nAnytime a new example is added in the documentation of a helper function, a new\\nintegration test should be built.\\n\"","changelog":"\"# @openfn/language-dhis2\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n  - @openfn/buildtools@1.0.2\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 8d6e8ce: Migrate dhis2 into repo\\n\\n### Patch Changes\\n\\n- Updated dependencies [4671e89]\\n- Updated dependencies [8d6e8ce]\\n  - @openfn/buildtools@1.0.1\\n\"","functions":"[\"create\",\"update\",\"get\",\"upsert\",\"discover\",\"patch\",\"destroy\",\"findAttributeValue\",\"attr\",\"dv\"]"},
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"1.1.0","docs":"\"    * [Adaptor](#module_Adaptor)\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n        * [.create(path, params, callback)](#module_Adaptor.create) ⇒ <code>Operation</code>\\n        * [.createTransactionBundle(params, callback)](#module_Adaptor.createTransactionBundle) ⇒ <code>Operation</code>\\n\\n\"","readme":"\"# language-fhir [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HAPI FHIR\\nAPI.\\n\\n## FHIR Documentation\\n\\nThe Restfull API can be seen here: https://www.hl7.org/fhir/http.html\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/adaptor/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n## Technical Documentation\\n\\n#### Sample configuration\\n\\n> See\\n> [credential schema ](https://github.com/OpenFn/adaptors/tree/main/packages/fhir/credential-schema.json)\\n\\n```json\\n{\\n  \\\"resource\\\": \\\"resource_url\\\",\\n  \\\"authType\\\": \\\"Basic\\\",\\n  \\\"token\\\": \\\"supersecrettoken\\\"\\n}\\n```\\n\\n#### Creates a resource in a destination system using a POST request\\n\\n```js\\ncreate('/endpoint', { foo: 'bar' });\\n```\\n\\n#### Creates a transactionBundle for HAPI FHIR\\n\\n```js\\ncreateTransactionBundle({\\n  entry: [transactionBundle],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-fhir\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- fee607e: Migrate FHIR, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":"[\"create\",\"createTransactionBundle\"]"}
]
