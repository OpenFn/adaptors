[
{"name":"asana","adaptor":"@openfn/language-asana","version":"2.1.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.getTask(task_gid, params, callback)](#module_Adaptor.getTask) ⇒ <code>Operation</code>\\n    * [.getTasks(project_gid, params, callback)](#module_Adaptor.getTasks) ⇒ <code>Operation</code>\\n    * [.updateTask(task_gid, params, callback)](#module_Adaptor.updateTask) ⇒ <code>Operation</code>\\n    * [.createTask(params, callback)](#module_Adaptor.createTask) ⇒ <code>Operation</code>\\n    * [.upsertTask(project_gid, params, callback)](#module_Adaptor.upsertTask) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.getTask\\\"></a>\\n\\n### Adaptor.getTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nGet a single task of a given project.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTask(\\\"task_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"module_Adaptor.getTasks\\\"></a>\\n\\n### Adaptor.getTasks(project_gid, params, callback) ⇒ <code>Operation</code>\\nGet the list of tasks for a given project.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTasks(\\\"project_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"module_Adaptor.updateTask\\\"></a>\\n\\n### Adaptor.updateTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate a specific task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupdateTask(\\\"task_gid\\\",\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"module_Adaptor.createTask\\\"></a>\\n\\n### Adaptor.createTask(params, callback) ⇒ <code>Operation</code>\\nCreate a task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTask(\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertTask\\\"></a>\\n\\n### Adaptor.upsertTask(project_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate or create a task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | an object with an externalId and some task data. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupsertTask(\\n \\\"1201382240880\\\",\\n {\\n   \\\"externalId\\\": \\\"name\\\",\\n   \\\"data\\\": {\\n     name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n   }\\n\\n }\\n)\\n```\\n\"","readme":"\"# language-asana [![Build Status](https://travis-ci.org/OpenFn/language-asana.svg?branch=master)](https://travis-ci.org/OpenFn/language-asana)\\n\\nLanguage Pack for connecting with Asana.\\n\\n## Documentation\\n\\n### sample configuration\\n\\n```json\\n{\\n  \\\"apiVersion\\\": \\\"1.0\\\",\\n  \\\"token\\\": \\\"shhhhhhhh\\\"\\n}\\n```\\n\\n### How to create an API token\\n\\nUsing Asana's API requires having an API token. To generate that token, head to\\nthe [Asana developer console](https://app.asana.com/0/developer-console) and\\nenter the **Personal access tokens** section.\\n\\nThere you can click on **+New access token**. A prompt will be opened allowing\\nyou to give the token a name and then create it.\\n\\n_Note: Treat your PAT like you would with a password. Do not share it or display\\nit online._\\n\\n### Sample expression\\n\\n## Find a single task of a given project using the task id.\\n\\n```js\\ngetTask('1234', {\\n  opt_fields: 'name,assignee',\\n});\\n```\\n\\n## Find the list of tasks of a given project using the project id.\\n\\n```js\\ngetTasks('22889593722', {\\n  opt_fields: 'name,notes,assignee',\\n});\\n```\\n\\n## Update a specific task\\n\\n```js\\nupdateTask('12344', {\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Create a task\\n\\n```js\\ncreateTask({\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Update a task or create a new one\\n\\nYou can use a field name literal as `externalId` to match a specific task. If\\nthe task does not exist, a new one will be created. The first parameter in this\\nfunction should be the `project_id`.\\n\\n```js\\nupsertTask('12344', {\\n  externalId: 'name',\\n  data: {\\n    name: 'A new task',\\n    projects: ['12344'],\\n    notes: 'This is a new task',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-asana\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 5f40dcf: Migrated language-asana\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["getTask","getTasks","updateTask","createTask","upsertTask"]},
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.1.4","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.createPayment](#module_Adaptor.createPayment)\\n        * [new exports.createPayment(data)](#new_module_Adaptor.createPayment_new)\\n    * [.createContact](#module_Adaptor.createContact)\\n        * [new exports.createContact(data)](#new_module_Adaptor.createContact_new)\\n    * [.createCollectionRequest](#module_Adaptor.createCollectionRequest)\\n        * [new exports.createCollectionRequest(data)](#new_module_Adaptor.createCollectionRequest_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for beyonic.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createPayment\\\"></a>\\n\\n### Adaptor.createPayment\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createPayment_new\\\"></a>\\n\\n#### new exports.createPayment(data)\\nCreate a payment\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the payment |\\n\\n**Example**  \\n```js\\nexecute(\\n  createPayment(data)\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createContact\\\"></a>\\n\\n### Adaptor.createContact\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createContact_new\\\"></a>\\n\\n#### new exports.createContact(data)\\nCreate a contact\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the contact |\\n\\n**Example**  \\n```js\\nexecute(\\n  createContact(data)\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createCollectionRequest\\\"></a>\\n\\n### Adaptor.createCollectionRequest\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createCollectionRequest_new\\\"></a>\\n\\n#### new exports.createCollectionRequest(data)\\nCreate a collection request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the collection request |\\n\\n**Example**  \\n```js\\nexecute(\\n  createCollectionRequest(data)\\n)(state)\\n```\\n\"","readme":"\"Language Beyonic\\n================\\n\\nLanguage Pack for building expressions and operations for working with\\nthe [beyonic API](http://apidocs.beyonic.com/).\\n\\nDocumentation\\n-------------\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"apiUrl\\\": \\\"https://beyonic.com/api\\\",\\n  \\\"apiToken\\\": \\\"cdjhiooiSIUJHDYSYUIHASIOHKAANOAJJjsiujhaka\\\"\\n}\\n```\\n\\n## Payments API\\n\\n#### `createPayment(...)`\\n```js\\ncreatePayment(fields(\\n  field(\\\"phonenumber\\\", \\\"+256773712831\\\"),\\n  field(\\\"first_name\\\", \\\"Gideon\\\"),\\n  field(\\\"last_name\\\", \\\"Zelalem\\\"),\\n  field(\\\"amount\\\", 100.2),\\n  field(\\\"currency\\\", \\\"USD\\\"),\\n  field(\\\"account\\\", 1),\\n  field(\\\"description\\\", \\\"Long-term contract for Arseal\\\"),\\n  field(\\\"payment_type\\\", \\\"money\\\"),\\n  field(\\\"callback_url\\\", \\\"https://my.website/payments/callback\\\")\\n))\\n```\\n\\n## Collection Requests API\\n\\n#### `createCollectionRequest(...)`\\n```js\\ncreateCollectionRequest(fields(\\n  field(\\\"instructions\\\", \\\"Send me some money, please!\\\"),\\n  field(\\\"phonenumber\\\", \\\"+256773712831\\\"),\\n  field(\\\"amount\\\", 5.0),\\n  field(\\\"currency\\\", \\\"USD\\\")\\n))\\n```\\n\\n## Contacts API\\n\\n#### `createContact(...)`\\n```js\\ncreateContact(fields(\\n  field(\\\"first_name\\\", \\\"Granit\\\"),\\n  field(\\\"last_name\\\", \\\"Xhaka\\\"),\\n  field(\\\"phone_number\\\", \\\"+256773712831\\\"),\\n  field(\\\"email\\\", \\\"granit@arsenal.com\\\")\\n))\\n```\\n\\nDevelopment\\n-----------\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the `Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-beyonic\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- 63080d0: Update common for build\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- 0d358b6: Add ast.json for beyonic\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 06ff25f: Update superagent to v8\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 28ceb1f: Moving language-beyonic to adaptors/packages/beyonic\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":[]},
{"name":"bigquery","adaptor":"@openfn/language-bigquery","version":"1.0.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.load(dirPath, projectId, datasetId, tableId, loadOptions, callback)](#module_Adaptor.load) ⇒ <code>Operation</code>\\n    * [.parseCSV(target, config)](#module_Adaptor.parseCSV) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.load\\\"></a>\\n\\n### Adaptor.load(dirPath, projectId, datasetId, tableId, loadOptions, callback) ⇒ <code>Operation</code>\\nLoad files to BigQuery\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | the path to your local directory |\\n| projectId | <code>string</code> | your bigquery project id |\\n| datasetId | <code>string</code> | your bigquery dataset id |\\n| tableId | <code>string</code> | the name of the table you'd like to load |\\n| loadOptions | <code>object</code> | options to pass to the bigquery.load() API |\\n| callback | <code>function</code> | and optional callback |\\n\\n**Example**  \\n```js\\nload(\\n  './tmp/files',\\n  'my-bg-project',\\n  'test01',\\n  'product-codes',\\n  {\\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    createDisposition: 'CREATE_IF_NEEDED',\\n  }\\n)\\n```\\n<a name=\\\"module_Adaptor.parseCSV\\\"></a>\\n\\n### Adaptor.parseCSV(target, config) ⇒ <code>Operation</code>\\nCSV-Parse for CSV conversion to JSON\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| target | <code>String</code> | string or local file with CSV data |\\n| config | <code>Object</code> | csv-parse config object |\\n\\n**Example**  \\n```js\\nparseCSV(\\\"/home/user/someData.csv\\\", {\\n\\t  quoteChar: '\\\"',\\n\\t  header: false,\\n\\t});\\n```\\n\"","readme":"\"# Language BigQuery\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### state.json\\n\\nThe configuration key must be a valid GCP credential as JSON.\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"type\\\": \\\"service_account\\\",\\n    \\\"project_id\\\": \\\"some-project\\\",\\n    \\\"private_key_id\\\": \\\"670b9e3c8c366e83aa569dd57cbfc5c575b72e42\\\",\\n    \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nblah\\\\nmoreblah=\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n    \\\"client_email\\\": \\\"bigquery@some-project.iam.gserviceaccount.com\\\",\\n    \\\"client_id\\\": \\\"someid\\\",\\n    \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n    \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n    \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n    \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1 }\\n}\\n```\\n\\n### operations (expression.js)\\n\\n#### load(...)\\n\\nLoad data to a table in bigquery from a CSV. See full\\n[options here](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad).\\n\\n```js\\nload(\\n  '/home/taylor/Desktop/type-C_r-ALL_ps-201012_freq-M_px-HS_pub-20200731_fmt-csv_ex-20200818.csv',\\n  'awesome-solutions-project', // project\\n  'test01', // dataset\\n  'mytable', // table\\n  {\\n    schema:\\n      'classification:STRING,year:STRING,period:STRING,period_desc:STRING,aggregate_level:STRING,is_leaf_code:STRING,trade_flow_code:STRING,trade_flow:STRING,reporter_code:STRING,reporter:STRING,reporter_iso:STRING,partner_code:STRING,partner:STRING,partner_iso:STRING,commodity_code:STRING,commodity:STRING,qty_unit_code:STRING,qty_unit:STRING,qty:INTEGER,netweight_kg:INTEGER,trade_value:INTEGER,flag:STRING',\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    // createDisposition: 'CREATE_IF_NEEDED',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n  } // loadOptions\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["load","parseCSV"]},
{"name":"commcare","adaptor":"@openfn/language-commcare","version":"1.5.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute](#module_Adaptor.execute)\\n            * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n        * [.submitXls](#module_Adaptor.submitXls)\\n            * [new exports.submitXls(formData, params)](#new_module_Adaptor.submitXls_new)\\n        * [.submit](#module_Adaptor.submit)\\n            * [new exports.submit(formData)](#new_module_Adaptor.submit_new)\\n        * [.fetchReportData](#module_Adaptor.fetchReportData)\\n            * [new exports.fetchReportData(reportId, params, postUrl)](#new_module_Adaptor.fetchReportData_new)\\n    * _inner_\\n        * [~clientPost](#module_Adaptor..clientPost)\\n            * [new clientPost(formData)](#new_module_Adaptor..clientPost_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for commcare.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.submitXls\\\"></a>\\n\\n### Adaptor.submitXls\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.submitXls_new\\\"></a>\\n\\n#### new exports.submitXls(formData, params)\\nConvert form data to xls then submit.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n| params | <code>Object</code> | Request params including case type and external id. |\\n\\n**Example**  \\n```js\\nsubmitXls(\\n   [\\n     {name: 'Mamadou', phone: '000000'},\\n   ],\\n   {\\n     case_type: 'student',\\n     search_field: 'external_id',\\n     create_new_cases: 'on',\\n   }\\n)\\n```\\n<a name=\\\"module_Adaptor.submit\\\"></a>\\n\\n### Adaptor.submit\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.submit_new\\\"></a>\\n\\n#### new exports.submit(formData)\\nSubmit form data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n\\n**Example**  \\n```js\\nsubmit(\\n   fields(\\n     field(\\\"@\\\", function(state) {\\n       return {\\n         \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/form-id-here\\\"\\n       };\\n     }),\\n     field(\\\"question1\\\", dataValue(\\\"answer1\\\")),\\n     field(\\\"question2\\\", \\\"Some answer here.\\\")\\n   )\\n )\\n```\\n<a name=\\\"module_Adaptor.fetchReportData\\\"></a>\\n\\n### Adaptor.fetchReportData\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.fetchReportData_new\\\"></a>\\n\\n#### new exports.fetchReportData(reportId, params, postUrl)\\nMake a GET request to CommCare's Reports API\\nand POST the response to somewhere else.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reportId | <code>String</code> | API name of the report. |\\n| params | <code>Object</code> | Query params, incl: limit, offset, and custom report filters. |\\n| postUrl | <code>String</code> | Url to which the response object will be posted. |\\n\\n**Example**  \\n```js\\nfetchReportData(reportId, params, postUrl)\\n```\\n<a name=\\\"module_Adaptor..clientPost\\\"></a>\\n\\n### Adaptor~clientPost\\n**Kind**: inner class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor..clientPost_new\\\"></a>\\n\\n#### new clientPost(formData)\\nPerforms a post request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Form Data with auth params and body |\\n\\n**Example**  \\n```js\\nclientPost(formData)\\n```\\n\"","readme":"\"# Language CommCare [![Build Status](https://travis-ci.org/OpenFn/language-commcare.svg?branch=master)](https://travis-ci.org/OpenFn/language-commcare)\\n\\nLanguage Pack for interacting with the CommCare API.\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Download+Report+Data\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Submission+API\\n\\nhttps://bitbucket.org/javarosa/javarosa/wiki/FormSubmissionAPI\\n\\nAccepted X-Form Spec from Dimagi: http://dimagi.github.io/xform-spec Accepted\\nX-Form Spec for Cases from Dimagi:\\nhttps://github.com/dimagi/commcare/wiki/casexml20\\n\\n## Documentation\\n\\n## Sample configuration\\n\\nThe \\\"appId\\\" is the UUID which designates your commcare project as different from\\neveryone elses. It can be found in the URL of your application when you first\\nenter it from the project screen. I.e., the last part of this url:\\n`https://www.commcarehq.org/a/YOUR_PROJECT/apps/view/YOUR_APP_ID/`\\n\\nNote that the username is your full email address.\\n\\n```json\\n{\\n  \\\"appId\\\": \\\"the-long-uuid-in-the-url-that-designates-a-unique-commcare-project\\\",\\n  \\\"password\\\": \\\"shhh\\\",\\n  \\\"username\\\": \\\"test@openfn.org\\\",\\n  \\\"applicationName\\\": \\\"some-proof-of-concept\\\",\\n  \\\"hostUrl\\\": \\\"https://www.commcarehq.org\\\"\\n}\\n```\\n\\n## `fetchReportData` to pull aggregate data from CommCare\\n\\nIt takes 3 arguments: reportId, params, and postUrl.\\n\\n```js\\nfetchReportData(\\n  'reportId',\\n  { limit: 10, offset: 2, state: 'Vermont' },\\n  'http://www.openfn.org/inbox/secret-uuid'\\n);\\n```\\n\\nsimple body target:\\n\\n```xml\\n<data xmlns=\\\"http://openrosa.org/formdesigner/39A2CA97-2EB8-4A9C-A0D1-6AA666666A66\\\">\\n    <firstname>Something</firstname>\\n    <lastname>Else</lastname>\\n    <age>29</age>\\n</data>\\n```\\n\\ncomplex body target:\\n\\n```xml\\n<?xml version='1.0' ?>\\n<data uiVersion=\\\"1\\\" version=\\\"17\\\" name=\\\"New Form\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\" xmlns=\\\"http://openrosa.org/formdesigner/1DFD8610-91E3-4409-BF8B-02D3B4FF3530\\\">\\n    <foo>bar</foo>\\n    <n0:case case_id=\\\"ddb8e2b3-7ce0-43e4-ad45-d7a2eebe9169\\\" user_id=\\\"user-xxx-eve\\\" date_modified=\\\"2013-04-19T16:53:02.799-04\\\" xmlns:n0=\\\"http://commcarehq.org/case/transaction/v2\\\">\\n        <n0:create>\\n            <n0:case_name>bar</n0:case_name>\\n            <n0:owner_id>user-xxx-eve</n0:owner_id>\\n            <n0:case_type>member</n0:case_type>\\n        </n0:create>\\n    </n0:case>\\n    <n1:meta xmlns:n1=\\\"http://openrosa.org/jr/xforms\\\">\\n        <n1:deviceID>A00000245706EE</n1:deviceID>\\n        <n1:timeStart>2013-04-19T16:52:41.000-04</n1:timeStart>\\n        <n1:timeEnd>2013-04-19T16:53:02.799-04</n1:timeEnd>\\n        <n1:username>eve</n1:username>\\n        <n1:userID>user-xxx-eve</n1:userID>\\n        <n1:instanceID>b58df19c-efd5-4ecf-9581-65dda8b8787c</n1:instanceID>\\n        <n2:appVersion xmlns:n2=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version \\\"2.4.1\\\"(10083). App v19. CommCare Version 2.4. Build 10083, built on: March-12-2013</n2:appVersion>\\n    </n1:meta>\\n</data>\\n```\\n\\n## Submitting data to CommCare HQ\\n\\n### Submit an XLS file\\nThis function bulk submit a JSON object as xls file to CommCare HQ\\n\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n### submit\\n\\nHere we're just building the most basic JSON object, that will be converted to\\nan XML object and posted as the <data /> element.\\n\\n```js\\nsubmit(\\n  fields(\\n    field('@', function (state) {\\n      return {\\n        xmlns:\\n          'http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9',\\n      };\\n    }),\\n    field('paitent_namentosh', dataValue('first_name')),\\n    field('question2', 'Some answer here.'),\\n    field('question3', 'HKS'),\\n    field('question4', 'item1'),\\n    field('question5', 69855),\\n    field('question6', 12)\\n  )\\n);\\n```\\n\\nAn open rosa form submission body should look like this:\\n\\n```xml\\n<?xml version=\\\"1.0\\\" ?>\\n<data name=\\\"Patient Registration\\\" uiVersion=\\\"1\\\" version=\\\"9\\\" xmlns=\\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\">\\n  <paitent_namentosh>Taylor</paitent_namentosh>\\n  <question2>Moruki</question2>\\n  <question3>Hks</question3>\\n  <question4>item1</question4>\\n  <question5>69855</question5>\\n  <question6>12</question6>\\n  <n0:meta xmlns:n0=\\\"http://openrosa.org/jr/xforms\\\">\\n    <n0:deviceID>358239055789384</n0:deviceID>\\n    <n0:timeStart>2015-08-21T16:21:59.807+02</n0:timeStart>\\n    <n0:timeEnd>2015-08-21T16:22:15.987+02</n0:timeEnd>\\n    <n0:username>openfn</n0:username>\\n    <n0:userID>5fe615b3af2834cb5dca59f7466d6174</n0:userID>\\n    <n0:instanceID>195e79eb-d823-46fe-9e4f-59b8327d5db2</n0:instanceID>\\n    <n1:appVersion xmlns:n1=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version &quot;2.22.0&quot;(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015</n1:appVersion>\\n  </n0:meta>\\n</data>\\n```\\n\\nSo the JSON emitted by your expression should look like this:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n    \\\"name\\\": \\\"Patient Registration\\\",\\n    \\\"uiVersion\\\": \\\"1\\\",\\n    \\\"version\\\": \\\"9\\\",\\n    \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\",\\n    \\\"xmlns:jrm\\\": \\\"http://dev.commcarehq.org/jr/xforms\\\",\\n    \\\"paitent_namentosh\\\": \\\"Taylor\\\",\\n    \\\"question2\\\": \\\" Moruki\\\",\\n    \\\"question3\\\": \\\"Hks\\\",\\n    \\\"question4\\\": \\\"item1\\\",\\n    \\\"question5\\\": \\\"69855\\\",\\n    \\\"question6\\\": \\\"12\\\",\\n    \\\"n0:meta\\\": {\\n      \\\"xmlns:n0\\\": \\\"http://openrosa.org/jr/xforms\\\",\\n      \\\"n0:deviceID\\\": \\\"358239055789384\\\",\\n      \\\"n0:timeStart\\\": \\\"2015-08-21T16:21:59.807+02\\\",\\n      \\\"n0:timeEnd\\\": \\\"2015-08-21T16:22:15.987+02\\\",\\n      \\\"n0:username\\\": \\\"openfn\\\",\\n      \\\"n0:userID\\\": \\\"5fe615b3af2834cb5dca59f7466d6174\\\",\\n      \\\"n0:instanceID\\\": \\\"195e79eb-d823-46fe-9e4f-59b8327d5db2\\\",\\n      \\\"n1:appVersion\\\": {\\n        \\\"xmlns:n1\\\": \\\"http://commcarehq.org/xforms\\\",\\n        \\\"$t\\\": \\\"CommCare ODK, version \\\\\\\"2.22.0\\\\\\\"(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the `Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-commcare\\n\\n## 1.5.0\\n\\n### Minor Changes\\n\\n- 5c050ed: Migrate CommCare\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 94076b9: update dependency xlsx to ^0.18.0\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [9a2755e]\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-http@4.2.2\\n  - @openfn/language-common@1.7.4\\n\"","functions":["submitXls","submit","fetchReportData"]},
{"name":"common","adaptor":"@openfn/language-common","version":"1.7.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>Execute a sequence of operations.\\nMain outer API for executing expressions.</p>\\n</dd>\\n<dt><a href=\\\"#alterState\\\">alterState(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>alias for &quot;fn()&quot;</p>\\n</dd>\\n<dt><a href=\\\"#fn\\\">fn(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a custom step (or operation) for more flexible job writing.</p>\\n</dd>\\n<dt><a href=\\\"#jsonValue\\\">jsonValue(obj, path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#sourceValue\\\">sourceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#source\\\">source(path)</a> ⇒ <code>Array.&lt;(String|Object)&gt;</code></dt>\\n<dd><p>Picks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use <code>sourceValue</code> instead.</p>\\n</dd>\\n<dt><a href=\\\"#dataPath\\\">dataPath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at the data.</p>\\n</dd>\\n<dt><a href=\\\"#dataValue\\\">dataValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from the source data object—usually <code>state.data</code>.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#referencePath\\\">referencePath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at references.</p>\\n</dd>\\n<dt><a href=\\\"#lastReferenceValue\\\">lastReferenceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out the last reference value from source data.</p>\\n</dd>\\n<dt><a href=\\\"#map\\\">map(path, operation, state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n</dd>\\n<dt><a href=\\\"#asData\\\">asData(data, state)</a> ⇒ <code>array</code></dt>\\n<dd><p>Simple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.</p>\\n<ul>\\n<li>JSONPath referencing a point in <code>state</code></li>\\n<li>Object Literal of the data itself.</li>\\n<li>Function to be called with state.</li>\\n</ul>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#combine\\\">combine(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Combines two operations into one</p>\\n</dd>\\n<dt><a href=\\\"#join\\\">join(targetPath, sourcePath, targetKey)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Adds data from a target object</p>\\n</dd>\\n<dt><a href=\\\"#expandReferences\\\">expandReferences(value, [skipFilter])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions).</p>\\n</dd>\\n<dt><a href=\\\"#field\\\">field(key, value)</a> ⇒ <code>Field</code></dt>\\n<dd><p>Returns a key, value pair in an array.</p>\\n</dd>\\n<dt><a href=\\\"#fields\\\">fields(fields)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Zips key value pairs into an object.</p>\\n</dd>\\n<dt><a href=\\\"#merge\\\">merge(dataSource, fields)</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Merges fields into each item in an array.</p>\\n</dd>\\n<dt><a href=\\\"#index\\\">index()</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Returns the index of the current array being iterated.\\nTo be used with <code>each</code> as a data source.</p>\\n</dd>\\n<dt><a href=\\\"#arrayToString\\\">arrayToString(arr, separator)</a> ⇒ <code>string</code></dt>\\n<dd><p>Turns an array into a string, separated by X.</p>\\n</dd>\\n<dt><a href=\\\"#toArray\\\">toArray(arg)</a> ⇒ <code>array</code></dt>\\n<dd><p>Ensures primitive data types are wrapped in an array.\\nDoes not affect array objects.</p>\\n</dd>\\n<dt><a href=\\\"#composeNextState\\\">composeNextState(state, response)</a> ⇒ <code>State</code></dt>\\n<dd><p>Prepares next state</p>\\n</dd>\\n<dt><a href=\\\"#humanProper\\\">humanProper(str)</a> ⇒ <code>string</code></dt>\\n<dd><p>Substitutes underscores for spaces and proper-cases a string</p>\\n</dd>\\n<dt><a href=\\\"#scrubEmojis\\\">scrubEmojis(text, replacementChars)</a> ⇒ <code>string</code></dt>\\n<dd><p>Replaces emojis in a string.</p>\\n</dd>\\n<dt><a href=\\\"#chunk\\\">chunk(array, chunkSize)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Chunks an array into an array of arrays, each with no more than a certain size.</p>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#expandRequestReferences\\\">expandRequestReferences(value)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like <code>FormData</code>.</p>\\n</dd>\\n<dt><a href=\\\"#withAgent\\\">withAgent(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates an https agent for axios from the agentOptions key passed in params.</p>\\n</dd>\\n<dt><a href=\\\"#get\\\">get(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request</p>\\n</dd>\\n<dt><a href=\\\"#post\\\">post(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request</p>\\n</dd>\\n<dt><a href=\\\"#del\\\">del(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a DELETE request</p>\\n</dd>\\n<dt><a href=\\\"#head\\\">head(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a HEAD request</p>\\n</dd>\\n<dt><a href=\\\"#put\\\">put(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PUT request</p>\\n</dd>\\n<dt><a href=\\\"#patch\\\">patch(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PATCH request</p>\\n</dd>\\n<dt><a href=\\\"#options\\\">options(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a OPTIONS request</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Promise</code>\\nExecute a sequence of operations.\\nMain outer API for executing expressions.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n   create('foo'),\\n   delete('bar')\\n )\\n```\\n<a name=\\\"alterState\\\"></a>\\n\\n## alterState(func) ⇒ <code>Operation</code>\\nalias for \\\"fn()\\\"\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n<a name=\\\"fn\\\"></a>\\n\\n## fn(func) ⇒ <code>Operation</code>\\nCreates a custom step (or operation) for more flexible job writing.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n**Example**  \\n```js\\nfn(state => {\\n  // do some things to state\\n  return state;\\n});\\n```\\n<a name=\\\"jsonValue\\\"></a>\\n\\n## jsonValue(obj, path) ⇒ <code>Operation</code>\\nPicks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>object</code> | A valid JSON object. |\\n| path | <code>String</code> | JSONPath referencing a point in given JSON object. |\\n\\n**Example**  \\n```js\\njsonValue({ a:1 }, 'a')\\n```\\n<a name=\\\"sourceValue\\\"></a>\\n\\n## sourceValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsourceValue('$.key')\\n```\\n<a name=\\\"source\\\"></a>\\n\\n## source(path) ⇒ <code>Array.&lt;(String\\\\|Object)&gt;</code>\\nPicks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use `sourceValue` instead.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsource('$.key')\\n```\\n<a name=\\\"dataPath\\\"></a>\\n\\n## dataPath(path) ⇒ <code>string</code>\\nEnsures a path points at the data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataPath('key')\\n```\\n<a name=\\\"dataValue\\\"></a>\\n\\n## dataValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from the source data object—usually `state.data`.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataValue('key')\\n```\\n<a name=\\\"referencePath\\\"></a>\\n\\n## referencePath(path) ⇒ <code>string</code>\\nEnsures a path points at references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nreferencePath('key')\\n```\\n<a name=\\\"lastReferenceValue\\\"></a>\\n\\n## lastReferenceValue(path) ⇒ <code>Operation</code>\\nPicks out the last reference value from source data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nlastReferenceValue('key')\\n```\\n<a name=\\\"map\\\"></a>\\n\\n## map(path, operation, state) ⇒ <code>State</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `state.data`. |\\n| operation | <code>function</code> | The operation needed to be repeated. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nmap(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"asData\\\"></a>\\n\\n## asData(data, state) ⇒ <code>array</code>\\nSimple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.\\n- JSONPath referencing a point in `state`\\n- Object Literal of the data itself.\\n- Function to be called with state.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> \\\\| <code>object</code> \\\\| <code>function</code> |  |\\n| state | <code>object</code> | The current state. |\\n\\n**Example**  \\n```js\\nasData('$.key'| key | callback)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"combine\\\"></a>\\n\\n## combine(operations) ⇒ <code>Operation</code>\\nCombines two operations into one\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\ncombine(\\n  create('foo'),\\n  delete('bar')\\n)\\n```\\n<a name=\\\"join\\\"></a>\\n\\n## join(targetPath, sourcePath, targetKey) ⇒ <code>Operation</code>\\nAdds data from a target object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| targetPath | <code>String</code> | Target path |\\n| sourcePath | <code>String</code> | Source path |\\n| targetKey | <code>String</code> | Target Key |\\n\\n**Example**  \\n```js\\njoin('$.key','$.data','newKey')\\n```\\n<a name=\\\"expandReferences\\\"></a>\\n\\n## expandReferences(value, [skipFilter]) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions).\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n| [skipFilter] | <code>function</code> | a function which returns true if a value should be skipped |\\n\\n<a name=\\\"field\\\"></a>\\n\\n## field(key, value) ⇒ <code>Field</code>\\nReturns a key, value pair in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | Name of the field |\\n| value | <code>Value</code> | The value itself or a sourceable operation. |\\n\\n**Example**  \\n```js\\nfield('destination_field_name__c', 'value')\\n```\\n<a name=\\\"fields\\\"></a>\\n\\n## fields(fields) ⇒ <code>Object</code>\\nZips key value pairs into an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fields | <code>Fields</code> | a list of fields |\\n\\n**Example**  \\n```js\\nfields(list_of_fields)\\n```\\n<a name=\\\"merge\\\"></a>\\n\\n## merge(dataSource, fields) ⇒ <code>DataSource</code>\\nMerges fields into each item in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> |  |\\n| fields | <code>Object</code> | Group of fields to merge in. |\\n\\n**Example**  \\n```js\\nmerge(\\n  \\\"$.books[*]\\\",\\n  fields(\\n    field( \\\"publisher\\\", sourceValue(\\\"$.publisher\\\") )\\n  )\\n)\\n```\\n<a name=\\\"index\\\"></a>\\n\\n## index() ⇒ <code>DataSource</code>\\nReturns the index of the current array being iterated.\\nTo be used with `each` as a data source.\\n\\n**Kind**: global function  \\n**Access**: public  \\n**Example**  \\n```js\\nindex()\\n```\\n<a name=\\\"arrayToString\\\"></a>\\n\\n## arrayToString(arr, separator) ⇒ <code>string</code>\\nTurns an array into a string, separated by X.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arr | <code>array</code> | Array of toString'able primatives. |\\n| separator | <code>string</code> | Separator string. |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", function(state) {\\n  return arrayToString(dataValue(\\\"path_of_array\\\")(state), ', ')\\n})\\n```\\n<a name=\\\"toArray\\\"></a>\\n\\n## toArray(arg) ⇒ <code>array</code>\\nEnsures primitive data types are wrapped in an array.\\nDoes not affect array objects.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arg | <code>any</code> | Data required to be in an array |\\n\\n**Example**  \\n```js\\neach(function(state) {\\n  return toArray( dataValue(\\\"path_of_array\\\")(state) )\\n}, ...)\\n```\\n<a name=\\\"composeNextState\\\"></a>\\n\\n## composeNextState(state, response) ⇒ <code>State</code>\\nPrepares next state\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | state |\\n| response | <code>Object</code> | Response to be added |\\n\\n**Example**  \\n```js\\ncomposeNextState(state, response)\\n```\\n<a name=\\\"humanProper\\\"></a>\\n\\n## humanProper(str) ⇒ <code>string</code>\\nSubstitutes underscores for spaces and proper-cases a string\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| str | <code>string</code> | String that needs converting |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", humanProper(state.data.path_to_string))\\n```\\n<a name=\\\"scrubEmojis\\\"></a>\\n\\n## scrubEmojis(text, replacementChars) ⇒ <code>string</code>\\nReplaces emojis in a string.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | String that needs to be cleaned |\\n| replacementChars | <code>string</code> | Characters that replace the emojis |\\n\\n**Example**  \\n```js\\nscrubEmojis('Dove🕊️⭐ 29')\\n```\\n<a name=\\\"chunk\\\"></a>\\n\\n## chunk(array, chunkSize) ⇒ <code>Object</code>\\nChunks an array into an array of arrays, each with no more than a certain size.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| array | <code>Object</code> | Array to be chunked |\\n| chunkSize | <code>Integer</code> | The maxiumum size of each chunks |\\n\\n**Example**  \\n```js\\nchunk([1,2,3,4,5], 2)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n   create(\\\"SObject\\\",\\n   field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\")))\\n )\\n```\\n<a name=\\\"expandRequestReferences\\\"></a>\\n\\n## expandRequestReferences(value) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like `FormData`.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n\\n<a name=\\\"withAgent\\\"></a>\\n\\n## withAgent(params) ⇒ <code>Operation</code>\\nCreates an https agent for axios from the agentOptions key passed in params.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data |\\n\\n<a name=\\\"get\\\"></a>\\n\\n## get(requestParams) ⇒ <code>Operation</code>\\nMake a GET request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Get an item with a specified id from state)*  \\n```js\\n get({\\n     url: state => `https://www.example.com/api/items/${state.id},\\n     headers: {\\\"content-type\\\": \\\"application/json\\\"}\\n});\\n```\\n<a name=\\\"post\\\"></a>\\n\\n## post(requestParams) ⇒ <code>Operation</code>\\nMake a POST request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Sending a payload with data that comes from state)*  \\n```js\\npost({\\n  url: \\\"https://example.com\\\",\\n  data: (state) => state.data\\n});\\n```\\n**Example** *( Capturing the response for later use in state )*  \\n```js\\nalterState((state) => {\\n  return post({\\n    url: \\\"https://example.com\\\",\\n    data: (state) => state.data\\n  })(state).then(({response}) => {\\n   state.responseData = response.data\\n  })\\n});\\n```\\n<a name=\\\"del\\\"></a>\\n\\n## del(requestParams) ⇒ <code>Operation</code>\\nMake a DELETE request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Deleting a record with data that comes from state)*  \\n```js\\ndelete({\\n   url: state => `https://www.example.com/api/items/${state.id}`,\\n })(state);\\n```\\n<a name=\\\"head\\\"></a>\\n\\n## head(requestParams) ⇒ <code>Operation</code>\\nMake a HEAD request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Gets the headers that would be returned if the HEAD request&#x27;s URL was instead requested with the HTTP GET method)*  \\n```js\\nhead({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n<a name=\\\"put\\\"></a>\\n\\n## put(requestParams) ⇒ <code>Operation</code>\\nMake a PUT request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Creates a new resource or replaces a representation of the target resource with the request payload, with data from state.)*  \\n```js\\nput({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"patch\\\"></a>\\n\\n## patch(requestParams) ⇒ <code>Operation</code>\\nMake a PATCH request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Applies partial modifications to a resource, with data from state.)*  \\n```js\\npatch({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"options\\\"></a>\\n\\n## options(requestParams) ⇒ <code>Operation</code>\\nMake a OPTIONS request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Requests permitted communication options for a given URL or server, with data from state.)*  \\n```js\\noptions({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n\"","readme":"\"# Language Common [![CircleCI](https://circleci.com/gh/OpenFn/language-common.svg?style=svg)](https://circleci.com/gh/OpenFn/language-common)\\n\\nCommon and generic expressions and operations for [OpenFn](http://openfn.org).\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.4.0\\n\\n## 1.7.4\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- # ecf5d30: remove sinon since it was not being used\\n\\nBumped all package versions to their latest.\\n\\n# v0.0.4\\n\\n- Added `arrayToString` helper.  \\n  Allowing you to join an array of string'able primitives (strings and integers)\\n  into a string.\\n- Added `toArray` helper.  \\n  This can be used to coerce certain types of data into an array, this can be\\n  useful when the source data has an ambiguous format. For example a given key\\n  in the data may have an object as it's value (when there is only one item),\\n  and an array of objects when there is more than one. `toArray` can be used to\\n  reconcile this inconsistency.\\n\"","functions":["execute","fn","jsonValue","sourceValue","source","dataPath","dataValue","referencePath","lastReferenceValue","asData","each","combine","join","expandReferences","field","fields","merge","index","arrayToString","toArray","composeNextState","humanProper","scrubEmojis","chunk","map"]},
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"3.2.2","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_Adaptor\\\">Adaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#request\\\">request(configuration, axiosRequest)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>The request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.</p>\\n</dd>\\n<dt><a href=\\\"#selectId\\\">selectId(resourceType)</a> ⇒ <code>string</code></dt>\\n<dd><p>Determines the attribute name for a DHIS2 system ID given a resource type.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute](#module_Adaptor.execute)\\n            * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n        * [.create](#module_Adaptor.create)\\n            * [new exports.create(resourceType, data, [options], [callback])](#new_module_Adaptor.create_new)\\n        * [.update](#module_Adaptor.update)\\n            * [new exports.update(resourceType, path, data, [options], [callback])](#new_module_Adaptor.update_new)\\n        * [.get](#module_Adaptor.get)\\n            * [new exports.get(resourceType, query, [options], [callback])](#new_module_Adaptor.get_new)\\n        * [.upsert](#module_Adaptor.upsert)\\n            * [new exports.upsert(resourceType, query, data, [options], [callback])](#new_module_Adaptor.upsert_new)\\n        * [.discover](#module_Adaptor.discover)\\n            * [new exports.discover(httpMethod, endpoint)](#new_module_Adaptor.discover_new)\\n        * [.patch](#module_Adaptor.patch)\\n            * [new exports.patch(resourceType, path, data, [options], [callback])](#new_module_Adaptor.patch_new)\\n        * [.destroy](#module_Adaptor.destroy)\\n            * [new exports.destroy(resourceType, path, [data], [options], [callback])](#new_module_Adaptor.destroy_new)\\n        * [.findAttributeValue](#module_Adaptor.findAttributeValue)\\n            * [new exports.findAttributeValue(trackedEntityInstance, attributeDisplayName)](#new_module_Adaptor.findAttributeValue_new)\\n        * [.attr](#module_Adaptor.attr)\\n            * [new exports.attr(attribute, value)](#new_module_Adaptor.attr_new)\\n        * [.dv](#module_Adaptor.dv)\\n            * [new exports.dv(dataElement, value)](#new_module_Adaptor.dv_new)\\n    * _inner_\\n        * [~configMigrationHelper](#module_Adaptor..configMigrationHelper)\\n            * [new configMigrationHelper(state)](#new_module_Adaptor..configMigrationHelper_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for DHIS2.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.create_new\\\"></a>\\n\\n#### new exports.create(resourceType, data, [options], [callback])\\nCreate a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `trackedEntityInstances`, `programs`, `events`, ... |\\n| data | <code>Object</code> | Data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\ncreate('programs', {\\n  name: 'name 20',\\n  shortName: 'n20',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\ncreate('events', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'DiszpKrYNg8',\\n  status: 'COMPLETED',\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\ncreate('trackedEntityInstances', {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Gigiwe',\\n    },\\n  ]\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\ncreate('dataSetNotificationTemplates', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\ncreate('dataElements', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\ncreate('dataElementGroups', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\ncreate('dataElementGroupSets', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\ncreate('dataValueSets', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\ncreate('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(an enrollment)*  \\n```js\\ncreate('enrollments', {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-09-17',\\n  incidentDate: '2013-09-17',\\n});\\n```\\n<a name=\\\"module_Adaptor.update\\\"></a>\\n\\n### Adaptor.update\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.update_new\\\"></a>\\n\\n#### new exports.update(resourceType, path, data, [options], [callback])\\nUpdate data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send `all required fields` or the `full body`\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\nupdate('programs', 'qAZJCrNJK8H', {\\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\\n  shortName: '14e1aa02',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\nupdate('events', 'PVqUD2hvU4E', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'Ngelehun CHC',\\n  status: 'COMPLETED',\\n  storedBy: 'admin',\\n  dataValues: [],\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\nupdate('trackedEntityInstances', 'IeQfgUtGPq2', {\\n  created: '2015-08-06T21:12:37.256',\\n  orgUnit: 'TSyzvBiovKh',\\n  createdAtClient: '2015-08-06T21:12:37.256',\\n  trackedEntityInstance: 'IeQfgUtGPq2',\\n  lastUpdated: '2015-08-06T21:12:37.257',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  inactive: false,\\n  deleted: false,\\n  featureType: 'NONE',\\n  programOwners: [\\n    {\\n      ownerOrgUnit: 'TSyzvBiovKh',\\n      program: 'IpHINAT79UW',\\n      trackedEntityInstance: 'IeQfgUtGPq2',\\n    },\\n  ],\\n  enrollments: [],\\n  relationships: [],\\n  attributes: [\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      displayName: 'Last name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'zDhUuAYrxNC',\\n      value: 'Russell',\\n    },\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      code: 'MMD_PER_NAM',\\n      displayName: 'First name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Catherine',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello Updated,\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\nupdate('dataElements', 'FTRrcoaog83', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\nupdate('dataElementGroups', 'QrprHT61XFk', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\nupdate('dataValueSets', 'AsQj6cDsUq4', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\nupdate('dataValueSets', 'Ix2HsbDMLea', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a single enrollment)*  \\n```js\\nupdate('enrollments', 'CmsHzercTBa' {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-10-17',\\n  incidentDate: '2013-10-17',\\n});\\n```\\n<a name=\\\"module_Adaptor.get\\\"></a>\\n\\n### Adaptor.get\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.get_new\\\"></a>\\n\\n#### new exports.get(resourceType, query, [options], [callback])\\nGet data. Generic helper method for getting data of any kind from DHIS2.\\n- This can be used to get `DataValueSets`,`events`,`trackedEntityInstances`,`etc.`\\n\\n**Returns**: <code>Operation</code> - state  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to get(use its `plural` name). E.g. `dataElements`, `trackedEntityInstances`,`organisationUnits`, etc. |\\n| query | <code>Object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params beyond filters, request configuration (e.g. `auth`) and DHIS2 api version to use. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(all data values for the &#x27;pBOMPrpg1QX&#x27; dataset)*  \\n```js\\nget('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n});\\n```\\n**Example** *(all programs for an organization unit)*  \\n```js\\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });\\n```\\n**Example** *(a single tracked entity instance by a unique external ID)*  \\n```js\\nget('trackedEntityInstances', {\\n  ou: 'DiszpKrYNg8',\\n  filter: ['flGbXLXCrEo:Eq:124', 'w75KJ2mc4zz:Eq:John'],\\n});\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(resourceType, query, data, [options], [callback])\\nUpsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.\\n\\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntityInstances` |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [options] | <code>Object</code> | Optional configuration that will be applied to both the `get` and the `create` or `update` operations. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(Example &#x60;expression.js&#x60; of upsert)*  \\n```js\\nupsert('trackedEntityInstances', {\\n ou: 'TSyzvBiovKh',\\n filter: ['w75KJ2mc4zz:Eq:Qassim'],\\n}, {\\n orgUnit: 'TSyzvBiovKh',\\n trackedEntityType: 'nEenWmSyUEp',\\n attributes: [\\n   {\\n     attribute: 'w75KJ2mc4zz',\\n     value: 'Qassim',\\n   },\\n ],\\n});\\n```\\n<a name=\\\"module_Adaptor.discover\\\"></a>\\n\\n### Adaptor.discover\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.discover_new\\\"></a>\\n\\n#### new exports.discover(httpMethod, endpoint)\\nDiscover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| httpMethod | <code>string</code> | The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete` |\\n| endpoint | <code>string</code> | The path for a given endpoint. E.g. `/trackedEntityInstances` or `/dataValueSets` |\\n\\n**Example** *(a list of parameters allowed on a given endpoint for specific http method)*  \\n```js\\ndiscover('post', '/trackedEntityInstances')\\n```\\n<a name=\\\"module_Adaptor.patch\\\"></a>\\n\\n### Adaptor.patch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.patch_new\\\"></a>\\n\\n#### new exports.patch(resourceType, path, data, [options], [callback])\\nPatch a record. A generic helper function to send partial updates on one or more object properties.\\n- You are not required to send the full body of object properties.\\n- This is useful for cases where you don't want or need to update all properties on a object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. Include only the fields you want to update. E.g. `{name: \\\"New Name\\\"}` |\\n| [options] | <code>Object</code> | Optional configuration, including params for the update ({preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}). Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a dataElement)*  \\n```js\\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });\\n```\\n<a name=\\\"module_Adaptor.destroy\\\"></a>\\n\\n### Adaptor.destroy\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.destroy_new\\\"></a>\\n\\n#### new exports.destroy(resourceType, path, [data], [options], [callback])\\nDelete a record. A generic helper function to delete an object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be deleted. E.g. `trackedEntityInstances`, `organisationUnits`, etc. |\\n| path | <code>string</code> | Can be an `id` of an `object` or `path` to the `nested object` to `delete`. |\\n| [data] | <code>Object</code> | Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\\\"identifiableObjects\\\": [{\\\"id\\\": \\\"IDA\\\"}, {\\\"id\\\": \\\"IDB\\\"}, {\\\"id\\\": \\\"IDC\\\"}]}`. See more [on DHIS2 API docs](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects) |\\n| [options] | <code>Object</code> | Optional `options` for `del` operation including params e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see [DHIS2 documentation](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters). Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a tracked entity instance)*  \\n```js\\ndestroy('trackedEntityInstances', 'LcRd6Nyaq7T');\\n```\\n<a name=\\\"module_Adaptor.findAttributeValue\\\"></a>\\n\\n### Adaptor.findAttributeValue\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.findAttributeValue_new\\\"></a>\\n\\n#### new exports.findAttributeValue(trackedEntityInstance, attributeDisplayName)\\nGets an attribute value by its case-insensitive display name\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntityInstance | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeDisplayName | <code>string</code> | The 'displayName' to search for in the TEI's attributes |\\n\\n**Example**  \\n```js\\nfindAttributeValue(state.data.trackedEntityInstances[0], 'first name')\\n```\\n<a name=\\\"module_Adaptor.attr\\\"></a>\\n\\n### Adaptor.attr\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.attr_new\\\"></a>\\n\\n#### new exports.attr(attribute, value)\\nConverts an attribute ID and value into a DSHI2 attribute object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attribute | <code>string</code> | A tracked entity instance (TEI) attribute ID. |\\n| value | <code>string</code> | The value for that attribute. |\\n\\n**Example**  \\n```js\\nattr('w75KJ2mc4zz', 'Elias')\\n```\\n<a name=\\\"module_Adaptor.dv\\\"></a>\\n\\n### Adaptor.dv\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.dv_new\\\"></a>\\n\\n#### new exports.dv(dataElement, value)\\nConverts a dataElement and value into a DSHI2 dataValue object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataElement | <code>string</code> | A data element ID. |\\n| value | <code>string</code> | The value for that data element. |\\n\\n**Example**  \\n```js\\ndv('f7n9E0hX8qk', 12)\\n```\\n<a name=\\\"module_Adaptor..configMigrationHelper\\\"></a>\\n\\n### Adaptor~configMigrationHelper\\n**Kind**: inner class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor..configMigrationHelper_new\\\"></a>\\n\\n#### new configMigrationHelper(state)\\nMigrates `apiUrl` to `hostUrl` if `hostUrl` is `blank`.\\nFor `OpenFn.org` users with the `old-style configuration`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>object</code> | the runtime state |\\n\\n**Example**  \\n```js\\nconfigMigrationHelper(state)\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request(configuration, axiosRequest) ⇒ <code>Promise</code>\\nThe request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.\\n\\n**Kind**: global function  \\n**Returns**: <code>Promise</code> - a promise that will resolve to either a response object or an error object.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| configuration | <code>object</code> | configuration must have a username and password |\\n| axiosRequest | <code>object</code> | the axiosRequest contains valid axios params: https://axios-http.com/docs/req_config |\\n\\n<a name=\\\"selectId\\\"></a>\\n\\n## selectId(resourceType) ⇒ <code>string</code>\\nDetermines the attribute name for a DHIS2 system ID given a resource type.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| resourceType | <code>string</code> | \\n\\n\"","readme":"\"# Language DHIS2 [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org)\\n\\nAn OpenFn language Pack for building expressions and operations for working with\\nthe\\n[DHIS2 API](http://dhis2.github.io/dhis2-docs/master/en/developer/html/dhis2_developer_manual.html).\\nUsed most commonly via OpenFn.org or by hand with\\n[OpenFn/core](https://github.com/OpenFn/core) from the root of this repo:\\n\\n```sh\\ncore execute \\\\\\n -l ../language-dhis2 \\\\\\n -e ./tmp/expression.js \\\\\\n -s ./tmp/state.json \\\\\\n -o ./tmp/output.json\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/dhis2-docs) for\\nfull technical documentation.\\n\\nThere are lots of **examples** for how to use the various helper functions on\\nthe main\\n[Adaptor docs](https://docs.openfn.org/adaptors/packages/dhis2-docs#modules)\\npage.\\n\\n## Sample State\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"username\\\": \\\"admin\\\",\\n    \\\"password\\\": \\\"district\\\",\\n    \\\"hostUrl\\\": \\\"https://play.dhis2.org/2.36.6\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1, \\\"b\\\": 2 }\\n}\\n```\\n\\n## Development\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`. (NB: that this repo\\nalso contain integration tests which can be run with\\n`pnpm run integration-test`.)\\n\\n⚠️ NB: Make changes to the files in `src/` and then use `npm run build` to\\ngenerate output files in `lib/`.\\n\\nThe documentation is autogenerated, so please **rebuild the docs** after making\\nchanges by running `pnpm build docs`\\n\\n### Unit Tests\\n\\nUnit tests allows to test the functionalities of the adaptor helper functions\\nsuch as:\\n\\n> Does `create('events', payload)` perform a post request to the correct DHIS2\\n> API?\\n\\nTo run unit tests execute `pnpm run test` (they're the default tests).\\n\\nAnytime a new functionality is added to the helper functions, more unit tests\\nneeds to be added.\\n\\n### End-to-end integration tests\\n\\nIntegration tests allow us to test the end-to-end behavior of the helper\\nfunctions and also to test the examples we provide via inline documentation.\\n\\nFor example with integration tests we answer the following question:\\n\\n> Does `create('events', eventPayload)` actually create a new event in a live\\n> DHIS2 system?\\n\\nTo run integration tests, execute `npm run integration-test`. These tests use\\nnetwork I/O and a public connection to a DHIS2 \\\"play\\\" server so their timing and\\nperformance is unpredictable. Consider adding an increased timeout, and\\nmodifying the orgUnit, program, etc., IDs set in `globalState`.\\n\\n#### Troubleshooting the tests\\n\\n- Depending on your internet strength please consider changing the **global\\n  timeout** in the `test/mocha.opts` file to avoid faillures related to network\\n  timeouts.\\n\\n- The behavior of the tests in `test/integration.js` is very unpredictable; they\\n  depend on the **configuration of a target DHIS2 instance**. Currently you need\\n  to have at least one organisation unit with one program, one\\n  trackedEntityInstance and one programStage in it. These components need to be\\n  well configured for the integration tests to work. For example: the\\n  trackedEntityInstance need to be enrolled to the program, which should be\\n  created in that organisation unit and contains at least that programStage. If\\n  the tests fail, you must adjust these attributes in the\\n  [before hook](https://github.com/OpenFn/adaptors/tree/main/packages/dhis2/test/integration.js):\\n\\n```javascript\\nbefore(done => {\\n  fixture.initialState = {\\n    configuration: {\\n      username: 'admin',\\n      password: 'district',\\n      hostUrl: 'https://play.dhis2.org/2.36.6',\\n    },\\n    program: 'IpHINAT79UW',\\n    orgUnit: 'DiszpKrYNg8',\\n    trackedEntityInstance: 'uhubxsfLanV',\\n    programStage: 'eaDHS084uMp',\\n  };\\n  done();\\n});\\n```\\n\\n- Make sure the `update` and `upsert` integration tests don't affect those\\n  initial organisation units, programs, programStage and trackedEntityInstance\\n  required. Otherwise the create integration tests would be broken again; and\\n  that's an endless faillure loop :(\\n\\nAnytime a new example is added in the documentation of a helper function, a new\\nintegration test should be built.\\n\"","changelog":"\"# @openfn/language-dhis2\\n\\n## 3.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n  - @openfn/buildtools@1.0.2\\n\\n## 3.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 3.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- 8d6e8ce: Migrate dhis2 into repo\\n\\n### Patch Changes\\n\\n- Updated dependencies [4671e89]\\n- Updated dependencies [8d6e8ce]\\n  - @openfn/buildtools@1.0.1\\n\"","functions":["create","update","get","upsert","discover","patch","destroy","findAttributeValue","attr","dv"]},
{"name":"dynamics","adaptor":"@openfn/language-dynamics","version":"0.2.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language Dynamics [![Build Status](https://travis-ci.org/OpenFn/language-dynamics.svg?branch=master)](https://travis-ci.org/OpenFn/language-dynamics)\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nMicrosoft Dynamics API.\\n\\n## Documentation\\n\\n#### sample configuration\\n\\n_Dynamics uses oauth2. The language-package will expect to be given a valid\\noauth token. If a valid token is not provided, it will fail. On OpenFn.org, the\\n`CredentialService` is responsible for making sure the the oauth token is valid\\neach time it assembles state to hand to `execute`._\\n\\n```json\\n{\\n  \\\"resource\\\": \\\"https://openfn.crm2.dynamics.com\\\",\\n  \\\"apiVersion\\\": \\\"8.2.0\\\",\\n  \\\"accessToken\\\": \\\"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI\\\"\\n}\\n```\\n\\n#### sample createEntity expression\\n\\n```js\\ncreateEntity({\\n  entityName: 'accounts',\\n  body: {\\n    name: 'Open Function',\\n    creditonhold: false,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample query expression\\n\\n_Can be used to retrieve or query a specific Entity if an entityId is declared\\nin the expression. Otherwise it will perform a query on all data with the\\ndefined Entity Name_\\n\\n```js\\nquery({\\n  entityName: 'contacts',\\n  entityId: '51a0e5b9-88df-e311-b8e5-6c3be5a8b200',\\n  query: {\\n    fields: ['fullname', 'birthdate'],\\n    limit: 10,\\n    orderBy: {\\n      field: 'lastname',\\n      direction: 'asc',\\n    },\\n    filter: \\\"firstname eq 'Cat'\\\",\\n  },\\n});\\n```\\n\\n#### sample update expression\\n\\n```js\\nupdateEntity({\\n  entityName: 'accounts',\\n  entityId: 'f4301865-c64a-e711-80f3-e0071b6fd061',\\n  body: {\\n    name: 'wilder 2',\\n    creditonhold: true,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample delete expression\\n\\n```js\\ndeleteEntity({\\n  entityName: 'accounts',\\n  entityId: 'aeef941b-254a-e711-80f1-e0071b685921',\\n});\\n```\\n\\n[Docs](docs/index)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"1.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.create(path, params, callback)](#module_Adaptor.create) ⇒ <code>Operation</code>\\n    * [.createTransactionBundle(params, callback)](#module_Adaptor.createTransactionBundle) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a resource in a destination system using a POST request\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"module_Adaptor.createTransactionBundle\\\"></a>\\n\\n### Adaptor.createTransactionBundle(params, callback) ⇒ <code>Operation</code>\\nCreates a transactionBundle for HAPI FHIR\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new transaction |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTransactionBundle( {\\\"entry\\\": [{...},, {...}]})\\n```\\n\"","readme":"\"# language-fhir [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HAPI FHIR\\nAPI.\\n\\n## FHIR Documentation\\n\\nThe Restfull API can be seen here: https://www.hl7.org/fhir/http.html\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/adaptor/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n## Technical Documentation\\n\\n#### Sample configuration\\n\\n> See\\n> [credential schema ](https://github.com/OpenFn/adaptors/tree/main/packages/fhir/credential-schema.json)\\n\\n```json\\n{\\n  \\\"resource\\\": \\\"resource_url\\\",\\n  \\\"authType\\\": \\\"Basic\\\",\\n  \\\"token\\\": \\\"supersecrettoken\\\"\\n}\\n```\\n\\n#### Creates a resource in a destination system using a POST request\\n\\n```js\\ncreate('/endpoint', { foo: 'bar' });\\n```\\n\\n#### Creates a transactionBundle for HAPI FHIR\\n\\n```js\\ncreateTransactionBundle({\\n  entry: [transactionBundle],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-fhir\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- fee607e: Migrate FHIR, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["create","createTransactionBundle"]},
{"name":"googlesheets","adaptor":"@openfn/language-googlesheets","version":"2.1.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.appendValues](#module_Adaptor.appendValues)\\n        * [new exports.appendValues(params)](#new_module_Adaptor.appendValues_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.appendValues\\\"></a>\\n\\n### Adaptor.appendValues\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.appendValues_new\\\"></a>\\n\\n#### new exports.appendValues(params)\\nAdd an array of rows to the spreadsheet.\\nhttps://developers.google.com/sheets/api/samples/writing#append_values\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n\\n**Example**  \\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\"","readme":"\"# Language Google Sheets\\n\\nLanguage Pack for building expressions and operations to make Google Sheets API\\ncalls.\\n\\n## Documentation\\n\\n### sample configuration\\n\\n````json\\n{\\n  \\\"accessToken\\\": \\\"nu-uh\\\"\\n}\\n\\n### appendValues()\\n\\nAdd rows to an existing sheet:\\n`https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED`\\n\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n});\\n````\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-googlesheets\\n\\n## 2.1.1\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0\\n\\n### Minor Changes\\n\\n- 9e7d458: Migrate googlesheets\\n\"","functions":["appendValues"]},
{"name":"http","adaptor":"@openfn/language-http","version":"4.2.2","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.get](#module_Adaptor.get)\\n        * [new exports.get(path, params, callback)](#new_module_Adaptor.get_new)\\n    * [.post](#module_Adaptor.post)\\n        * [new exports.post(path, params, callback)](#new_module_Adaptor.post_new)\\n    * [.put](#module_Adaptor.put)\\n        * [new exports.put(path, params, callback)](#new_module_Adaptor.put_new)\\n    * [.patch](#module_Adaptor.patch)\\n        * [new exports.patch(path, params, callback)](#new_module_Adaptor.patch_new)\\n    * [.del](#module_Adaptor.del)\\n        * [new exports.del(path, params, callback)](#new_module_Adaptor.del_new)\\n    * [.parseXML](#module_Adaptor.parseXML)\\n        * [new exports.parseXML(body, script)](#new_module_Adaptor.parseXML_new)\\n    * [.parseCSV](#module_Adaptor.parseCSV)\\n        * [new exports.parseCSV(target, config)](#new_module_Adaptor.parseCSV_new)\\n    * [.request](#module_Adaptor.request)\\n        * [new exports.request(params)](#new_module_Adaptor.request_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.get\\\"></a>\\n\\n### Adaptor.get\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.get_new\\\"></a>\\n\\n#### new exports.get(path, params, callback)\\nMake a GET request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nget('/myEndpoint', {\\n   query: {foo: 'bar', a: 1},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.post\\\"></a>\\n\\n### Adaptor.post\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.post_new\\\"></a>\\n\\n#### new exports.post(path, params, callback)\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npost('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.put\\\"></a>\\n\\n### Adaptor.put\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.put_new\\\"></a>\\n\\n#### new exports.put(path, params, callback)\\nMake a PUT request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nput('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.patch\\\"></a>\\n\\n### Adaptor.patch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.patch_new\\\"></a>\\n\\n#### new exports.patch(path, params, callback)\\nMake a PATCH request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npatch('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.del\\\"></a>\\n\\n### Adaptor.del\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.del_new\\\"></a>\\n\\n#### new exports.del(path, params, callback)\\nMake a DELETE request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ndel(`/myendpoint/${state => state.data.id}`, {\\n   headers: {'content-type': 'application/json'}\\n })\\n```\\n<a name=\\\"module_Adaptor.parseXML\\\"></a>\\n\\n### Adaptor.parseXML\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.parseXML_new\\\"></a>\\n\\n#### new exports.parseXML(body, script)\\nParse XML with the Cheerio parser\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| body | <code>String</code> | data string to be parsed |\\n| script | <code>function</code> | script for extracting data |\\n\\n**Example**  \\n```js\\nparseXML(body, function($){\\n   return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n })\\n```\\n<a name=\\\"module_Adaptor.parseCSV\\\"></a>\\n\\n### Adaptor.parseCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.parseCSV_new\\\"></a>\\n\\n#### new exports.parseCSV(target, config)\\nCSV-Parse for CSV conversion to JSON\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| target | <code>String</code> | string or local file with CSV data |\\n| config | <code>Object</code> | csv-parse config object |\\n\\n**Example**  \\n```js\\nparseCSV(\\\"/home/user/someData.csv\\\", {\\n\\t  quoteChar: '\\\"',\\n\\t  header: false,\\n\\t});\\n```\\n<a name=\\\"module_Adaptor.request\\\"></a>\\n\\n### Adaptor.request\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.request_new\\\"></a>\\n\\n#### new exports.request(params)\\nMake a request using the 'request' node module. This module is deprecated.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n\\n**Example**  \\n```js\\nrequest(params);\\n```\\n\"","readme":"\"# Language HTTP\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n#### sample configuration\\n\\n```js\\n{\\n  \\\"username\\\": \\\"<name@email>\\\",\\n  \\\"password\\\": \\\"<supersecret>\\\",\\n  \\\"baseUrl\\\": \\\"https://instance_name.surveycto.com\\\",\\n}\\n```\\n\\n### Get data\\n\\nThis helper function allows the use of a get method to fetch data. You can\\nspecify a query string for filter.\\n\\n```js\\nget(\\n  '/myendpoint',\\n  {\\n    query: { foo: 'bar', a: 1 },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'taylor', password: 'somethingsecret' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Post existing data\\n\\nSend some data to an existing endpoint.\\n\\n```js\\npost('/endpoint', {\\n  body: state => {\\n    return {\\n      field_1: 'some_data',\\n      field_2: 'some_more_data',\\n      field_id: dataValue('Some.Json.Object.Id')(state),\\n    };\\n  },\\n  headers: {\\n    Authorization: 'AUTH_KEY',\\n    'Content-Type': 'application/json',\\n  },\\n});\\n```\\n\\n### Update existing data with PUT or PATCH\\n\\n```js\\nput(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n```js\\npatch(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Delete data\\n\\n```js\\ndel(\\n  '/myendpoint',\\n  {\\n    query: { id: 'someId' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Parse XML\\n\\nThis function allows you to parse some xml data. A callback function can be use\\nto store in a table.\\n\\n```js\\nparseXML(body, function ($) {\\n  return $('table[class=your_table]').parsetable(true, true, true);\\n});\\n```\\n\\n### Parse CSV\\n\\n```js\\nparseCSV('someData.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n});\\n```\\n\\n### Sample parse local CSV file\\n\\n```js\\nparseCSV('PatientsJan2009.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n  columns: true,\\n  skip_empty_lines: true,\\n  trim: true,\\n  bom: true,\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`.\\n\\nTo build the docs for this repo, run `pnpm build:docs`.\\n\"","changelog":"\"# @openfn/language-http\\n\\n## 4.2.2\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 4.2.0\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 8e1b86d: update http to new format\\n\\n## 4.0.1\\n\\n### Patch Changes\\n\\n- 4671e89: Migrate language-http\\n\"","functions":["get","post","put","patch","del","parseXML","parseCSV"]},
{"name":"khanacademy","adaptor":"language-khanacademy","version":"0.2.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.fetch](#module_Adaptor.fetch)\\n        * [new exports.fetch(params)](#new_module_Adaptor.fetch_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for khanacademy.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.fetch\\\"></a>\\n\\n### Adaptor.fetch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.fetch_new\\\"></a>\\n\\n#### new exports.fetch(params)\\nFetch data from the Khan Academy API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the query |\\n\\n**Example**  \\n```js\\nexecute(\\n  fetch(params)\\n)(state)\\n```\\n\"","readme":"\"# Language KhanAcademy\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n## fetch\\n\\n#### Sample configuration\\n\\n```json\\n{\\n  \\\"email\\\": \\\"yours\\\",\\n  \\\"password\\\": \\\"notmine\\\",\\n  \\\"consumerKey\\\": \\\"somEThINGkeyish\\\",\\n  \\\"secretKey\\\": \\\"otherThiNGfSECret\\\"\\n}\\n```\\n\\n#### sample usage\\n\\n```js\\nfetch({\\n  getEndpoint: 'user',\\n  queryParams: {\\n    email: 'thisoneuser@something.org',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/your-uuid',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"kobotoolbox","adaptor":"@openfn/language-kobotoolbox","version":"1.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.getForms(params, callback)](#module_Adaptor.getForms) ⇒ <code>Operation</code>\\n    * [.getSubmissions(params, callback)](#module_Adaptor.getSubmissions) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.getForms\\\"></a>\\n\\n### Adaptor.getForms(params, callback) ⇒ <code>Operation</code>\\nMake a request to get the list of forms\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form list |\\n\\n**Example**  \\n```js\\ngetForms({}, state => {\\n   console.log(state.data);\\n   return state;\\n});\\n```\\n<a name=\\\"module_Adaptor.getSubmissions\\\"></a>\\n\\n### Adaptor.getSubmissions(params, callback) ⇒ <code>Operation</code>\\nGet submissions for a specific form\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form submissions |\\n\\n**Example**  \\n```js\\ngetSubmissions({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\"","readme":"\"# Language KoboToolbox [![Build Status](https://travis-ci.org/OpenFn/language-kobotoolbox.svg?branch=master)](https://travis-ci.org/OpenFn/language-kobotoolbox)\\n\\nLanguage Pack for building expressions and operations to interact with the\\n[TEMPLATE] API.\\n\\n## Documentation\\n\\n## post\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"baseURL\\\": \\\"https://kf.kobotoolbox.org\\\",\\n  \\\"username\\\": \\\"mamadou@openfn.org\\\",\\n  \\\"password\\\": \\\"supersecret\\\",\\n  \\\"apiVersion\\\": \\\"v2\\\"\\n}\\n```\\n\\n#### Get the list of forms\\n\\n```js\\ngetForms({}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n### Get submissions for a specific form\\n\\nA query can be used to filter results.\\n\\n```js\\ngetSubmissions(\\n  { formId: 'aXecHjmbATuF6iGFmvBLBX', query: { end: { $gte: '2020-11-20' } } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the `Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-kobotoolbox\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 7fc47d8: Migrate kobotoolbox\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["getForms"]},
{"name":"mailchimp","adaptor":"@openfn/language-mailchimp","version":"0.2.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.upsertMembers](#module_Adaptor.upsertMembers)\\n        * [new exports.upsertMembers(params)](#new_module_Adaptor.upsertMembers_new)\\n    * [.tagMembers](#module_Adaptor.tagMembers)\\n        * [new exports.tagMembers(params)](#new_module_Adaptor.tagMembers_new)\\n    * [.startBatch](#module_Adaptor.startBatch)\\n        * [new exports.startBatch(params)](#new_module_Adaptor.startBatch_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.upsertMembers\\\"></a>\\n\\n### Adaptor.upsertMembers\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.upsertMembers_new\\\"></a>\\n\\n#### new exports.upsertMembers(params)\\nAdd members to a particular audience\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, users, and options |\\n\\n**Example**  \\n```js\\nupsertMembers(params)\\n```\\n<a name=\\\"module_Adaptor.tagMembers\\\"></a>\\n\\n### Adaptor.tagMembers\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.tagMembers_new\\\"></a>\\n\\n#### new exports.tagMembers(params)\\nTag members with a particular tag\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a tagId, members, and a list |\\n\\n**Example**  \\n```js\\ntagMembers(params)\\n```\\n<a name=\\\"module_Adaptor.startBatch\\\"></a>\\n\\n### Adaptor.startBatch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.startBatch_new\\\"></a>\\n\\n#### new exports.startBatch(params)\\nStart a batch with a list of operations.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | operations batch job |\\n\\n**Example**  \\n```js\\nstartBatch(params)\\n```\\n\"","readme":"\"# Language Mailchimp\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Mailchimp\\nmarketing API.\\n\\n## Documentation\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"apiKey\\\": \\\"someSecretShhh\\\",\\n  \\\"server\\\": \\\"us11\\\"\\n}\\n```\\n\\n#### sample expression with multiple operations\\n\\n```js\\nupsertMembers({\\n  listId: 'someId',\\n  users: state =>\\n    state.response.body.rows.map(u => ({\\n      email: u.email,\\n      status: u.allow_other_emails ? 'subscribed' : 'unsubscribed',\\n      mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\\n    })),\\n  options: {},\\n});\\n\\ntagMembers({\\n  listId: 'someId', // All Subscribers\\n  tagId: 'someTag', // User\\n  members: state => state.response.body.rows.map(u => u.email),\\n});\\n\\ntagMembers({\\n  listId: 'someId', // All Subscribers\\n  tagId: 'someTag', // Other Emails Allowed\\n  members: state =>\\n    state.response.body.rows\\n      .filter(u => u.allow_other_emails)\\n      .map(u => u.email),\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"mailgun","adaptor":"@openfn/language-mailgun","version":"0.2.2","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.send(params)](#module_Adaptor.send)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mailgun.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.send\\\"></a>\\n\\n### Adaptor.send(params)\\nCreate an event\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Params for sending an email |\\n\\n**Example**  \\n```js\\nsend({\\n  from: 'from_email',\\n  to: 'to_email',\\n  subject: 'Your Subject',\\n  text: 'Your message goes here',\\n  attachment: {\\n    url: 'www.google.com/doodle.png',\\n    filename: 'forYou.png',\\n  },\\n})\\n```\\n\"","readme":"\"# Language Mailgun\\n\\nLanguage Pack for building expressions and operations for working with the\\nmailgun API.\\n\\n[mailgun-js on npm](https://www.npmjs.com/package/mailgun-js)\\n\\n## Documentation\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"domain\\\": \\\"http://mailgun.com/domain\\\",\\n  \\\"apiKey\\\": \\\"mailgunapikey\\\"\\n}\\n```\\n\\n## send\\n\\n```js\\nsend(\\n  fields(\\n    field('from', 'from_email'),\\n    field('to', 'to_email'),\\n    field('subject', 'Your Subject'),\\n    field('text', 'Your message goes here')\\n  )\\n);\\n```\\n\\n[Docs](docs/index)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["send"]},
{"name":"medicmobile","adaptor":"@openfn/language-medicmobile","version":"0.2.0","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#fetchSubmissions\\\">fetchSubmissions(formId, params, postUrl)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Access form submissions and post them as JSON.</p>\\n</dd>\\n<dt><a href=\\\"#changesApi\\\">changesApi(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Access the CouchDB Changes API</p>\\n</dd>\\n<dt><a href=\\\"#pickFormData\\\">pickFormData(formId)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Select submissions for a specific form</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetchSubmissions\\\"></a>\\n\\n## fetchSubmissions(formId, params, postUrl) ⇒ <code>Operation</code>\\nAccess form submissions and post them as JSON.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Query parameters |\\n| params | <code>object</code> | Starting sequence id |\\n| postUrl | <code>string</code> | Inbox to post form data |\\n\\n**Example**  \\n```js\\nfetchSubmissions(\\n  \\\"pregnancy\\\", // formId\\n  { \\\"last-event-id\\\": 334 }, // params\\n  \\\"http://localhost:4000/inbox/abc-123-xyz\\\" // postUrl\\n);\\n```\\n<a name=\\\"changesApi\\\"></a>\\n\\n## changesApi(params, callback) ⇒ <code>Operation</code>\\nAccess the CouchDB Changes API\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nchangesApi(params, callback)\\n```\\n<a name=\\\"pickFormData\\\"></a>\\n\\n## pickFormData(formId) ⇒ <code>Operation</code>\\nSelect submissions for a specific form\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | The form ID. |\\n\\n**Example**  \\n```js\\npickFormData(formId)\\n```\\n\"","readme":"\"# Language Medic Mobile\\n\\nLanguage Pack for building expressions and operations to make calls to the Medic\\nMobile API.  \\n**For an overview of Medic's database, check out\\n[Medic's DB Schema v2](https://github.com/medic/medic-docs/blob/master/development/db-schema.md)**  \\nThe exported functions in this language package can be executed by\\n[OpenFn/core](https://github.com/OpenFn/core):\\n\\n```sh\\n../core/lib/cli.js execute -l ./lib/Adaptor -s ./tmp/state.json -e ./tmp/expression.js\\n```\\n\\nFor quick-start help, clone\\n[OpenFn/openfn-devtools](https://github.com/OpenFn/openfn-devtools) and follow\\nthe README.md\\n\\n## Documentation\\n\\n#### sample configuration\\n\\nWe connect to Medic's CouchDB api.\\n\\n```json\\n{\\n  \\\"server\\\": \\\"https://standard.app.medicmobile.org\\\",\\n  \\\"db\\\": \\\"medic\\\",\\n  \\\"username\\\": \\\"something\\\",\\n  \\\"password\\\": \\\"secret\\\"\\n}\\n```\\n\\n#### sample fetchSubmissions expression\\n\\n```js\\nfetchSubmissions(\\n  'pregnancy', // formId\\n  { 'last-event-id': 334 }, // params, last-event-id will be replaced by cursor\\n  'http://localhost:4000/inbox/abc-123-xyz' // postUrl\\n);\\n```\\n\\n#### sample changesApi and pickFormData usage\\n\\n```js\\n// get all the changes...\\nchangesApi({\\n  include_docs: true,\\n  // This only gets used the first time the job is run.\\n  // Subsequent runs take the lastSeq value as their cursor.\\n  // \\\"last-event-id\\\": 789,\\n});\\n\\n// Picks out the field data for a given formId.\\npickFormData('pregnancy');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["fetchSubmissions","changesApi","pickFormData"]},
{"name":"mongodb","adaptor":"@openfn/language-mongodb","version":"1.0.4","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#connect\\\">connect(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Connects to a mongoDb instance</p>\\n</dd>\\n<dt><a href=\\\"#disconnect\\\">disconnect(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes connection from the state.</p>\\n</dd>\\n<dt><a href=\\\"#insertDocuments\\\">insertDocuments(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Inserts documents into a mongoDb collection</p>\\n</dd>\\n<dt><a href=\\\"#findDocuments\\\">findDocuments(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Find documents in a mongoDb collection</p>\\n</dd>\\n<dt><a href=\\\"#updateDocument\\\">updateDocument(params)</a> ⇒ <code>State</code></dt>\\n<dd><p>Updates document (optionally upserting) into a mongoDb collection</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  insertDocuments(params),\\n  findDocuments(params)\\n)(state)\\n```\\n<a name=\\\"connect\\\"></a>\\n\\n## connect(state) ⇒ <code>State</code>\\nConnects to a mongoDb instance\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nconnect(state)\\n```\\n<a name=\\\"disconnect\\\"></a>\\n\\n## disconnect(state) ⇒ <code>State</code>\\nRemoves connection from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ndisconnect(state)\\n```\\n<a name=\\\"insertDocuments\\\"></a>\\n\\n## insertDocuments(params) ⇒ <code>State</code>\\nInserts documents into a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\ninsertDocuments({\\n   database: 'str',\\n   collection: 'kids',\\n   documents: [1,2,3]\\n  });\\n```\\n<a name=\\\"findDocuments\\\"></a>\\n\\n## findDocuments(params) ⇒ <code>State</code>\\nFind documents in a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\nfindDocuments({\\n   database: 'str',\\n   collection: 'cases',\\n   query: {a:3}\\n  });\\n```\\n<a name=\\\"updateDocument\\\"></a>\\n\\n## updateDocument(params) ⇒ <code>State</code>\\nUpdates document (optionally upserting) into a mongoDb collection\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**  \\n```js\\nupdateDocuments({\\n   database: 'str',\\n   collection: 'animals',\\n   filter: { type: 'fuzzy' },\\n   changes: { kind: 'soft' },\\n   options: { upsert: true }\\n  });\\n```\\n\"","readme":"\"# Language MongoDB\\n\\nLanguage Pack for building expressions and operations for use with MongoDB.\\n\\n## Documentation\\n\\n### sample configuration\\n\\n```json\\n{\\n  \\\"username\\\": \\\"something\\\",\\n  \\\"password\\\": \\\"secret\\\",\\n  \\\"clusterUrl\\\": \\\"yourCluster-xxxyzzz.mongodb.net\\\"\\n}\\n```\\n\\n### insertDocuments\\n\\n```js\\ninsertDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  documents: state => {\\n    return state.data.map(item => {\\n      return { name: item.name, age: item.age };\\n    });\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n### findDocuments\\n\\n```js\\nfindDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  query: state => {\\n    return { name: 'stu' };\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n[Docs](docs/index)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"mssql","adaptor":"@openfn/language-mssql","version":"3.1.1","docs":"\"## Classes\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#sql\\\">sql</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#findValue\\\">findValue</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insert\\\">insert</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insertMany\\\">insertMany</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsert\\\">upsert</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsertIf\\\">upsertIf</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsertMany\\\">upsertMany</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#describeTable\\\">describeTable</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insertTable\\\">insertTable</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#modifyTable\\\">modifyTable</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#createConnection\\\">createConnection(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Creates a connection.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#addRowsToRefs\\\">addRowsToRefs(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Sets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.</p>\\n</dd>\\n<dt><a href=\\\"#flattenRows\\\">flattenRows(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Returns a flatten object of the rows (array of arrays) with rowCount.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute\\n**Kind**: global class  \\n<a name=\\\"new_execute_new\\\"></a>\\n\\n### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mssql.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sql\\\"></a>\\n\\n## sql\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_sql_new\\\"></a>\\n\\n### new exports.sql(params)\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nsql({ query, options })\\n```\\n<a name=\\\"findValue\\\"></a>\\n\\n## findValue\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_findValue_new\\\"></a>\\n\\n### new exports.findValue(filter)\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\\n   operator: { first_name: 'like', last_name: '='}\\n })\\n```\\n<a name=\\\"insert\\\"></a>\\n\\n## insert\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insert_new\\\"></a>\\n\\n### new exports.insert(table, record, options)\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert(table, record, {setNull: [\\\"'undefined'\\\", \\\"''\\\"], logValues: false})\\n```\\n<a name=\\\"insertMany\\\"></a>\\n\\n## insertMany\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insertMany_new\\\"></a>\\n\\n### new exports.insertMany(table, records, options)\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany(table, records, { setNull: false, writeSql: true, logValues: false })\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsert_new\\\"></a>\\n\\n### new exports.upsert(table, uuid, record, options)\\nInsert or update a record using SQL MERGE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(table, uuid, record, { setNull: \\\"'undefined'\\\", logValues: false})\\nupsert(table, [uuid1, uuid2], record, { setNull: \\\"'undefined'\\\", logValues: false})\\n```\\n<a name=\\\"upsertIf\\\"></a>\\n\\n## upsertIf\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsertIf_new\\\"></a>\\n\\n### new exports.upsertIf(logical, table, uuid, record, options)\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'uuid', // a DB column with a unique constraint\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true, logValues: false }\\n)\\n```\\n<a name=\\\"upsertMany\\\"></a>\\n\\n## upsertMany\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsertMany_new\\\"></a>\\n\\n### new exports.upsertMany(table, uuid, records, options)\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n 'users', 'email', records, { logValues: false }\\n)\\nupsertMany(\\n 'users', ['email', 'phone'], records, { logValues: false }\\n)\\n```\\n<a name=\\\"describeTable\\\"></a>\\n\\n## describeTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_describeTable_new\\\"></a>\\n\\n### new exports.describeTable(tableName, options)\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"insertTable\\\"></a>\\n\\n## insertTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insertTable_new\\\"></a>\\n\\n### new exports.insertTable(tableName, columns, options)\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"modifyTable\\\"></a>\\n\\n## modifyTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_modifyTable_new\\\"></a>\\n\\n### new exports.modifyTable(tableName, columns, options)\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"createConnection\\\"></a>\\n\\n## createConnection(state) ⇒ <code>State</code>\\nCreates a connection.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"addRowsToRefs\\\"></a>\\n\\n## addRowsToRefs(state, rows) ⇒ <code>State</code>\\nSets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n<a name=\\\"flattenRows\\\"></a>\\n\\n## flattenRows(state, rows) ⇒ <code>State</code>\\nReturns a flatten object of the rows (array of arrays) with rowCount.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n\"","readme":"\"# Language MSSQL [![Build Status](https://travis-ci.org/OpenFn/language-mssql.svg?branch=master)](https://travis-ci.org/OpenFn/language-mssql)\\n\\nLanguage Pack for connecting to Azure SQL Server via OpenFn.\\n\\n## Documentation\\n\\n### Sample configuration\\n\\n```json\\n{\\n  \\\"userName\\\": \\\"shhh\\\",\\n  \\\"password\\\": \\\"secret\\\",\\n  \\\"server\\\": \\\"something.database.windows.net\\\",\\n  \\\"database\\\": \\\"my-demo\\\"\\n}\\n```\\n\\n### Sample expression\\n\\n## sql query\\n\\n```js\\nsql({\\n  query: `\\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\\n    WHERE TABLE_TYPE = 'BASE TABLE'\\n    AND TABLE_CATALOG='my-demo'\\n  `,\\n});\\n\\nsql({\\n  query: `SELECT * FROM Household`,\\n  options: {\\n    writeSql: true, // Keep to true to log query (otherwise make it false).\\n    execute: true, // keep to false to not alter DB\\n  },\\n});\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nfn(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert one single record\\n\\n```js\\ninsert(\\n  'SomeDB.dbo.SupplierTest',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Nunya Bihz-Nash',\\n  },\\n  {\\n    // The optional `options` argument allows for global string replacement with\\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\\n    // to NULL. It can be a single string or an array of strings.\\n    // It DEFAULTS to \\\"'undefined'\\\", and can be turned off w/ `false`.\\n    setNull: \\\"'undefined'\\\",\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nThis function insert or update depending on the existence of a record in the\\ndatabase.\\n\\n```js\\nupsert(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Now I can tell!',\\n  },\\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\\n  { setNull: false, logValues: true }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users',\\n  'user_id',\\n  {\\n    name: 'Elodie',\\n    id: 7,\\n  },\\n  // Replace any occurence of '' and 'undefined' to NULL\\n  {\\n    setNull: [\\\"''\\\", \\\"'undefined'\\\"],\\n    writeSql: true,\\n    execute: false,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert Many records\\n\\nThis function allows the insert of a set of records inside a table all at once.\\nPass `logQuery` option to `true` to display the query.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\ninsertMany(\\n  'SomeDB.dbo.Supplier',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update Many records\\n\\nThis function inserts or updates many records all at once depending on their\\nexistence in the database.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\nIn case we need to check on multiple columns before upserting, we can have an\\narray of `uuids`.\\n\\n```js\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  ['SupplierNumber', 'SupplierCode'],\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n        SupplierCode: s.code,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\n## Describe a table from mssql\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: false, execute: true });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mssql\\n\\n## 3.1.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.1.0\\n\\n### Minor Changes\\n\\n- c9b7ed7: Add language-mssql in monorepo\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["sql","findValue","insert","insertMany","upsert","upsertIf","upsertMany","describeTable","insertTable","modifyTable"]},
{"name":"nexmo","adaptor":"language-nexmo","version":"0.1.1","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#sendSMS\\\">sendSMS(from, toNumber, message)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Sends an SMS message to a specific phone number</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sendSMS\\\"></a>\\n\\n## sendSMS(from, toNumber, message) ⇒ <code>Operation</code>\\nSends an SMS message to a specific phone number\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| from | <code>String</code> | Name or number the message should be sent from. |\\n| toNumber | <code>String</code> | Destination phone number. |\\n| message | <code>String</code> | Text message |\\n\\n**Example**  \\n```js\\nsendSMS(\\\"OpenFn\\\", \\\"phoneNumber\\\", \\\"Hello World!\\\")\\n```\\n\"","readme":"\"# Language Nexmo\\n\\nLanguage Pack for building expressions and operations to interact with the Nexmo\\nAPI.\\n\\n## Documentation\\n\\n## sendSMS\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"apiKey\\\": \\\"mYaP1K3y\\\",\\n  \\\"apiSecret\\\": \\\"supersecret\\\"\\n}\\n```\\n\\n#### sample expression\\n\\n```js\\nsendSMS('OpenFn', '0123456789', 'HelloWorld!');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["sendSMS"]},
{"name":"ocl","adaptor":"@openfn/language-ocl","version":"0.2.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n        * [.map(state, [params])](#module_Adaptor.map) ⇒ <code>Operation</code>\\n            * [~retrievedMapping](#module_Adaptor.map..retrievedMapping)\\n    * _inner_\\n        * [~auth](#module_Adaptor..auth)\\n        * [~params](#module_Adaptor..params)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.map\\\"></a>\\n\\n### Adaptor.map(state, [params]) ⇒ <code>Operation</code>\\nReplaces source keys(data elements) to destination keys(data elements) with out changing state.data structure\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>Object</code> | Json object containing keys and data values; |\\n| [params] | <code>Object</code> | E.g. `{users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" } |\\n\\n**Example**  \\n```js\\nmapp(state, state)\\n```\\n<a name=\\\"module_Adaptor.map..retrievedMapping\\\"></a>\\n\\n#### map~retrievedMapping\\nIn order to minimize web trafic, already accessed mapping\\ninformation is put into this variable to\\nreuse values for the consucutive keys.\\n\\n**Kind**: inner constant of [<code>map</code>](#module_Adaptor.map)  \\n<a name=\\\"module_Adaptor..auth\\\"></a>\\n\\n### Adaptor~auth\\nDo we have a mechanism to retrieve those from configuration\\n\\n**Kind**: inner property of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"module_Adaptor..params\\\"></a>\\n\\n### Adaptor~params\\nSpecify query parameters that may include OCL Data Source, MappingType, includion and exclusion values\\n\\n**Kind**: inner property of [<code>Adaptor</code>](#module_Adaptor)  \\n\"","readme":"\"# Language OCL [![Build Status](https://travis-ci.org/OpenFn/language-ocl.svg?branch=main)](https://travis-ci.org/OpenFn/language-ocl)\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OCL API](http://ocl.github.io/ocl-docs/master/en/developer/html/ocl_developer_manual.html).\\n\\n## Documentation\\n\\nView the [docs site](https://openfn.github.io/language-ocl/) for full technical\\ndocumentation. Below, find a samples of the most commonly used helper functions.\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"username\\\": \\\"username\\\",\\n  \\\"password\\\": \\\"supersecretpassword\\\",\\n  \\\"hostUrl\\\": \\\"https://api.openconceptlab.org/\\\"\\n}\\n```\\n\\n## Mapping source concepts to destination API\\n\\n#### Recieve form data from source application and convert data element keys to destination application.\\n\\n```js\\nmap(  \\\"data\\\": {\\n    \\\"a\\\": 1,\\n    \\\"b\\\": 2},\\n  {users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" }\\n  );\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-ocl\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 5a06d7f: Migrate OCL, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["map"]},
{"name":"openfn","adaptor":"@openfn/language-openfn","version":"1.1.4","docs":"\"## Classes\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#request\\\">request</a></dt>\\n<dd></dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute\\n**Kind**: global class  \\n<a name=\\\"new_execute_new\\\"></a>\\n\\n### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_request_new\\\"></a>\\n\\n### new exports.request(options, callback)\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nrequest({method: 'get', path: '/jobs/});\\n```\\n\"","readme":"\"# Language OpenFn [![Build Status](https://travis-ci.org/OpenFn/language-openfn.svg?branch=master)](https://travis-ci.org/OpenFn/language-openfn)\\n\\nAdaptor for building expressions and operations to interact with the OpenFn API.\\n\\n## Documentation\\n\\n## request\\n\\n```js\\nrequest({\\n  method: 'get',\\n  path: 'jobs',\\n  params: {\\n    project_id: 490,\\n  },\\n});\\nrequest(\\n  {\\n    method: 'post',\\n    path: 'jobs',\\n    data: {\\n      trigger_id: 1,\\n      expression: 'steps()',\\n    },\\n  },\\n  state => {\\n    console.log('cool callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"host\\\": \\\"https://www.openfn.org\\\",\\n  \\\"username\\\": \\\"someone@ngo.org\\\",\\n  \\\"password\\\": \\\"supersecret\\\",\\n  \\\"projectId\\\": \\\"ID\\\"\\n}\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["request"]},
{"name":"postgresql","adaptor":"@openfn/language-postgresql","version":"3.4.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.sql](#module_Adaptor.sql)\\n        * [new exports.sql(sqlQuery, options)](#new_module_Adaptor.sql_new)\\n    * [.findValue](#module_Adaptor.findValue)\\n        * [new exports.findValue(filter)](#new_module_Adaptor.findValue_new)\\n    * [.insert](#module_Adaptor.insert)\\n        * [new exports.insert(table, record, options)](#new_module_Adaptor.insert_new)\\n    * [.insertMany](#module_Adaptor.insertMany)\\n        * [new exports.insertMany(table, records, options)](#new_module_Adaptor.insertMany_new)\\n    * [.upsert](#module_Adaptor.upsert)\\n        * [new exports.upsert(table, uuid, record, options)](#new_module_Adaptor.upsert_new)\\n    * [.upsertIf](#module_Adaptor.upsertIf)\\n        * [new exports.upsertIf(logical, table, uuid, record, options)](#new_module_Adaptor.upsertIf_new)\\n    * [.upsertMany](#module_Adaptor.upsertMany)\\n        * [new exports.upsertMany(table, uuid, data, options)](#new_module_Adaptor.upsertMany_new)\\n    * [.describeTable](#module_Adaptor.describeTable)\\n        * [new exports.describeTable(tableName, options)](#new_module_Adaptor.describeTable_new)\\n    * [.insertTable](#module_Adaptor.insertTable)\\n        * [new exports.insertTable(tableName, columns, options)](#new_module_Adaptor.insertTable_new)\\n    * [.modifyTable](#module_Adaptor.modifyTable)\\n        * [new exports.modifyTable(tableName, columns, options)](#new_module_Adaptor.modifyTable_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for postgresql.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.sql\\\"></a>\\n\\n### Adaptor.sql\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.sql_new\\\"></a>\\n\\n#### new exports.sql(sqlQuery, options)\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>function</code> | a function which takes state and returns a string of SQL. |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nsql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\\n```\\n<a name=\\\"module_Adaptor.findValue\\\"></a>\\n\\n### Adaptor.findValue\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.findValue_new\\\"></a>\\n\\n#### new exports.findValue(filter)\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mamadou' },\\n   operator: { first_name: 'like' }\\n })\\n```\\n<a name=\\\"module_Adaptor.insert\\\"></a>\\n\\n### Adaptor.insert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insert_new\\\"></a>\\n\\n#### new exports.insert(table, record, options)\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert('users', { name: 'Elodie', id: 7 }, { setNull: \\\"'NaN'\\\", logValues: true });\\n```\\n<a name=\\\"module_Adaptor.insertMany\\\"></a>\\n\\n### Adaptor.insertMany\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insertMany_new\\\"></a>\\n\\n#### new exports.insertMany(table, records, options)\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>array</code> | An array or a function that takes state and returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany('users', state => state.data.recordArray, { setNull: \\\"'undefined'\\\", logValues: true });\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(table, uuid, record, options)\\nInsert or update a record using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql:true, execute: true, logValues: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertIf\\\"></a>\\n\\n### Adaptor.upsertIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertIf_new\\\"></a>\\n\\n#### new exports.upsertIf(logical, table, uuid, record, options)\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertMany\\\"></a>\\n\\n### Adaptor.upsertMany\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertMany_new\\\"></a>\\n\\n#### new exports.upsertMany(table, uuid, data, options)\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n  'users', // the DB table\\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  [\\n    { name: 'one', email: 'one@openfn.org },\\n    { name: 'two', email: 'two@openfn.org },\\n  ]\\n { logValues: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.describeTable\\\"></a>\\n\\n### Adaptor.describeTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.describeTable_new\\\"></a>\\n\\n#### new exports.describeTable(tableName, options)\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"module_Adaptor.insertTable\\\"></a>\\n\\n### Adaptor.insertTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insertTable_new\\\"></a>\\n\\n#### new exports.insertTable(tableName, columns, options)\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"module_Adaptor.modifyTable\\\"></a>\\n\\n### Adaptor.modifyTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.modifyTable_new\\\"></a>\\n\\n#### new exports.modifyTable(tableName, columns, options)\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\"","readme":"\"# Language PostgreSQL\\n\\nLanguage Pack for building expressions and operations to run PostgreSQL queries.\\n\\n## Documentation\\n\\n## required configuration for Heroku postgres\\n\\n```json\\n{\\n  \\\"host\\\": \\\"some-host-url.compute-1.amazonaws.com\\\",\\n  \\\"port\\\": \\\"5432\\\",\\n  \\\"database\\\": \\\"wouldntyouliketoknow\\\",\\n  \\\"user\\\": \\\"me\\\",\\n  \\\"password\\\": \\\"noway\\\",\\n  \\\"ssl\\\": true,\\n  \\\"allowSelfSignedCert\\\": true\\n}\\n```\\n\\n## `sql(query)`\\n\\nExecute an sql query. An option can be added to either log the query or not and\\neither execute the query or no. The options can be omitted as well.\\n\\n#### sample usage\\n\\n```js\\nsql(\\n  state =>\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`,\\n  { writeSql: true, execute: true }\\n);\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nalterState(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert a single record\\n\\nThis functions is used to insert a single record in postgres database. An option\\n`writeSql` allows to log the generated sql query. The `setNull` option allows to\\nreplace the specified elements with `NULL`.\\n\\n```js\\ninsert(\\n  'users',\\n  {\\n    email: 'antony@gmail.com',\\n    first_name: 'Antony',\\n    inserted_at: '2020-08-27 00:00:00',\\n    updated_at: '2020-08-27 00:00:00',\\n  },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nInsert or Update if matched. An option, `execute`, allows to either run the\\ngenerated query or no.\\n\\n```js\\nupsert(\\n  'users',\\n  'email',\\n  {\\n    email: 'luca@openfn.org',\\n    first_name: 'Luca',\\n    inserted_at: '2010-01-01 00:00:00',\\n    updated_at: '2010-01-01 00:00:00',\\n  },\\n  {\\n    setNull: [\\\"'NaN'\\\", \\\"'undefined'\\\"],\\n    writeSql: false,\\n    execute: true,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\\n  name: 'Elodie',\\n  id: 7,\\n});\\n```\\n\\n## Insert many records in postgresql\\n\\nThis function allows the insert of a set of records inside a table all at once.\\n\\n```js\\ninsertMany(\\n  'users',\\n  state =>\\n    state.data.people.map(s => {\\n      return {\\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\\n        inserted_at: '2020-01-01 00:00:00',\\n        updated_at: '2020-01-01 00:00:00',\\n      };\\n    }),\\n  { logValues: true }\\n);\\n```\\n\\n## Upsert many records in postgresql\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany('users', 'ON CONSTRAINT users_pkey', state =>\\n  state.data.people.map(s => {\\n    return {\\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\\n      inserted_at: '2020-01-01 00:00:00',\\n      updated_at: '2020-01-01 00:00:00',\\n    };\\n  })\\n);\\n```\\n\\n## Describe a table from postgres\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: true, execute: false });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-postgresql\\n\\n## 3.4.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.4.0\\n\\n### Minor Changes\\n\\n- 44ae341: Migrate postgresql\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["sql","findValue","insert","insertMany","upsert","upsertIf","upsertMany","describeTable","insertTable","modifyTable"]},
{"name":"primero","adaptor":"@openfn/language-primero","version":"2.10.1","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#generateAuthString\\\">generateAuthString(state)</a> ⇒ <code>string</code></dt>\\n<dd><p>Generate an auth string to support multiple types of auth credentials.</p>\\n</dd>\\n<dt><a href=\\\"#queryHandler\\\">queryHandler(state, params, callback)</a> ⇒ <code>State</code></dt>\\n<dd><p>Execute custom query</p>\\n</dd>\\n<dt><a href=\\\"#login\\\">login(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Logs in to Primero.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#getCases\\\">getCases(query, options, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get cases from Primero</p>\\n</dd>\\n<dt><a href=\\\"#createCase\\\">createCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#updateCase\\\">updateCase(id, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#upsertCase\\\">upsertCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert case to Primero</p>\\n</dd>\\n<dt><a href=\\\"#getReferrals\\\">getReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get referrals for a specific case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#createReferrals\\\">createReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create referrals in Primero</p>\\n</dd>\\n<dt><a href=\\\"#updateReferral\\\">updateReferral(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update a single referral for a specific case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#getForms\\\">getForms(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get forms from Primero</p>\\n</dd>\\n<dt><a href=\\\"#getLookups\\\">getLookups(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get lookups from Primero</p>\\n</dd>\\n<dt><a href=\\\"#getLocations\\\">getLocations(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get locations from Primero</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"generateAuthString\\\"></a>\\n\\n## generateAuthString(state) ⇒ <code>string</code>\\nGenerate an auth string to support multiple types of auth credentials.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ngenerateAuthString(state)\\n```\\n<a name=\\\"queryHandler\\\"></a>\\n\\n## queryHandler(state, params, callback) ⇒ <code>State</code>\\nExecute custom query\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n| params | <code>object</code> | \\n| callback | <code>function</code> | \\n\\n<a name=\\\"login\\\"></a>\\n\\n## login(state) ⇒ <code>State</code>\\nLogs in to Primero.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"getCases\\\"></a>\\n\\n## getCases(query, options, callback) ⇒ <code>Operation</code>\\nGet cases from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum, option to getReferrals |\\n| options | <code>object</code> | (Optional) an object with a getReferrals key to fetch referrals |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetCases({\\n  remote: true,\\n  case_id: '6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz'\\n  query: 'sex=male' // optional\\n}, { withReferrals: true }, callback)\\n```\\n<a name=\\\"createCase\\\"></a>\\n\\n## createCase(params, callback) ⇒ <code>Operation</code>\\nCreate case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ncreateCase({\\n  data: state => data {\\n    \\\"enabled\\\": true,\\n    \\\"age\\\": 15,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n    \\\"owned_by\\\": \\\"primero_cp\\\"\\n  }}, callback)\\n```\\n<a name=\\\"updateCase\\\"></a>\\n\\n## updateCase(id, params, callback) ⇒ <code>Operation</code>\\nUpdate case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | an ID to use for the update. |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupdateCase(\\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\", {\\n  data: state => data {\\n    \\\"age\\\": 20,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  }}, callback)\\n```\\n<a name=\\\"upsertCase\\\"></a>\\n\\n## upsertCase(params, callback) ⇒ <code>Operation</code>\\nUpsert case to Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId and some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertCase({\\n  externalIds: ['case_id'],\\n  data: state => ({\\n    \\\"age\\\": 20,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  })\\n});\\n```\\n<a name=\\\"getReferrals\\\"></a>\\n\\n## getReferrals(params, callback) ⇒ <code>Operation</code>\\nGet referrals for a specific case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetReferrals({\\n  externalId: \\\"record_id\\\",\\n  id: \\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\",\\n}, callback)\\n```\\n<a name=\\\"createReferrals\\\"></a>\\n\\n## createReferrals(params, callback) ⇒ <code>Operation</code>\\nCreate referrals in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with referral data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ncreateReferrals({\\n  data: {\\n    \\\"ids\\\": ['case_id'],\\n     \\\"transitioned_to\\\": \\\"primero_cp\\\",\\n     \\\"notes\\\": \\\"Creating a referral\\\"\\n  }\\n}, callback)\\n```\\n<a name=\\\"updateReferral\\\"></a>\\n\\n## updateReferral(params, callback) ⇒ <code>Operation</code>\\nUpdate a single referral for a specific case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId value to use, the id and the referral id to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupdateReferral({\\n  caseExternalId: \\\"record_id\\\",\\n  caseId: \\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\"\\n  id: \\\"37612f65-3bda-48eb-b526-d31383f94166\\\",\\n  data: state => state.data\\n}, callback)\\n```\\n<a name=\\\"getForms\\\"></a>\\n\\n## getForms(query, callback) ⇒ <code>Operation</code>\\nGet forms from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetForms({\\n  record_type: '' // Optional. Filters by the record type of the form,\\n  module_id: 'id' //Optional. Filter forms by module,\\n}, callback)\\n```\\n<a name=\\\"getLookups\\\"></a>\\n\\n## getLookups(query, callback) ⇒ <code>Operation</code>\\nGet lookups from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetLookups({\\n  page: 1 // Optional. Pagination. Defaults to 1,\\n  per: 20 // Optional. Records per page. Defaults to 20,\\n}, callback)\\n```\\n<a name=\\\"getLocations\\\"></a>\\n\\n## getLocations(query, callback) ⇒ <code>Operation</code>\\nGet locations from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetLocations({\\n  page: 1 // Optional.\\n  per: 20 // Optional. Records per page,\\n  hierarchy: // Defaults to false,\\n}, callback)\\n```\\n\"","readme":"\"<img src=\\\"https://user-images.strikinglycdn.com/res/hrscywv4p/image/upload/c_limit,fl_lossy,h_9000,w_1200,f_auto,q_auto/195711/_IMS-logos_all_TM-02_vagcfc.png\\\" height=\\\"100\\\"/>\\n\\n# language-primero [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with UNICEF's\\nPrimero API.\\n\\n**See Update Docs Site: https://openfn.github.io/language-primero/ **\\n\\n## Primero API Versions\\n\\n### Adaptor for Primero v2.0\\n\\nThis documentation outlines the functions available for Primero `v2.0` in the\\nmain branch. The API documentation is available at:\\nhttps://github.com/primeroIMS/primero/tree/development_v2/app/controllers/api\\n\\n### Adaptor for Primero v1.0 still available on the `v1` branch.\\n\\n`v1.0.7` of this adaptor was built for the Primero `v1.1` API:\\nhttps://github.com/OpenFn/language-primero/blob/v1/README.md\\n\\n[Primero API v1.1 Documentation](https://docs.google.com/document/d/1jpaT2_UBBnc3PxPYlLMBEzNUkyfuxRZiksywG5MKM0Q/edit)\\n\\n#### Primero Authentication Strategies\\n\\nThe Primero team is considering a shift to Microsoft Azure Active Directory B2C\\nfor auth. We can likely accommodate this with a similar pattern as has been used\\nin our Microsoft Dynamics, Github, or Google Sheets adaptors, but we'll need to\\nawait final doucmentation for Primero's `v2` API before making changes.\\n\\n[Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)\\n\\n## Technical Documentation\\n\\n### Sample configuration\\n\\n```json\\n{\\n  \\\"user\\\": \\\"admin\\\",\\n  \\\"password\\\": \\\"admin\\\",\\n  \\\"url\\\": \\\"https://some-primero-instance.unicef.org\\\",\\n  \\\"basicAuth\\\": false\\n}\\n```\\n\\n### Get cases from Primero with query parameters\\n\\nUse this function to get cases from Primero based on a set of query parameters.\\nNote that in many implementations, the `remote` attribute should be set to\\n`true` to ensure that only cases marked for remote access will be retrieved. You\\ncan specify a case_id value to fetch a unique case and a query string to filter\\nresult.\\n\\n```js\\ngetCases(\\n  {\\n    remote: true,\\n    query: 'sex=male',\\n  },\\n  state => {\\n    console.log('Here is the callback.');\\n    return state;\\n  }\\n);\\n```\\n\\n```js\\ngetCases(\\n  {\\n    remote: true,\\n    case_id: '6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz',\\n  },\\n  state => {\\n    console.log('We are fetching a unique case id');\\n    return state;\\n  }\\n);\\n```\\n\\n### Get forms from Primero with query parameters\\n\\nUse this function to get forms from Primero that are accessible to this user\\nbased on a set of query parameters. The user can filter the form list by record\\ntype and module.\\n\\n```js\\ngetForms(state => {\\n  console.log('We are fetching forms from Primero for this user');\\n  return state;\\n});\\n```\\n\\n```js\\ngetForms(\\n  {\\n    module_id: '6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz',\\n  },\\n  state => {\\n    console.log('We are fetching a unique form using module_id');\\n    return state;\\n  }\\n);\\n```\\n\\n### Get lookups from Primero with query parameters\\n\\nUse this function to get a paginated list of all lookups that are accessible to\\nthis user from Primero.\\n\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1)\\n\\n```js\\ngetLookups(\\n  {\\n    per: 10000,\\n    page: 1,\\n  },\\n  state => {\\n    console.log('Here is the callback.');\\n    return state;\\n  }\\n);\\n```\\n\\n### Get loocations from Primero with query parameters\\n\\nUse this function to get a paginated list of all locations that are accessible\\nto this user from Primero. Note: You can specify a `per` value to fetch records\\nper page(Defaults to 20). Also you can specify `page` value to fetch pagination\\n(Defaults to 1). Another parameter is `hierarchy: true` (Defaults to false)\\n\\n```js\\ngetLocations(\\n  {\\n    per: 100000,\\n  },\\n  state => {\\n    console.log('Here is the callback.');\\n    return state;\\n  }\\n);\\n```\\n\\n### Create a new case in Primero\\n\\nUse this function to insert a new case in Primero based on a set of Data.\\n\\n```js\\ncreateCase(\\n  {\\n    data: state => ({\\n      remote: true,\\n      enabled: true,\\n      age: 15,\\n      sex: 'male',\\n      name: 'Alex',\\n      status: 'open',\\n      case_id: '6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz',\\n      child: {\\n        date_of_birth: \\\"2020-01-02\\\",\\n        ...,\\n        services_section: [ ... ],\\n        transitions: [ ... ]\\n      },\\n    })\\n  }\\n);\\n```\\n\\n### Update case with query Parameters\\n\\nUse this function to update an existing case from Primero. In this\\nimplementation, the function uses an ID to check for the case to update.\\n\\n```js\\nupdateCase(\\n    \\\"case_id\\\", {\\n    data: {\\n      remote: true,\\n      oscar_number: c.oscar_number,\\n      case_id: c.case_id,\\n      child: {\\n        date_of_birth: \\\"2020-01-02\\\",\\n        ...,\\n        services_section: [ ... ],\\n        transitions: [ ... ]\\n      },\\n    }\\n  }\\n);\\n```\\n\\n### Update or Insert a case with query Parameters\\n\\nUse this function to update an existing case from Primero or to insert it\\notherwise. In this implementation, we first fetch the list of cases, then we\\ncheck if the case exist before choosing the right operation to do.\\n\\n```js\\nupsertCase(\\n  {\\n    externalIds: [\\\"case_id\\\"],\\n    data: {\\n      remote: true,\\n      oscar_number: c.oscar_number,\\n      case_id: c.case_id,\\n      child: {\\n        date_of_birth: \\\"2020-01-02\\\",\\n        ...,\\n        services_section: [ ... ],\\n        transitions: [ ... ]\\n      },\\n    }\\n  },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n### Get referrals for a case in Primero\\n\\nUse this function to get the list of referrals of one case from Primero. The\\nsearch can be done using either `record id` or `case id`.\\n\\n```js\\ngetReferrals(\\n  { externalId: 'case_id' },\\n  'a59e880e-d58f-4b68-ba6e-e0616a49aefd',\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n### Create referrals for one or multiple cases in Primero\\n\\nUse this function to bulk refer to one or multiple cases from Primero\\n\\n```js\\ncreateReferrals(\\n  {\\n    data: {\\n      ids: ['case_id'],\\n      transitioned_to: 'primero_cp',\\n      notes: 'Creating a referral',\\n    },\\n  },\\n  state => {\\n    console.log('Here is the callback.');\\n    return state;\\n  }\\n);\\n```\\n\\n### Update referrals for a case in Primero\\n\\nUse this function to update one referral using the referral_id. The update is\\nmade using either the `record id` or `case id`.\\n\\n```js\\nupdateReferrals(\\n  {\\n    externalId: 'case_id',\\n    id: '2a2cc932-4b6f-43a6-928d-40fc9949eb02',\\n    referral_id: 'c377bcb2-122d-46ee-a861-869e1b6476cd',\\n    data: {\\n      status: 'accepted',\\n      id: '4c58d02f-3182-4006-b2fe-96aa797f5ee7',\\n      type: 'Referral',\\n      record_type: 'case',\\n    },\\n  },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-primero\\n\\n## 2.10.1\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.10.0\\n\\n### Minor Changes\\n\\n- 33742bf: Modify `composeNextState` so that `getCases` can pass it a third\\n  argument: the metadata from Primero's response.\\n\\n  `getCases` will now not only return an array of `cases` in `state.data`, but\\n  metadata related to pagination in `state.metadata`.\\n\\n### Patch Changes\\n\\n- 2014694: remove travis url in readme\\n- bb764db: Conditionally check for 'withReferrals' in case no options are\\n  provided\\\"\\n\\n## 2.9.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 2.9.1\\n\\n### Patch Changes\\n\\n- d4ac748: Skipped failing test until we have a new strat (it's working)\\n\\n## 2.9.0\\n\\n### Minor Changes\\n\\n- b37a4ad: add language primero into monorepo\\n\\n### Patch Changes\\n\\n- adb97a0: Fixed issue where upsertCase always took state.data for main params\\n\"","functions":["getCases","createCase","updateCase","upsertCase","getReferrals","createReferrals","updateReferral","getForms","getLookups","getLocations"]},
{"name":"progres","adaptor":"@openfn/language-progres","version":"1.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.postData(params, callback)](#module_Adaptor.postData) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.postData\\\"></a>\\n\\n### Adaptor.postData(params, callback) ⇒ <code>Operation</code>\\nMake a POST request with a certificate\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Url, Headers and Body parameters |\\n| callback | <code>function</code> | (Optional) A callback function |\\n\\n**Example**  \\n```js\\npostData({\\n url: urlDTP,\\n body: obj,\\n headers: {\\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\\n },\\n agentOptions: {\\n   key,\\n   cert,\\n },\\n}, callback)(state)\\n```\\n\"","readme":"\"# language-progres [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\">](https://www.openfn.org) [![Build Status](https://travis-ci.org/OpenFn/language-progres.svg?branch=master)](https://travis-ci.org/OpenFn/language-progres)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the UNHCR\\nProGres v4 API.\\n\\n## Design notes\\n\\n- Integration must run through UNHCR's DTP, a middleware layer that provides a\\n  public API for UNHCR internal software.\\n- An API token _and_ a self-signed certificate must be provided for\\n  communication with UNHCR's DTP.\\n- Two-way sync must be possible between Primero and ProGres\\n- Teams still in discussion about whether the most common use-case will be a\\n  timed sync or real-time/event-based sync.\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/language-progres/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n### sample configuration\\n\\n```json\\n{\\n  \\\"url\\\": \\\"https://endpoint/To/DTP\\\",\\n  \\\"key\\\": \\\"-----BEGIN PRIVATE KEY-----SOMETYPEOFPRIVATEVALUE-----END PRIVATE KEY-----\\\",\\n  \\\"cert\\\": \\\"-----BEGIN CERTIFICATE-----SOMETYPEOFVALUE-----END CERTIFICATE-----\\\",\\n  \\\"token\\\": \\\"[REDACTED]\\\"\\n}\\n```\\n\\n### Posting data to an endpoint with SSL cert authentication\\n\\n```js\\npostData({\\n  url: urlDTP,\\n  body: { a: 1 },\\n  headers: {\\n    'Subscription-Key': configuration['token'],\\n  },\\n  agentOptions: {\\n    key,\\n    cert,\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["postData"]},
{"name":"rapidpro","adaptor":"@openfn/language-rapidpro","version":"0.4.7","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.addContact(params, callback)](#module_Adaptor.addContact) ⇒ <code>Operation</code>\\n    * [.upsertContact(params, callback)](#module_Adaptor.upsertContact) ⇒ <code>Operation</code>\\n    * [.startFlow(params, callback)](#module_Adaptor.startFlow) ⇒ <code>Operation</code>\\n    * [.sendBroadcast(params, callback)](#module_Adaptor.sendBroadcast) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.addContact\\\"></a>\\n\\n### Adaptor.addContact(params, callback) ⇒ <code>Operation</code>\\nAdds a new contact to RapidPro\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\naddContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n<a name=\\\"module_Adaptor.upsertContact\\\"></a>\\n\\n### Adaptor.upsertContact(params, callback) ⇒ <code>Operation</code>\\nUpserts a contact to RapidPro by URN\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to upsert a contact |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupsertContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n<a name=\\\"module_Adaptor.startFlow\\\"></a>\\n\\n### Adaptor.startFlow(params, callback) ⇒ <code>Operation</code>\\nStart a RapidPro flow for a number of contacts\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nstartFlow({\\n  flow: \\\"f5901b62-ba76-4003-9c62-72fdacc1b7b7\\\",\\n  restart_participants: false,\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n<a name=\\\"module_Adaptor.sendBroadcast\\\"></a>\\n\\n### Adaptor.sendBroadcast(params, callback) ⇒ <code>Operation</code>\\nSends a message to a list of contacts and/or URNs\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nsendBroadcast({\\n  text: \\\"Hello world\\\",\\n  urns: [\\\"twitter:sirmixalot\\\"],\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\"","readme":"\"# language-rapidpro [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\">](https://www.openfn.org) [![Build Status](https://travis-ci.org/OpenFn/language-rapidpro.svg?branch=master)](https://travis-ci.org/OpenFn/language-rapidpro)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[RapidPro API](https://rapidpro.io/api/v2/).\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/language-rapidpro/ [In Progress]\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n## Usage\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"host\\\": \\\"https://app.rapidpro.io/\\\",\\n  \\\"token\\\": \\\"super-secret-token-123\\\"\\n}\\n```\\n\\n#### sample job expression using operation\\n\\n```js\\nsendBroadcast({\\n  \\\"text\\\": \\\"Hello friends.\\\",\\n  \\\"urns\\\": [],\\n  \\\"contacts\\\": [],\\n  \\\"groups\\\", [],\\n});\\n```\\n\\n### Key helper functions \\n\\n**sendBroadcast(...) to send broadcast message to multiple contacts**\\n```js\\nsendBroadcast({\\n  text: \\\"Hello world\\\",\\n  urns: [\\\"twitter:sirmixalot\\\"],\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\\n**startFlow(...) to trigger an automation flow in RapidPro**\\n```js\\nstartFlow({\\n  flow: \\\"f5901b62-ba76-4003-9c62-72fdacc1b7b7\\\",\\n  restart_participants: false,\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n**upsertContact(...) to update/insert a Contact (and check if exists using external identifiers)**\\n```js\\nupsertContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n**addContact(...) to insert a Contact**\\n```js\\naddContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the `Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["addContact","upsertContact","startFlow","sendBroadcast"]},
{"name":"salesforce","adaptor":"@openfn/language-salesforce","version":"2.11.1","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_Adaptor\\\">Adaptor</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#module_FakeAdaptor\\\">FakeAdaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.relationship](#module_Adaptor.relationship)\\n            * [new exports.relationship(relationshipName, externalId, dataSource)](#new_module_Adaptor.relationship_new)\\n        * [.describeAll](#module_Adaptor.describeAll)\\n            * [new exports.describeAll(state)](#new_module_Adaptor.describeAll_new)\\n        * [.describe](#module_Adaptor.describe)\\n            * [new exports.describe(sObject, state)](#new_module_Adaptor.describe_new)\\n        * [.retrieve](#module_Adaptor.retrieve)\\n            * [new exports.retrieve(sObject, id, callback, state)](#new_module_Adaptor.retrieve_new)\\n        * [.query](#module_Adaptor.query)\\n            * [new exports.query(qs, state)](#new_module_Adaptor.query_new)\\n        * [.bulk](#module_Adaptor.bulk)\\n            * [new exports.bulk(sObject, operation, options, fun, state)](#new_module_Adaptor.bulk_new)\\n        * [.destroy](#module_Adaptor.destroy)\\n            * [new exports.destroy(sObject, attrs, options, state)](#new_module_Adaptor.destroy_new)\\n        * [.create](#module_Adaptor.create)\\n            * [new exports.create(sObject, attrs, state)](#new_module_Adaptor.create_new)\\n        * [.createIf](#module_Adaptor.createIf)\\n            * [new exports.createIf(logical, sObject, attrs, state)](#new_module_Adaptor.createIf_new)\\n        * [.upsert](#module_Adaptor.upsert)\\n            * [new exports.upsert(sObject, externalId, attrs, state)](#new_module_Adaptor.upsert_new)\\n        * [.upsertIf](#module_Adaptor.upsertIf)\\n            * [new exports.upsertIf(logical, sObject, externalId, attrs, state)](#new_module_Adaptor.upsertIf_new)\\n        * [.update](#module_Adaptor.update)\\n            * [new exports.update(sObject, attrs, state)](#new_module_Adaptor.update_new)\\n        * [.reference](#module_Adaptor.reference)\\n            * [new exports.reference(position, state)](#new_module_Adaptor.reference_new)\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>State</code>\\n        * [.steps()](#module_Adaptor.steps) ⇒ <code>Array</code>\\n    * _inner_\\n        * [~createConnection(state)](#module_Adaptor..createConnection) ⇒ <code>State</code>\\n        * [~login(state)](#module_Adaptor..login) ⇒ <code>State</code>\\n        * [~cleanupState(state)](#module_Adaptor..cleanupState) ⇒ <code>State</code>\\n        * [~State](#module_Adaptor..State) : <code>Object</code>\\n        * [~Operation](#module_Adaptor..Operation) : <code>function</code>\\n\\n<a name=\\\"module_Adaptor.relationship\\\"></a>\\n\\n### Adaptor.relationship\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.relationship_new\\\"></a>\\n\\n#### new exports.relationship(relationshipName, externalId, dataSource)\\nAdds a lookup relation or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalId | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example**  \\n```js\\nData Sourced Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\nFixed Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n<a name=\\\"module_Adaptor.describeAll\\\"></a>\\n\\n### Adaptor.describeAll\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.describeAll_new\\\"></a>\\n\\n#### new exports.describeAll(state)\\nOutputs basic information about available sObjects.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ndescribeAll()\\n```\\n<a name=\\\"module_Adaptor.describe\\\"></a>\\n\\n### Adaptor.describe\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.describe_new\\\"></a>\\n\\n#### new exports.describe(sObject, state)\\nOutputs basic information about an sObject to `STDOUT`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ndescribe('obj_name')\\n```\\n<a name=\\\"module_Adaptor.retrieve\\\"></a>\\n\\n### Adaptor.retrieve\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.retrieve_new\\\"></a>\\n\\n#### new exports.retrieve(sObject, id, callback, state)\\nRetrieves a Salesforce sObject(s).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | The sObject to retrieve |\\n| id | <code>String</code> | The id of the record |\\n| callback | <code>function</code> | A callback to execute once the record is retrieved |\\n| state | <code>State</code> | Runtime state |\\n\\n**Example**  \\n```js\\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');\\n```\\n<a name=\\\"module_Adaptor.query\\\"></a>\\n\\n### Adaptor.query\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.query_new\\\"></a>\\n\\n#### new exports.query(qs, state)\\nExecute an SOQL query.\\nNote that in an event of a query error,\\nerror logs will be printed but the operation will not throw the error.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| qs | <code>String</code> | A query string. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nquery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);\\n```\\n<a name=\\\"module_Adaptor.bulk\\\"></a>\\n\\n### Adaptor.bulk\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.bulk_new\\\"></a>\\n\\n#### new exports.bulk(sObject, operation, options, fun, state)\\nCreate and execute a bulk job.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| operation | <code>String</code> | The bulk operation to be performed |\\n| options | <code>Object</code> | Options passed to the bulk api. |\\n| fun | <code>function</code> | A function which takes state and returns an array. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nbulk('Patient__c', 'insert', { failOnError: true, pollInterval: 3000, pollTimeout: 240000 }, state => {\\n  return state.data.someArray.map(x => {\\n    return { 'Age__c': x.age, 'Name': x.name }\\n  })\\n});\\n```\\n<a name=\\\"module_Adaptor.destroy\\\"></a>\\n\\n### Adaptor.destroy\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.destroy_new\\\"></a>\\n\\n#### new exports.destroy(sObject, attrs, options, state)\\nDelete records of an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Array of IDs of records to delete. |\\n| options | <code>Object</code> | Options for the destroy delete operation. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ndestroy('obj_name', [\\n '0060n00000JQWHYAA5',\\n '0090n00000JQEWHYAA5\\n], { failOnError: true })\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.create_new\\\"></a>\\n\\n#### new exports.create(sObject, attrs, state)\\nCreate a new object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.createIf\\\"></a>\\n\\n### Adaptor.createIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.createIf_new\\\"></a>\\n\\n#### new exports.createIf(logical, sObject, attrs, state)\\nCreate a new object if conditions are met.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateIf(true, 'obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(sObject, externalId, attrs, state)\\nUpsert an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupsert('obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.upsertIf\\\"></a>\\n\\n### Adaptor.upsertIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertIf_new\\\"></a>\\n\\n#### new exports.upsertIf(logical, sObject, externalId, attrs, state)\\nUpsert if conditions are met.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupsertIf(true, 'obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.update\\\"></a>\\n\\n### Adaptor.update\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.update_new\\\"></a>\\n\\n#### new exports.update(sObject, attrs, state)\\nUpdate an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupdate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.reference\\\"></a>\\n\\n### Adaptor.reference\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.reference_new\\\"></a>\\n\\n#### new exports.reference(position, state)\\nGet a reference ID by an index.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| position | <code>number</code> | Position for references array. |\\n| state | <code>State</code> | Array of references. |\\n\\n**Example**  \\n```js\\nreference(0)\\n```\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>State</code>\\nExecutes an operation.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operation</code> | Operations |\\n\\n<a name=\\\"module_Adaptor.steps\\\"></a>\\n\\n### Adaptor.steps() ⇒ <code>Array</code>\\nFlattens an array of operations.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Example**  \\n```js\\nsteps(\\n  createIf(params),\\n  update(params)\\n)\\n```\\n<a name=\\\"module_Adaptor..createConnection\\\"></a>\\n\\n### Adaptor~createConnection(state) ⇒ <code>State</code>\\nCreates a connection.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"module_Adaptor..login\\\"></a>\\n\\n### Adaptor~login(state) ⇒ <code>State</code>\\nPerforms a login.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"module_Adaptor..cleanupState\\\"></a>\\n\\n### Adaptor~cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"module_Adaptor..State\\\"></a>\\n\\n### Adaptor~State : <code>Object</code>\\n**Kind**: inner typedef of [<code>Adaptor</code>](#module_Adaptor)  \\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | JSON Data. |\\n| references | <code>Array.&lt;Reference&gt;</code> | History of all previous operations. |\\n\\n<a name=\\\"module_Adaptor..Operation\\\"></a>\\n\\n### Adaptor~Operation : <code>function</code>\\n**Kind**: inner typedef of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n<a name=\\\"module_FakeAdaptor\\\"></a>\\n\\n## FakeAdaptor\\n\"","readme":"\"# language-salesforce [![Build Status](https://travis-ci.org/OpenFn/language-salesforce.svg?branch=master)](https://travis-ci.org/OpenFn/language-salesforce)\\n\\nSalesforce Language Pack for OpenFn. **See the main docs site:\\nhttp://openfn.github.io/language-salesforce/ **\\n\\n## Release notes and deprecated CHANGELOG.md\\n\\nSee [releases](https://github.com/OpenFn/language-salesforce/releases) for all\\nchanges.\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"loginUrl\\\": \\\"https://somesalesforcelogin.url/\\\",\\n  \\\"username\\\": \\\"someusername\\\",\\n  \\\"password\\\": \\\"somesupersecretpassword\\\",\\n  \\\"securityToken\\\": \\\"salesforcesecuritytoken\\\"\\n}\\n```\\n\\n## Intent\\n\\n---\\n\\nAllow communication with Salesforce using a set of Lisp compatible expressions.\\n\\nUsing simple functions we can create a simplified API, simple enough to generate\\ncode from data.\\n\\n## Expressions\\n\\n---\\n\\nExpressions are a simplified set of function calls. Outlining the operations\\nneeded to be performed.\\n\\nAn uncompiled expression has no knowledge of the internals of the adaptor,\\ncredentials or runtime environment.\\n\\nIt's the responsibility of the build process to provide a wrapper that will\\ninject the functions in.\\n\\nFor example:\\n\\n```javascript\\ndescribe('vera__Test_Event__c'),\\n  create('vera__Test_Event__c', {\\n    vera__Test_Event_Name_Unique__c: 'hello from jsforce',\\n  }),\\n  create('vera__Boat__c', {\\n    Name: 'Catatafish redux!',\\n    vera__Test_Event__c: reference(0),\\n  });\\n```\\n\\n## ## API\\n\\n`field(\\\"key\\\",\\\"value\\\")` Returns `{ \\\"key\\\": \\\"value\\\" }`\\n\\n[`relationship(\\\"relationship_name__r\\\", \\\"externalID\\\", dataSource(\\\"path\\\"))`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L23-L44)\\n\\n[`describe(\\\"obj_name\\\")`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L46-L71)\\n\\n[`query('queryString')`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L107-L136)\\n\\n[`bulk('obj_name', 'operation', 'options', arrayOfFields)`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L138-L210)\\n\\n[`create('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L212-L238)\\n\\n[`destroy('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#225-259)\\n\\n[`createIf(logical, 'obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L240-L279)\\n\\n[`upsert(sObject, 'externalID', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L281-L315)\\n\\n[`upsertIf(logical, 'obj_name', 'externalID', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L317-L370)\\n\\n[`update('obj_name', fields())`](https://github.com/OpenFn/language-salesforce/blob/master/src/Adaptor.js#L372-L398)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\\n## ## Other\\n\\nCreate SOAP session\\n\\n```sh\\ncurl https://test.salesforce.com/services/Soap/u/47.0 -H \\\"Content-Type: text/xml; charset=UTF-8\\\" -H \\\"SOAPAction: login\\\" -d @tmp/login.txt | xmllint --format -\\n```\\n\\nClose jobs\\n\\n```sh\\ncurl\\nhttps://openfn.my.salesforce.com/services/async/47.0/job/some_id -H 'X-SFDC-Session: abc123sessionID456xyz' -H \\\"Content-Type: application/xml; charset=UTF-8\\\" -d @tmp/close_job.txt | xmllint --format -\\n```\\n\"","changelog":"\"# @openfn/language-salesforce\\n\\n## 2.11.1\\n\\n### Patch Changes\\n\\n- e7bf865: chore(deps): update dependency sinon to v14\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.11.0\\n\\n### Minor Changes\\n\\n- edff578: Migrate salesforce\\n\"","functions":["relationship","describeAll","describe","retrieve","query","bulk","destroy","create","createIf","upsert","upsertIf","update","reference"]},
{"name":"sftp","adaptor":"@openfn/language-sftp","version":"0.6.3","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.list](#module_Adaptor.list)\\n        * [new exports.list(dirPath)](#new_module_Adaptor.list_new)\\n    * [.getCSV](#module_Adaptor.getCSV)\\n        * [new exports.getCSV(filePath)](#new_module_Adaptor.getCSV_new)\\n    * [.putCSV](#module_Adaptor.putCSV)\\n        * [new exports.putCSV(localFilePath, remoteFilePath, parsingOptions)](#new_module_Adaptor.putCSV_new)\\n    * [.getJSON](#module_Adaptor.getJSON)\\n        * [new exports.getJSON(filePath, encoding)](#new_module_Adaptor.getJSON_new)\\n    * [.normalizeCSVarray](#module_Adaptor.normalizeCSVarray)\\n        * [new exports.normalizeCSVarray(options, callback)](#new_module_Adaptor.normalizeCSVarray_new)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.list\\\"></a>\\n\\n### Adaptor.list\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.list_new\\\"></a>\\n\\n#### new exports.list(dirPath)\\nList files present in a directory\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\nlist('/some/path/')\\n```\\n<a name=\\\"module_Adaptor.getCSV\\\"></a>\\n\\n### Adaptor.getCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.getCSV_new\\\"></a>\\n\\n#### new exports.getCSV(filePath)\\nGet a CSV and return a JSON array of strings for each item separated by the delimiter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\ngetCSV(\\n  '/some/path/to_file.csv'\\n);\\n```\\n<a name=\\\"module_Adaptor.putCSV\\\"></a>\\n\\n### Adaptor.putCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.putCSV_new\\\"></a>\\n\\n#### new exports.putCSV(localFilePath, remoteFilePath, parsingOptions)\\nConvert JSON to CSV and upload to an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| localFilePath | <code>string</code> | Data source for data to copy to the remote server. |\\n| remoteFilePath | <code>string</code> | Path to the remote file to be created on the server. |\\n| parsingOptions | <code>object</code> | Options which can be passed to adjust the read and write stream used in sending the data to the remote server |\\n\\n**Example**  \\n```js\\nputCSV(\\n  '/some/path/to_local_file.csv',\\n  '/some/path/to_remove_file.csv',\\n  { delimiter: ';', noheader: true }\\n);\\n```\\n<a name=\\\"module_Adaptor.getJSON\\\"></a>\\n\\n### Adaptor.getJSON\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.getJSON_new\\\"></a>\\n\\n#### new exports.getJSON(filePath, encoding)\\nFetch a json file from an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| encoding | <code>string</code> | Character encoding for the json |\\n\\n**Example**  \\n```js\\ngetJSON(\\n  '/path/To/File',\\n  'utf8',\\n);\\n```\\n<a name=\\\"module_Adaptor.normalizeCSVarray\\\"></a>\\n\\n### Adaptor.normalizeCSVarray\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.normalizeCSVarray_new\\\"></a>\\n\\n#### new exports.normalizeCSVarray(options, callback)\\nConvert JSON array of strings into a normalized object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>options</code> | Options passed to csvtojson parser |\\n| callback | <code>callback</code> | Options passed to csvtojson parser |\\n\\n**Example**  \\n```js\\nnormalizeCSVarray({ delimiter: ';', noheader: true });\\n```\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language SFTP\\n\\nLanguage Pack for building expressions and operations to work with SFTP servers.\\n\\n## Documentation\\n\\n### sample configuration\\n\\n```js\\n{\\n  \\\"username\\\": \\\"sftp_user\\\",\\n  \\\"password\\\": \\\"sftp_pass\\\",\\n  \\\"host\\\": \\\"191.173.xxx.yy\\\",\\n  \\\"port\\\": PORT\\n}\\n```\\n\\n## List the content of a directory\\n\\n```js\\nalterState(state => {\\n  return list('/path/To/Directory')(state).then(response => {\\n    console.log(`There are ${response.data.length} files.`);\\n    return response;\\n  });\\n});\\n```\\n\\n## sample getCSV expression\\n\\n```js\\ngetCSV('path/to/file.csv', 'utf8', {\\n  quote: 'off',\\n  delimiter: ';',\\n  noheader: true,\\n  filter: {\\n    type: 'startsWith',\\n    key: 'field1',\\n    value: 'JO',\\n  },\\n});\\n```\\n\\nA more complex example that breaks up the CSV file into multiple payloads for\\nquicker processing.\\n\\n```js\\nfn(state => {\\n  return list('/')(state).then(state => {\\n    const targetNames = [\\n      'exportContacts', //example fileName\\n    ];\\n    console.log(`Fetching files: ${targetNames}`);\\n    const files = state.data\\n      .filter(file => file.name.split('.')[1] === 'csv')\\n      .filter(file =>\\n        targetNames.some(targetName =>\\n          file.name.toLowerCase().includes(targetName)\\n        )\\n      );\\n\\n    if (files.length === 0) console.log('No new CSV files found.');\\n    return { ...state, data: {}, files };\\n  });\\n});\\n\\neach(\\n  '$.files[*]',\\n  fn(state => {\\n    const { configuration, data } = state;\\n\\n    return getCSV(`/${data.name}`)(state).then(async state => {\\n      const headers = state.data\\n        .shift()\\n        .split(';')\\n        .map(h => (h = h.replace(/\\\"/g, '')));\\n\\n      function toObject(item) {\\n        const values = item.split(';');\\n\\n        return Object.fromEntries(\\n          headers.map((k, i) => {\\n            return values[i]\\n              ? [k, values[i].replace(/\\\"/g, '')]\\n              : [k, values[i]];\\n          })\\n        );\\n      }\\n\\n      let countInbox = 0;\\n\\n      //to post CSV data as individual Messages to OpenFn Inbox\\n      const postToInbox = async data => {\\n        countInbox++;\\n\\n        console.log(`Sending request ${countInbox} to inbox`);\\n\\n        await new Promise(resolve => setTimeout(resolve, 200));\\n\\n        await http.post({\\n          url: configuration.openfnInboxUrl,\\n          data: data,\\n          maxContentLength: Infinity,\\n          maxBodyLength: Infinity,\\n        })(state);\\n      };\\n\\n      //To split up into multiple, smaller payloads before send to OpenFn Inbox\\n      const chunkSize = 500;\\n\\n      console.log(\\n        state.data.length,\\n        'rows will be sent in',\\n        Math.ceil(state.data.length / chunkSize),\\n        'requests of',\\n        chunkSize,\\n        'rows each.'\\n      );\\n\\n      while (state.data.length > 0) {\\n        console.log('data.length', state.data.length);\\n        await postToInbox({\\n          fileName: data.name,\\n          fileType: data.name.split('-')[0],\\n          uploadDate: new Date(data.modifyTime).toISOString(),\\n          json: state.data.splice(0, chunkSize).map(toObject),\\n        });\\n      }\\n\\n      return { configuration, references: [], data: {} };\\n    });\\n  })\\n);\\n```\\n\\n## sample putCSV expression\\n\\nThis function converts JSON to CSV and post to a server\\n\\n```js\\nputCSV('/some/path/to_file.csv', 'utf8', { delimiter: ';', noheader: true });\\n```\\n\\n### Get JSON from FTP server\\n\\n```js\\ngetJSON('path/to/file.json', 'utf8');\\n```\\n\\n### Custom request to an http endpoint\\n\\nThis adaptor exports `http` from `language-common`. Here, we outline the usage\\nin order to make custom requests to an endpoint. It returns a promise\\n\\n```js\\nalterState(state => {\\n  return http\\n    .post({ url: 'yourURL', data: { name: 'Mamadou' } })(state)\\n    .then(response => {\\n      // do something with response;\\n      return response;\\n    });\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build the docs for this repo, `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-sftp\\n\\n## 0.6.3\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 4126a62: Fix built bundle\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.6.2\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 0.6.1\\n\\n### Patch Changes\\n\\n- 28dfbfa: add todo, fix build pack\\n\\n## 0.6.0\\n\\n### Minor Changes\\n\\n- f294a62: Added credential-schema.json for new ui\\n\\n## 0.5.0\\n\\n### Minor Changes\\n\\n- 2c04894: added sftp package\\n\"","functions":["list","getCSV","putCSV","getJSON","normalizeCSVarray"]},
{"name":"surveycto","adaptor":"@openfn/language-surveycto","version":"1.0.0","docs":"\"## Classes\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#fetchSubmissions\\\">fetchSubmissions(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request and POST it somewhere else</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute\\n**Kind**: global class  \\n<a name=\\\"new_execute_new\\\"></a>\\n\\n### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"fetchSubmissions\\\"></a>\\n\\n## fetchSubmissions(params) ⇒ <code>Operation</code>\\nMake a GET request and POST it somewhere else\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**  \\n```js\\nexecute(\\n  fetch(params)\\n)(state)\\n```\\n\"","readme":"\"Language SurveyCTO\\n==================\\n\\nLanguage Pack for building expressions and operations to make HTTP calls to\\nSurveyCTO.\\n\\nDocumentation\\n-------------\\n\\n## sample configuration\\n\\n```js\\n{\\n  \\\"username\\\": \\\"taylor@openfn.org\\\",\\n  \\\"password\\\": \\\"supersecret\\\",\\n  \\\"instanceName\\\": \\\"openfn_test\\\"\\n}\\n```\\n\\n## fetchSubmissions\\n`fetchSubmissions(1,2,3)` takes three arguments:\\n\\n1. the `formId` of the form on SurveyCTO\\n\\n2. the `initialAfterDate`, a date string or UNIX timestamp which instructs the job to only fetch submissions after a certain date. After the first run of the job, subsequent runs will only fetch *NEW* submissions.\\n\\n3. the `postUrl` is where the wide-format JSON representation of each form submission should be sent. Note that a `formId` key will be added to each form submission for later filtering/routing.\\n\\n### sample `fetchSubmissions` expression\\n\\n```js\\nfetchSubmissions(\\n  // formId on SurveyCTO server\\n  \\\"household_survey\\\",\\n  // initialAfterDate: this will only be accessed if \\\"lastSubmissionDate\\\" is empty in your job_state\\\".\\n  // After the initial run of the job, OpenFn will only pull new submissions from SurveyCTO.\\n  \\\"Aug 29, 2016 4:44:26 PM\\\",\\n  // postUrl is where you want to send the JSON submissions, appended with a new \\\"formId\\\" key\\n  \\\"https://www.openfn.org/inbox/secret-inbox-uuid\\\"\\n)\\n```\\n\\n[Docs](docs/index)\\n\\n\\nDevelopment\\n-----------\\n\\nClone the repo, run `npm install`.\\n\\nRun tests using `npm run test` or `npm run test:watch`\\n\\nBuild the project using `make`.\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"telerivet","adaptor":"@openfn/language-telerivet","version":"0.0.2","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for telerivet.</p>\\n</dd>\\n<dt><a href=\\\"#send\\\">send(sendData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Send a message</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for telerivet.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"send\\\"></a>\\n\\n## send(sendData) ⇒ <code>Operation</code>\\nSend a message\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sendData | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nexecute(\\n  send(data)\\n)(state)\\n```\\n\"","readme":"\"# Language Telerivet\\n\\nLanguage Pack for sending messages using the\\n[telerivet API](https://telerivet.com/api/rest/curl).\\n\\n## Documentation\\n\\n## Sample configuration\\n\\n```json\\n{\\n  \\\"projectId\\\": \\\"telerivet_project_id\\\",\\n  \\\"apiKey\\\": \\\"telerivetapikey\\\"\\n}\\n```\\n\\n## Send message\\n\\n#### Current `send` expression:\\n\\n```js\\nsend(\\n  fields(\\n    field('to_number', dataValue('recipient_number')),\\n    field('content', dataValue('recipient_text')),\\n    // Lots of optional parameters...\\n    field('message_type', 'sms'),\\n    field('route_id', dataValue('some_route'))\\n  )\\n);\\n```\\n\\n## sendBulk messages - WIP\\n\\n#### Current `sendBulk` expression:\\n\\n```js\\nsend(fields(\\n  field(\\\"content\\\", dataValue(\\\"recipient_text\\\")),\\n  field(\\\"to_numbers\\\", [\\n        \\\"+14155550123\\\",\\n        \\\"+14255550234\\\",\\n        \\\"+16505550345\\\"\\n    ]\\n  // Lots of optional parameters...\\n  field(\\\"message_type\\\", \\\"sms\\\"),\\n  field(\\\"route_id\\\", dataValue(\\\"some_route\\\"))\\n))\\n```\\n\\nNote that \\\"recipient_text\\\" may be a concatenation like this:\\n\\n```js\\nfield('content', function (state) {\\n  return dataValue('salutation')(state).concat(\\n    '. ',\\n    dataValue('last_name')(state),\\n    ', )'\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"template","adaptor":"@openfn/language-template","version":"1.7.3","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.create(path, params, callback)](#module_Adaptor.create) ⇒ <code>Operation</code>\\n    * [.createPatient(params, callback)](#module_Adaptor.createPatient) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a fictional resource in a fictional destination system using a POST request\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"module_Adaptor.createPatient\\\"></a>\\n\\n### Adaptor.createPatient(params, callback) ⇒ <code>Operation</code>\\nCreate a fictional patient in a fictional universe with a fictional REST api\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreatePatient({\\\"foo\\\": \\\"bar\\\"})\\n```\\n\"","readme":"\"# language-template [<img src=\\\"https://avatars2.githubusercontent.com/u/9555108?s=200&v=4)\\\" alt=\\\"alt text\\\" height=\\\"20\\\"/>](https://www.openfn.org)\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the \\\\_\\\\_\\\\_\\\\_\\nAPI.\\n\\n## Documentation\\n\\n- View the documentation at https://openfn.github.io/adaptor/\\n- To update the documentation site, run:\\n  `./node_modules/.bin/jsdoc --readme ./README.md ./lib -d docs`\\n\\n## post\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"username\\\": \\\"taylor@openfn.org\\\",\\n  \\\"password\\\": \\\"supersecret\\\"\\n}\\n```\\n\\n#### sample expression using operation\\n\\n```js\\npost({\\n  \\\"url\\\": \\\"api/v1/forms/data/wide/json/formId\\\",\\n  \\\"body\\\": {\\\"a\\\":1}\\n  \\\"headers\\\": {}\\n})\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-template\\n\\n## 1.7.3\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies [8566b26]\\n- Updated dependencies [b3d45ff]\\n- Updated dependencies [b5eb665]\\n- Updated dependencies [ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 1.7.2\\n\\n### Patch Changes\\n\\n- f4b3dd6: remove travis build url\\n\\n## 1.7.1\\n\\n### Patch Changes\\n\\n- Fixed package.json for template adaptor\\n\\n## 1.7.0\\n\\n### Minor Changes\\n\\n- 554e905: Migrated to monorepo\\n\"","functions":["create","createPatient"]},
{"name":"twilio","adaptor":"@openfn/language-twilio","version":"0.2.1","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#sendSMS\\\">sendSMS(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Sends an SMS message to a specific phone number</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sendSMS\\\"></a>\\n\\n## sendSMS(params) ⇒ <code>Operation</code>\\nSends an SMS message to a specific phone number\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | an object containing 'body', 'from', and 'to' keys. |\\n\\n**Example**  \\n```js\\nsendSMS({\\n body: dataValue('sampleText'),\\n from: dataValue('myFromNumber'),\\n to: dataValue('ukMobile'),\\n});\\n```\\n\"","readme":"\"# Language twilio\\n\\nLanguage Pack for building expressions and operations to interact with the\\ntwilio API.\\n\\n## Documentation\\n\\n## sendSMS\\n\\n#### Sample configuration\\n\\n```json\\n{\\n  \\\"accountSid\\\": \\\"secret\\\",\\n  \\\"authToken\\\": \\\"evenMoreSecret\\\"\\n}\\n```\\n\\n#### sample expression, sending an sms\\n\\n```js\\nsendSMS({\\n  body: dataValue('text'),\\n  from: '+15005550006',\\n  to: dataValue('recipient'),\\n});\\n```\\n\\n## local usage\\n\\n```sh\\n~/devtools/core/bin/core execute \\\\\\n  -l ~/devtools/adaptors/language-twilio \\\\\\n  -s ./tmp/state.json \\\\\\n  -o ./tmp/output.json \\\\\\n  -e ./tmp/expression.js\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":["sendSMS"]},
{"name":"vtiger","adaptor":"language-vtiger","version":"1.0.0","docs":"\"<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\"","readme":"\"# Language Vtiger\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nVtiger API.\\n\\n## Documentation\\n\\n#### sample configuration\\n\\n```json\\n{\\n  \\\"hostUrl\\\": \\\"https://openfunction.od2.vtiger.com\\\",\\n  \\\"username\\\": \\\"taylor@openfn.org\\\",\\n  \\\"accessToken\\\": \\\"blahBlahBlah\\\"\\n}\\n```\\n\\n#### sample listTypes expression\\n\\n```js\\nlistTypes();\\n```\\n\\n#### sample postElement expression\\n\\n```js\\npostElement({\\n  operation: \\\"create\\\"\\n  elementType: \\\"leads\\\",\\n  element: {\\n    \\\"name\\\": dataValue(\\\"name\\\")(state),\\n    \\\"surname\\\": dataValue(\\\"surname\\\")(state),\\n    \\\"email\\\": dataValue(\\\"email\\\")(state)\\n  }\\n});\\n\\n\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]},
{"name":"zoho","adaptor":"language-zoho","version":"0.1.0","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>@openfn/language-common/execute</code>, and prepends initial state for zoho.</p>\\n</dd>\\n<dt><a href=\\\"#addRow\\\">addRow(db, table, rowData)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>To add a row data to a database table</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `@openfn/language-common/execute`, and prepends initial state for zoho.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"addRow\\\"></a>\\n\\n## addRow(db, table, rowData) ⇒ <code>Operation</code>\\nTo add a row data to a database table\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| db | <code>string</code> | Database |\\n| table | <code>string</code> | Database table |\\n| rowData | <code>object</code> | row data to be added into the database |\\n\\n**Example**  \\n```js\\naddRow(\\n'testing_openfn',\\n'Customers',\\nfields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\"","readme":"\"# Language Zoho\\n\\nLanguage Pack for sending messages using the Zoho API.\\n\\n## Documentation\\n\\n### Sample configuration\\n\\n```json\\n{\\n  \\\"account\\\": \\\"yourzohoaccount\\\",\\n  \\\"authToken\\\": \\\"secretauthtoken\\\",\\n  \\\"apiVersion\\\": \\\"v2\\\"\\n}\\n```\\n\\n### addRow\\n\\nTo add a row to the \\\"Customers\\\" table in the \\\"testing_openfn\\\" database, use the\\nfollowing `addRow` function.\\n\\n```js\\naddRow(\\n  'testing_openfn',\\n  'Customers',\\n  fields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\\n### updateRow\\n\\nComing soon. Want to help?\\nhttps://zohoreportsapi.wiki.zoho.com/Updating-Data.html\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"### CHANGELOG\"","functions":[]}
]
