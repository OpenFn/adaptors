[
{"name":"asana","adaptor":"@openfn/language-asana","version":"4.0.12","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createtask\\\">createTask(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createtaskstory\\\">createTaskStory(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#gettask\\\">getTask(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#gettasks\\\">getTasks(projectGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatetask\\\">updateTask(taskGid, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upserttask\\\">upsertTask(projectGid, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createTask\\n\\n<p><code>createTask(params, callback) ⇒ Operation</code></p>\\n\\nCreate a task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ncreateTask({\\n  name: \\\"test\\\",\\n  approval_status: \\\"pending\\\",\\n  assignee: \\\"12345\\\",\\n  projects: [\\\"1206933955023739\\\"],\\n});\\n```\\n\\n* * *\\n\\n### createTaskStory\\n\\n<p><code>createTaskStory(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nCreate a story to a specific task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | [<code>StoryOptions</code>](#storyoptions) | Story parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example:** Create a plain text comment\\n```js\\ncreateTaskStory(\\\"1206933955023739\\\", {\\n  text: \\\"This is a comment\\\",\\n});\\n```\\n**Example:** Create a HTML formatted text comment\\n```js\\ncreateTaskStory(\\\"1206933955023739\\\", {\\n  html_text: \\\"<body>This is a comment</body>\\\",\\n});\\n```\\n\\n* * *\\n\\n### getTask\\n\\n<p><code>getTask(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nGet a single task of a given project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetTask(\\\"1206933955023739\\\", {\\n  opt_fields: \\\"name,notes,assignee\\\",\\n});\\n```\\n\\n* * *\\n\\n### getTasks\\n\\n<p><code>getTasks(projectGid, params, callback) ⇒ Operation</code></p>\\n\\nGet the list of tasks for a given project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectGid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetTasks(\\\"1206933955023739\\\", {\\n  opt_fields: \\\"name,notes,assignee\\\",\\n});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a HTTP request against the Asana API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (excluding api/version) |\\n| params | [<code>RequestOptions</code>](#requestoptions) | (Optional) Query, body and method parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nGet a task by id\\nrequest(\\\"/tasks/1234\\\");\\n```\\n**Example**\\n```js\\nQuery for tasks in a given project\\nrequest(\\\"/tasks\\\", {\\n  query: { project: \\\"abc\\\" },\\n});\\n```\\n**Example**\\n```js\\nCreate a new task\\nrequest(\\\"/tasks\\\", {\\n  method: \\\"POST\\\",\\n  body: { data: { name: \\\"do the thing\\\", completed: false } },\\n});\\n```\\n\\n* * *\\n\\n### updateTask\\n\\n<p><code>updateTask(taskGid, params, callback) ⇒ Operation</code></p>\\n\\nUpdate a specific task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| taskGid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupdateTask(\\\"1206933955023739\\\", {\\n  name: \\\"test\\\",\\n  approval_status: \\\"pending\\\",\\n  assignee: \\\"12345\\\",\\n});\\n```\\n\\n* * *\\n\\n### upsertTask\\n\\n<p><code>upsertTask(projectGid, params, callback) ⇒ Operation</code></p>\\n\\nUpdate or create a task.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectGid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | an object with an externalId and some task data. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertTask(\\\"1201382240880\\\", {\\n  externalId: \\\"name\\\",\\n  data: {\\n    name: \\\"test\\\",\\n    approval_status: \\\"pending\\\",\\n    projects: [\\\"1201382240880\\\"],\\n    assignee: \\\"12345\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the Asana API request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> | Body data to append to the request. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| method | <code>string</code> | The HTTP method to use. Defaults to `GET` |\\n\\n\\n* * *\\n\\n### StoryOptions\\n\\nOptions provided to the createTaskStory request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | The plain text of the comment to add. Cannot be used with html_text. |\\n| html_text | <code>string</code> | Opt In. HTML formatted text for a comment. This will not include the name of the creator. |\\n| is_pinned | <code>boolean</code> | Default to `false`. Whether the story should be pinned on the resource. |\\n| sticker_name | <code>string</code> | The name of the sticker in this story. `null` if there is no sticker. |\\n| opt_fields | <code>array</code> | Opt In. This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include. |\\n| opt_pretty | <code>boolean</code> | Defaults to `false`. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-asana\\n\\nLanguage Pack for connecting with Asana.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/asana-configuration-schema/)\\ndefinition.\\n\\n### How to create an API token\\n\\nUsing Asana's API requires having an API token. To generate that token, head to\\nthe [Asana developer console](https://app.asana.com/0/developer-console) and\\nenter the **Personal access tokens** section.\\n[For API Reference docs](https://developers.asana.com/docs/api-explorer)\\n\\nThere you can click on **+New access token**. A prompt will be opened allowing\\nyou to give the token a name and then create it.\\n\\n_Note: Treat your PAT like you would with a password. Do not share it or display\\nit online._\\n\\n### Sample expression\\n\\n## Find a single task of a given project using the task id.\\n\\n```js\\ngetTask('1234', {\\n  opt_fields: 'name,assignee',\\n});\\n```\\n\\n## Find the list of tasks of a given project using the project id.\\n\\n```js\\ngetTasks('22889593722', {\\n  opt_fields: 'name,notes,assignee',\\n});\\n```\\n\\n## Update a specific task\\n\\n```js\\nupdateTask('12344', {\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Create a task\\n\\n```js\\ncreateTask({\\n  name: 'test',\\n  approval_status: 'pending',\\n  assignee: '12345',\\n});\\n```\\n\\n## Update a task or create a new one\\n\\nYou can use a field name literal as `externalId` to match a specific task. If\\nthe task does not exist, a new one will be created. The first parameter in this\\nfunction should be the `project_id`.\\n\\n```js\\nupsertTask('12344', {\\n  externalId: 'name',\\n  data: {\\n    name: 'A new task',\\n    projects: ['12344'],\\n    notes: 'This is a new task',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-asana\\n\\n## 4.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 4.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 4.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 4.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 4.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 4.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 4.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 4.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 4.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 4.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 4.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 4.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 4.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 3.3.1\\n\\n### Patch Changes\\n\\n- 510354a: Don't allow HTTP helpers to call out to different domains. This can\\n  cause a security violation where credentials are sent to external servers. Use\\n  generic HTTP helpers like `http.get` or `fetch` instead.\\n- 510354a: Fix an issue where not passing a params argument would trigger an\\n  exception\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.2.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 3.1.0 - 03 April 2024\\n\\n### Minor Changes\\n\\n- 673e41e8: - Add `createTaskStory()` function\\n  - Replaced common `http` with a more efficient implementation from\\n    `common/util` http\\n\\n## 3.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.1.6 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.1.5 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 2.1.2 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0 - 21 October 2022\\n\\n### Minor Changes\\n\\n- 5f40dcf: Migrated language-asana\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["createTask","createTaskStory","getTask","getTasks","request","updateTask","upsertTask"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiVersion":{"title":"API Version","type":"string","description":"The API version","examples":["1.0"]},"token":{"title":"Token","type":"string","description":"The API token","examples":["sample-tokenyWSJdXBACMLLWMNGgADFA"]}},"type":"object","additionalProperties":true,"required":["apiVersion","token"]}},
[
  {
    "id": "createTask",
    "longname": "createTask",
    "name": "createTask",
    "kind": "function",
    "scope": "global",
    "description": "Create a task.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createTask({\n  name: \"test\",\n  approval_status: \"pending\",\n  assignee: \"12345\",\n  projects: [\"1206933955023739\"],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createTaskStory",
    "longname": "createTaskStory",
    "name": "createTaskStory",
    "kind": "function",
    "scope": "global",
    "description": "Create a story to a specific task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "StoryOptions"
          ]
        },
        "description": "Story parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a plain text comment</caption>\ncreateTaskStory(\"1206933955023739\", {\n  text: \"This is a comment\",\n});",
      "<caption>Create a HTML formatted text comment</caption>\ncreateTaskStory(\"1206933955023739\", {\n  html_text: \"<body>This is a comment</body>\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 229,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "getTask",
    "longname": "getTask",
    "name": "getTask",
    "kind": "function",
    "scope": "global",
    "description": "Get a single task of a given project.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query params to include.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getTask(\"1206933955023739\", {\n  opt_fields: \"name,notes,assignee\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "getTasks",
    "longname": "getTasks",
    "name": "getTasks",
    "kind": "function",
    "scope": "global",
    "description": "Get the list of tasks for a given project.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the project",
        "name": "projectGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query params to include.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getTasks(\"1206933955023739\", {\n  opt_fields: \"name,notes,assignee\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a HTTP request against the Asana API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding api/version)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "(Optional) Query, body and method parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "Get a task by id\nrequest(\"/tasks/1234\");",
      "Query for tasks in a given project\nrequest(\"/tasks\", {\n  query: { project: \"abc\" },\n});",
      "Create a new task\nrequest(\"/tasks\", {\n  method: \"POST\",\n  body: { data: { name: \"do the thing\", completed: false } },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 286,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Asana API request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use. Defaults to `GET`",
        "name": "method"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 257,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "StoryOptions",
    "longname": "StoryOptions",
    "name": "StoryOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the createTaskStory request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The plain text of the comment to add. Cannot be used with html_text.",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Opt In. HTML formatted text for a comment. This will not include the name of the creator.",
        "name": "html_text"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Default to `false`. Whether the story should be pinned on the resource.",
        "name": "is_pinned"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the sticker in this story. `null` if there is no sticker.",
        "name": "sticker_name"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Opt In. This endpoint returns a compact resource, which excludes some properties by default. To include those optional properties, set this query parameter to a comma-separated list of the properties you wish to include.",
        "name": "opt_fields"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Defaults to `false`. Provides the response in a “pretty” format. In the case of JSON this means doing proper line breaking and indentation to make it readable. This will take extra time and increase the response size so it is advisable only to use this during debugging.",
        "name": "opt_pretty"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 200,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "updateTask",
    "longname": "updateTask",
    "name": "updateTask",
    "kind": "function",
    "scope": "global",
    "description": "Update a specific task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the task",
        "name": "taskGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "updateTask(\"1206933955023739\", {\n  name: \"test\",\n  approval_status: \"pending\",\n  assignee: \"12345\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertTask",
    "longname": "upsertTask",
    "name": "upsertTask",
    "kind": "function",
    "scope": "global",
    "description": "Update or create a task.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Globally unique identifier for the project",
        "name": "projectGid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId and some task data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertTask(\"1201382240880\", {\n  externalId: \"name\",\n  data: {\n    name: \"test\",\n    approval_status: \"pending\",\n    projects: [\"1201382240880\"],\n    assignee: \"12345\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 169,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/asana/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"azure-storage","adaptor":"@openfn/language-azure-storage","version":"2.0.12","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#downloadblob\\\">downloadBlob(blobName, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#getblobproperties\\\">getBlobProperties(blobName, options)</a></dt>\\n<dt>\\n    <a href=\\\"#uploadblob\\\">uploadBlob(blobName, content, uploadOptions, [options])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### downloadBlob\\n\\n<p><code>downloadBlob(blobName, [options]) ⇒ Operation</code></p>\\n\\nDownload a blob from Azure Blob Storage.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| blobName | <code>string</code> |  | Name of the blob to download. |\\n| [options] | <code>Object</code> | <code>{}</code> | Additional options for the download process. |\\n\\n**Example**\\n```js\\ndownloadBlob('mycontainer', 'myblob.txt', { downloadAs: 'string' })\\n```\\n\\n* * *\\n\\n### getBlobProperties\\n\\n<p><code>getBlobProperties(blobName, options) ⇒ Operation</code></p>\\n\\nGet properties of a blob in Azure Blob Storage.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| blobName | <code>string</code> | Name of the blob to get properties for. |\\n| options | <code>string</code> | Additional options for the getBlobProperties process. |\\n\\n**Example**\\n```js\\ngetBlobProperties('mycontainer', 'myblob.txt')\\n```\\n\\n* * *\\n\\n### uploadBlob\\n\\n<p><code>uploadBlob(blobName, content, uploadOptions, [options]) ⇒ Operation</code></p>\\n\\nUpload content to Azure Blob Storage.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| blobName | <code>string</code> |  | Name of the blob to create or replace. |\\n| content | <code>string</code> |  | Content to upload. |\\n| uploadOptions | <code>object</code> |  | See BlockBlobUploadOptions in Azure Blob Storage docs |\\n| [options] | <code>Object</code> | <code>{}</code> | Additional options for the upload process. |\\n| [options.createContainer] | <code>boolean</code> | <code>false</code> | Whether to create the container if it doesn't exist. |\\n| [options.overwrite] | <code>boolean</code> | <code>false</code> | Whether to overwrite an existing blob with the same name. |\\n| [options.containerName] | <code>string</code> |  | Container name. Overrides state.configuration. |\\n\\n**Example**\\n```js\\nuploadBlob('mycontainer', 'myblob.txt', {foo:\\\"bar\\\"}, { blobHTTPHeaders: { blobContentType: 'application/json' } })\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-azure-storage <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Azure\\nStorage APIs. At present, this adaptor only supports the Azure Blob Storage,\\nAPI, but could be expanded for future Azure Storage services (e.g., Files,\\nTables, Queues, etc.).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/azure-storage-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/azure-storage-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### An example showing multiple capabilties of this adaptor\\n\\nAssume you have a simple `state.json` file as follows:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n\\t\\\"foo\\\": \\\"bar\\\",\\n\\t\\\"bif\\\": \\\"baz\\\",\\n\\t\\\"sunday\\\": \\\"monday\\\",\\n\\t\\\"answer\\\": \\\"42\\\"\\n  },\\n  \\\"configuration\\\": {\\n      \\\"accountName\\\": \\\"myaccountname\\\",\\n      \\\"accountKey\\\": \\\"myaccountkey\\\",\\n      \\\"containerName\\\": \\\"mycontainer\\\"\\n  }\\n}\\n```\\n\\nCreate a file `job.js`, as shown below, to run with the OpenFn CLI. This\\nexample uploads the blob with a year/month partitioning scheme, then\\ndownloads the same blob and fetches the blob properties. It would be extremely\\nunusual to perform all of these actions in a single job.\\n\\n```js\\nuploadBlob(\\n  state => {\\n    const date = new Date();\\n    const id = '0e82962a-6ed0-4a88-92c1-51ae785b4126';\\n    return `${date.getFullYear()}/${date.getMonth() + 1}/${id}.json`;\\n  },\\n  state.data,\\n  {\\n    blobHTTPHeaders: { blobContentType: 'application/json' }\\n  },\\n  { createContainer: true, overwrite: true }\\n);\\n\\ndownloadBlob(\\n   dataValue('blobName');\\n);\\n\\ngetBlobProperties(\\n state => {\\n    return state.references[1].blobName;\\n  }\\n);\\n```\\n\\nRun the job as follows:\\n\\n```bash\\nopenfn job -a azure-storage -s state.json -O\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-azure-storage\\n\\n## 2.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.1\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.2 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.1 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Add proper variable declaration (linting)\\n\\n## 1.0.0 - 11 December 2023\\n\\n### Major Changes\\n\\nIntial adaptor release with support for Blob storage.\\n\\n- uploadBlob\\n- downloadBlob\\n- getBlobProperties\\n\"","functions":["downloadBlob","getBlobProperties","uploadBlob"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accountName":{"title":"Account Name","type":"string","description":"Azure Storage Account Name","examples":["examplestorageaccount01"]},"accountKey":{"title":"Account Key","type":"string","description":"Azure Account Key","writeOnly":true,"examples":["zzUx5rA4BZkjPet8ztLTEll7azF65Sez7WxGKsJv5B+rp/dby8ARgYpEVe93xFCQDqGBi3FUlxjP+ASt4uepZg=="]},"containerName":{"title":"Container Name","type":"string","description":"Name of Azure Blob Storage Container","writeOnly":true,"examples":["mycontainername"]}},"type":"object","additionalProperties":true,"required":["accountName","accountKey"]}},
[
  {
    "id": "downloadBlob",
    "longname": "downloadBlob",
    "name": "downloadBlob",
    "kind": "function",
    "scope": "global",
    "description": "Download a blob from Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to download.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Additional options for the download process.",
        "name": "options"
      }
    ],
    "examples": [
      "downloadBlob('mycontainer', 'myblob.txt', { downloadAs: 'string' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 163,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getBlobProperties",
    "longname": "getBlobProperties",
    "name": "getBlobProperties",
    "kind": "function",
    "scope": "global",
    "description": "Get properties of a blob in Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to get properties for.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Additional options for the getBlobProperties process.",
        "name": "options"
      }
    ],
    "examples": [
      "getBlobProperties('mycontainer', 'myblob.txt')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 208,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "uploadBlob",
    "longname": "uploadBlob",
    "name": "uploadBlob",
    "kind": "function",
    "scope": "global",
    "description": "Upload content to Azure Blob Storage.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the blob to create or replace.",
        "name": "blobName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Content to upload.",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "See BlockBlobUploadOptions in Azure Blob Storage docs",
        "name": "uploadOptions"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Additional options for the upload process.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to create the container if it doesn't exist.",
        "name": "options.createContainer"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Whether to overwrite an existing blob with the same name.",
        "name": "options.overwrite"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Container name. Overrides state.configuration.",
        "name": "options.containerName"
      }
    ],
    "examples": [
      "uploadBlob('mycontainer', 'myblob.txt', {foo:\"bar\"}, { blobHTTPHeaders: { blobContentType: 'application/json' } })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 87,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/azure-storage/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.3.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createcollectionrequest\\\">createCollectionRequest(data)</a></dt>\\n<dt>\\n    <a href=\\\"#createcontact\\\">createContact(data)</a></dt>\\n<dt>\\n    <a href=\\\"#createpayment\\\">createPayment(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createCollectionRequest\\n\\n<p><code>createCollectionRequest(data) ⇒ Operation</code></p>\\n\\nCreate a collection request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the collection request |\\n\\n**Example:** Create a collection request\\n```js\\ncreateCollectionRequest(data)\\n```\\n\\n* * *\\n\\n### createContact\\n\\n<p><code>createContact(data) ⇒ Operation</code></p>\\n\\nCreate a contact\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the contact |\\n\\n**Example:** Create a contact\\n```js\\ncreateContact(data)\\n```\\n\\n* * *\\n\\n### createPayment\\n\\n<p><code>createPayment(data) ⇒ Operation</code></p>\\n\\nCreate a payment\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the payment |\\n\\n**Example:** Create a payment with a reference to a customer\\n```js\\ncreatePayment(data)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Beyonic\\n\\nLanguage Pack for building expressions and operations for working with the\\n[beyonic API](http://apidocs.beyonic.com/).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/beyonic-configuration-schema/)\\ndefinition.\\n\\n## Payments API\\n\\n#### `createPayment(...)`\\n\\n```js\\ncreatePayment(\\n  fields(\\n    field('phonenumber', '+256773712831'),\\n    field('first_name', 'Gideon'),\\n    field('last_name', 'Zelalem'),\\n    field('amount', 100.2),\\n    field('currency', 'USD'),\\n    field('account', 1),\\n    field('description', 'Long-term contract for Arseal'),\\n    field('payment_type', 'money'),\\n    field('callback_url', 'https://my.website/payments/callback')\\n  )\\n);\\n```\\n\\n## Collection Requests API\\n\\n#### `createCollectionRequest(...)`\\n\\n```js\\ncreateCollectionRequest(\\n  fields(\\n    field('instructions', 'Send me some money, please!'),\\n    field('phonenumber', '+256773712831'),\\n    field('amount', 5.0),\\n    field('currency', 'USD')\\n  )\\n);\\n```\\n\\n## Contacts API\\n\\n#### `createContact(...)`\\n\\n```js\\ncreateContact(\\n  fields(\\n    field('first_name', 'Granit'),\\n    field('last_name', 'Xhaka'),\\n    field('phone_number', '+256773712831'),\\n    field('email', 'granit@arsenal.com')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-beyonic\\n\\n## 0.3.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.3.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.3.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.3.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.3.10 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.3.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.3.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.3.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.3.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.9 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.8 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.7 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.6 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.1.5 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.1.4 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.1.3 - 25 October 2022\\n\\n### Patch Changes\\n\\n- 63080d0: Update common for build\\n\\n## 0.1.2 - 25 October 2022\\n\\n### Patch Changes\\n\\n- 0d358b6: Add ast.json for beyonic\\n\\n## 0.1.1 - 25 October 2022\\n\\n### Patch Changes\\n\\n- 06ff25f: Update superagent to v8\\n\\n## 0.1.0 - 21 October 2022\\n\\n### Minor Changes\\n\\n- 28ceb1f: Moving language-beyonic to adaptors/packages/beyonic\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["createCollectionRequest","createContact","createPayment"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"API URL","format":"uri","minLength":1,"examples":["https://beyonic.com/api"]},"apiToken":{"title":"API Token","type":"string","description":"API token","minLength":1,"examples":["cdjhiooiSIUJHDYSYUIHASIOHKAANOAJJjsiujhaka"]}},"type":"object","additionalProperties":true,"required":["apiUrl","apiToken"]}},
[
  {
    "id": "createCollectionRequest",
    "longname": "createCollectionRequest",
    "name": "createCollectionRequest",
    "kind": "function",
    "scope": "global",
    "description": "Create a collection request",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the collection request",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Create a collection request</caption>\ncreateCollectionRequest(data)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 89,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createContact",
    "longname": "createContact",
    "name": "createContact",
    "kind": "function",
    "scope": "global",
    "description": "Create a contact",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the contact",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Create a contact</caption>\ncreateContact(data)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 62,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "createPayment",
    "longname": "createPayment",
    "name": "createPayment",
    "kind": "function",
    "scope": "global",
    "description": "Create a payment",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the payment",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Create a payment with a reference to a customer</caption>\ncreatePayment(data)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 35,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/beyonic/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"bigquery","adaptor":"@openfn/language-bigquery","version":"3.0.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#load\\\">load(dirPath, projectId, datasetId, tableId, loadOptions, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### load\\n\\n<p><code>load(dirPath, projectId, datasetId, tableId, loadOptions, callback) ⇒ Operation</code></p>\\n\\nLoad files to BigQuery\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | the path to your local directory |\\n| projectId | <code>string</code> | your bigquery project id |\\n| datasetId | <code>string</code> | your bigquery dataset id |\\n| tableId | <code>string</code> | the name of the table you'd like to load |\\n| loadOptions | <code>object</code> | options to pass to the bigquery.load() API |\\n| callback | <code>function</code> | and optional callback |\\n\\n**Example**\\n```js\\nload(\\n  './tmp/files',\\n  'my-bg-project',\\n  'test01',\\n  'product-codes',\\n  {\\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    createDisposition: 'CREATE_IF_NEEDED',\\n  }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language BigQuery\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### state.json\\n\\nThe configuration key must be a valid GCP credential as JSON.\\n\\n```json\\n{\\n  \\\"configuration\\\": {\\n    \\\"type\\\": \\\"service_account\\\",\\n    \\\"project_id\\\": \\\"some-project\\\",\\n    \\\"private_key_id\\\": \\\"670b9e3c8c366e83aa569dd57cbfc5c575b72e42\\\",\\n    \\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nblah\\\\nmoreblah=\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\n    \\\"client_email\\\": \\\"bigquery@some-project.iam.gserviceaccount.com\\\",\\n    \\\"client_id\\\": \\\"someid\\\",\\n    \\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\n    \\\"token_uri\\\": \\\"https://oauth2.googleapis.com/token\\\",\\n    \\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\n    \\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com\\\"\\n  },\\n  \\\"data\\\": { \\\"a\\\": 1 }\\n}\\n```\\n\\n### operations (expression.js)\\n\\n#### load(...)\\n\\nLoad data to a table in bigquery from a CSV. See full\\n[options here](https://cloud.google.com/bigquery/docs/reference/rest/v2/Job#JobConfigurationLoad).\\n\\n```js\\nload(\\n  '/home/taylor/Desktop/type-C_r-ALL_ps-201012_freq-M_px-HS_pub-20200731_fmt-csv_ex-20200818.csv',\\n  'awesome-solutions-project', // project\\n  'test01', // dataset\\n  'mytable', // table\\n  {\\n    schema:\\n      'classification:STRING,year:STRING,period:STRING,period_desc:STRING,aggregate_level:STRING,is_leaf_code:STRING,trade_flow_code:STRING,trade_flow:STRING,reporter_code:STRING,reporter:STRING,reporter_iso:STRING,partner_code:STRING,partner:STRING,partner_iso:STRING,commodity_code:STRING,commodity:STRING,qty_unit_code:STRING,qty_unit:STRING,qty:INTEGER,netweight_kg:INTEGER,trade_value:INTEGER,flag:STRING',\\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\\n    // createDisposition: 'CREATE_IF_NEEDED',\\n    writeDisposition: 'WRITE_APPEND',\\n    skipLeadingRows: 1,\\n  } // loadOptions\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-bigquery\\n\\n## 3.0.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.0.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.0.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 3.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 3.0.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 3.0.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 3.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.1.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.0.10 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.0.9 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 2.0.8 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.0.7 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 2.0.6 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 2.0.5 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.0.4 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.0.3 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.0.2 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.0.1 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.0.0 - 14 July 2023\\n\\n### Major Changes\\n\\n- 0b6f20b: use parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.2.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.2.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.5 - 20 April 2023\\n\\n### Patch Changes\\n\\n- 5895eb9: update dependencies\\n\\n## 1.1.4 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.1.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1 - 15 December 2022\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n- 57f3513: Fix exports in index.js\\n\\n## 1.1.0 - 11 November 2022\\n\\n### Minor Changes\\n\\n- e4c6114: bigquery migration and build\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["load"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","additionalProperties":true,"properties":{"type":{"title":"Type","type":"string","description":"","examples":["service_acconut"]},"project_id":{"title":"Prokect id","type":"string","description":"Project id","examples":["some-project-id"]},"private_key_id":{"title":"Private Key Id","type":"string","description":"Private key id","examples":["670b9e3c8c366e83aa569dd57cbfc5c575b72e42"]},"private_key":{"title":"Private Key","type":"string","description":"Private key","examples":["-----BEGIN PRIVATE KEY-----\nblah\nmoreblah=\n-----END PRIVATE KEY-----\n"]},"client_email":{"title":"Client Email","type":"string","description":"Client email","examples":["bigquery@some-project.iam.gserviceaccount.com"]},"client_id":{"title":"Client Id","type":"string","description":"Client id","examples":["someid"]},"auth_uri":{"title":"Auth Uri","type":"string","description":"Auth Uri","examples":["https://accounts.google.com/o/oauth2/auth"]},"token_uri":{"title":"Token Uri","type":"string","description":"Token Uri","examples":["https://oauth2.googleapis.com/token"]},"auth_provider_x509_cert_url":{"title":"Auth Provider x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/oauth2/v1/certs"]},"client_x509_cert_url":{"title":"Client x509 Cert Url","type":"string","description":"","examples":["https://www.googleapis.com/robot/v1/metadata/x509/bigquery%40some-project.iam.gserviceaccount.com"]}},"required":["type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url"]}},
[
  {
    "id": "load",
    "longname": "load",
    "name": "load",
    "kind": "function",
    "scope": "global",
    "description": "Load files to BigQuery",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the path to your local directory",
        "name": "dirPath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "your bigquery project id",
        "name": "projectId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "your bigquery dataset id",
        "name": "datasetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the name of the table you'd like to load",
        "name": "tableId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to pass to the bigquery.load() API",
        "name": "loadOptions"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "and optional callback",
        "name": "callback"
      }
    ],
    "examples": [
      "load(\n  './tmp/files',\n  'my-bg-project',\n  'test01',\n  'product-codes',\n  {\n    schema: 'FREQ:STRING,DATATYPE:STRING,PRODUCTCODE:STRING,PARTNER:STRING',\n    writeDisposition: 'WRITE_APPEND',\n    skipLeadingRows: 1,\n    schemaUpdateOptions: ['ALLOW_FIELD_ADDITION'],\n    createDisposition: 'CREATE_IF_NEEDED',\n  }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 55,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/bigquery/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"cartodb","adaptor":"@openfn/language-cartodb","version":"0.4.15","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addrow\\\">addRow(table, rowData)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(sqlQuery)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addRow\\n\\n<p><code>addRow(table, rowData) ⇒ Operation</code></p>\\n\\nAdd rows to a table\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>String</code> | Table name |\\n| rowData | <code>object</code> | data to add in the row |\\n\\n**Example:** Add rows to a table\\n```js\\naddRow('users', { name: 'Alice', age: 25, city: 'New York' })\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(sqlQuery) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>object</code> | Payload data for the message |\\n\\n**Example:** A basic radius search query\\n```js\\nsql(\\\"SELECT * FROM table WHERE ST_DWithin(geom,ST_Point(-73,40),1000)\\\");\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language cartodb\\n\\nLanguage Pack for sending messages using the\\n[cartodb API](http://docs.cartodb.com/cartodb-platform/sql-api/).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/cartodb-configuration-schema/)\\ndefinition.\\n\\n## Examples\\n\\n```js\\naddRow(\\n  'your_table',\\n  fields(\\n    field('name', 'taylor'),\\n    field('lat', dataValue('lat')),\\n    field('long', dataValue('long')),\\n    field('mookie', dataValue('form.blaylock')),\\n    field('description', dataValue('type_description')),\\n    field('date', dataValue('SubmissionDate'))\\n  )\\n);\\n```\\n\\n```js\\nsql(function (state) {\\n  return (\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-cartodb\\n\\n## 0.4.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.4.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.4.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.4.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.4.11 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.4.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.4.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.4.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.4.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.4.0 - 13 June 2024\\n\\nRepublish to npmjs.com. No changes.\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.2\\n\\n### Patch Changes\\n\\n- Fix example code\\n\\n## 0.2.1\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.1.0\\n\\n### Minor Changes\\n\\n- 792d495: Migrate CartoDB\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\"","functions":["addRow","sql"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"account":{"title":"Account","type":"string","description":"CartoDB account name","minLength":1,"examples":["openfn"]},"apiKey":{"title":"API Key","type":"string","description":"CartoDB API key","minLength":1,"examples":["longsecretkey"]}},"type":"object","additionalProperties":true,"required":["account","apiKey"]}},
[
  {
    "id": "addRow",
    "longname": "addRow",
    "name": "addRow",
    "kind": "function",
    "scope": "global",
    "description": "Add rows to a table",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Table name",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to add in the row",
        "name": "rowData"
      }
    ],
    "examples": [
      "<caption>Add rows to a table</caption>\naddRow('users', { name: 'Alice', age: 25, city: 'New York' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 66,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cartodb/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "sqlQuery"
      }
    ],
    "examples": [
      "<caption>A basic radius search query</caption>\nsql(\"SELECT * FROM table WHERE ST_DWithin(geom,ST_Point(-73,40),1000)\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 37,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cartodb/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"chatgpt","adaptor":"@openfn/language-chatgpt","version":"1.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#prompt\\\">prompt(message, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### prompt\\n\\n<p><code>prompt(message, options) ⇒ operation</code></p>\\n\\nPrompt the GPT chat interface to respond\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| message | <code>string</code> | The prompt |\\n| options | [<code>PromptOptions</code>](#promptoptions) | Model, Reasoning Effort, Response Form and other parameters (https://platform.openai.com/docs/api-reference/chat/create) |\\n\\n**Example**\\n```js\\nprompt(`Filter these emails and pick out the most urgent: ${JSON.stringify($.data)}`);\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### PromptOptions\\n\\nOptions provided to Chat Completions Create (https://platform.openai.com/docs/api-reference/chat/create)\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | Which mode to use, i.e., `o3-mini-2025-01-31`. |\\n| reasoning_effort | <code>string</code> | Use `low`, `medium`, or `high` to constrain effort on reasoning for some models. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-chatgpt <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with OpenAI's\\nChatGPT API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/chatgpt-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/chatgpt-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `create` function\\n\\n```js\\nprompt('Write me a poem about tables and chairs.');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-chatgpt\\n\\n## 1.0.6 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.5 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.4 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.3 - 20 March 2025\\n\\n### Patch Changes\\n\\n- 36a849c: Update example in docs to be more relevant\\n\\n## 1.0.2 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.1 - 07 March 2025\\n\\n### Patch Changes\\n\\n- Expose documenatation, expand references and expose options.\\n\\n## 1.0.0 - 06 March 2025\\n\\nInitial release.\\n\"","functions":["prompt"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiKey":{"title":"API Key","anyOf":[{"type":"string"},{"type":"null"}],"description":"Your OpenAI API key","type":"string","minLength":1,"examples":["sk-proj-api03-YOUR_SECRET_KEY"]}},"type":"object","additionalProperties":true,"required":["apiKey"]}},
[
  {
    "id": "prompt",
    "longname": "prompt",
    "name": "prompt",
    "kind": "function",
    "scope": "global",
    "description": "Prompt the GPT chat interface to respond",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The prompt",
        "name": "message"
      },
      {
        "type": {
          "names": [
            "PromptOptions"
          ]
        },
        "description": "Model, Reasoning Effort, Response Form and other parameters (https://platform.openai.com/docs/api-reference/chat/create)",
        "name": "options"
      }
    ],
    "examples": [
      "prompt(`Filter these emails and pick out the most urgent: ${JSON.stringify($.data)}`);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 71,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/chatgpt/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "PromptOptions",
    "longname": "PromptOptions",
    "name": "PromptOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to Chat Completions Create (https://platform.openai.com/docs/api-reference/chat/create)",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Which mode to use, i.e., `o3-mini-2025-01-31`.",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Use `low`, `medium`, or `high` to constrain effort on reasoning for some models.",
        "name": "reasoning_effort"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/chatgpt/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"cht","adaptor":"@openfn/language-cht","version":"1.0.12","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, data, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a GET request against the base URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get a list of contacts\\n```js\\nget(\\\"/api/v2/export/contacts\\\");\\n```\\n**Example:** Filter contacts given a name\\n```js\\nget(\\\"/api/v2/export/contacts\\\", {\\n  query: {\\\"filters\\\": {\\n    \\\"search\\\": \\\"jim\\\"\\n  }}\\n});\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request against the base url\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Create a new person\\n```js\\npost(\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a PUT request against the base url\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update settings\\n```js\\nput(\\\"/api/v1/settings\\\",{query:{overwrite:true}});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a general HTTP request to CHT\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the CHT HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"POST\\\",\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-cht <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the cht API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/cht-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/cht-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost(\\\"/api/v1/people\\\", {  \\n  \\\"name\\\": \\\"Hannah\\\",\\n  \\\"phone\\\": \\\"+254712345678\\\",\\n  \\\"type\\\": \\\"contact\\\",\\n  \\\"contact_type\\\": \\\"patient\\\", });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-cht\\n\\n## 1.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.0 - 29 July 2024\\n\\nInitial release for cht adaptor with `get`, `post`, and `put`\\n\"","functions":["get","post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Community Health Kit base URL","format":"uri","minLength":1,"examples":["https://demo-cht.dev.medicmobile.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["somenamehere"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
[
  {
    "id": "CHTHttpState",
    "longname": "CHTHttpState",
    "name": "CHTHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the CHT HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "order": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request against the base URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a list of contacts</caption>\nget(\"/api/v2/export/contacts\");",
      "<caption>Filter contacts given a name</caption>\nget(\"/api/v2/export/contacts\", {\n  query: {\"filters\": {\n    \"search\": \"jim\"\n  }}\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 43,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request against the base url",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new person</caption>\npost(\"/api/v1/people\", {  \n  \"name\": \"Hannah\",\n  \"phone\": \"+254712345678\",\n  \"type\": \"contact\",\n  \"contact_type\": \"patient\", });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 64,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request against the base url",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update settings</caption>\nput(\"/api/v1/settings\",{query:{overwrite:true}});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 80,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request to CHT",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"POST\",\"/api/v1/people\", {  \n  \"name\": \"Hannah\",\n  \"phone\": \"+254712345678\",\n  \"type\": \"contact\",\n  \"contact_type\": \"patient\", });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 102,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CHTHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/cht/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"claude","adaptor":"@openfn/language-claude","version":"1.0.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#prompt\\\">prompt(message, opts)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### prompt\\n\\n<p><code>prompt(message, opts) ⇒ operation</code></p>\\n\\nPrompt the Claude chat interface to respond\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| message | <code>string</code> | The prompt |\\n| opts | [<code>PromptOptions</code>](#promptoptions) | Model, Max Tokens, Temperature, and other options. |\\n\\n**Example**\\n```js\\nprompt(`Filter these emails and pick out the most urgent: ${JSON.stringify($.data)}`);\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### PromptOptions\\n\\nOptions provided to Chat Completions Create (https://docs.anthropic.com/en/api/messages)\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | Which mode to use, i.e., `claude-3-7-sonnet-20250219`. |\\n| max_tokens | <code>string</code> | The maximum number of tokens to generate before stopping, i.e., `1024` |\\n| temperature | <code>number</code> | Amount of randomness injected into the response. Ranges from 0.0 to 1.0. Use temperature closer to 0.0 for analytical / multiple choice, and closer to 1.0 for creative and generative tasks. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-claude <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Anthropic\\nClaude API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/claude-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/claude-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `prompt` function\\n\\n```js\\nprompt('Write a haiku about surfing.');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\"","changelog":"\"# @openfn/language-claude\\n\\n## 1.0.7 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.6 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.5 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.4 - 20 March 2025\\n\\n### Patch Changes\\n\\n- 36a849c: Update example in docs to be more relevant\\n\\n## 1.0.3 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.2 - 07 March 2025\\n\\n### Patch Changes\\n\\n- Expose documenatation, expand references and expose options.\\n\\n## 1.0.1 - 06 March 2025\\n\\n### Patch Changes\\n\\n- Fix config schema\\n\\n## 1.0.0 - 06 March 2025\\n\\nInitial release.\\n\"","functions":["prompt"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiKey":{"title":"API Key","anyOf":[{"type":"string"},{"type":"null"}],"description":"Your Anthropic API token","type":"string","minLength":1,"examples":["sk-ant-api03-YOUR_SECRET_KEY"]}},"type":"object","additionalProperties":true,"required":["apiKey"]}},
[
  {
    "id": "prompt",
    "longname": "prompt",
    "name": "prompt",
    "kind": "function",
    "scope": "global",
    "description": "Prompt the Claude chat interface to respond",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The prompt",
        "name": "message"
      },
      {
        "type": {
          "names": [
            "PromptOptions"
          ]
        },
        "description": "Model, Max Tokens, Temperature, and other options.",
        "name": "opts"
      }
    ],
    "examples": [
      "prompt(`Filter these emails and pick out the most urgent: ${JSON.stringify($.data)}`);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 72,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/claude/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "PromptOptions",
    "longname": "PromptOptions",
    "name": "PromptOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to Chat Completions Create (https://docs.anthropic.com/en/api/messages)",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Which mode to use, i.e., `claude-3-7-sonnet-20250219`.",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The maximum number of tokens to generate before stopping, i.e., `1024`",
        "name": "max_tokens"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Amount of randomness injected into the response. Ranges from 0.0 to 1.0. Use temperature closer to 0.0 for analytical / multiple choice, and closer to 1.0 for creative and generative tasks.",
        "name": "temperature"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/claude/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"collections","adaptor":"@openfn/language-collections","version":"0.7.8","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#collections_each\\\">collections.each(name, query, callback)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_get\\\">collections.get(name, query)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_remove\\\">collections.remove(name, query)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#collections_set\\\">collections.set(name, keygen, values)</a>\\n</dt>\\n</dl>\\n\\n\\n\\n## collections\\n\\nThese functions belong to the collections namespace.\\n### collections.each {#collections_each}\\n\\n<p><code>each(name, query, callback)</code></p>\\n\\nIterate over all values in a collection which match the provided query.\\neach() maintains a low memory footprint by streaming items individually.\\nYou can pass a string key-pattern as a query, or pass a query object.\\nThe callback function will be invoked for each value with three parameters:\\n`state`, `value` and `key`.\\nChanging the page size does not affect the callback function (only one item is\\never passed at a time).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to remove from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to remove, or a query object |\\n| callback | <code>function</code> | A callback invoked for each item `(state,  value, key) => void` |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data.cursor | if values are still left on the server, a cursor string will be written to state.data |\\n**Example:** Iterate over a range of values with wildcards\\n```js\\ncollections.each('my-collection', 'record-2024*-appointment-*', (state, value, key) => {\\n  state.cumulativeCost += value.cost;\\n})\\n```\\n**Example:** Iterate over a range of values with date filters\\n```js\\ncollections.each('my-collection', { createdBefore: new Date().toString() }, (state, value, key) => {\\n  state.cumulativeCost += value.cost;\\n})\\n```\\n\\n* * *\\n\\n\\n### collections.get {#collections_get}\\n\\n<p><code>get(name, query)</code></p>\\n\\nFetch one or more values from a collection.\\nFor large datasets, we recommend using each(), which streams data.\\nYou can pass a specific key as a string to only fetch one item, or pass a query\\nwith a key-pattern or a date filter.\\nIf not all matching values are returned, the cursor position is written to state.data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to fetch from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to fetch, or a query object |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the downloaded values as an array unless a specific key was specified, in which case state.data is the value |\\n**Example:** Get a specific value from a collection\\n```js\\ncollections.get('my-collection', '556e0a62')\\n```\\n**Example:** Get a range of values from a collection with a key pattern\\n```js\\ncollections.get('my-collection', '2024*')\\n```\\n**Example:** Get all values created since the end of January 2024\\n```js\\ncollections.get('my-collection', { createdAfter: '202401'})\\n```\\n\\n* * *\\n\\n\\n### collections.remove {#collections_remove}\\n\\n<p><code>remove(name, query)</code></p>\\n\\nRemove one or more values from a collection.\\nYou can pass a specific key as a string to only fetch one item, or pass a query\\nwith a key-pattern or a date filter.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to remove from |\\n| query | <code>string</code> \\\\| [<code>QueryOptions</code>](#queryoptions) | A string key or key pattern (with wildcards '*') to remove, or a query object |\\n\\n**Example:** Remove a specific value from a collection\\n```js\\ncollections.remove('my-collection', '556e0a62')\\n```\\n**Example:** Remove a range of values from a collection with a key pattern\\n```js\\ncollections.remove('my-collection', '2024*')\\n```\\n**Example:** Remove all values created since the end of January 2024\\n```js\\ncollections.remove('my-collection', { createdAfter: '202401'})\\n```\\n\\n* * *\\n\\n\\n### collections.set {#collections_set}\\n\\n<p><code>set(name, keygen, values)</code></p>\\n\\nAdds one or more values to a collection. If a key already exists, its value will\\nbe replaced by the new value.\\nYou can pass a string key and a single value, or a key generator function and an array of values.\\nThe function will be called for each value, passing each value as the first argument, and should return\\na string key.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| name | <code>string</code> | The name of the collection to fetch from |\\n| keygen |  | a function which generates a key for each value: (value, index) => key. Pass a string to set a static key for a single item. |\\n| values |  | an array of values to set, or a single value. |\\n\\n**Example:** Set a number of values using each value's id property as a key\\n```js\\ncollections.set('my-collection', (item) => item.id, $.data)\\n```\\n**Example:** Set a number of values, generating an id from a string template\\n```js\\ncollections.set('my-collection', (item) => `${item.category}-${Date.now()}`, $.data)\\n```\\n**Example:** Set a single value with a static key\\n```js\\ncollections.set('my-collection', 'city-codes', { NY: 'New York', LDN: 'London' })\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### QueryOptions\\n\\nQuery options. All dates should be parseable as ISO 8601 strings, see https://simple.wikipedia.org/wiki/ISO_8601\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | key or key pattern to match against. Patterns support wildcards,  eg `2024-01*` |\\n| createdBefore | <code>string</code> | matches values that were created before the start of the provided date |\\n| createdAfter | <code>string</code> | matches values that were created after the end of the provided date |\\n| limit | <code>number</code> | limit the maximum amount of results. If Infinity or unset, all items will be fetched. Default: Infnity. |\\n| pageSize | <code>number</code> | specify the number of values downloaded per page (or chunk). Default 1000. |\\n| cursor | <code>string</code> | set the cursor position to start searching from a specific index. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-collections <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn **_adaptor_** for using the OpenFn Collections API.\\n\\nThe Collections adaptor is not designed to be used alone, but in conjunction\\nwith other adaptors. As a result, it's a bit different to other adaptors.\\n\\nThe Collections API is a key/value store, which can act as a high performance\\ncache, buffer or storage solution. All values are strings (but can contain\\nJSON).\\n\\n## Usage\\n\\nAll collections functions are exposed through the `collections` namespace:\\n\\nTo iterate over all values with `2024` somewhere in the key\\n\\n```\\ncollections.each($.collectionName, '*2024*', (state, value, key) => {\\n  console.log(value)\\n})\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/collections-docs)\\nfor full technical documentation.\\n\\n## CLI\\n\\nCollections can be used from the CLI since v1.8.7, but you will need to:\\n\\n- Set the job to use two adaptors\\n- Pass a Personal Access Token\\n- Set the Collections endpoint\\n\\nYou can get a Personal Access Token from any v2 deployment.\\n\\n### For a single job\\n\\nYou can pass multiple adaptors from the CLI:\\n\\n```\\nopenfn job.js -a collections -a http -s state.json\\n```\\n\\nYou'll need to set configuration on the state.json:\\n\\n```\\n{\\n  \\\"configuration\\\": {\\n    \\\"collections_endpoint\\\": \\\"http://localhost:4000/collections\\\",\\n    \\\"collections_token\\\": \\\"...paste the token from the app...\\\"\\n  }\\n}\\n\\n```\\n\\n### For a workflow\\n\\nIf you're using `workflow.json`, set the token and endpoint on\\n`workflow.credentials`:\\n\\n```json\\n{\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [ ... ],\\n    \\\"credentials\\\": {\\n      \\\"collections_endpoint\\\": \\\"http://localhost:4000/collections\\\",\\n      \\\"collections_token\\\": \\\"...paste the token from the app...\\\"\\n    }\\n  }\\n}\\n```\\n\\nAnd make sure that any steps which use collections have multiple adaptors set:\\n\\n```json\\n{\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [\\n      {\\n        \\\"expression\\\": \\\"...\\\",\\n        \\\"adaptors\\\": [\\\"@openfn/language-http\\\", \\\"@openfn/language-collections\\\"]\\n      }\\n    ]\\n  }\\n}\\n```\\n\\nNote that steps cannot generally use multiple adaptors. Collections are special\\nin this regard.\\n\\n## Deployments\\n\\nCollections must be configured for your platform instance (v2 only).\\n\\nSet the `WORKER_COLLECTIONS_URL` env var on the Worker instance to enable\\ncollections for that worker. The URL should point to\\n`https://<lightning>/collections`\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-collections\\n\\n## 0.7.8 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.7.7 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.7.6 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.7.5 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.7.4 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.7.3 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.7.2 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.7.1 - 16 December 2024\\n\\n### Patch Changes\\n\\n- Fixed some small issues in the docs\\n\\n## 0.7.0 - 11 December 2024\\n\\n### Minor Changes\\n\\n- c95ccba: BREAKING: Pass state into the keygen function on `set()`. This allows\\n  state to be used to calculate keys.\\n\\n  When calling `collections.set(collection, keygen, values)`, the keygen\\n  function signature has changed from `(value, index) => key` to\\n  `(value, state, index) => key`.\\n\\n### Patch Changes\\n\\n- cdb01db: Better error handling if the keygen function is invalid\\n\\n## 0.6.2 - 07 December 2024\\n\\n### Patch Changes\\n\\n- Expose mock agent for unit tests\\n\\n## 0.6.1 - 05 December 2024\\n\\n### Patch Changes\\n\\n- 12d634c: Fix an issue where reference values for setting a single item were\\n  not resolved, eg:\\n\\n  ```js\\n  collections.set('my-collection', 'some-key', state => state.data);\\n  ```\\n\\n## 0.6.0 - 03 December 2024\\n\\n### Minor Changes\\n\\n- Various stability fixes\\n\\n### Patch Changes\\n\\n- 39fb894: Allow a single key to be set to an array value\\n- ad9fca2: Throw if insufficient arguments passed to set()\\n- 29a6ce0: Throw a nice error if the collection does not exist\\n- 26aa57c: Fix an issue where requesting a single key that does not exist throws\\n  an error, as in:\\n\\n  ```\\n  collections.get('my-collection', 'some-item')\\n  ```\\n\\n  Note that this requires Lightning v2.10.5+\\n\\n## 0.5.2 - 21 November 2024\\n\\n### Patch Changes\\n\\n- Fix an issue where sometimes the JSON stream would skip tokens and result in a\\n  smaller payload being returned\\n\\n## 0.5.1 - 15 November 2024\\n\\n### Patch Changes\\n\\n- set() will now upsert items in batches of 1000\\n\\n## 0.5.0 - 07 November 2024\\n\\n### Minor Changes\\n\\n- b73b063: - Added pagination support\\n  - Removed `updated_*` time filters\\n\\n## 0.4.0 - 01 November 2024\\n\\n### Minor Changes\\n\\n- Fixed support for delete\\n\\n## 0.3.0 - 01 November 2024\\n\\n### Minor Changes\\n\\n- 1e472ed: Update new GET request structure Fix streaming API\\n\\n### Patch Changes\\n\\n- 32e5a03: Fix an issue where the query object isn't getting sent to the server\\n\\n## 0.2.0 - 30 October 2024\\n\\n### Minor Changes\\n\\n- f4deb81: Updates to latest spec\\n\\n## 0.1.0 - 23 October 2024\\n\\nInitial experiemntal release, with `collections.get`, `collections.each`,\\n`collections.remove` and `collections.set`\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"collections_endpoint":{"title":"Collections api endpoint","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://app.openfn.org)","format":"uri","minLength":1,"examples":["https://app.openfn.org"],"default":"https://app.openfn.org"},"collections_token":{"title":"Access Token","type":"string","description":"Access token for the collection","examples":["x.y.z"]}},"type":"object","additionalProperties":true,"required":["collections_endpoint","collections_token"]}},
[
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "collections",
    "description": "Iterate over all values in a collection which match the provided query.\neach() maintains a low memory footprint by streaming items individually.\nYou can pass a string key-pattern as a query, or pass a query object.\nThe callback function will be invoked for each value with three parameters:\n`state`, `value` and `key`.\nChanging the page size does not affect the callback function (only one item is\never passed at a time).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to remove from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to remove, or a query object",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A callback invoked for each item `(state,  value, key) => void`",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Iterate over a range of values with wildcards</caption>\ncollections.each('my-collection', 'record-2024*-appointment-*', (state, value, key) => {\n  state.cumulativeCost += value.cost;\n})",
      "<caption>Iterate over a range of values with date filters</caption>\ncollections.each('my-collection', { createdBefore: new Date().toString() }, (state, value, key) => {\n  state.cumulativeCost += value.cost;\n})"
    ],
    "access": "public",
    "meta": {
      "lineno": 295,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "state": [
      {
        "name": "data.cursor",
        "description": "if values are still left on the server, a cursor string will be written to state.data",
        "type": null
      }
    ],
    "order": 5,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "collections",
    "description": "Fetch one or more values from a collection.\nFor large datasets, we recommend using each(), which streams data.\nYou can pass a specific key as a string to only fetch one item, or pass a query\nwith a key-pattern or a date filter.\nIf not all matching values are returned, the cursor position is written to state.data",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to fetch from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to fetch, or a query object",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Get a specific value from a collection</caption>\ncollections.get('my-collection', '556e0a62')",
      "<caption>Get a range of values from a collection with a key pattern</caption>\ncollections.get('my-collection', '2024*')",
      "<caption>Get all values created since the end of January 2024</caption>\ncollections.get('my-collection', { createdAfter: '202401'})"
    ],
    "access": "public",
    "meta": {
      "lineno": 58,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the downloaded values as an array unless a specific key was specified, in which case state.data is the value",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "QueryOptions",
    "longname": "QueryOptions",
    "name": "QueryOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Query options. All dates should be parseable as ISO 8601 strings, see https://simple.wikipedia.org/wiki/ISO_8601",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "key or key pattern to match against. Patterns support wildcards,  eg `2024-01*`",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "matches values that were created before the start of the provided date",
        "name": "createdBefore"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "matches values that were created after the end of the provided date",
        "name": "createdAfter"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "limit the maximum amount of results. If Infinity or unset, all items will be fetched. Default: Infnity.",
        "name": "limit"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "specify the number of values downloaded per page (or chunk). Default 1000.",
        "name": "pageSize"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor position to start searching from a specific index.",
        "name": "cursor"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 28,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "remove",
    "longname": "remove",
    "name": "remove",
    "kind": "function",
    "scope": "collections",
    "description": "Remove one or more values from a collection.\nYou can pass a specific key as a string to only fetch one item, or pass a query\nwith a key-pattern or a date filter.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to remove from",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "string",
            "QueryOptions"
          ]
        },
        "description": "A string key or key pattern (with wildcards '*') to remove, or a query object",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Remove a specific value from a collection</caption>\ncollections.remove('my-collection', '556e0a62')",
      "<caption>Remove a range of values from a collection with a key pattern</caption>\ncollections.remove('my-collection', '2024*')",
      "<caption>Remove all values created since the end of January 2024</caption>\ncollections.remove('my-collection', { createdAfter: '202401'})"
    ],
    "access": "public",
    "meta": {
      "lineno": 244,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "set",
    "longname": "set",
    "name": "set",
    "kind": "function",
    "scope": "collections",
    "description": "Adds one or more values to a collection. If a key already exists, its value will\nbe replaced by the new value.\nYou can pass a string key and a single value, or a key generator function and an array of values.\nThe function will be called for each value, passing each value as the first argument, and should return\na string key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the collection to fetch from",
        "name": "name"
      },
      {
        "description": "a function which generates a key for each value: (value, index) => key. Pass a string to set a static key for a single item.",
        "name": "keygen"
      },
      {
        "description": "an array of values to set, or a single value.",
        "name": "values"
      }
    ],
    "examples": [
      "<caption>Set a number of values using each value's id property as a key</caption>\ncollections.set('my-collection', (item) => item.id, $.data)",
      "<caption>Set a number of values, generating an id from a string template</caption>\ncollections.set('my-collection', (item) => `${item.category}-${Date.now()}`, $.data)",
      "<caption>Set a single value with a static key</caption>\ncollections.set('my-collection', 'city-codes', { NY: 'New York', LDN: 'London' })"
    ],
    "access": "public",
    "meta": {
      "lineno": 139,
      "filename": "collections.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/collections/src"
    },
    "order": 3,
    "level": 0
  }
],
{"name":"commcare","adaptor":"@openfn/language-commcare","version":"3.2.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#bulk\\\">bulk(type, data, params)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchreportdata\\\">fetchReportData(reportId, params, postUrl)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, [params], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, [params], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, params)</a></dt>\\n<dt>\\n    <a href=\\\"#submit\\\">submit(data)</a></dt>\\n<dt>\\n    <a href=\\\"#submitxls\\\">submitXls(data, params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### bulk\\n\\n<p><code>bulk(type, data, params) ⇒ Operation</code></p>\\n\\nBulk upload data to CommCare for case-data or lookup-table. Accepts an array of objects, converts them into\\nan XLS representation, and uploads.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>&#x27;case-data&#x27;</code> \\\\| <code>&#x27;lookup-table&#x27;</code> | The type of data being processed. |\\n| data | <code>Object</code> \\\\| <code>Array.&lt;Object&gt;</code> | An object or an array of objects to upload. - If type is `'case-data'`, this should be an object array of objects. - If type is `'lookup-table'`, this should be an object. |\\n| params | <code>Object</code> | Input parameters, see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data) for case-data and [Commcare Docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946023/Bulk+upload+Lookup+Tables) for lookup-table. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Upload a single row of a case-data resource\\n```js\\nbulk('case-data', [{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n**Example:** Upload a single row of a lookup-table resource\\n```js\\nbulk(\\n  'lookup-table',\\n  {\\n    types: [\\n      {\\n        'DELETE(Y/N)': 'N',\\n        table_id: 'fruit',\\n        'is_global?': 'yes',\\n        'field 1': 'type',\\n        'field 2': 'name',\\n      },\\n    ],\\n    fruit: [\\n      {\\n        UID: '',\\n        'DELETE(Y/N)': 'N',\\n        'field:type': 'citrus',\\n        'field:name': 'Orange',\\n      },\\n    ],\\n  },\\n  { replace: false }\\n);\\n```\\n\\n* * *\\n\\n### fetchReportData\\n\\n<p><code>fetchReportData(reportId, params, postUrl) ⇒ Operation</code></p>\\n\\nMake a GET request to CommCare's Reports API\\nand POST the response somewhere else.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reportId | <code>String</code> | API name of the report. |\\n| params | <code>Object</code> | Input parameters for the request, see [Commcare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957341/Download+Report+Data). |\\n| postUrl | <code>String</code> | URL to which the response object will be posted. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get 10 records from a report and post them to example.com. Equivalent to `<baseUrl>/configurablereportdata/abcde?limit=10`\\n```js\\nfetchReportData(\\n  \\\"abcde\\\",\\n  { limit: 10 },\\n  \\\"https://www.example.com/api/\\\"\\n)\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, [params], [callback]) ⇒ Operation</code></p>\\n\\nMake a GET request to CommCare. Use this to fetch resources directly from Commcare REST API.\\nYou can pass Commcare query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\nThe response body will be returned to `state.data` as JSON.\\nPaginated responses will be fully downloaded and returned as a single array, _unless_ an `offset` is passed.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| [params] | <code>Object</code> | Input parameters for the request. These vary by endpoint,  see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957366/Data+APIs). |\\n| [callback] | <code>function</code> | Optional callback function. Invoked once per page of data retrieved. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource by Id. Equivalent to GET `<baseUrl>/case/12345`\\n```js\\nget(\\\"/case/12345\\\")\\n```\\n**Example:** Get a resource with exactly 20 items. Equivalent to `<baseUrl>/case?offset=0&limit=20`\\n```js\\nget(\\\"/case\\\", { offset:0, limit: 20 })\\n```\\n**Example:** Get all items in a resource, and add them to state. Equivalent to `<baseUrl>/case`\\n```js\\nget(\\\"/case\\\", {}, (state) => {\\n  state.cases.push(...state.data) // adds all cases to the cases array\\n  return state;\\n})\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, [params], [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to CommCare. Use this to send resources directly to Commcare REST API.\\nYou can pass Commcare body data as a JSON object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object or JSON to create a resource |\\n| [params] | <code>Object</code> | Optional request params |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Create a user resource.Equivalent to `<baseUrl>/user`\\n```js\\npost(\\\"/user\\\", { \\\"username\\\":\\\"test\\\", \\\"password\\\":\\\"somepassword\\\" })\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, params) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the Commcare server. Use this to make any request to Commcare REST API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the body |\\n| params | <code>object</code> | An object of query parameters to be encoded into the URL |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource. Equivalent to `<baseUrl>/a/asri/api/v0.5/case`\\n```js\\nrequest(\\\"GET\\\", \\\"/a/asri/api/v0.5/case\\\");\\n```\\n**Example:** Get a resource using query parameters. Equivalent to `<baseUrl>/case?offset=0&limit=20`\\n```js\\nrequest(\\\"GET\\\", \\\"/case\\\", {}, { offset:0, limit: 20 })\\n```\\n\\n* * *\\n\\n### submit\\n\\n<p><code>submit(data) ⇒ Operation</code></p>\\n\\nSubmit forms to CommCare. Use this to send forms directly to Commcare REST API. Accepts an array of JSON\\nobjects, converts them into XML, and submits to CommCare as an x-form.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>Object</code> | The form as a JSON object |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Submit a form resource.\\n```js\\nsubmit(\\n fields(\\n   field('@', state => ({\\n     xmlns: `http://openrosa.org/formdesigner/${state.formId}`,\\n   })),\\n   field('question1', state => state.data.answer1),\\n   field('question2', state => state.data.answer2)\\n )\\n);\\n```\\n\\n* * *\\n\\n### submitXls\\n\\n<p><code>submitXls(data, params) ⇒ Operation</code></p>\\n\\nBulk upload data to CommCare. Use this to send multiple items for a single resource at once to Commcare. It accepts an array of objects, converts them into\\nan XLS representation, and uploads.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>array</code> | Array of objects to upload |\\n| params | <code>Object</code> | Input parameters, see [CommCare docs](https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the CommCare server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Upload a single row of data for a resource.\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language CommCare\\n\\nLanguage Pack for interacting with the CommCare API.\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Download+Report+Data\\n\\nhttps://confluence.dimagi.com/display/commcarepublic/Submission+API\\n\\nhttps://bitbucket.org/javarosa/javarosa/wiki/FormSubmissionAPI\\n\\nAccepted X-Form Spec from Dimagi: http://dimagi.github.io/xform-spec Accepted\\nX-Form Spec for Cases from Dimagi:\\nhttps://github.com/dimagi/commcare/wiki/casexml20\\n\\n## Documentation\\n\\n## Configuration\\n\\nView all the required and optional properties for `state.configuration` in the official [configuration-schema](https://docs.openfn.org/adaptors/packages/commcare-configuration-schema/) definition.\\n\\n- The \\\"appId\\\" is the UUID which designates your commcare project as different from\\neveryone elses. It can be found in the URL of your application when you first\\nenter it from the project screen. I.e., the last part of this url:\\n`https://www.commcarehq.org/a/YOUR_PROJECT/apps/view/YOUR_APP_ID/`\\n\\n- Note that the username is your full email address.\\n\\n## `fetchReportData` to pull aggregate data from CommCare\\n\\nIt takes 3 arguments: reportId, params, and postUrl.\\n\\n```js\\nfetchReportData(\\n  'reportId',\\n  { limit: 10, offset: 2, state: 'Vermont' },\\n  'http://www.openfn.org/inbox/secret-uuid'\\n);\\n```\\n\\nsimple body target:\\n\\n```xml\\n<data xmlns=\\\"http://openrosa.org/formdesigner/39A2CA97-2EB8-4A9C-A0D1-6AA666666A66\\\">\\n    <firstname>Something</firstname>\\n    <lastname>Else</lastname>\\n    <age>29</age>\\n</data>\\n```\\n\\ncomplex body target:\\n\\n```xml\\n<?xml version='1.0' ?>\\n<data uiVersion=\\\"1\\\" version=\\\"17\\\" name=\\\"New Form\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\" xmlns=\\\"http://openrosa.org/formdesigner/1DFD8610-91E3-4409-BF8B-02D3B4FF3530\\\">\\n    <foo>bar</foo>\\n    <n0:case case_id=\\\"ddb8e2b3-7ce0-43e4-ad45-d7a2eebe9169\\\" user_id=\\\"user-xxx-eve\\\" date_modified=\\\"2013-04-19T16:53:02.799-04\\\" xmlns:n0=\\\"http://commcarehq.org/case/transaction/v2\\\">\\n        <n0:create>\\n            <n0:case_name>bar</n0:case_name>\\n            <n0:owner_id>user-xxx-eve</n0:owner_id>\\n            <n0:case_type>member</n0:case_type>\\n        </n0:create>\\n    </n0:case>\\n    <n1:meta xmlns:n1=\\\"http://openrosa.org/jr/xforms\\\">\\n        <n1:deviceID>A00000245706EE</n1:deviceID>\\n        <n1:timeStart>2013-04-19T16:52:41.000-04</n1:timeStart>\\n        <n1:timeEnd>2013-04-19T16:53:02.799-04</n1:timeEnd>\\n        <n1:username>eve</n1:username>\\n        <n1:userID>user-xxx-eve</n1:userID>\\n        <n1:instanceID>b58df19c-efd5-4ecf-9581-65dda8b8787c</n1:instanceID>\\n        <n2:appVersion xmlns:n2=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version \\\"2.4.1\\\"(10083). App v19. CommCare Version 2.4. Build 10083, built on: March-12-2013</n2:appVersion>\\n    </n1:meta>\\n</data>\\n```\\n\\n## Submitting data to CommCare HQ\\n\\n### Submit an XLS file\\n\\nThis function bulk submit a JSON object as xls file to CommCare HQ\\n\\n```js\\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\\n  case_type: 'student',\\n  search_field: 'external_id',\\n  create_new_cases: 'on',\\n});\\n```\\n\\n### submit\\n\\nHere we're just building the most basic JSON object, that will be converted to\\nan XML object and posted as the <data /> element.\\n\\n```js\\nsubmit(\\n  fields(\\n    field('@', function (state) {\\n      return {\\n        xmlns:\\n          'http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9',\\n      };\\n    }),\\n    field('paitent_namentosh', dataValue('first_name')),\\n    field('question2', 'Some answer here.'),\\n    field('question3', 'HKS'),\\n    field('question4', 'item1'),\\n    field('question5', 69855),\\n    field('question6', 12)\\n  )\\n);\\n```\\n\\nAn open rosa form submission body should look like this:\\n\\n```xml\\n<?xml version=\\\"1.0\\\" ?>\\n<data name=\\\"Patient Registration\\\" uiVersion=\\\"1\\\" version=\\\"9\\\" xmlns=\\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\" xmlns:jrm=\\\"http://dev.commcarehq.org/jr/xforms\\\">\\n  <paitent_namentosh>Taylor</paitent_namentosh>\\n  <question2>Moruki</question2>\\n  <question3>Hks</question3>\\n  <question4>item1</question4>\\n  <question5>69855</question5>\\n  <question6>12</question6>\\n  <n0:meta xmlns:n0=\\\"http://openrosa.org/jr/xforms\\\">\\n    <n0:deviceID>358239055789384</n0:deviceID>\\n    <n0:timeStart>2015-08-21T16:21:59.807+02</n0:timeStart>\\n    <n0:timeEnd>2015-08-21T16:22:15.987+02</n0:timeEnd>\\n    <n0:username>openfn</n0:username>\\n    <n0:userID>5fe615b3af2834cb5dca59f7466d6174</n0:userID>\\n    <n0:instanceID>195e79eb-d823-46fe-9e4f-59b8327d5db2</n0:instanceID>\\n    <n1:appVersion xmlns:n1=\\\"http://commcarehq.org/xforms\\\">CommCare ODK, version &quot;2.22.0&quot;(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015</n1:appVersion>\\n  </n0:meta>\\n</data>\\n```\\n\\nSo the JSON emitted by your expression should look like this:\\n\\n```json\\n{\\n  \\\"data\\\": {\\n    \\\"name\\\": \\\"Patient Registration\\\",\\n    \\\"uiVersion\\\": \\\"1\\\",\\n    \\\"version\\\": \\\"9\\\",\\n    \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/2BCC3E88-2D0D-4C07-8D4A-6B372F3799D9\\\",\\n    \\\"xmlns:jrm\\\": \\\"http://dev.commcarehq.org/jr/xforms\\\",\\n    \\\"paitent_namentosh\\\": \\\"Taylor\\\",\\n    \\\"question2\\\": \\\" Moruki\\\",\\n    \\\"question3\\\": \\\"Hks\\\",\\n    \\\"question4\\\": \\\"item1\\\",\\n    \\\"question5\\\": \\\"69855\\\",\\n    \\\"question6\\\": \\\"12\\\",\\n    \\\"n0:meta\\\": {\\n      \\\"xmlns:n0\\\": \\\"http://openrosa.org/jr/xforms\\\",\\n      \\\"n0:deviceID\\\": \\\"358239055789384\\\",\\n      \\\"n0:timeStart\\\": \\\"2015-08-21T16:21:59.807+02\\\",\\n      \\\"n0:timeEnd\\\": \\\"2015-08-21T16:22:15.987+02\\\",\\n      \\\"n0:username\\\": \\\"openfn\\\",\\n      \\\"n0:userID\\\": \\\"5fe615b3af2834cb5dca59f7466d6174\\\",\\n      \\\"n0:instanceID\\\": \\\"195e79eb-d823-46fe-9e4f-59b8327d5db2\\\",\\n      \\\"n1:appVersion\\\": {\\n        \\\"xmlns:n1\\\": \\\"http://commcarehq.org/xforms\\\",\\n        \\\"$t\\\": \\\"CommCare ODK, version \\\\\\\"2.22.0\\\\\\\"(370023). App v9. CommCare Version 2.22. Build 370023, built on: July-22-2015\\\"\\n      }\\n    }\\n  }\\n}\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-commcare\\n\\n## 3.2.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.2.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.2.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.2.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.2.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- 3b166c9: Update commcare request docs to read query parameters instead of\\n  options, and fix the empty body response received when specific requests are\\n  made.\\n\\n## 3.2.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 3.2.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 3.2.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 3.2.5 - 04 November 2024\\n\\n### Patch Changes\\n\\n- 2fc7d82: Update example docs and configuration\\n\\n## 3.2.4 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.2.3 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.2.2 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.2.1 - 03 October 2024\\n\\n### Patch Changes\\n\\n- 8d85bb4: Implement resolved body and resolved params in bulk\\n\\n## 3.2.0 - 02 October 2024\\n\\n### Minor Changes\\n\\n- c800948: Implement a generic request funciton for generic HTTP calls\\n- cff886e: Implement bulk function for lookup-table and case-data bulk uploads\\n\\n## 3.1.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.1.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.1.0 - 07 August 2024\\n\\n### Minor Changes\\n\\n- Add `cursor()` function from common\\n- Add `dateFns` helper from common\\n\\n### Patch Changes\\n\\n- 90d74c7: Revise documentation\\n\\n## 3.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.3.2\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.3.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.3.0 - 24 July 2024\\n\\n### Minor Changes\\n\\n- ac4b4a0: `get()` will now automatically paginate responses (unless an offset\\n  is passed)\\n\\n## 2.2.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.1.0 - 11 June 2024\\n\\n### Minor Changes\\n\\n- 0719de00: Implement better error handling and make post a public function\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.0.0 - 21 May 2024\\n\\nRebase the commcare adaptor on the new HTTP helpers.\\n\\n### Major Changes\\n\\n- Remove superagents and language-http dependencies\\n- configuration schema: change applicationName to domain to match commcare's\\n  configuration.\\n- remove the `clientPost` function\\n\\n### Minor Changes\\n\\n- Implemented a get function for all get requests in commcare\\n- Create a generic post function that allows for posting JSON data\\n- Standardize auth to use either basic or APIKey across all operations\\n- configuration schema: add apiKey\\n- configuration schema: demote username and appId are optional\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.6.14 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.6.13 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.6.12 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.6.11 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.6.10 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n  - @openfn/language-http@5.0.4\\n\\n## 1.6.9 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n  - @openfn/language-http@5.0.3\\n\\n## 1.6.8 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n  - @openfn/language-http@5.0.2\\n\\n## 1.6.7 - 03 August 2023\\n\\n### Patch Changes\\n\\n- 52c02c8: update xlsx package\\n\\n## 1.6.6 - 21 July 2023\\n\\n### Patch Changes\\n\\n- 8205673: update superagent\\n\\n## 1.6.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n  - @openfn/language-http@5.0.1\\n\\n## 1.6.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[0b6f20b]\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-http@5.0.0\\n  - @openfn/language-common@1.10.1\\n\\n## 1.6.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n  - @openfn/language-http@4.3.3\\n\\n## 1.6.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n  - @openfn/language-http@4.3.2\\n\\n## 1.6.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n  - @openfn/language-http@4.3.1\\n\\n## 1.6.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n  - @openfn/language-http@4.3.0\\n\\n## 1.5.6 - 12 May 2023\\n\\n### Patch Changes\\n\\n- e0406fa: update dependencies\\n\\n## 1.5.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n  - @openfn/language-http@4.2.8\\n\\n## 1.5.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n- Updated dependencies \\\\[14f481e]\\n  - @openfn/language-common@1.7.6\\n  - @openfn/language-http@4.2.7\\n\\n## 1.5.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n- Updated dependencies \\\\[f2aed32]\\n  - @openfn/language-http@4.2.5\\n\\n## 1.5.2 - 15 December 2022\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n- 57f3513: Fix exports in index.js\\n- Updated dependencies \\\\[6d8de03]\\n  - @openfn/language-http@4.2.4\\n\\n## 1.5.1 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n  - @openfn/language-http@4.2.3\\n\\n## 1.5.0 - 04 November 2022\\n\\n### Minor Changes\\n\\n- 5c050ed: Migrate CommCare\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 94076b9: update dependency xlsx to ^0.18.0\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[9a2755e]\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-http@4.2.2\\n  - @openfn/language-common@1.7.4\\n\"","functions":["bulk","fetchReportData","get","post","request","submit","submitXls"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The CommCare host url","format":"uri","minLength":1,"examples":["https://www.commcarehq.org"]},"domain":{"title":"Domain","type":"string","description":"The CommCare domain name","minLength":1,"examples":["some-proof-of-concept"]},"apiKey":{"title":"API Key","type":"string","description":"The CommCare API Key","minLength":1,"examples":["the-long-uuid-provided-by-commcare-that-authenticates-requests"]},"appId":{"title":"App ID","type":"string","description":"Your CommCare project UUID","minLength":1,"examples":["the-long-uuid-in-the-url-that-designates-a-unique-commcare-project"]},"username":{"title":"Username","type":"string","description":"The username to log in to CommCare","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to CommCare","writeOnly":true,"minLength":1,"examples":["superscretepassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","domain","appId"]}},
[
  {
    "id": "bulk",
    "longname": "bulk",
    "name": "bulk",
    "kind": "function",
    "scope": "global",
    "description": "Bulk upload data to CommCare for case-data or lookup-table. Accepts an array of objects, converts them into\nan XLS representation, and uploads.",
    "params": [
      {
        "type": {
          "names": [
            "'case-data'",
            "'lookup-table'"
          ]
        },
        "description": "The type of data being processed.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "An object or an array of objects to upload.\n- If type is `'case-data'`, this should be an object array of objects.\n- If type is `'lookup-table'`, this should be an object.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data CommCare docs} for case-data and {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946023/Bulk+upload+Lookup+Tables Commcare Docs} for lookup-table.",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Upload a single row of a case-data resource</caption>\nbulk('case-data', [{ name: 'Mamadou', phone: '000000' }], {\n  case_type: 'student',\n  search_field: 'external_id',\n  create_new_cases: 'on',\n});",
      "<caption>Upload a single row of a lookup-table resource</caption>\nbulk(\n  'lookup-table',\n  {\n    types: [\n      {\n        'DELETE(Y/N)': 'N',\n        table_id: 'fruit',\n        'is_global?': 'yes',\n        'field 1': 'type',\n        'field 2': 'name',\n      },\n    ],\n    fruit: [\n      {\n        UID: '',\n        'DELETE(Y/N)': 'N',\n        'field:type': 'citrus',\n        'field:name': 'Orange',\n      },\n    ],\n  },\n  { replace: false }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 391,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "CommcareHttpState",
    "longname": "CommcareHttpState",
    "name": "CommcareHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the CommCare server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "order": 0
  },
  {
    "id": "fetchReportData",
    "longname": "fetchReportData",
    "name": "fetchReportData",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to CommCare's Reports API\nand POST the response somewhere else.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "API name of the report.",
        "name": "reportId"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters for the request, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957341/Download+Report+Data Commcare docs}.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "URL to which the response object will be posted.",
        "name": "postUrl"
      }
    ],
    "examples": [
      "<caption>Get 10 records from a report and post them to example.com. Equivalent to `<baseUrl>/configurablereportdata/abcde?limit=10`</caption>\nfetchReportData(\n  \"abcde\",\n  { limit: 10 },\n  \"https://www.example.com/api/\"\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 294,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to CommCare. Use this to fetch resources directly from Commcare REST API.\nYou can pass Commcare query parameters as an object of key value pairs, which will map to parameters\nin the URL.\nThe response body will be returned to `state.data` as JSON.\nPaginated responses will be fully downloaded and returned as a single array, _unless_ an `offset` is passed.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Input parameters for the request. These vary by endpoint,  see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143957366/Data+APIs CommCare docs}.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback function. Invoked once per page of data retrieved.",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a resource by Id. Equivalent to GET `<baseUrl>/case/12345`</caption>\nget(\"/case/12345\")",
      "<caption>Get a resource with exactly 20 items. Equivalent to `<baseUrl>/case?offset=0&limit=20`</caption>\nget(\"/case\", { offset:0, limit: 20 })",
      "<caption>Get all items in a resource, and add them to state. Equivalent to `<baseUrl>/case`</caption>\nget(\"/case\", {}, (state) => {\n  state.cases.push(...state.data) // adds all cases to the cases array\n  return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 63,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to CommCare. Use this to send resources directly to Commcare REST API.\nYou can pass Commcare body data as a JSON object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object or JSON to create a resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional request params",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a user resource.Equivalent to `<baseUrl>/user`</caption>\npost(\"/user\", { \"username\":\"test\", \"password\":\"somepassword\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 151,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the Commcare server. Use this to make any request to Commcare REST API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Get a resource. Equivalent to `<baseUrl>/a/asri/api/v0.5/case`</caption>\nrequest(\"GET\", \"/a/asri/api/v0.5/case\");",
      "<caption>Get a resource using query parameters. Equivalent to `<baseUrl>/case?offset=0&limit=20`</caption>\nrequest(\"GET\", \"/case\", {}, { offset:0, limit: 20 })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 333,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "submit",
    "longname": "submit",
    "name": "submit",
    "kind": "function",
    "scope": "global",
    "description": "Submit forms to CommCare. Use this to send forms directly to Commcare REST API. Accepts an array of JSON\nobjects, converts them into XML, and submits to CommCare as an x-form.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The form as a JSON object",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Submit a form resource.</caption>\nsubmit(\n fields(\n   field('@', state => ({\n     xmlns: `http://openrosa.org/formdesigner/${state.formId}`,\n   })),\n   field('question1', state => state.data.answer1),\n   field('question2', state => state.data.answer2)\n )\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 254,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "submitXls",
    "longname": "submitXls",
    "name": "submitXls",
    "kind": "function",
    "scope": "global",
    "description": "Bulk upload data to CommCare. Use this to send multiple items for a single resource at once to Commcare. It accepts an array of objects, converts them into\nan XLS representation, and uploads.",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Array of objects to upload",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Input parameters, see {@link https://dimagi.atlassian.net/wiki/spaces/commcarepublic/pages/2143946459/Bulk+Upload+Case+Data CommCare docs}.",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Upload a single row of data for a resource.</caption>\nsubmitXls([{ name: 'Mamadou', phone: '000000' }], {\n  case_type: 'student',\n  search_field: 'external_id',\n  create_new_cases: 'on',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 196,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/commcare/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommcareHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"common","adaptor":"@openfn/language-common","version":"2.4.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#arraytostring\\\">arrayToString(arr, separator)</a></dt>\\n<dt>\\n    <a href=\\\"#asdata\\\">asData(data, state)</a></dt>\\n<dt>\\n    <a href=\\\"#assert\\\">assert(expression, errorMessage)</a></dt>\\n<dt>\\n    <a href=\\\"#chunk\\\">chunk(array, chunkSize)</a></dt>\\n<dt>\\n    <a href=\\\"#combine\\\">combine(operations)</a></dt>\\n<dt>\\n    <a href=\\\"#composenextstate\\\">composeNextState(state, response)</a></dt>\\n<dt>\\n    <a href=\\\"#cursor\\\">cursor(value, options)</a></dt>\\n<dt>\\n    <a href=\\\"#datapath\\\">dataPath(path)</a></dt>\\n<dt>\\n    <a href=\\\"#datavalue\\\">dataValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#debug\\\">debug(args)</a></dt>\\n<dt>\\n    <a href=\\\"#each\\\">each(dataSource, operation)</a></dt>\\n<dt>\\n    <a href=\\\"#expandreferences\\\">expandReferences(value, [skipFilter])</a></dt>\\n<dt>\\n    <a href=\\\"#field\\\">field(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#fields\\\">fields(fields)</a></dt>\\n<dt>\\n    <a href=\\\"#fn\\\">fn(func)</a></dt>\\n<dt>\\n    <a href=\\\"#fnif\\\">fnIf(condition, operation)</a></dt>\\n<dt>\\n    <a href=\\\"#group\\\">group(arrayOfObjects, keyPath, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#humanproper\\\">humanProper(str)</a></dt>\\n<dt>\\n    <a href=\\\"#index\\\">index()</a></dt>\\n<dt>\\n    <a href=\\\"#join\\\">join(targetPath, sourcePath, targetKey)</a></dt>\\n<dt>\\n    <a href=\\\"#jsonvalue\\\">jsonValue(obj, path)</a></dt>\\n<dt>\\n    <a href=\\\"#lastreferencevalue\\\">lastReferenceValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#log\\\">log(args)</a></dt>\\n<dt>\\n    <a href=\\\"#map\\\">map(path, operation, state)</a></dt>\\n<dt>\\n    <a href=\\\"#merge\\\">merge(dataSource, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#parsecsv\\\">parseCsv(csvData, [parsingOptions], [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#referencepath\\\">referencePath(path)</a></dt>\\n<dt>\\n    <a href=\\\"#scrubemojis\\\">scrubEmojis(text, replacementChars)</a></dt>\\n<dt>\\n    <a href=\\\"#source\\\">source(path)</a></dt>\\n<dt>\\n    <a href=\\\"#sourcevalue\\\">sourceValue(path)</a></dt>\\n<dt>\\n    <a href=\\\"#splitkeys\\\">splitKeys(obj, keys)</a></dt>\\n<dt>\\n    <a href=\\\"#toarray\\\">toArray(arg)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#util_decode\\\">util.decode(base64Data, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_encode\\\">util.encode(data, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_uuid\\\">util.uuid()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#beta_each\\\">beta.each(dataSource, operation)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#dateFns_format\\\">dateFns.format()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#dateFns_parse\\\">dateFns.parse()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(url, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_options\\\">http.options(opts)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(url, data, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, url, options)</a>\\n</dt>\\n</dl>\\n\\n\\n## Functions\\n### arrayToString\\n\\n<p><code>arrayToString(arr, separator) ⇒ string</code></p>\\n\\nTurns an array into a string, separated by X.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arr | <code>array</code> | Array of toString'able primatives. |\\n| separator | <code>string</code> | Separator string. |\\n\\n**Example**\\n```js\\nfield(\\\"destination_string__c\\\", function(state) {\\n  return arrayToString(dataValue(\\\"path_of_array\\\")(state), ', ')\\n})\\n```\\n\\n* * *\\n\\n### asData\\n\\n<p><code>asData(data, state) ⇒ array</code></p>\\n\\nSimple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.\\n- JSONPath referencing a point in `state`\\n- Object Literal of the data itself.\\n- Function to be called with state.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> \\\\| <code>object</code> \\\\| <code>function</code> |  |\\n| state | <code>object</code> | The current state. |\\n\\n**Example**\\n```js\\nasData('$.key'| key | callback)\\n```\\n\\n* * *\\n\\n### assert\\n\\n<p><code>assert(expression, errorMessage) ⇒ operation</code></p>\\n\\nAsserts the given expression or function resolves to `true`, or else throws an exception. Optionally accepts and error message.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| expression | <code>any</code> | The expression or function to be evaluated. |\\n| errorMessage | <code>string</code> | The error message thrown in case of a failed state. |\\n\\n**Example**\\n```js\\nassert('a' === 'b', '\\\"a\\\" is not equal to \\\"b\\\"')\\n```\\n\\n* * *\\n\\n### chunk\\n\\n<p><code>chunk(array, chunkSize) ⇒ Object</code></p>\\n\\nChunks an array into an array of arrays, each with no more than a certain size.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| array | <code>Object</code> | Array to be chunked |\\n| chunkSize | <code>Integer</code> | The maxiumum size of each chunks |\\n\\n**Example**\\n```js\\nchunk([1,2,3,4,5], 2)\\n```\\n\\n* * *\\n\\n### combine\\n\\n<p><code>combine(operations) ⇒ Operation</code></p>\\n\\nCombines two operations into one\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**\\n```js\\ncombine(\\n  create('foo'),\\n  delete('bar')\\n)\\n```\\n\\n* * *\\n\\n### composeNextState\\n\\n<p><code>composeNextState(state, response) ⇒ State</code></p>\\n\\nPrepares next state\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | state |\\n| response | <code>Object</code> | Response to be added |\\n\\n**Example**\\n```js\\ncomposeNextState(state, response)\\n```\\n\\n* * *\\n\\n### cursor\\n\\n<p><code>cursor(value, options) ⇒ Operation</code></p>\\n\\nSets a cursor property on state.\\nSupports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\\nwhich will be converted relative to the environment (ie, the Lightning or CLI locale). Custom timezones\\nare not yet supported.\\nYou can provide a formatter to customise the final cursor value, which is useful for normalising\\ndifferent inputs. The custom formatter runs after natural language date conversion.\\nSee the usage guide at [https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors](https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>any</code> | the cursor value. Usually an ISO date, natural language date, or page number |\\n| options | <code>object</code> | options to control the cursor. |\\n| options.key | <code>string</code> | set the cursor key. Will persist through the whole run. |\\n| options.defaultValue | <code>any</code> | the value to use if value is falsy |\\n| options.format | <code>function</code> | custom formatter for the final cursor value |\\n\\n**Example:** Use a cursor from state if present, or else use the default value\\n```js\\ncursor($.cursor, { defaultValue: 'today' })\\n```\\n**Example:** Use a pagination cursor\\n```js\\ncursor(22)\\n```\\n\\n* * *\\n\\n### dataPath\\n\\n<p><code>dataPath(path) ⇒ string</code></p>\\n\\nEnsures a path points at the data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**\\n```js\\ndataPath('key')\\n```\\n\\n* * *\\n\\n### dataValue\\n\\n<p><code>dataValue(path) ⇒ Operation</code></p>\\n\\nPicks out a single value from the source data object—usually `state.data`.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**\\n```js\\ndataValue('key')\\n```\\n\\n* * *\\n\\n### debug\\n\\n<p><code>debug(args) ⇒ Operation</code></p>\\n\\nOutputs a message to the console with the debug log level. This is usually filtered out by default. Use this at the top level of your job code, but not inside callbacks.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| args | <code>any</code> | A value or message to display in the logs |\\n\\n**Example:** Log values from state\\n```js\\ndebug('Patient List::', $.patients);\\n```\\n**Example:** Use console.debug inside a callback or fn block\\n```js\\nfn((state) => {\\n  console.debug(state.data);\\n  return state;\\n})\\n```\\n\\n* * *\\n\\n### each\\n\\n<p><code>each(dataSource, operation) ⇒ Operation</code></p>\\n\\nIterates over an array of items and invokes an operation upon each one, where the state\\nobject is _scoped_ so that state.data is the item under iteration.\\nThe rest of the state object is untouched and can be referenced as usual.\\nYou can pass an array directly, or use lazy state or a JSONPath string to\\nreference a slice of state.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example:** Using lazy state ($) to iterate over items in state.data and pass each into an \\\"insert\\\" operation\\n```js\\neach(\\n  $.data,\\n  // Inside the callback operation, `$.data` is scoped to the item under iteration\\n  insert(\\\"patient\\\", {\\n    patient_name: $.data.properties.case_name,\\n    patient_id: $.data.case_id,\\n  })\\n);\\n```\\n**Example:** Iterate over items in state.data and pass each one into an \\\"insert\\\" operation\\n```js\\neach(\\n  $.data,\\n  insert(\\\"patient\\\", (state) => ({\\n    patient_id: state.data.case_id,\\n    ...state.data\\n  }))\\n);\\n```\\n**Example:** Using JSON path to iterate over items in state.data and pass each one into an \\\"insert\\\" operation\\n```js\\neach(\\n  \\\"$.data[*]\\\",\\n  insert(\\\"patient\\\", (state) => ({\\n    patient_name: state.data.properties.case_name,\\n    patient_id: state.data.case_id,\\n  }))\\n);\\n```\\n\\n* * *\\n\\n### expandReferences\\n\\n<p><code>expandReferences(value, [skipFilter]) ⇒ Operation</code></p>\\n\\nRecursively resolves objects that have resolvable values (functions).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n| [skipFilter] | <code>function</code> | a function which returns true if a value should be skipped |\\n\\n\\n* * *\\n\\n### field\\n\\n<p><code>field(key, value) ⇒ Field</code></p>\\n\\nReturns a key, value pair in an array.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | Name of the field |\\n| value | <code>Value</code> | The value itself or a sourceable operation. |\\n\\n**Example**\\n```js\\nfield('destination_field_name__c', 'value')\\n```\\n\\n* * *\\n\\n### fields\\n\\n<p><code>fields(fields) ⇒ Object</code></p>\\n\\nZips key value pairs into an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fields | <code>Fields</code> | a list of fields |\\n\\n**Example**\\n```js\\nfields(list_of_fields)\\n```\\n\\n* * *\\n\\n### fn\\n\\n<p><code>fn(func) ⇒ Operation</code></p>\\n\\nCreates a custom step (or operation) for more flexible job writing.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n**Example**\\n```js\\nfn(state => {\\n  // do some things to state\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n### fnIf\\n\\n<p><code>fnIf(condition, operation) ⇒ Operation</code></p>\\n\\nA custom operation that will only execute the function if the condition returns true\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| condition | <code>Boolean</code> | The condition that returns true |\\n| operation | <code>Operation</code> | The operation needed to be executed. |\\n\\n**Example**\\n```js\\nfnIf((state) => state?.data?.name, get(\\\"https://example.com\\\"));\\n```\\n\\n* * *\\n\\n### group\\n\\n<p><code>group(arrayOfObjects, keyPath, callback) ⇒ Operation</code></p>\\n\\nGroups an array of objects by a specified key path.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arrayOfObjects | <code>Array.&lt;Object&gt;</code> | The array of objects to be grouped. |\\n| keyPath | <code>string</code> | The key path to group by. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nconst users = [\\n  { name: 'Alice', age: 25, city: 'New York' },\\n  { name: 'Bob', age: 30, city: 'San Francisco' },\\n  { name: 'Charlie', age: 25, city: 'New York' },\\n  { name: 'David', age: 30, city: 'San Francisco' }\\n];\\ngroup(users, 'city');\\n// state is { data: { 'New York': [/Alice, Charlie/], 'San Francisco': [ /Bob, David / ] }\\n```\\n\\n* * *\\n\\n### humanProper\\n\\n<p><code>humanProper(str) ⇒ string</code></p>\\n\\nSubstitutes underscores for spaces and proper-cases a string\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| str | <code>string</code> | String that needs converting |\\n\\n**Example**\\n```js\\nfield(\\\"destination_string__c\\\", humanProper(state.data.path_to_string))\\n```\\n\\n* * *\\n\\n### index\\n\\n<p><code>index() ⇒ DataSource</code></p>\\n\\nReturns the index of the current array being iterated.\\nTo be used with `each` as a data source.\\n\\n**Example**\\n```js\\nindex()\\n```\\n\\n* * *\\n\\n### join\\n\\n<p><code>join(targetPath, sourcePath, targetKey) ⇒ Operation</code></p>\\n\\nAdds data from a target object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| targetPath | <code>String</code> | Target path |\\n| sourcePath | <code>String</code> | Source path |\\n| targetKey | <code>String</code> | Target Key |\\n\\n**Example**\\n```js\\njoin('$.key','$.data','newKey')\\n```\\n\\n* * *\\n\\n### jsonValue\\n\\n<p><code>jsonValue(obj, path) ⇒ Operation</code></p>\\n\\nPicks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>object</code> | A valid JSON object. |\\n| path | <code>String</code> | JSONPath referencing a point in given JSON object. |\\n\\n**Example**\\n```js\\njsonValue({ a:1 }, 'a')\\n```\\n\\n* * *\\n\\n### lastReferenceValue\\n\\n<p><code>lastReferenceValue(path) ⇒ Operation</code></p>\\n\\nPicks out the last reference value from source data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**\\n```js\\nlastReferenceValue('key')\\n```\\n\\n* * *\\n\\n### log\\n\\n<p><code>log(args) ⇒ Operation</code></p>\\n\\nOutputs a message, like calling `console.log`. Use this at the top level of your job code, but not inside callbacks.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| args | <code>any</code> | A value or message to display in the logs |\\n\\n**Example:** Log values from state\\n```js\\nlog('Patient List::', $.patients);\\n```\\n**Example:** Use console.log inside a callback or fn block\\n```js\\nfn((state) => {\\n  console.log(state.data);\\n  return state;\\n})\\n```\\n\\n* * *\\n\\n### map\\n\\n<p><code>map(path, operation, state) ⇒ State</code></p>\\n\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `state.data`. |\\n| operation | <code>function</code> | The operation needed to be repeated. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**\\n```js\\nmap(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n\\n* * *\\n\\n### merge\\n\\n<p><code>merge(dataSource, fields) ⇒ DataSource</code></p>\\n\\nMerges fields into each item in an array.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> |  |\\n| fields | <code>Object</code> | Group of fields to merge in. |\\n\\n**Example**\\n```js\\nmerge(\\n  \\\"$.books[*]\\\",\\n  fields(\\n    field( \\\"publisher\\\", sourceValue(\\\"$.publisher\\\") )\\n  )\\n)\\n```\\n\\n* * *\\n\\n### parseCsv\\n\\n<p><code>parseCsv(csvData, [parsingOptions], [callback]) ⇒ Operation</code></p>\\n\\nTakes a CSV file string or stream and parsing options as input, and returns a promise that\\nresolves to the parsed CSV data as an array of objects.\\nOptions for `parsingOptions` include:\\n- `delimiter` {string/Buffer/[string/Buffer]} - Defines the character(s) used to delineate the fields inside a record. Default: `','`\\n- `quote` {string/Buffer/[string/Buffer]} - Defines the characters used to surround a field. Default: `'\\\"'`\\n- `escape` {Buffer/string/null/boolean} - Set the escape character as one character/byte only. Default: `\\\"`\\n- `columns` {boolean / array / function} - Generates record in the form of object literals. Default: `true`\\n- `bom` {boolean} - Strips the [byte order mark (BOM)](https://en.wikipedia.org/wiki/Byte_order_mark) from the input string or buffer. Default: `true`\\n- `trim` {boolean} - Ignore whitespace characters immediately around the `delimiter`. Default: `true`\\n- `ltrim` {boolean} - Ignore whitespace characters from the left side of a CSV field. Default: `true`\\n- `rtrim` {boolean} - Ignore whitespace characters from the right side of a CSV field. Default: `true`\\n- `chunkSize` {number} - The size of each chunk of CSV data. Default: `Infinity`\\n- `skip_empty_lines` {boolean} - Ignore empty lines in the CSV file. Default: `true`\\n\\n**Returns**: <code>Operation</code> - The function returns a Promise that resolves to the result of parsing a CSV `stringOrStream`.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| csvData | <code>String</code> \\\\| <code>Stream</code> | A CSV string or a readable stream |\\n| [parsingOptions] | <code>Object</code> | Optional. Parsing options for converting CSV to JSON. |\\n| [callback] | <code>function</code> | (Optional) callback function. If used it will be called state and an array of rows. |\\n\\n\\n* * *\\n\\n### referencePath\\n\\n<p><code>referencePath(path) ⇒ string</code></p>\\n\\nEnsures a path points at references.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**\\n```js\\nreferencePath('key')\\n```\\n\\n* * *\\n\\n### scrubEmojis\\n\\n<p><code>scrubEmojis(text, replacementChars) ⇒ string</code></p>\\n\\nReplaces emojis in a string.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | String that needs to be cleaned |\\n| replacementChars | <code>string</code> | Characters that replace the emojis |\\n\\n**Example**\\n```js\\nscrubEmojis('Dove🕊️⭐ 29')\\n```\\n\\n* * *\\n\\n### source\\n\\n<p><code>source(path) ⇒ Array.&lt;(String|Object)&gt;</code></p>\\n\\nPicks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use `sourceValue` instead.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**\\n```js\\nsource('$.key')\\n```\\n\\n* * *\\n\\n### sourceValue\\n\\n<p><code>sourceValue(path) ⇒ Operation</code></p>\\n\\nPicks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**\\n```js\\nsourceValue('$.key')\\n```\\n\\n* * *\\n\\n### splitKeys\\n\\n<p><code>splitKeys(obj, keys) ⇒ Array.&lt;Object&gt;</code></p>\\n\\nSplits an object into two objects based on a list of keys.\\nThe first object contains the keys that are not in the list,\\nand the second contains the keys that are.\\n\\n**Returns**: <code>Array.&lt;Object&gt;</code> - - Tuple of objects, first object contains keys not in list, second contains keys that are.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>Object</code> | The object to split. |\\n| keys | <code>Array.&lt;string&gt;</code> | List of keys to split on. |\\n\\n\\n* * *\\n\\n### toArray\\n\\n<p><code>toArray(arg) ⇒ array</code></p>\\n\\nEnsures primitive data types are wrapped in an array.\\nDoes not affect array objects.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arg | <code>any</code> | Data required to be in an array |\\n\\n**Example**\\n```js\\neach(function(state) {\\n  return toArray( dataValue(\\\"path_of_array\\\")(state) )\\n}, ...)\\n```\\n\\n* * *\\n\\n\\n## util\\n\\nThese functions belong to the util namespace.\\n### util.decode {#util_decode}\\n\\n<p><code>decode(base64Data, options) ⇒ string | object</code></p>\\n\\nDecodes a Base64 encoded string back to its original format.\\n\\n**Returns**: <code>string</code> \\\\| <code>object</code> - - The decoded string or JavaScript Object.  \\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| base64Data | <code>string</code> |  | The Base64 encoded string. |\\n| options | <code>object</code> |  | Options. |\\n| [options.parseJson] | <code>boolean</code> | <code>true</code> | If false, no attempt will be made to parse the decoded data into a JSON object. |\\n\\n**Example:** Decode a Base64 string\\n```js\\nconst decoded = util.decode('SGVsbG8gV29ybGQ=');\\n```\\n**Example:** Decode a Base64 JSON object to a standard JavaScript object\\n```js\\nconst decoded = util.decode('eyJuYW1lIjoiSmFuZSBEb2UifQ==');\\nconsole.log(decoded); // Output: {name: 'Jane Doe' }\\n```\\n**Example:** To skip the JSON stringification step\\n```js\\nconst decodedString = util.decode('Hello World', { parseJson: false })\\n```\\n\\n* * *\\n\\n\\n### util.encode {#util_encode}\\n\\n<p><code>encode(data, options) ⇒ string</code></p>\\n\\nEncodes a given string or Javascript object into Base64 format.\\n\\n**Returns**: <code>string</code> - - The Base64 encoded string.  \\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| data | <code>string</code> \\\\| <code>object</code> |  | The string or object to be encoded. |\\n| options | <code>object</code> |  | Options |\\n| [options.parseJson] | <code>boolean</code> | <code>true</code> | If false, no attempt will be made to stringiy the data before encoding it. |\\n\\n**Example:** Encode a string\\n```js\\nconst encodedString = util.encode('Hello World');\\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=\\n```\\n**Example:** Encode an object\\n```js\\nconst encodedObject = util.encode({name: 'Jane Doe' })\\nconsole.log(encodedObject); //output eyJuYW1lIjoiSmFuZSBEb2UifQ==\\n```\\n**Example:** To skip the JSON stringification step\\n```js\\nconst encodedObject = util.encode('Hello World', { parseJson: false })\\n```\\n\\n* * *\\n\\n\\n### util.uuid {#util_uuid}\\n\\n<p><code>uuid() ⇒ string</code></p>\\n\\nGenerates a UUID (Universally Unique Identifier)\\n\\n**Returns**: <code>string</code> - - A newly generated UUID  \\n**Example:** Generate a UUID\\n```js\\nconst id = util.uuid();\\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\\n```\\n\\n* * *\\n\\n\\n## beta\\n\\nThese functions belong to the beta namespace.\\n### beta.each {#beta_each}\\n\\n<p><code>each(dataSource, operation) ⇒ Operation</code></p>\\n\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**\\n```js\\neach(\\\"$.[*]\\\",\\n   create(\\\"SObject\\\",\\n   field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\")))\\n )\\n```\\n\\n* * *\\n\\n\\n## dateFns\\n\\nThese functions belong to the dateFns namespace.\\n### dateFns.format {#dateFns_format}\\n\\n<p><code>format()</code></p>\\n\\nThe format function from the date-fns library. See [https://date-fns.org/v3.6.0/docs/parse](https://date-fns.org/v3.6.0/docs/parse)\\n\\n\\n* * *\\n\\n\\n### dateFns.parse {#dateFns_parse}\\n\\n<p><code>parse()</code></p>\\n\\nThe parse function from the date-fns library. See [https://date-fns.org/v3.6.0/docs/parse](https://date-fns.org/v3.6.0/docs/parse)\\n\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(url, options) ⇒ Operation</code></p>\\n\\nMake a GET request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| url | <code>string</code> | URL to access |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Request a resource\\n```js\\nhttp.get('https://jsonplaceholder.typicode.com/todos')\\n```\\n**Example:** Request a resource with basic auth\\n```js\\nhttp.get(\\n 'https://jsonplaceholder.typicode.com/todos',\\n http.options().basic('user', 'pass')\\n)\\n```\\n**Example:** Request a resource with oauth\\n```js\\nhttp.get(\\n 'https://jsonplaceholder.typicode.com/todos',\\n http.options().oauth($.configuration.access_token)\\n)\\n```\\n\\n* * *\\n\\n\\n### http.options {#http_options}\\n\\n<p><code>options(opts) ⇒ OptionsHelpers</code></p>\\n\\nBuilder function to create request options. Returns an object with helpers to\\neasily add commonly used options. The return object is chainable so you can set\\nas many options as you want.\\nPass an object to set your own options.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| opts | [<code>OptionsHelpers</code>](#optionshelpers) | options to pass to the request |\\n\\n**Example:** Get with a query an oauth token\\n```js\\nhttp.get($.data.url, http.options({ query: $.query }).oauth($.configuration.access_token))\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(url, data, options) ⇒ Operation</code></p>\\n\\nMake a POST request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| url | <code>string</code> | URL to access |\\n| data | <code>object</code> | Body data to append to the request. |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Post a JSON object (setting the content-type header)\\n```js\\nhttp.post(\\n  \\\"https://jsonplaceholder.typicode.com/todos\\\",\\n  $.data,\\n  http.options().json()\\n);\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, url, options) ⇒ Operation</code></p>\\n\\nMake a HTTP request.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method to use. |\\n| url | <code>string</code> | URL to resource. |\\n| options | [<code>CommonRequestOptions</code>](#commonrequestoptions) | Request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nhttp.request(\\n  'GET',\\n  'https://jsonplaceholder.typicode.com/todos'\\n)\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### CommonRequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> \\\\| <code>boolean</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n### OptionsHelpers\\n\\nHelper functions provided by `http.options`.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| json | <code>function</code> | Sets the `content-type' header to 'application/json' |\\n| basic | <code>function</code> | Sets basic auth on the Authorization header. Pass username and password |\\n| bearer | <code>function</code> | Sets a Bearer token on the Authorization header. Pass the token. |\\n| oauth | <code>function</code> | Sets a Bearer token on the Authorization header. Pass the oauth token. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language Common [![CircleCI](https://circleci.com/gh/OpenFn/language-common.svg?style=svg)](https://circleci.com/gh/OpenFn/language-common)\\n\\nCommon and generic expressions and operations for [OpenFn](http://openfn.org).\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"## 2.4.0 - 22 April 2025\\n\\n### Minor Changes\\n\\n- 13bf08f: Add `log()` and `debug()` functions\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n\\n## 2.3.3 - 16 April 2025\\n\\n### Patch Changes\\n\\n- b089c56: Implement support for `parseAs:'base64'` for binary data.\\n\\n## 2.3.2 - 11 April 2025\\n\\n### Patch Changes\\n\\n- d7105c0: Improved handling of response bodies with no content\\n\\n## 2.3.1 - 14 March 2025\\n\\n### Patch Changes\\n\\n- 23ccb01: Allow the errorMap passed into the request helper to be false, which\\n  suppresses all errors\\n\\n## 2.3.0 - 16 January 2025\\n\\n### Minor Changes\\n\\n- b3d7f59: Common util functions `encode` and `decode` can now take a JavaScript\\n  object and stringify\\n- 41e8cc3: Added an 'assert' function that throws an error when an expression or\\n  function resolves to false\\n\\n### Patch Changes\\n\\n- 2d709ff: Ensure that RegExp objects can be safely passed as references\\n\\n## 2.2.1 - 16 January 2025\\n\\n### Patch Changes\\n\\n- 6dffdbd: Fixed an issue in the HTTP helpers where responses without a body can\\n  cause an error to be thrown.\\n\\n## 2.2.0 - 09 January 2025\\n\\n### Minor Changes\\n\\n- a47d8d5: `decode`, `encode` and `uuid` are now correctly documented as being\\n  in the `util` namespace\\n\\n### Patch Changes\\n\\n- 9240428: security: Update dependencies\\n\\n## 2.1.1 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n\\n## 2.1.0 - 18 October 2024\\n\\n### Minor Changes\\n\\n- 03a1a74: Add `encode`, `decode` and `uuid` helpers\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- 33973a2: Fix a critical security issue in jsonpath-plus\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- 77a690f: improve cursor setup message\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n\\n## 2.0.0 - 01 August 2024\\n\\nThe 2.0 version of common removes axios and re-writes the `http` namespace.\\n\\nYou can now use `http.request()` from any adaptor that exports it:\\n\\n```\\nhttp.request(\\n  'GET',\\n  'https://jsonplaceholder.typicode.com/todos',\\n  http.options().basic('user', 'pass')\\n)\\n```\\n\\n`http.get()` and `http.post()` are also available.\\n\\nThese functions behave just like the HTTP adaptor's operations (except that they\\ndon't handle auth for you).\\n\\nUse the `http.options()` helper functiosn to set basic auth headers and set the\\ncontent type to JSON.\\n\\n### Major Changes\\n\\n- Replace axios-based http operations with cleaner, undici-based ones\\n- Removed axios export\\n\\n### Minor Changes\\n\\n- Add options helpers to http namespace\\n\\n### Patch Changes\\n\\n- 4c08444: document `date-fns` functions\\n\\n## 1.15.0 - 19 June 2024\\n\\n### Minor Changes\\n\\n- 5fb82f07: - Add `group()` operation\\n  - Initialize `state.references` in `composeNextState()`\\n\\n## 1.14.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 106ecf6d: Add `fnIf` operation\\n\\n## 1.13.5 - 11 June 2024\\n\\n### Patch Changes\\n\\n- http helpers: Fix an issue where query parameters in the URL did not get sent\\n  to the server\\n\\n## 1.13.4 - 21 May 2024\\n\\n### Patch Changes\\n\\n- 12f02ed5: http helpers: Ensure redirects append base url\\n\\n## 1.13.3 - 08 May 2024\\n\\n### Patch Changes\\n\\n- 88f99a8f: cursor: support format option\\n\\n## 1.13.2 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n\\n## 1.13.1 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Fix jsdoc link\\n\\n## 1.13.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- 1ad86651: Added cursor() helper\\n\\n## 1.12.0 - 24 January 2024\\n\\n### Minor Changes\\n\\n- 7f52699: New HTTP helper functions have been added to common in\\n  `src/util/http.js`\\n\\n  These are based on the `undici` library. They are functions, not operations,\\n  so they do not get and return state, and do not expand references.\\n\\n  They are designed to be used by other adaptors to make HTTP requests easier.\\n\\n  ## Usage\\n\\n  ```\\n  // Import the helper function\\n  import { get } from '@openfn/language-common/util'\\n\\n  // This is an example operation\\n  export function get(id, callback) {\\n    return async (state) => {\\n      const [resolvedId] = expandReferences(\\n        state,\\n        id,\\n      );\\n\\n      // Call the new common helper to fetch some json\\n      const response = await get(`www.example.com/resource/{$resolvedId}`, { parseAs: 'json' });\\n\\n      // Return the response body as data, and also include the response object as a convenience\\n      return {\\n        ...state,\\n        response,\\n        data: response.body\\n      }\\n    }\\n  }\\n  ```\\n\\n  See the http adaptor for a reference implementation.\\n\\n  ## Deprecation notice\\n\\n  The existing http operations in `src/http.js` have been deprecated, and\\n  adaptors should migrate to the new helpers.\\n\\n## 1.11.1 - 20 September 2023\\n\\n### Patch Changes\\n\\n- c19efbe: don't attempt to expand references for a buffer\\n\\n## 1.11.0 - 08 September 2023\\n\\n### Minor Changes\\n\\n- 85c35b8: Add validate function to validate data against a JSON schema\\n\\n## 1.10.3 - 14 August 2023\\n\\n### Patch Changes\\n\\n- df09270: Fix streaming interface to parseCSV\\n\\n## 1.10.2 - 14 July 2023\\n\\n### Patch Changes\\n\\n- 26a303e: add expandReferences for csvData and parsingOptions\\n\\n## 1.10.1 - 14 July 2023\\n\\n### Patch Changes\\n\\n- 8c32eb3: - update parseCsv to await callback\\n  - Added documentation for splitKeys\\n\\n## 1.10.0 - 30 June 2023\\n\\n### Minor Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n\\n## 1.9.0 - 23 June 2023\\n\\n### Minor Changes\\n\\n- 111807f: Add support for `parseCsv` in common\\n\\n## 1.8.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n\\n## 1.8.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n## 1.7.7 - 31 March 2023\\n\\n### Patch Changes\\n\\n- 929bca6: Export metadata helper function\\n\\n## 1.7.6 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 2b4c61a: mark execute private and ast build\\n\\n## 1.7.5 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n\\n## 1.7.4 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- b5eb665: Adjusted docs for common and built to markdown\\n- # ecf5d30: remove sinon since it was not being used\\n\\nBumped all package versions to their latest.\\n\\n# v0.0.4\\n\\n- Added `arrayToString` helper.\\\\\\n  Allowing you to join an array of string'able primitives (strings and integers)\\n  into a string.\\n- Added `toArray` helper.\\\\\\n  This can be used to coerce certain types of data into an array, this can be useful\\n  when the source data has an ambiguous format. For example a given key in the data\\n  may have an object as it's value (when there is only one item), and an array of\\n  objects when there is more than one. `toArray` can be used to reconcile this inconsistency.\\n\"","functions":["arrayToString","asData","assert","chunk","combine","composeNextState","cursor","dataPath","dataValue","debug","each","execute","expandReferences","field","fields","fn","fnIf","group","humanProper","index","join","jsonValue","lastReferenceValue","log","map","merge","parseCsv","referencePath","scrubEmojis","source","sourceValue","splitKeys","toArray"],"configuration-schema":"No Configuration Schema"},
[
  {
    "id": "arrayToString",
    "longname": "arrayToString",
    "name": "arrayToString",
    "kind": "function",
    "scope": "global",
    "description": "Turns an array into a string, separated by X.",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "Array of toString'able primatives.",
        "name": "arr"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Separator string.",
        "name": "separator"
      }
    ],
    "examples": [
      "field(\"destination_string__c\", function(state) {\n  return arrayToString(dataValue(\"path_of_array\")(state), ', ')\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 500,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 22,
    "newscope": true,
    "level": 0
  },
  {
    "id": "asData",
    "longname": "asData",
    "name": "asData",
    "kind": "function",
    "scope": "global",
    "description": "Simple switcher allowing other expressions to use either a JSONPath or\nobject literals as a data source.\n- JSONPath referencing a point in `state`\n- Object Literal of the data itself.\n- Function to be called with state.",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "object",
            "function"
          ]
        },
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The current state.",
        "name": "state"
      }
    ],
    "examples": [
      "asData('$.key'| key | callback)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "array"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 248,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "assert",
    "longname": "assert",
    "name": "assert",
    "kind": "function",
    "scope": "global",
    "description": "Asserts the given expression or function resolves to `true`, or else throws an exception. Optionally accepts and error message.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "The expression or function to be evaluated.",
        "name": "expression"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The error message thrown in case of a failed state.",
        "name": "errorMessage"
      }
    ],
    "examples": [
      "assert('a' === 'b', '\"a\" is not equal to \"b\"')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 917,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 32,
    "level": 0
  },
  {
    "id": "chunk",
    "longname": "chunk",
    "name": "chunk",
    "kind": "function",
    "scope": "global",
    "description": "Chunks an array into an array of arrays, each with no more than a certain size.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Array to be chunked",
        "name": "array"
      },
      {
        "type": {
          "names": [
            "Integer"
          ]
        },
        "description": "The maxiumum size of each chunks",
        "name": "chunkSize"
      }
    ],
    "examples": [
      "chunk([1,2,3,4,5], 2)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 625,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 28,
    "level": 0
  },
  {
    "id": "combine",
    "longname": "combine",
    "name": "combine",
    "kind": "function",
    "scope": "global",
    "description": "Combines two operations into one",
    "params": [
      {
        "type": {
          "names": [
            "Operations"
          ]
        },
        "description": "Operations to be performed.",
        "name": "operations"
      }
    ],
    "examples": [
      "combine(\n  create('foo'),\n  delete('bar')\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 326,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "CommonHttpState",
    "longname": "CommonHttpState",
    "name": "CommonHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 71,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 41
  },
  {
    "id": "CommonRequestOptions",
    "longname": "CommonRequestOptions",
    "name": "CommonRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "boolean"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "meta": {
      "lineno": 59,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 40,
    "level": 0
  },
  {
    "id": "composeNextState",
    "longname": "composeNextState",
    "name": "composeNextState",
    "kind": "function",
    "scope": "global",
    "description": "Prepares next state",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "description": "state",
        "name": "state"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Response to be added",
        "name": "response"
      }
    ],
    "examples": [
      "composeNextState(state, response)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 530,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 24,
    "level": 0
  },
  {
    "id": "cursor",
    "longname": "cursor",
    "name": "cursor",
    "kind": "function",
    "scope": "global",
    "description": "Sets a cursor property on state.\nSupports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\nwhich will be converted relative to the environment (ie, the Lightning or CLI locale). Custom timezones\nare not yet supported.\nYou can provide a formatter to customise the final cursor value, which is useful for normalising\ndifferent inputs. The custom formatter runs after natural language date conversion.\nSee the usage guide at {@link https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors}",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the cursor value. Usually an ISO date, natural language date, or page number",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to control the cursor.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor key. Will persist through the whole run.",
        "name": "options.key"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to use if value is falsy",
        "name": "options.defaultValue"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "custom formatter for the final cursor value",
        "name": "options.format"
      }
    ],
    "examples": [
      "<caption>Use a cursor from state if present, or else use the default value</caption>\ncursor($.cursor, { defaultValue: 'today' })",
      "<caption>Use a pagination cursor</caption>\ncursor(22)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 860,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 31,
    "level": 0
  },
  {
    "id": "dataPath",
    "longname": "dataPath",
    "name": "dataPath",
    "kind": "function",
    "scope": "global",
    "description": "Ensures a path points at the data.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `data`.",
        "name": "path"
      }
    ],
    "examples": [
      "dataPath('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 146,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "dataValue",
    "longname": "dataValue",
    "name": "dataValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from the source data object—usually `state.data`.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `data`.",
        "name": "path"
      }
    ],
    "examples": [
      "dataValue('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "debug",
    "longname": "debug",
    "name": "debug",
    "kind": "function",
    "scope": "global",
    "description": "Outputs a message to the console with the debug log level. This is usually filtered out by default. Use this at the top level of your job code, but not inside callbacks.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "A value or message to display in the logs",
        "name": "args"
      }
    ],
    "examples": [
      "<caption>Log values from state</caption>\ndebug('Patient List::', $.patients);",
      "<caption>Use console.debug inside a callback or fn block</caption>\nfn((state) => {\n  console.debug(state.data);\n  return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 973,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 34,
    "level": 0
  },
  {
    "id": "decode",
    "longname": "decode",
    "name": "decode",
    "kind": "function",
    "scope": "util",
    "description": "Decodes a Base64 encoded string back to its original format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Base64 encoded string.",
        "name": "base64Data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "If false, no attempt will be made to parse the decoded data into a JSON object.",
        "name": "options.parseJson"
      }
    ],
    "examples": [
      "<caption>Decode a Base64 string</caption>\nconst decoded = util.decode('SGVsbG8gV29ybGQ=');",
      "<caption>Decode a Base64 JSON object to a standard JavaScript object</caption>\nconst decoded = util.decode('eyJuYW1lIjoiSmFuZSBEb2UifQ==');\nconsole.log(decoded); // Output: {name: 'Jane Doe' }",
      "<caption>To skip the JSON stringification step</caption>\nconst decodedString = util.decode('Hello World', { parseJson: false })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string",
            "object"
          ]
        },
        "description": "- The decoded string or JavaScript Object."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 52,
      "filename": "base64.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "namespace": "util",
    "order": 47,
    "newscope": true,
    "level": 0
  },
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "global",
    "description": "Iterates over an array of items and invokes an operation upon each one, where the state\nobject is _scoped_ so that state.data is the item under iteration.\nThe rest of the state object is untouched and can be referenced as usual.\nYou can pass an array directly, or use lazy state or a JSONPath string to\nreference a slice of state.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      }
    ],
    "examples": [
      "<caption>Using lazy state ($) to iterate over items in state.data and pass each into an \"insert\" operation</caption>\neach(\n  $.data,\n  // Inside the callback operation, `$.data` is scoped to the item under iteration\n  insert(\"patient\", {\n    patient_name: $.data.properties.case_name,\n    patient_id: $.data.case_id,\n  })\n);",
      "<caption>Iterate over items in state.data and pass each one into an \"insert\" operation</caption>\neach(\n  $.data,\n  insert(\"patient\", (state) => ({\n    patient_id: state.data.case_id,\n    ...state.data\n  }))\n);",
      "<caption>Using JSON path to iterate over items in state.data and pass each one into an \"insert\" operation</caption>\neach(\n  \"$.data[*]\",\n  insert(\"patient\", (state) => ({\n    patient_name: state.data.properties.case_name,\n    patient_id: state.data.case_id,\n  }))\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 296,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "each",
    "longname": "each",
    "name": "each",
    "kind": "function",
    "scope": "beta",
    "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.\n\nIt also ensures the results of an operation make their way back into\nthe state's references.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      }
    ],
    "examples": [
      "each(\"$.[*]\",\n   create(\"SObject\",\n   field(\"FirstName\", sourceValue(\"$.firstName\")))\n )"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 22,
      "filename": "beta.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 35,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encode",
    "longname": "encode",
    "name": "encode",
    "kind": "function",
    "scope": "util",
    "description": "Encodes a given string or Javascript object into Base64 format.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "object"
          ]
        },
        "description": "The string or object to be encoded.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": true,
        "description": "If false, no attempt will be made to stringiy the data before encoding it.",
        "name": "options.parseJson"
      }
    ],
    "examples": [
      "<caption>Encode a string</caption>\nconst encodedString = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=",
      "<caption>Encode an object</caption>\nconst encodedObject = util.encode({name: 'Jane Doe' })\nconsole.log(encodedObject); //output eyJuYW1lIjoiSmFuZSBEb2UifQ==",
      "<caption>To skip the JSON stringification step</caption>\nconst encodedObject = util.encode('Hello World', { parseJson: false })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The Base64 encoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 21,
      "filename": "base64.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "namespace": "util",
    "order": 46,
    "level": 0
  },
  {
    "id": "expandReferences",
    "longname": "expandReferences",
    "name": "expandReferences",
    "kind": "function",
    "scope": "global",
    "description": "Recursively resolves objects that have resolvable values (functions).",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "a function which returns true if a value should be skipped",
        "name": "skipFilter"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 367,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "field",
    "longname": "field",
    "name": "field",
    "kind": "function",
    "scope": "global",
    "description": "Returns a key, value pair in an array.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name of the field",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "Value"
          ]
        },
        "description": "The value itself or a sourceable operation.",
        "name": "value"
      }
    ],
    "examples": [
      "field('destination_field_name__c', 'value')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Field"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 398,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "fields",
    "longname": "fields",
    "name": "fields",
    "kind": "function",
    "scope": "global",
    "description": "Zips key value pairs into an object.",
    "params": [
      {
        "type": {
          "names": [
            "Fields"
          ]
        },
        "description": "a list of fields",
        "name": "fields"
      }
    ],
    "examples": [
      "fields(list_of_fields)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 411,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "fn",
    "longname": "fn",
    "name": "fn",
    "kind": "function",
    "scope": "global",
    "description": "Creates a custom step (or operation) for more flexible job writing.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "is the function",
        "name": "func"
      }
    ],
    "examples": [
      "fn(state => {\n  // do some things to state\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 63,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "fnIf",
    "longname": "fnIf",
    "name": "fnIf",
    "kind": "function",
    "scope": "global",
    "description": "A custom operation that will only execute the function if the condition returns true",
    "params": [
      {
        "type": {
          "names": [
            "Boolean"
          ]
        },
        "description": "The condition that returns true",
        "name": "condition"
      },
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The operation needed to be executed.",
        "name": "operation"
      }
    ],
    "examples": [
      "fnIf((state) => state?.data?.name, get(\"https://example.com\"));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 79,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "format",
    "longname": "format",
    "name": "format",
    "kind": "function",
    "scope": "dateFns",
    "description": "The format function from the date-fns library. See {@link https://date-fns.org/v3.6.0/docs/parse}",
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "dateFns.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 37,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to access",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Request a resource</caption>\nhttp.get('https://jsonplaceholder.typicode.com/todos')",
      "<caption>Request a resource with basic auth</caption>\nhttp.get(\n 'https://jsonplaceholder.typicode.com/todos',\n http.options().basic('user', 'pass')\n)",
      "<caption>Request a resource with oauth</caption>\nhttp.get(\n 'https://jsonplaceholder.typicode.com/todos',\n http.options().oauth($.configuration.access_token)\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 139,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 43,
    "newscope": true,
    "level": 0
  },
  {
    "id": "group",
    "longname": "group",
    "name": "group",
    "kind": "function",
    "scope": "global",
    "description": "Groups an array of objects by a specified key path.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "The array of objects to be grouped.",
        "name": "arrayOfObjects"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key path to group by.",
        "name": "keyPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "const users = [\n  { name: 'Alice', age: 25, city: 'New York' },\n  { name: 'Bob', age: 30, city: 'San Francisco' },\n  { name: 'Charlie', age: 25, city: 'New York' },\n  { name: 'David', age: 30, city: 'San Francisco' }\n];\ngroup(users, 'city');\n// state is { data: { 'New York': [/Alice, Charlie/], 'San Francisco': [ /Bob, David / ] }"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 461,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "humanProper",
    "longname": "humanProper",
    "name": "humanProper",
    "kind": "function",
    "scope": "global",
    "description": "Substitutes underscores for spaces and proper-cases a string",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "String that needs converting",
        "name": "str"
      }
    ],
    "examples": [
      "field(\"destination_string__c\", humanProper(state.data.path_to_string))"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 550,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 25,
    "level": 0
  },
  {
    "id": "index",
    "longname": "index",
    "name": "index",
    "kind": "function",
    "scope": "global",
    "description": "Returns the index of the current array being iterated.\nTo be used with `each` as a data source.",
    "examples": [
      "index()"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 482,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "join",
    "longname": "join",
    "name": "join",
    "kind": "function",
    "scope": "global",
    "description": "Adds data from a target object",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Target path",
        "name": "targetPath"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Source path",
        "name": "sourcePath"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Target Key",
        "name": "targetKey"
      }
    ],
    "examples": [
      "join('$.key','$.data','newKey')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 351,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "jsonValue",
    "longname": "jsonValue",
    "name": "jsonValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from a JSON object.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A valid JSON object.",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in given JSON object.",
        "name": "path"
      }
    ],
    "examples": [
      "jsonValue({ a:1 }, 'a')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 99,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "lastReferenceValue",
    "longname": "lastReferenceValue",
    "name": "lastReferenceValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out the last reference value from source data.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `references`.",
        "name": "path"
      }
    ],
    "examples": [
      "lastReferenceValue('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 193,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "log",
    "longname": "log",
    "name": "log",
    "kind": "function",
    "scope": "global",
    "description": "Outputs a message, like calling `console.log`. Use this at the top level of your job code, but not inside callbacks.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "A value or message to display in the logs",
        "name": "args"
      }
    ],
    "examples": [
      "<caption>Log values from state</caption>\nlog('Patient List::', $.patients);",
      "<caption>Use console.log inside a callback or fn block</caption>\nfn((state) => {\n  console.log(state.data);\n  return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 950,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 33,
    "level": 0
  },
  {
    "id": "map",
    "longname": "map",
    "name": "map",
    "kind": "function",
    "scope": "global",
    "description": "Scopes an array of data based on a JSONPath.\nUseful when the source data has `n` items you would like to map to\nan operation.\nThe operation will receive a slice of the data based of each item\nof the JSONPath provided.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `state.data`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The operation needed to be repeated.",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "description": "Runtime state.",
        "name": "state"
      }
    ],
    "examples": [
      "map(\"$.[*]\",\n  create(\"SObject\",\n    field(\"FirstName\", sourceValue(\"$.firstName\"))\n  )\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 218,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "merge",
    "longname": "merge",
    "name": "merge",
    "kind": "function",
    "scope": "global",
    "description": "Merges fields into each item in an array.",
    "params": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        },
        "name": "dataSource"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Group of fields to merge in.",
        "name": "fields"
      }
    ],
    "examples": [
      "merge(\n  \"$.books[*]\",\n  fields(\n    field( \"publisher\", sourceValue(\"$.publisher\") )\n  )\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "DataSource"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 431,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "options",
    "longname": "options",
    "name": "options",
    "kind": "function",
    "scope": "http",
    "description": "Builder function to create request options. Returns an object with helpers to\neasily add commonly used options. The return object is chainable so you can set\nas many options as you want.\nPass an object to set your own options.",
    "params": [
      {
        "type": {
          "names": [
            "OptionsHelpers"
          ]
        },
        "description": "options to pass to the request",
        "name": "opts"
      }
    ],
    "examples": [
      "<caption>Get with a query an oauth token</caption>\nhttp.get($.data.url, http.options({ query: $.query }).oauth($.configuration.access_token))"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "OptionsHelpers"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 48,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 39,
    "level": 0
  },
  {
    "id": "OptionsHelpers",
    "longname": "OptionsHelpers",
    "name": "OptionsHelpers",
    "kind": "typedef",
    "scope": "global",
    "description": "Helper functions provided by `http.options`.",
    "properties": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets the `content-type' header to 'application/json'",
        "name": "json"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets basic auth on the Authorization header. Pass username and password",
        "name": "basic"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets a Bearer token on the Authorization header. Pass the token.",
        "name": "bearer"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Sets a Bearer token on the Authorization header. Pass the oauth token.",
        "name": "oauth"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 38,
    "level": 0
  },
  {
    "id": "parse",
    "longname": "parse",
    "name": "parse",
    "kind": "function",
    "scope": "dateFns",
    "description": "The parse function from the date-fns library. See {@link https://date-fns.org/v3.6.0/docs/parse}",
    "access": "public",
    "meta": {
      "lineno": 7,
      "filename": "dateFns.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 36,
    "level": 0
  },
  {
    "id": "parseCsv",
    "longname": "parseCsv",
    "name": "parseCsv",
    "kind": "function",
    "scope": "global",
    "description": "Takes a CSV file string or stream and parsing options as input, and returns a promise that\nresolves to the parsed CSV data as an array of objects.\nOptions for `parsingOptions` include:\n- `delimiter` {string/Buffer/[string/Buffer]} - Defines the character(s) used to delineate the fields inside a record. Default: `','`\n- `quote` {string/Buffer/[string/Buffer]} - Defines the characters used to surround a field. Default: `'\"'`\n- `escape` {Buffer/string/null/boolean} - Set the escape character as one character/byte only. Default: `\"`\n- `columns` {boolean / array / function} - Generates record in the form of object literals. Default: `true`\n- `bom` {boolean} - Strips the {@link https://en.wikipedia.org/wiki/Byte_order_mark byte order mark (BOM)} from the input string or buffer. Default: `true`\n- `trim` {boolean} - Ignore whitespace characters immediately around the `delimiter`. Default: `true`\n- `ltrim` {boolean} - Ignore whitespace characters from the left side of a CSV field. Default: `true`\n- `rtrim` {boolean} - Ignore whitespace characters from the right side of a CSV field. Default: `true`\n- `chunkSize` {number} - The size of each chunk of CSV data. Default: `Infinity`\n- `skip_empty_lines` {boolean} - Ignore empty lines in the CSV file. Default: `true`",
    "params": [
      {
        "type": {
          "names": [
            "String",
            "Stream"
          ]
        },
        "description": "A CSV string or a readable stream",
        "name": "csvData"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. Parsing options for converting CSV to JSON.",
        "name": "parsingOptions"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback function. If used it will be called state and an array of rows.",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "The function returns a Promise that resolves to the result of parsing a CSV `stringOrStream`."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 665,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 29,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to access",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Post a JSON object (setting the content-type header)</caption>\nhttp.post(\n  \"https://jsonplaceholder.typicode.com/todos\",\n  $.data,\n  http.options().json()\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 159,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 44,
    "level": 0
  },
  {
    "id": "referencePath",
    "longname": "referencePath",
    "name": "referencePath",
    "kind": "function",
    "scope": "global",
    "description": "Ensures a path points at references.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath referencing a point in `references`.",
        "name": "path"
      }
    ],
    "examples": [
      "referencePath('key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 177,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a HTTP request.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use.",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to resource.",
        "name": "url"
      },
      {
        "type": {
          "names": [
            "CommonRequestOptions"
          ]
        },
        "description": "Request options",
        "name": "options"
      }
    ],
    "examples": [
      "http.request(\n  'GET',\n  'https://jsonplaceholder.typicode.com/todos'\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 80,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "CommonHttpState"
      }
    ],
    "order": 42,
    "level": 0
  },
  {
    "id": "scrubEmojis",
    "longname": "scrubEmojis",
    "name": "scrubEmojis",
    "kind": "function",
    "scope": "global",
    "description": "Replaces emojis in a string.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "String that needs to be cleaned",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Characters that replace the emojis",
        "name": "replacementChars"
      }
    ],
    "examples": [
      "scrubEmojis('Dove🕊️⭐ 29')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 595,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 27,
    "level": 0
  },
  {
    "id": "source",
    "longname": "source",
    "name": "source",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a value from source data.\nWill return whatever JSONPath returns, which will always be an array.\nIf you need a single value use `sourceValue` instead.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "path"
      }
    ],
    "examples": [
      "source('$.key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<(String|Object)>"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 131,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "sourceValue",
    "longname": "sourceValue",
    "name": "sourceValue",
    "kind": "function",
    "scope": "global",
    "description": "Picks out a single value from source data.\nIf a JSONPath returns more than one value for the reference, the first\nitem will be returned.",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "JSONPath referencing a point in `state`.",
        "name": "path"
      }
    ],
    "examples": [
      "sourceValue('$.key')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 114,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "splitKeys",
    "longname": "splitKeys",
    "name": "splitKeys",
    "kind": "function",
    "scope": "global",
    "description": "Splits an object into two objects based on a list of keys.\nThe first object contains the keys that are not in the list,\nand the second contains the keys that are.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The object to split.",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "List of keys to split on.",
        "name": "keys"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Array.<Object>"
          ]
        },
        "description": "- Tuple of objects, first object contains keys not in list, second contains keys that are."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 570,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 26,
    "level": 0
  },
  {
    "id": "toArray",
    "longname": "toArray",
    "name": "toArray",
    "kind": "function",
    "scope": "global",
    "description": "Ensures primitive data types are wrapped in an array.\nDoes not affect array objects.",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "Data required to be in an array",
        "name": "arg"
      }
    ],
    "examples": [
      "each(function(state) {\n  return toArray( dataValue(\"path_of_array\")(state) )\n}, ...)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "array"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 516,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "uuid",
    "longname": "uuid",
    "name": "uuid",
    "kind": "function",
    "scope": "util",
    "description": "Generates a UUID (Universally Unique Identifier)",
    "examples": [
      "<caption>Generate a UUID</caption>\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- A newly generated UUID"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "uuid.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/common/src/util"
    },
    "namespace": "util",
    "order": 49,
    "level": 0
  }
],
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"7.0.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(path, data, params)</a></dt>\\n<dt>\\n    <a href=\\\"#destroy\\\">destroy(resourceType, path, [data], [options])</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(resourceType, path, data, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(resourceType, query, data, [options])</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#util_attr\\\">util.attr(attribute, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_dv\\\">util.dv(dataElement, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_findAttributeValue\\\">util.findAttributeValue(trackedEntity, attributeDisplayName)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_findAttributeValueById\\\">util.findAttributeValueById(trackedEntity, attributeUid)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#tracker_export\\\">tracker.export(path, query, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#tracker_import\\\">tracker.import(strategy, payload, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_patch\\\">http.patch(resourceType, path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, path, [options])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(path, data, params) ⇒ Operation</code></p>\\n\\nCreate a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to the resource to be created |\\n| data | <code>DHIS2Data</code> | An object, or array of objects, to create. |\\n| params | <code>object</code> | Optional object of query parameters to include in the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The created resource as returned by DHIS2 |\\n**Example:** Create a program\\n```js\\ncreate('programs', {\\n  name: 'name 20',\\n  shortName: 'n20',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example:** Create a single event\\n```js\\ncreate('events', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'DiszpKrYNg8',\\n  status: 'COMPLETED',\\n});\\n```\\n**Example:** Create a single tracker entity. See [Create tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\ncreate('trackedEntities', {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Gigiwe',\\n    },\\n  ]\\n});\\n```\\n**Example:** Create a dataSet\\n```js\\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });\\n```\\n**Example:** a dataSetNotification\\n```js\\ncreate('dataSetNotificationTemplates', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example:** Create a dataElement\\n```js\\ncreate('dataElements', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example:** Create a dataElementGroup\\n```js\\ncreate('dataElementGroups', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example:** Create a dataElementGroupSet\\n```js\\ncreate('dataElementGroupSets', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example:** Create a dataValueSet\\n```js\\ncreate('dataValueSets', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example:** Create a dataValueSet with related dataValues\\n```js\\ncreate('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example:** Create an enrollment\\n```js\\ncreate('enrollments', {\\n  trackedEntity: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-09-17',\\n  incidentDate: '2013-09-17',\\n});\\n```\\n\\n* * *\\n\\n### destroy\\n\\n<p><code>destroy(resourceType, path, [data], [options]) ⇒ Operation</code></p>\\n\\nDelete record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be deleted. E.g. `trackedEntities`, `organisationUnits`, etc. |\\n| path | <code>string</code> | Can be an `id` of an `object` or `path` to the `nested object` to `delete`. |\\n| [data] | <code>Object</code> | Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\\\"identifiableObjects\\\": [{\\\"id\\\": \\\"IDA\\\"}, {\\\"id\\\": \\\"IDB\\\"}, {\\\"id\\\": \\\"IDC\\\"}]}`. See more [on DHIS2 API docs](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects) |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** a tracked entity instance. See [Delete tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\ndestroy('trackedEntities', 'LcRd6Nyaq7T');\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, params) ⇒ Operation</code></p>\\n\\nGet any resource, as JSON, from DHIS2. Pass in any valid DHIS2 REST path, excluding /api and the version.\\nFor the new tracker API, see `tracker.export()`\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to the resource |\\n| params | <code>object</code> | Object of query parameters to include in the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the resource returned by DHIS2 |\\n**Example:** Get all data values for the 'pBOMPrpg1QX' dataset\\n```js\\nget('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n});\\n```\\n**Example:** Get all programs for an organization unit\\n```js\\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });\\n```\\n**Example:** Get a single tracked entity given the provided ID. See [TrackedEntities docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#tracked-entities-get-apitrackertrackedentities)\\n```js\\nget('tracker/trackedEntities/F8yKM85NbxW');\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(resourceType, path, data, [options]) ⇒ Operation</code></p>\\n\\nUpdate a resource object of any type. Updating an object requires all fields of the object you are updating, even if they have not been modified\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send the full body. If you want partial updates, use patch operation. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the resource returned by DHIS2 |\\n**Example:** a program\\n```js\\nupdate('programs', 'qAZJCrNJK8H', {\\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\\n  shortName: '14e1aa02',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example:** an event\\n```js\\nupdate('events', 'PVqUD2hvU4E', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'Ngelehun CHC',\\n  status: 'COMPLETED',\\n  storedBy: 'admin',\\n  dataValues: [],\\n});\\n```\\n**Example:** Update a tracker entity. See [Update tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)\\n```js\\nupdate('trackedEntities', '', {\\n  createdAt: '2015-08-06T21:12:37.256',\\n  orgUnit: 'TSyzvBiovKh',\\n  createdAtClient: '2015-08-06T21:12:37.256',\\n  trackedEntity: 'IeQfgUtGPq2',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  inactive: false,\\n  deleted: false,\\n  featureType: 'NONE',\\n  programOwners: [\\n    {\\n      ownerOrgUnit: 'TSyzvBiovKh',\\n      program: 'IpHINAT79UW',\\n      trackedEntity: 'IeQfgUtGPq2',\\n    },\\n  ],\\n  attributes: [\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      displayName: 'Last name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'zDhUuAYrxNC',\\n      value: 'Russell',\\n    },\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      code: 'MMD_PER_NAM',\\n      displayName: 'First name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Catherine',\\n    },\\n  ],\\n});\\n```\\n**Example:** Update a dataSet\\n```js\\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });\\n```\\n**Example:** a dataSetNotification\\n```js\\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello Updated',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example:** Update a dataElement\\n```js\\nupdate('dataElements', 'FTRrcoaog83', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example:** Update a dataElementGroup\\n```js\\nupdate('dataElementGroups', 'QrprHT61XFk', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example:** Update a dataElementGroupSet\\n```js\\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example:** Update a dataValueSet\\n```js\\nupdate('dataValueSets', 'AsQj6cDsUq4', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example:** Update a dataValueSet with related dataValues\\n```js\\nupdate('dataValueSets', 'Ix2HsbDMLea', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example:** Update an enrollment given the provided ID\\n```js\\nupdate('enrollments', 'CmsHzercTBa' {\\n  trackedEntity: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-10-17',\\n  incidentDate: '2013-10-17',\\n});\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(resourceType, query, data, [options]) ⇒ Operation</code></p>\\n\\nUpsert a record. This will atomically update a record if it already exists, or otherwise create it.\\nThis function does not work with the absolute tracker path `api/tracker` but rather the new tracker paths and deprecated tracker endpoints.\\n\\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntities`. |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Upsert a trackedEntity\\n```js\\nupsert('trackedEntities', {}, {\\n orgUnit: 'TSyzvBiovKh',\\n trackedEntityType: 'nEenWmSyUEp',\\n attributes: [\\n   {\\n     attribute: 'w75KJ2mc4zz',\\n     value: 'Qassim',\\n   },\\n ],\\n});\\n```\\n**Example:**  Upsert a dataElement \\n```js\\nupsert(\\n  'dataElements',\\n  { filter: 'id:eq:P3jJH5Tu5VC' },\\n  {\\n    op: 'add',\\n    path: '/domainType',\\n    name: 'Acute',\\n    shortName: 'AFP follow-up',\\n    dimensionItemType: 'DATA_ELEMENT',\\n    legendSets: [],\\n    aggregationType: 'SUM',\\n    valueType: 'NUMBER',\\n    domainType: 'AGGREGATE',\\n    code: 'DE_359049',\\n    name: 'Acute Flaccid Paralysis (AFP) follow-up',\\n   }\\n );\\n```\\n\\n* * *\\n\\n\\n## util\\n\\nThese functions belong to the util namespace.\\n### util.attr {#util_attr}\\n\\n<p><code>attr(attribute, value) ⇒ object</code></p>\\n\\nConverts an attribute ID and value into a DHIS2 attribute object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attribute | <code>string</code> | A tracked entity instance (TEI) attribute ID. |\\n| value | <code>string</code> | The value for that attribute. |\\n\\n**Example**\\n```js\\nfn(state => {\\n   const s = util.attr('w75KJ2mc4zz', 'Elias');\\n   console.log(s);\\n   return state;\\n})\\n```\\n\\n* * *\\n\\n\\n### util.dv {#util_dv}\\n\\n<p><code>dv(dataElement, value) ⇒ object</code></p>\\n\\nConverts a dataElement and value into a DHIS2 dataValue object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataElement | <code>string</code> | A data element ID. |\\n| value | <code>string</code> | The value for that data element. |\\n\\n**Example**\\n```js\\nfn(state => {\\n  const s = util.dv('f7n9E0hX8qk', 12);\\n  console.log(s);\\n  return state\\n})\\n```\\n\\n* * *\\n\\n\\n### util.findAttributeValue {#util_findAttributeValue}\\n\\n<p><code>findAttributeValue(trackedEntity, attributeDisplayName) ⇒ string</code></p>\\n\\nGets an attribute value by its case-insensitive display name\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntity | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeDisplayName | <code>string</code> | The 'displayName' to search for in the TEI's attributes |\\n\\n**Example**\\n```js\\nfn(state => {\\n   const s = util.findAttributeValue(state.data.trackedEntities[0], 'first name');\\n   console.log(s);\\n   return state\\n})\\n```\\n\\n* * *\\n\\n\\n### util.findAttributeValueById {#util_findAttributeValueById}\\n\\n<p><code>findAttributeValueById(trackedEntity, attributeUid) ⇒ string</code></p>\\n\\nGets an attribute value by its uid\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntity | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeUid | <code>string</code> | The uid to search for in the TEI's attributes |\\n\\n**Example**\\n```js\\nfn(state =>{\\n  const s = util.findAttributeValueById(state.tei, 'y1w2R6leVmh');\\n  console.log(s);\\n  return state\\n})\\n```\\n\\n* * *\\n\\n\\n## tracker\\n\\nThese functions belong to the tracker namespace.\\n### tracker.export {#tracker_export}\\n\\n<p><code>export(path, query, [options]) ⇒ Operation</code></p>\\n\\nExport data from DHIS2.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to the resource, relative to the /tracker endpoint |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL |\\n| [options] | [<code>TrackerOptions</code>](#trackeroptions) | An optional object containing parseAs, and apiVersion for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Export a trackedEntity resource using the id\\n```js\\ntracker.export('trackedEntities/Gu5UKnIFnJf')\\n```\\n**Example:** Export all enrollment resources\\n```js\\ntracker.export('enrollments', {orgUnit: 'TSyzvBiovKh'});\\n```\\n**Example:** Export all events\\n```js\\ntracker.export('events')\\n```\\n\\n* * *\\n\\n\\n### tracker.import {#tracker_import}\\n\\n<p><code>import(strategy, payload, [options]) ⇒ Operation</code></p>\\n\\nImport data into DHIS2 using the tracker endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| strategy | <code>string</code> | The effect the import should have. Can either be CREATE, UPDATE, CREATE_AND_UPDATE and DELETE. |\\n| payload | <code>object</code> | The data to be imported. |\\n| [options] | [<code>TrackerOptions</code>](#trackeroptions) | An optional object containing parseAs, and apiVersion, and queries for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Import some data and pass the `atomicMode` parameter\\n```js\\ntracker.import('CREATE', $.trackerData, { atomicMode: 'ALL' })\\n```\\n**Example:** Import a trackedEntity resource\\n```js\\ntracker.import(\\n  'CREATE',\\n  {\\n    trackedEntities: [\\n      {\\n        orgUnit: 'TSyzvBiovKh',\\n        trackedEntityType: 'nEenWmSyUEp',\\n        attributes: [\\n          {\\n            attribute: 'w75KJ2mc4zz',\\n            value: 'Gigiwe',\\n          },\\n        ],\\n      },\\n    ],\\n  },\\n  {\\n    atomicMode: 'ALL',\\n  }\\n);\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ Operation</code></p>\\n\\nMake a GET request to any DHIS2 endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the DHIS2 server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get with query parameters\\n```js\\nhttp.get('dataValueSets', {\\n query:{\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n}\\n});\\n```\\n**Example:** Get an image from a trackedEntityInstance.\\n```js\\nhttp.get('trackedEntityInstances/qHVDKszQmdx/BqaEWTBG3RB/image', {\\n  headers:{\\n      Accept: 'image/*'\\n  },\\n  parseAs: 'base64',\\n});\\n```\\n\\n* * *\\n\\n\\n### http.patch {#http_patch}\\n\\n<p><code>patch(resourceType, path, data, [options]) ⇒ Operation</code></p>\\n\\nMake a PATCH request to any DHIS2 endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. Include only the fields you want to update. E.g. `{name: \\\"New Name\\\"}` |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the DHIS2 server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a resource\\n```js\\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, data, [options]) ⇒ Operation</code></p>\\n\\nMake a POST request to any DHIS2 endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. |\\n| data | <code>DHIS2Data</code> | Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, parseAs,and headers for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the DHIS2 server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Call the tracker endpoint with a JSON payload\\n```js\\nhttp.post(\\\"tracker\\\", {\\n  events: [\\n    {\\n      program: \\\"eBAyeGv0exc\\\",\\n      orgUnit: \\\"DiszpKrYNg8\\\",\\n      status: \\\"COMPLETED\\\",\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, path, [options]) ⇒ Operation</code></p>\\n\\nMake a HTTP request to any DHIS2 endpoint\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | An optional object containing query, requestConfig, and data for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the DHIS2 server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** GET request with a URL params\\n```js\\nhttp.request(\\\"GET\\\",\\n  \\\"tracker/relationships\\\", {\\n   query:{\\n       trackedEntity: ['F8yKM85NbxW']\\n   },\\n});\\n```\\n**Example:** Upsert a tracker resource \\n```js\\nhttp.request('POST', 'tracker', {\\n  data: {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Qassime',\\n    },\\n  ],\\n },\\n  query:{\\n     importStrategy: 'CREATE_AND_UPDATE'\\n   }\\n });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json` |\\n| [apiVersion] | <code>string</code> | <code>42</code> | The apiVersion of the request. Defaults to 42. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json` |\\n| [apiVersion] | <code>string</code> | <code>42</code> | The apiVersion of the request. Defaults to 42. |\\n\\n\\n* * *\\n\\n### TrackerOptions\\n\\nAll options, apart from those listed here, will be appended as query parameters to the URL\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json` |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language DHIS2\\n\\nAn OpenFn language pack for building expressions and operations to work with the\\n[DHIS2 API](https://docs.dhis2.org/en/home.html). Commonly used via\\n[OpenFn.org](https://app.openfn.org) or manually with\\n[OpenFn CLI](https://github.com/OpenFn/kit).\\n\\n## Table of Contents\\n\\n1. [Getting Started](#getting-started)\\n2. [Important Note](#important-note)\\n3. [Configuration](#configuration)\\n4. [Helper Functions](#helper-functions)\\n5. [Development](#development)\\n   - [Running Tests](#running-tests)\\n   - [Unit Tests](#unit-tests)\\n   - [Integration Tests](#integration-tests)\\n   - [Troubleshooting Tests](#troubleshooting-tests)\\n\\n---\\n\\n## Getting Started\\n\\nTo use this package, execute commands via OpenFn/core from the root of the\\nrepository:\\n\\n```sh\\nopenfn job.js -a dhis2 -s tmp/state.json\\n```\\n\\nFor installation and usage, see the\\n[docs site](https://docs.openfn.org/adaptors/packages/dhis2-docs).\\n\\n---\\n\\n## Important Note\\n\\n- For DHIS2 API versions 2.42+ and the **new tracker**, use **adaptor 6.0+**.\\n  Refer to the\\n  [DHIS2 API documentation](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-master/tracker.html)\\n  for details.\\n- For **old tracker versions** and DHIS2 API versions **prior to 2.42**, use\\n  **adaptor 5.0+**. But we highly recommend upgrading to the latest version.\\n\\n---\\n\\n## Configuration\\n\\nAll required and optional properties for `state.configuration` are defined in\\nthe official\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dhis2-configuration-schema/).\\n\\nEnsure you configure:\\n\\n- **Username**: DHIS2 admin username\\n- **Password**: Corresponding DHIS2 admin password\\n- **Host URL**: URL of the DHIS2 instance\\n\\nExample configuration:\\n\\n```json\\n{\\n  \\\"username\\\": \\\"admin\\\",\\n  \\\"password\\\": \\\"district\\\",\\n  \\\"hostUrl\\\": \\\"https://play.dhis2.org/2.36.6\\\"\\n}\\n```\\n\\n---\\n\\n## Helper Functions\\n\\nHelper functions simplify common DHIS2 operations. View the\\n[complete function documentation](https://docs.openfn.org/adaptors/packages/dhis2-docs).\\n\\n## Development\\n\\n### Running Tests\\n\\nTo run unit and integration tests, use the following commands:\\n\\n- **Unit Tests**: `pnpm test`\\n- **Integration Tests**: `pnpm test:integration`\\n\\n_Note: Integration tests depend on a live DHIS2 instance._\\n\\n### Unit Tests\\n\\nUnit tests validate helper functions independently. For example:\\n\\n- Does `create('events', payload)` perform a correct POST request?\\n\\nAdd new unit tests whenever helper functions are updated.\\n\\n### Integration Tests\\n\\nIntegration tests validate end-to-end behavior with a live DHIS2 instance.\\nEnsure your test environment includes:\\n\\n- At least one **organisation unit**.\\n- One **program** and a corresponding **program stage**.\\n- A **tracked entity instance** enrolled in the program.\\n\\nModify `globalState` in `test/integration.js` as needed:\\n\\n```javascript\\nbefore(done => {\\n  fixture.initialState = {\\n    configuration: {\\n      username: 'admin',\\n      password: 'district',\\n      hostUrl: 'https://play.dhis2.org/2.36.6',\\n    },\\n    program: 'IpHINAT79UW',\\n    orgUnit: 'DiszpKrYNg8',\\n    trackedEntityInstance: 'uhubxsfLanV',\\n    programStage: 'eaDHS084uMp',\\n  };\\n  done();\\n});\\n```\\n\\n### Troubleshooting Tests\\n\\n- **Timeout Errors**: Increase the global timeout in `test/mocha.opts`.\\n- **Environment Issues**: Ensure DHIS2 components (programs, org units, etc.)\\n  are correctly configured.\\n\\n---\\n\\nFor further technical details, see the\\n[documentation](https://docs.openfn.org/adaptors/packages/dhis2-docs) or contact\\nthe [OpenFn community](https://community.openfn.org).\\n\"","changelog":"\"# @openfn/language-dhis2\\n\\n## 7.0.0\\n\\nThis release of DHSI2 contains major breaking changes.\\n\\nThis release includes a major re-think of the main adaptor API, introducing new\\nnamespaces (tracker, http, util) to help organize functionality. Note that the\\nmain namespace contains `get()` and `create()`, which do not surface HTTP\\nsemantics, and `http.get()` and `http.post()`.\\n\\nThe intention is that most users can use the `get()`, `create()` and `tracker.*`\\nAPIs, with a HTTP abstraction as a fallback.\\n\\nIt also removes a dependency on the axios library (preferring undici, as used by\\nother adaptors).\\n\\n### Major Changes\\n\\n- Remove axios.\\n- Re-worked signatures for `get()`, `create()`, `update()` and `upsert()`.\\n- The `discover()` function has been removed.\\n- Many non-operation functions have moved to the `util.` namespace, including.\\n  `attr`, `dv`, `findAttributeValue`, and `findAttributeValueById`.\\n- HTTP helper functions (like `post()`, `patch()`) have been moved into a clean\\n  new http namespace.\\n\\n### Minor Changes\\n\\n- dfe53ef: - Implement a new `tracker` namespace for `tracker.import()` and\\n  `tracker.export()` functions.\\n\\n  - Throw an error when `create('tracker')` is called.\\n\\n- 5b73844: - Add importStrategy to query params for `create` and `update`\\n\\n### Migration Guide\\n\\n#### get ()\\n\\nThe `get` function has a new signature of `get(path, params)`. Note that the old\\noptions object and callback have been removed. If you need to set headers on\\nyour request, use `http.get()` instead.\\n\\nFor `path`, you can pass a resource type, like `\\\"enrollments\\\"`, or a path to a\\nspecific resource, like `tracker/trackedEntities/F8yKM85NbxW`.\\n\\nIf using the new tracker API, we recommend using the new tracker namespace.\\n\\n#### create\\n\\nThe `create` function has a new signature of `create(path, data, params)`. Note\\nthat the old options object and callback have been removed. If you need to set\\nheaders on your request, use `http.post()` instead.\\n\\n#### update\\n\\nCallbacks have been removed from the update signature.\\n\\n#### upsert\\n\\nCallbacks have been removed from the upsert signature.\\n\\n#### Utils\\n\\nSome helper functions, which are not operations and cannot be called at the top\\nlevel, have been moved to a `util` namespace.\\n\\nInstead of this:\\n\\n```\\nfn((state) => {\\n  const value = findAttributeValue(state.data, 'first name')\\n  return state;\\n})\\n```\\n\\nDo this:\\n\\n```\\nfn((state) => {\\n  const value = util.findAttributeValue(state.data, 'first name')\\n  return state;\\n})\\n```\\n\\n## 6.3.4 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 6.3.3 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 6.3.2 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 6.3.1 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 6.3.0 - 30 January 2025\\n\\n### Minor Changes\\n\\n- Added a 'findAttributeValueById' function; GHS points out that this is more\\n  durable than the display names used by 'findAttributeValue'\\n\\n## 6.2.0 - 28 January 2025\\n\\n### Minor Changes\\n\\n- 0156632: Add `asBase64` option in dhis2 `get()` function\\n\\n## 6.1.0 - 16 January 2025\\n\\n### Minor Changes\\n\\n- c19d561: Added support for personal access tokens in dhis2\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 6.0.3 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 6.0.2 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 6.0.1 - 04 December 2024\\n\\n### Patch Changes\\n\\n- ab94b7c: Fix links in docs examples\\n\\n## 6.0.0 - 28 November 2024\\n\\n### Major Changes\\n\\n- b44a3b1: Migrates the adaptor to the new Tracker API (v36+) for\\n  `trackedEntities`, `enrollments`, `events` and `relationships`. Note that\\n  `trackedEntities` is no longer used.\\n\\n  This release is designed for compatibility with DHIS2 v42, which drops support\\n  for a number of endpoints.\\n\\n  The `create`, `update`, `upsert` and `destroy` functions will automatically\\n  map affected resources to the new tracker API endpoint.\\n\\n  If you have an existing workflow which uses these functions with\\n  `trackedEntities`, `enrollments`, `events` or `relationships`, the data and\\n  options you pass may be incompatible with the new tracker API. You should\\n  review your code carefully against the\\n  [DHIS2 Tracker Migration Guide](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker-deprecated.html#webapi_tracker_migration)\\n  to see what's changed.\\n\\n  For example, if you used to do:\\n\\n  ```js\\n  create('trackedEntityInstances', {\\n    /*...*/\\n  });\\n  ```\\n\\n  You should now do:\\n\\n  ```js\\n  create('trackedEntities', {\\n    /*...*/\\n  });\\n  ```\\n\\n  The payloads have also changed shape, so for example if you used to:\\n\\n  ```js\\n  create('events', {\\n    trackedEntityInstance: 'eBAyeGv0exc',\\n    eventDate: '2024-01-01',\\n    /* ... */\\n  });\\n  ```\\n\\n  You should now do:\\n\\n  ```js\\n  create('events', {\\n    trackedEntity: 'eBAyeGv0exc',\\n    occurredAt: '2024-01-01',\\n    /* ... */\\n  });\\n  ```\\n\\n  The HTTP APIs `get()`, `patch()`, and `post()` do not automatically map to the\\n  new tracker: they continue to call the URL you provide with the data you send.\\n  You can use this to continue to call the old tracker API directly.\\n\\n### Minor Changes\\n\\n- d30f39f: Added new post() operation\\n\\n## 5.0.8 - 26 November 2024\\n\\n### Patch Changes\\n\\n- 94be282: Fix an issue where the path argument of update does not accept a\\n  function value\\n\\n## 5.0.7 - 08 November 2024\\n\\n### Patch Changes\\n\\n- 6cb5377: Removed support for DHIS2 v42\\n\\n## 5.0.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 5.0.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 5.0.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 5.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 5.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 4.2.1\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 4.2.0 - 19 June 2024\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.0.5 - 14 May 2024\\n\\n### Patch Changes\\n\\n- Fix attribute metadata\\n\\n## 4.0.4 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.0.3 - 24 October 2023\\n\\n### Patch Changes\\n\\n- 222184d: remove Class Log and replaced\\n\\n  - `Log.success` with `console.log`\\n  - `Log.warn` with `console.warn`\\n  - `Log.error` with `console.error`\\n\\n## 4.0.2 - 21 July 2023\\n\\n### Patch Changes\\n\\n- 1bd612e: improve error logs response\\n\\n## 4.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.2.12 - 31 May 2023\\n\\n### Patch Changes\\n\\n- 57742d1: improve logs output\\n\\n## 3.2.11 - 31 March 2023\\n\\n### Patch Changes\\n\\n- 705caab: Remove tools as devdependencies\\n\\n## 3.2.10 - 31 March 2023\\n\\n### Patch Changes\\n\\n- 929bca6: Use metadata helper function from common\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.2.9 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.2.8 - 24 March 2023\\n\\n### Patch Changes\\n\\n- Fix metadata function export\\n\\n## 3.2.7 - 10 March 2023\\n\\n### Patch Changes\\n\\n- c09b821: Add @magic annotations\\n\\n## 3.2.6 - 16 February 2023\\n\\n### Patch Changes\\n\\n- df6098d: replace sample state with configuration\\n\\n## 3.2.5 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.4 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 3.2.3 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.2.2 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n  - @openfn/buildtools@1.0.2\\n\\n## 3.2.1 - 21 October 2022\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 3.2.0 - 19 October 2022\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 3.1.0 - 18 October 2022\\n\\n### Minor Changes\\n\\n- 8d6e8ce: Migrate dhis2 into repo\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4671e89]\\n- Updated dependencies \\\\[8d6e8ce]\\n  - @openfn/buildtools@1.0.1\\n\"","functions":["create","destroy","get","update","upsert"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The base DHIS2 instance URL","format":"uri","minLength":1,"examples":["https://play.dhis2.org/2.36.6"]},"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Password"]},"apiVersion":{"title":"API Version","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"38","description":"DHIS2 api version","minLength":1,"examples":["v2"]},"pat":{"title":"Personal Access Token","type":"string","description":"Personal access token","minLength":1,"examples":["d2pat_vreYExmi0yh92Soy8CCF2zHG0wRjID494035128247"]}},"type":"object","additionalProperties":true,"required":["hostUrl","password","username"]}},
[
  {
    "id": "attr",
    "longname": "attr",
    "name": "attr",
    "kind": "function",
    "scope": "util",
    "description": "Converts an attribute ID and value into a DHIS2 attribute object",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A tracked entity instance (TEI) attribute ID.",
        "name": "attribute"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value for that attribute.",
        "name": "value"
      }
    ],
    "examples": [
      "fn(state => {\n   const s = util.attr('w75KJ2mc4zz', 'Elias');\n   console.log(s);\n   return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 27,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 19,
    "newscope": true,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource to be created",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "DHIS2Data"
          ]
        },
        "description": "An object, or array of objects, to create.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Create a program</caption>\ncreate('programs', {\n  name: 'name 20',\n  shortName: 'n20',\n  programType: 'WITHOUT_REGISTRATION',\n});",
      "<caption>Create a single event</caption>\ncreate('events', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'DiszpKrYNg8',\n  status: 'COMPLETED',\n});",
      "<caption>Create a single tracker entity. See [Create tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\ncreate('trackedEntities', {\n  orgUnit: 'TSyzvBiovKh',\n  trackedEntityType: 'nEenWmSyUEp',\n  attributes: [\n    {\n      attribute: 'w75KJ2mc4zz',\n      value: 'Gigiwe',\n    },\n  ]\n});",
      "<caption>Create a dataSet</caption>\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });",
      "<caption>a dataSetNotification</caption>\ncreate('dataSetNotificationTemplates', {\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\n  name: 'Notification',\n  messageTemplate: 'Hello',\n  deliveryChannels: ['SMS'],\n  dataSets: [],\n});",
      "<caption>Create a dataElement</caption>\ncreate('dataElements', {\n  aggregationType: 'SUM',\n  domainType: 'AGGREGATE',\n  valueType: 'NUMBER',\n  name: 'Paracetamol',\n  shortName: 'Para',\n});",
      "<caption>Create a dataElementGroup</caption>\ncreate('dataElementGroups', {\n  name: 'Data Element Group 1',\n  dataElements: [],\n});",
      "<caption>Create a dataElementGroupSet</caption>\ncreate('dataElementGroupSets', {\n  name: 'Data Element Group Set 4',\n  dataDimension: true,\n  shortName: 'DEGS4',\n  dataElementGroups: [],\n});",
      "<caption>Create a dataValueSet</caption>\ncreate('dataValueSets', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '12',\n});",
      "<caption>Create a dataValueSet with related dataValues</caption>\ncreate('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});",
      "<caption>Create an enrollment</caption>\ncreate('enrollments', {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-09-17',\n  incidentDate: '2013-09-17',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 185,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The created resource as returned by DHIS2",
        "type": null
      }
    ],
    "customTags": [
      {
        "tag": "magic",
        "value": "path $.children.resourceTypes[*]"
      }
    ],
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "destroy",
    "longname": "destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "global",
    "description": "Delete record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be deleted. E.g. `trackedEntities`, `organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Can be an `id` of an `object` or `path` to the `nested object` to `delete`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\"identifiableObjects\": [{\"id\": \"IDA\"}, {\"id\": \"IDB\"}, {\"id\": \"IDC\"}]}`. See more {@link https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects on DHIS2 API docs}",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>a tracked entity instance. See [Delete tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\ndestroy('trackedEntities', 'LcRd6Nyaq7T');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 578,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2State"
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "DHIS2HttpState",
    "longname": "DHIS2HttpState",
    "name": "DHIS2HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the DHIS2 server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 9
  },
  {
    "id": "DHIS2State",
    "longname": "DHIS2State",
    "name": "DHIS2State",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 12,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 0
  },
  {
    "id": "DHIS2State",
    "longname": "DHIS2State",
    "name": "DHIS2State",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the DHIS2 server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "tracker.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 15
  },
  {
    "id": "dv",
    "longname": "dv",
    "name": "dv",
    "kind": "function",
    "scope": "util",
    "description": "Converts a dataElement and value into a DHIS2 dataValue object",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A data element ID.",
        "name": "dataElement"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value for that data element.",
        "name": "value"
      }
    ],
    "examples": [
      "fn(state => {\n  const s = util.dv('f7n9E0hX8qk', 12);\n  console.log(s);\n  return state\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 45,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "export",
    "longname": "export",
    "name": "export",
    "kind": "function",
    "scope": "tracker",
    "description": "Export data from DHIS2.",
    "alias": "export",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource, relative to the /tracker endpoint",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "TrackerOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing parseAs, and apiVersion for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Export a trackedEntity resource using the id</caption>\ntracker.export('trackedEntities/Gu5UKnIFnJf')",
      "<caption>Export all enrollment resources</caption>\ntracker.export('enrollments', {orgUnit: 'TSyzvBiovKh'});",
      "<caption>Export all events</caption>\ntracker.export('events')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 106,
      "filename": "tracker.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2State"
      }
    ],
    "order": 18,
    "newscope": true,
    "level": 0
  },
  {
    "id": "findAttributeValue",
    "longname": "findAttributeValue",
    "name": "findAttributeValue",
    "kind": "function",
    "scope": "util",
    "description": "Gets an attribute value by its case-insensitive display name",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A tracked entity instance (TEI) object",
        "name": "trackedEntity"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The 'displayName' to search for in the TEI's attributes",
        "name": "attributeDisplayName"
      }
    ],
    "examples": [
      "fn(state => {\n   const s = util.findAttributeValue(state.data.trackedEntities[0], 'first name');\n   console.log(s);\n   return state\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 63,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "findAttributeValueById",
    "longname": "findAttributeValueById",
    "name": "findAttributeValueById",
    "kind": "function",
    "scope": "util",
    "description": "Gets an attribute value by its uid",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A tracked entity instance (TEI) object",
        "name": "trackedEntity"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uid to search for in the TEI's attributes",
        "name": "attributeUid"
      }
    ],
    "examples": [
      "fn(state =>{\n  const s = util.findAttributeValueById(state.tei, 'y1w2R6leVmh');\n  console.log(s);\n  return state\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 83,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get any resource, as JSON, from DHIS2. Pass in any valid DHIS2 REST path, excluding /api and the version.\nFor the new tracker API, see `tracker.export()`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of query parameters to include in the request",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Get all data values for the 'pBOMPrpg1QX' dataset</caption>\nget('dataValueSets', {\n  dataSet: 'pBOMPrpg1QX',\n  orgUnit: 'DiszpKrYNg8',\n  period: '201401',\n  fields: '*',\n});",
      "<caption>Get all programs for an organization unit</caption>\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });",
      "<caption>Get a single tracked entity given the provided ID. See [TrackedEntities docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#tracked-entities-get-apitrackertrackedentities)</caption>\nget('tracker/trackedEntities/F8yKM85NbxW');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 257,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the resource returned by DHIS2",
        "type": null
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to any DHIS2 endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get with query parameters</caption>\nhttp.get('dataValueSets', {\n query:{\n  dataSet: 'pBOMPrpg1QX',\n  orgUnit: 'DiszpKrYNg8',\n  period: '201401',\n  fields: '*',\n}\n});",
      "<caption>Get an image from a trackedEntityInstance.</caption>\nhttp.get('trackedEntityInstances/qHVDKszQmdx/BqaEWTBG3RB/image', {\n  headers:{\n      Accept: 'image/*'\n  },\n  parseAs: 'base64',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 47,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2HttpState"
      }
    ],
    "order": 11,
    "newscope": true,
    "level": 0
  },
  {
    "id": "import",
    "longname": "import",
    "name": "import",
    "kind": "function",
    "scope": "tracker",
    "description": "Import data into DHIS2 using the tracker endpoint.",
    "alias": "import",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The effect the import should have. Can either be CREATE, UPDATE, CREATE_AND_UPDATE and DELETE.",
        "name": "strategy"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to be imported.",
        "name": "payload"
      },
      {
        "type": {
          "names": [
            "TrackerOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing parseAs, and apiVersion, and queries for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Import some data and pass the `atomicMode` parameter</caption>\ntracker.import('CREATE', $.trackerData, { atomicMode: 'ALL' })",
      "<caption>Import a trackedEntity resource</caption>\ntracker.import(\n  'CREATE',\n  {\n    trackedEntities: [\n      {\n        orgUnit: 'TSyzvBiovKh',\n        trackedEntityType: 'nEenWmSyUEp',\n        attributes: [\n          {\n            attribute: 'w75KJ2mc4zz',\n            value: 'Gigiwe',\n          },\n        ],\n      },\n    ],\n  },\n  {\n    atomicMode: 'ALL',\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 53,
      "filename": "tracker.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2State"
      }
    ],
    "order": 17,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "http",
    "description": "Make a PATCH request to any DHIS2 endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be updated.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data to update. Include only the fields you want to update. E.g. `{name: \"New Name\"}`",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Update a resource</caption>\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2HttpState"
      }
    ],
    "order": 13,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request to any DHIS2 endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "DHIS2Data"
          ]
        },
        "description": "Object which defines data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Call the tracker endpoint with a JSON payload</caption>\nhttp.post(\"tracker\", {\n  events: [\n    {\n      program: \"eBAyeGv0exc\",\n      orgUnit: \"DiszpKrYNg8\",\n      status: \"COMPLETED\",\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 94,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2HttpState"
      }
    ],
    "customTags": [
      {
        "tag": "magic",
        "value": "path $.children.resourceTypes[*]"
      }
    ],
    "order": 12,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a HTTP request to any DHIS2 endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, requestConfig, and data for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET request with a URL params</caption>\nhttp.request(\"GET\",\n  \"tracker/relationships\", {\n   query:{\n       trackedEntity: ['F8yKM85NbxW']\n   },\n});",
      "<caption>Upsert a tracker resource </caption>\nhttp.request('POST', 'tracker', {\n  data: {\n  orgUnit: 'TSyzvBiovKh',\n  trackedEntityType: 'nEenWmSyUEp',\n  attributes: [\n    {\n      attribute: 'w75KJ2mc4zz',\n      value: 'Qassime',\n    },\n  ],\n },\n  query:{\n     importStrategy: 'CREATE_AND_UPDATE'\n   }\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 195,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2HttpState"
      }
    ],
    "order": 14,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json`",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": 42,
        "description": "The apiVersion of the request. Defaults to 42.",
        "name": "apiVersion"
      }
    ],
    "meta": {
      "lineno": 20,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json`",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": 42,
        "description": "The apiVersion of the request. Defaults to 42.",
        "name": "apiVersion"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "TrackerOptions",
    "longname": "TrackerOptions",
    "name": "TrackerOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "All options, apart from those listed here, will be appended as query parameters to the URL",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', 'stream', or 'base64'. Defaults to `json`",
        "name": "parseAs"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "tracker.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update a resource object of any type. Updating an object requires all fields of the object you are updating, even if they have not been modified",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}`",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data to update. It requires to send the full body. If you want partial updates, use patch operation.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>a program</caption>\nupdate('programs', 'qAZJCrNJK8H', {\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\n  shortName: '14e1aa02',\n  programType: 'WITHOUT_REGISTRATION',\n});",
      "<caption>an event</caption>\nupdate('events', 'PVqUD2hvU4E', {\n  program: 'eBAyeGv0exc',\n  orgUnit: 'Ngelehun CHC',\n  status: 'COMPLETED',\n  storedBy: 'admin',\n  dataValues: [],\n});",
      "<caption>Update a tracker entity. See [Update tracker docs](https://docs.dhis2.org/en/develop/using-the-api/dhis-core-version-241/tracker.html#webapi_nti_import)</caption>\nupdate('trackedEntities', '', {\n  createdAt: '2015-08-06T21:12:37.256',\n  orgUnit: 'TSyzvBiovKh',\n  createdAtClient: '2015-08-06T21:12:37.256',\n  trackedEntity: 'IeQfgUtGPq2',\n  trackedEntityType: 'nEenWmSyUEp',\n  inactive: false,\n  deleted: false,\n  featureType: 'NONE',\n  programOwners: [\n    {\n      ownerOrgUnit: 'TSyzvBiovKh',\n      program: 'IpHINAT79UW',\n      trackedEntity: 'IeQfgUtGPq2',\n    },\n  ],\n  attributes: [\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      displayName: 'Last name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'zDhUuAYrxNC',\n      value: 'Russell',\n    },\n    {\n      lastUpdated: '2016-01-12T00:00:00.000',\n      code: 'MMD_PER_NAM',\n      displayName: 'First name',\n      created: '2016-01-12T00:00:00.000',\n      valueType: 'TEXT',\n      attribute: 'w75KJ2mc4zz',\n      value: 'Catherine',\n    },\n  ],\n});",
      "<caption>Update a dataSet</caption>\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });",
      "<caption>a dataSetNotification</caption>\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\n  name: 'Notification',\n  messageTemplate: 'Hello Updated',\n  deliveryChannels: ['SMS'],\n  dataSets: [],\n});",
      "<caption>Update a dataElement</caption>\nupdate('dataElements', 'FTRrcoaog83', {\n  aggregationType: 'SUM',\n  domainType: 'AGGREGATE',\n  valueType: 'NUMBER',\n  name: 'Paracetamol',\n  shortName: 'Para',\n});",
      "<caption>Update a dataElementGroup</caption>\nupdate('dataElementGroups', 'QrprHT61XFk', {\n  name: 'Data Element Group 1',\n  dataElements: [],\n});",
      "<caption>Update a dataElementGroupSet</caption>\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\n  name: 'Data Element Group Set 4',\n  dataDimension: true,\n  shortName: 'DEGS4',\n  dataElementGroups: [],\n});",
      "<caption>Update a dataValueSet</caption>\nupdate('dataValueSets', 'AsQj6cDsUq4', {\n  dataElement: 'f7n9E0hX8qk',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  value: '12',\n});",
      "<caption>Update a dataValueSet with related dataValues</caption>\nupdate('dataValueSets', 'Ix2HsbDMLea', {\n  dataSet: 'pBOMPrpg1QX',\n  completeDate: '2014-02-03',\n  period: '201401',\n  orgUnit: 'DiszpKrYNg8',\n  dataValues: [\n    {\n      dataElement: 'f7n9E0hX8qk',\n      value: '1',\n    },\n    {\n      dataElement: 'Ix2HsbDMLea',\n      value: '2',\n    },\n    {\n      dataElement: 'eY5ehpbEsB7',\n      value: '3',\n    },\n  ],\n});",
      "<caption>Update an enrollment given the provided ID</caption>\nupdate('enrollments', 'CmsHzercTBa' {\n  trackedEntity: 'bmshzEacgxa',\n  orgUnit: 'TSyzvBiovKh',\n  program: 'gZBxv9Ujxg0',\n  enrollmentDate: '2013-10-17',\n  incidentDate: '2013-10-17',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 406,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the resource returned by DHIS2",
        "type": null
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Upsert a record. This will atomically update a record if it already exists, or otherwise create it.\nThis function does not work with the absolute tracker path `api/tracker` but rather the new tracker paths and deprecated tracker endpoints.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of a resource to `upsert`. E.g. `trackedEntities`.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The data to use for update or create depending on the result of the query.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "description": "An optional object containing query, parseAs,and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Upsert a trackedEntity</caption>\nupsert('trackedEntities', {}, {\n orgUnit: 'TSyzvBiovKh',\n trackedEntityType: 'nEenWmSyUEp',\n attributes: [\n   {\n     attribute: 'w75KJ2mc4zz',\n     value: 'Qassim',\n   },\n ],\n});",
      "<caption> Upsert a dataElement </caption>\nupsert(\n  'dataElements',\n  { filter: 'id:eq:P3jJH5Tu5VC' },\n  {\n    op: 'add',\n    path: '/domainType',\n    name: 'Acute',\n    shortName: 'AFP follow-up',\n    dimensionItemType: 'DATA_ELEMENT',\n    legendSets: [],\n    aggregationType: 'SUM',\n    valueType: 'NUMBER',\n    domainType: 'AGGREGATE',\n    code: 'DE_359049',\n    name: 'Acute Flaccid Paralysis (AFP) follow-up',\n   }\n );"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "exceptions": [
      {
        "type": {
          "names": [
            "RangeError"
          ]
        },
        "description": "- Throws range error"
      }
    ],
    "meta": {
      "lineno": 484,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/dhis2/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DHIS2State"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"divoc","adaptor":"@openfn/language-divoc","version":"0.1.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#certifyvaccination\\\">certifyVaccination(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### certifyVaccination\\n\\n<p><code>certifyVaccination(data) ⇒ Operation</code></p>\\n\\nCertify a vaccination\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>Object</code> | Vaccinationobject |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the DIVOC server (excluding the body) |\\n| references | An array of the previous data object used in the job |\\n**Example:** Certify a vaccination object\\n```js\\ncertifyVaccination({\\n        \\\"preEnrollmentCode\\\": \\\"string\\\",\\n        \\\"recipient\\\": {\\n            \\\"name\\\": \\\"string\\\",\\n            \\\"dob\\\": \\\"2025-03-20\\\",\\n            \\\"age\\\": \\\"string\\\",\\n            \\\"gender\\\": \\\"string\\\",\\n            \\\"nationality\\\": \\\"string\\\",\\n            \\\"identity\\\": \\\"string\\\",\\n            \\\"contact\\\": [\\n                \\\"string\\\"\\n            ],\\n            \\\"address\\\": {\\n                \\\"addressLine1\\\": \\\"string\\\",\\n                \\\"addressLine2\\\": \\\"string\\\",\\n                \\\"district\\\": \\\"string\\\",\\n                \\\"state\\\": \\\"string\\\",\\n                \\\"pincode\\\": 0\\n            }\\n        },\\n        \\\"vaccination\\\": {\\n            \\\"name\\\": \\\"string\\\",\\n            \\\"batch\\\": \\\"string\\\",\\n            \\\"manufacturer\\\": \\\"string\\\",\\n            \\\"date\\\": \\\"2025-03-20T06:08:22.394Z\\\",\\n            \\\"effectiveStart\\\": \\\"2025-03-20\\\",\\n            \\\"effectiveUntil\\\": \\\"2025-03-20\\\",\\n            \\\"dose\\\": 1,\\n            \\\"totalDoses\\\": 2\\n        },\\n        \\\"vaccinator\\\": {\\n            \\\"name\\\": \\\"string\\\"\\n        },\\n        \\\"facility\\\": {\\n            \\\"name\\\": \\\"string\\\",\\n            \\\"address\\\": {\\n                \\\"addressLine1\\\": \\\"string\\\",\\n                \\\"addressLine2\\\": \\\"string\\\",\\n                \\\"district\\\": \\\"string\\\",\\n                \\\"state\\\": \\\"string\\\",\\n                \\\"pincode\\\": 0\\n            }\\n        },\\n        \\\"meta\\\": {}\\n    });\\n  \\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-divoc <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the divoc API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/divoc-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/divoc-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-divoc\\n\\n## 0.1.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.1.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.0 - 24 March 2025\\n\\nDIVOC (Digital Infrastructure for Verifiable Open Credentialing) is an\\nopen-source platform that enables countries to digitally orchestrate large-scale\\nhealth campaigns such as vaccination and certification programs.\\n\\nThis initial release based on API documentation:\\nhttps://divoc.digit.org/v2-2/platform/tech-docs/api-documentation. Needs testing\\nagainst live DIVOC deployment before `v1`.\\n\"","functions":["certifyVaccination"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"The DIVOC server baseUrl","format":"uri","minLength":1,"examples":["https://demo-divoc.egov.org.in"]},"access_token":{"title":"Access token","type":"string","description":"Your DIVOC access token","examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
[
  {
    "id": "certifyVaccination",
    "longname": "certifyVaccination",
    "name": "certifyVaccination",
    "kind": "function",
    "scope": "global",
    "description": "Certify a vaccination",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Vaccinationobject",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Certify a vaccination object</caption>\ncertifyVaccination({\n        \"preEnrollmentCode\": \"string\",\n        \"recipient\": {\n            \"name\": \"string\",\n            \"dob\": \"2025-03-20\",\n            \"age\": \"string\",\n            \"gender\": \"string\",\n            \"nationality\": \"string\",\n            \"identity\": \"string\",\n            \"contact\": [\n                \"string\"\n            ],\n            \"address\": {\n                \"addressLine1\": \"string\",\n                \"addressLine2\": \"string\",\n                \"district\": \"string\",\n                \"state\": \"string\",\n                \"pincode\": 0\n            }\n        },\n        \"vaccination\": {\n            \"name\": \"string\",\n            \"batch\": \"string\",\n            \"manufacturer\": \"string\",\n            \"date\": \"2025-03-20T06:08:22.394Z\",\n            \"effectiveStart\": \"2025-03-20\",\n            \"effectiveUntil\": \"2025-03-20\",\n            \"dose\": 1,\n            \"totalDoses\": 2\n        },\n        \"vaccinator\": {\n            \"name\": \"string\"\n        },\n        \"facility\": {\n            \"name\": \"string\",\n            \"address\": {\n                \"addressLine1\": \"string\",\n                \"addressLine2\": \"string\",\n                \"district\": \"string\",\n                \"state\": \"string\",\n                \"pincode\": 0\n            }\n        },\n        \"meta\": {}\n    });\n  "
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 90,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/divoc/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "DivocHttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "DivocHttpState",
    "longname": "DivocHttpState",
    "name": "DivocHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the DIVOC server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of the previous data object used in the job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 6,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/divoc/src"
    },
    "order": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"dynamics","adaptor":"@openfn/language-dynamics","version":"0.5.16","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Dynamics\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nMicrosoft Dynamics API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/dynamics-configuration-schema/)\\ndefinition.\\n\\n- _Dynamics uses oauth2. The language-package will expect to be given a valid\\n  oauth token. If a valid token is not provided, it will fail. On OpenFn.org,\\n  the `CredentialService` is responsible for making sure the the oauth token is\\n  valid each time it assembles state to hand to `execute`._\\n\\n#### sample createEntity expression\\n\\n```js\\ncreateEntity({\\n  entityName: 'accounts',\\n  body: {\\n    name: 'Open Function',\\n    creditonhold: false,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample query expression\\n\\n_Can be used to retrieve or query a specific Entity if an entityId is declared\\nin the expression. Otherwise it will perform a query on all data with the\\ndefined Entity Name_\\n\\n```js\\nquery({\\n  entityName: 'contacts',\\n  entityId: '51a0e5b9-88df-e311-b8e5-6c3be5a8b200',\\n  query: {\\n    fields: ['fullname', 'birthdate'],\\n    limit: 10,\\n    orderBy: {\\n      field: 'lastname',\\n      direction: 'asc',\\n    },\\n    filter: \\\"firstname eq 'Cat'\\\",\\n  },\\n});\\n```\\n\\n#### sample update expression\\n\\n```js\\nupdateEntity({\\n  entityName: 'accounts',\\n  entityId: 'f4301865-c64a-e711-80f3-e0071b6fd061',\\n  body: {\\n    name: 'wilder 2',\\n    creditonhold: true,\\n    address1_latitude: 47.639583,\\n    description: 'This is the description of the sample account',\\n    revenue: 5000000,\\n    accountcategorycode: 1,\\n  },\\n});\\n```\\n\\n#### sample delete expression\\n\\n```js\\ndeleteEntity({\\n  entityName: 'accounts',\\n  entityId: 'aeef941b-254a-e711-80f1-e0071b685921',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-dynamics\\n\\n## 0.5.16 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.15 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.14 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.13 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.12 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.10 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.9 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.8 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.7 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.6 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.5 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.4 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.3 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.14 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.4.13 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.4.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.4.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.4.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.4.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.4.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.4.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.4.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 0.4.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.4.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.4.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.3.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- b032b9c: Migrate Dynamics\\n\\n### Patch Changes\\n\\n- e81561f: Updated ast and package.json\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"resource":{"title":"Resource","type":"string","description":"Dynamics resource URL","format":"uri","minLength":1,"examples":["https://openfn.crm2.dynamics.com"]},"apiVersion":{"title":"API Version","type":"string","default":"8.2.0","description":"Dynamics API version to use","minLength":1,"examples":["8.2.0"]},"access_token":{"title":"Access Token","type":"string","description":"Dynamics API access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["resource","apiVersion","access_token"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"facebook","adaptor":"@openfn/language-facebook","version":"0.4.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#postmessage\\\">postMessage(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### postMessage\\n\\n<p><code>postMessage(params) ⇒ Operation</code></p>\\n\\nPost a message\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\npostMessage({\\n \\\"recipient\\\": {\\n    \\\"id\\\": \\\"your-psid\\\"\\n  },\\n  \\\"message\\\": {\\n    \\\"text\\\": \\\"your-message\\\"\\n  }\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Facebook\\n\\nLanguage Pack for building expressions and operations to interact with the\\nFacebook Messenger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/facebook-configuration-schema/)\\ndefinition.\\n\\n### postMessage\\n\\n#### sample expression using operation\\n\\n```js\\npostMessage({\\n  recipient: {\\n    id: '<PSID>',\\n  },\\n  message: {\\n    text: '<YOUR MESSAGE GOES HERE>',\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-facebook\\n\\n## 0.4.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.4.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.4.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.4.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.4.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.4.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.4.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.4.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.4.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.3 - 17 May 2024\\n\\n### Patch Changes\\n\\n- d5a326f5: Add example `access_token` in the `configuration-schema`\\n\\n## 0.3.2 - 30 June 2023\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- f7669d2: migrate facebook\\n\"","functions":["postMessage"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Facebook API access token","writeOnly":true,"minLength":1,"examples":["EAAGm0PX4ZCpsBAEHuZBwZBZCDEZDZD7ZC8ZBZBt7MbZA7sVZA"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "postMessage",
    "longname": "postMessage",
    "name": "postMessage",
    "kind": "function",
    "scope": "global",
    "description": "Post a message",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "postMessage({\n \"recipient\": {\n    \"id\": \"your-psid\"\n  },\n  \"message\": {\n    \"text\": \"your-message\"\n  }\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 52,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/facebook/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir-4","adaptor":"@openfn/language-fhir-4","version":"0.1.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addtobundle\\\">addToBundle(resources, [name])</a></dt>\\n<dt>\\n    <a href=\\\"#create\\\">create(resource)</a></dt>\\n<dt>\\n    <a href=\\\"#delete\\\">delete(reference)</a></dt>\\n<dt>\\n    <a href=\\\"#read\\\">read(reference)</a></dt>\\n<dt>\\n    <a href=\\\"#search\\\">search(resourceType, options)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(reference, resource)</a></dt>\\n<dt>\\n    <a href=\\\"#uploadbundle\\\">uploadBundle(bundle)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#builders_account\\\">builders.account(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_activityDefinition\\\">builders.activityDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_administrableProductDefinition\\\">builders.administrableProductDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_adverseEvent\\\">builders.adverseEvent(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_allergyIntolerance\\\">builders.allergyIntolerance(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_appointment\\\">builders.appointment(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_appointmentResponse\\\">builders.appointmentResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_biologicallyDerivedProduct\\\">builders.biologicallyDerivedProduct(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_bodyStructure\\\">builders.bodyStructure(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_carePlan\\\">builders.carePlan(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_careTeam\\\">builders.careTeam(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_chargeItem\\\">builders.chargeItem(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_chargeItemDefinition\\\">builders.chargeItemDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_citation\\\">builders.citation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_claim\\\">builders.claim(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_claimResponse\\\">builders.claimResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_clinicalImpression\\\">builders.clinicalImpression(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_clinicalUseDefinition\\\">builders.clinicalUseDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_communication\\\">builders.communication(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_communicationRequest\\\">builders.communicationRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_contract\\\">builders.contract(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_coverage\\\">builders.coverage(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_coverageEligibilityRequest\\\">builders.coverageEligibilityRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_coverageEligibilityResponse\\\">builders.coverageEligibilityResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_detectedIssue\\\">builders.detectedIssue(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_device\\\">builders.device(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_deviceDefinition\\\">builders.deviceDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_deviceMetric\\\">builders.deviceMetric(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_deviceRequest\\\">builders.deviceRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_deviceUseStatement\\\">builders.deviceUseStatement(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_diagnosticReport\\\">builders.diagnosticReport(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_domainResource\\\">builders.domainResource(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_encounter\\\">builders.encounter(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_enrollmentRequest\\\">builders.enrollmentRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_enrollmentResponse\\\">builders.enrollmentResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_episodeOfCare\\\">builders.episodeOfCare(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_eventDefinition\\\">builders.eventDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_evidence\\\">builders.evidence(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_evidenceReport\\\">builders.evidenceReport(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_evidenceVariable\\\">builders.evidenceVariable(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_explanationOfBenefit\\\">builders.explanationOfBenefit(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_familyMemberHistory\\\">builders.familyMemberHistory(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_flag\\\">builders.flag(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_goal\\\">builders.goal(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_group\\\">builders.group(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_guidanceResponse\\\">builders.guidanceResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_healthcareService\\\">builders.healthcareService(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_imagingStudy\\\">builders.imagingStudy(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_immunization\\\">builders.immunization(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_immunizationEvaluation\\\">builders.immunizationEvaluation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_immunizationRecommendation\\\">builders.immunizationRecommendation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_ingredient\\\">builders.ingredient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_insurancePlan\\\">builders.insurancePlan(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_invoice\\\">builders.invoice(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_library\\\">builders.library(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_list\\\">builders.list(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_location\\\">builders.location(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_manufacturedItemDefinition\\\">builders.manufacturedItemDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_measure\\\">builders.measure(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_measureReport\\\">builders.measureReport(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_media\\\">builders.media(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medication\\\">builders.medication(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationAdministration\\\">builders.medicationAdministration(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationDispense\\\">builders.medicationDispense(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationKnowledge\\\">builders.medicationKnowledge(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationRequest\\\">builders.medicationRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationStatement\\\">builders.medicationStatement(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicinalProductDefinition\\\">builders.medicinalProductDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_molecularSequence\\\">builders.molecularSequence(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_nutritionOrder\\\">builders.nutritionOrder(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_nutritionProduct\\\">builders.nutritionProduct(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observation\\\">builders.observation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observationDefinition\\\">builders.observationDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_organization\\\">builders.organization(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_organizationAffiliation\\\">builders.organizationAffiliation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_packagedProductDefinition\\\">builders.packagedProductDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_patient\\\">builders.patient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_paymentNotice\\\">builders.paymentNotice(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_paymentReconciliation\\\">builders.paymentReconciliation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_person\\\">builders.person(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_planDefinition\\\">builders.planDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitioner\\\">builders.practitioner(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitionerRole\\\">builders.practitionerRole(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_procedure\\\">builders.procedure(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_questionnaire\\\">builders.questionnaire(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_questionnaireResponse\\\">builders.questionnaireResponse(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_regulatedAuthorization\\\">builders.regulatedAuthorization(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_relatedPerson\\\">builders.relatedPerson(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_requestGroup\\\">builders.requestGroup(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_researchDefinition\\\">builders.researchDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_researchElementDefinition\\\">builders.researchElementDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_researchStudy\\\">builders.researchStudy(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_researchSubject\\\">builders.researchSubject(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_riskAssessment\\\">builders.riskAssessment(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_schedule\\\">builders.schedule(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_serviceRequest\\\">builders.serviceRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_slot\\\">builders.slot(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_specimen\\\">builders.specimen(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_specimenDefinition\\\">builders.specimenDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_substance\\\">builders.substance(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_substanceDefinition\\\">builders.substanceDefinition(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_supplyDelivery\\\">builders.supplyDelivery(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_supplyRequest\\\">builders.supplyRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_task\\\">builders.task(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_testReport\\\">builders.testReport(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_verificationResult\\\">builders.verificationResult(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_visionPrescription\\\">builders.visionPrescription(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_addExtension\\\">datatypes.addExtension(resource, url, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_cc\\\">datatypes.cc()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_coding\\\">datatypes.coding(code, system)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_composite\\\">datatypes.composite(object, key, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_concept\\\">datatypes.concept(value, extra)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_ext\\\">datatypes.ext()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_extension\\\">datatypes.extension(url, value, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_findExtension\\\">datatypes.findExtension(obj, targetUrl, [path])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_id\\\">datatypes.id()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_identifier\\\">datatypes.identifier(id, ext, [system])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_ref\\\">datatypes.ref()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_reference\\\">datatypes.reference(ref)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#datatypes_setSystemMap\\\">datatypes.setSystemMap()</a>\\n</dt>\\n</dl>\\n\\n\\n## Functions\\n### addToBundle\\n\\n<p><code>addToBundle(resources, [name]) ⇒</code></p>\\n\\nAdd a resource to a bundle on state, using the `name` as the key (or `bundle` by default).\\nThe resource will be upserted (via PUT).\\nA new bundle will be generated if one does not already exist.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resources | <code>object/array</code> | A resource or array of resources to add to the bundle |\\n| [name] | <code>string</code> | A name (key) for this bundle on state (defaults to `bundle`) |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| bundle | the updated bundle |\\n**Example:** Add a new patient resource to the default bundle\\n```js\\naddToBundle(b.patient($.patientDetails))\\n```\\n\\n* * *\\n\\n### create\\n\\n<p><code>create(resource) ⇒</code></p>\\n\\nCreate a new resource. The resource does not need to include an id.\\nThe created resource will be returned to state.data.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource | <code>object</code> | The resource to create. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the newly created resource. |\\n| response | the HTTP response returned by the server. |\\n**Example:** Create a Patient with a builder function\\n```js\\ncreate(b.patient({\\n  name: { family: \\\"Messi\\\", given: \\\"Lionel\\\", use: \\\"official\\\" },\\n}))\\n```\\n\\n* * *\\n\\n### delete\\n\\n<p><code>delete(reference) ⇒</code></p>\\n\\nDelete a single FHIR resource.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reference | <code>string</code> | The type and ID of the resource to delete, eg, `Patient/123` |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| response | the HTTP response returned by the server. |\\n**Example:** Delete a single Patient resource\\n```js\\ndelete('Patient/12345')\\n```\\n\\n* * *\\n\\n### read\\n\\n<p><code>read(reference) ⇒</code></p>\\n\\nFetch a single FHIR resource.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reference | <code>string</code> | The type and ID of the resource to read, eg, `Patient/123` |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the newly updated resource, as returned by the server |\\n| response | the HTTP response returned by the server. |\\n**Example:** Read a single Patient resource\\n```js\\nread('Patient/12345')\\n```\\n\\n* * *\\n\\n### search\\n\\n<p><code>search(resourceType, options) ⇒</code></p>\\n\\nSearch for matching FHIR resources. Exclude _ from search parameters, and pass query terms on options.query.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of the resource to search for. |\\n| options | <code>object</code> | Parameters, query and filter. |\\n| [options.*] | <code>object</code> | Pass supported query parameters without underscore. See [FHIR Search Summary](https://www.hl7.org/fhir/R4/search.html#Summary). |\\n| [options.query] | <code>object</code> | query terms to search for. These are appended to the query URL veratim.. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the newly updated resource, as returned by the server |\\n| response | the HTTP response returned by the server. |\\n**Example:** Search with parameter and query term\\n```js\\nsearch('Patient', {\\n  lastUpdated: $.cursor,\\n  count: 10,\\n  query: { given: 'messi' },\\n})\\n```\\n**Example:** Search for patients with a given name containing \\\"eve\\\"\\n```js\\nsearch('Patient', {\\n  query: { 'given:contains': 'eve' },\\n})\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(reference, resource) ⇒</code></p>\\n\\nUpdate a resource. If the resource does not already exist, it will be created and `state.response.statusCode` will be 201.\\nOtherwise, the existing resource will be replaced.\\nTo partially update a resource, use `patch()`.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reference | <code>string</code> | The type and ID of the resource to update, eg, `Patient/123` |\\n| resource | <code>object</code> | The new version of this resource. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the newly updated resource, as returned by the server |\\n| response | the HTTP response returned by the server. |\\n**Example:** Update a Patient with a builder function\\n```js\\nupdate('Patient/123', b.patient({\\n  id: 'Patient/123',\\n  name: { family: \\\"Messi\\\", given: \\\"Lionel\\\", use: \\\"official\\\" },\\n}))\\n```\\n\\n* * *\\n\\n### uploadBundle\\n\\n<p><code>uploadBundle(bundle) ⇒</code></p>\\n\\nUpload a bundle from state (created by addToBundle) as a transaction.\\n\\n**Returns**: Operation  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| bundle | <code>string/object</code> | A bundle object or name of a bundle on state |\\n\\n**Example:** Upload the default bundle\\n```js\\nuploadBundle()\\n```\\n**Example:** Create and a bundle with a custom name\\n```js\\naddToBundle($.patients, 'patientsBundle')\\nuploadBundle('patientsBundle')\\n```\\n**Example:** Upload a bundle from state\\n```js\\nuploadBundle($.patientsBundle)\\n```\\n\\n* * *\\n\\n\\n## builders\\n\\nThese functions belong to the builders namespace.\\n### builders.account {#builders_account}\\n\\n<p><code>account(type, props)</code></p>\\n\\nCreate a FHIR Account resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Account number |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error | on-hold | unknown |\\n| [props.type] | <code>CodeableConcept</code> | E.g. patient, expense, depreciation |\\n| [props.name] | <code>string</code> | Human-readable label |\\n| [props.subject] | <code>Reference</code> | The entity that caused the expenses |\\n| [props.servicePeriod] | <code>Period</code> | Transaction window |\\n| [props.coverage] | <code>BackboneElement</code> | The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account |\\n| [props.owner] | <code>Reference</code> | Entity managing the Account |\\n| [props.description] | <code>string</code> | Explanation of purpose/use |\\n| [props.guarantor] | <code>BackboneElement</code> | The parties ultimately responsible for balancing the Account |\\n| [props.partOf] | <code>Reference</code> | Reference to a parent Account |\\n\\n\\n* * *\\n\\n\\n### builders.activityDefinition {#builders_activityDefinition}\\n\\n<p><code>activityDefinition(type, props)</code></p>\\n\\nCreate a FHIR ActivityDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this activity definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the activity definition |\\n| [props.version] | <code>string</code> | Business version of the activity definition |\\n| [props.name] | <code>string</code> | Name for this activity definition (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this activity definition (human friendly) |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the activity definition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> \\\\| <code>canonical</code> | Type of individual the activity definition is intended for |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the activity definition |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for activity definition (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this activity definition is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the activity definition |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the activity definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the activity definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the activity definition is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | E.g. Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.library] | <code>canonical</code> | Logic used by the activity definition |\\n| [props.kind] | <code>string</code> | Kind of resource |\\n| [props.profile] | <code>canonical</code> | What profile the resource needs to conform to |\\n| [props.code] | <code>CodeableConcept</code> | Detail type of activity |\\n| [props.intent] | <code>string</code> | proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.doNotPerform] | <code>boolean</code> | True if the activity should not be performed |\\n| [props.timing] | <code>Timing</code> \\\\| <code>dateTime</code> \\\\| <code>Age</code> \\\\| <code>Period</code> \\\\| <code>Range</code> \\\\| <code>Duration</code> | When activity is to occur |\\n| [props.location] | <code>Reference</code> | Where it should happen |\\n| [props.participant] | <code>BackboneElement</code> | Who should participate in the action |\\n| [props.product] | <code>Reference</code> \\\\| <code>CodeableConcept</code> | What's administered/supplied |\\n| [props.quantity] | <code>Quantity</code> | How much is administered/consumed/supplied |\\n| [props.dosage] | <code>Dosage</code> | Detailed dosage instructions |\\n| [props.bodySite] | <code>CodeableConcept</code> | What part of body to perform on |\\n| [props.specimenRequirement] | <code>Reference</code> | What specimens are required to perform this action |\\n| [props.observationRequirement] | <code>Reference</code> | What observations are required to perform this action |\\n| [props.observationResultRequirement] | <code>Reference</code> | What observations must be produced by this action |\\n| [props.transform] | <code>canonical</code> | Transform to apply the template |\\n| [props.dynamicValue] | <code>BackboneElement</code> | Dynamic aspects of the definition |\\n\\n\\n* * *\\n\\n\\n### builders.administrableProductDefinition {#builders_administrableProductDefinition}\\n\\n<p><code>administrableProductDefinition(type, props)</code></p>\\n\\nCreate a FHIR AdministrableProductDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | An identifier for the administrable product |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.formOf] | <code>Reference</code> | References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product |\\n| [props.administrableDoseForm] | <code>CodeableConcept</code> | The dose form of the final product after necessary reconstitution or processing |\\n| [props.unitOfPresentation] | <code>CodeableConcept</code> | The presentation type in which this item is given to a patient. e.g. for a spray - 'puff' |\\n| [props.producedFrom] | <code>Reference</code> | Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form |\\n| [props.ingredient] | <code>CodeableConcept</code> | The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton, or using by incoming references from the Ingredient resource |\\n| [props.device] | <code>Reference</code> | A device that is integral to the medicinal product, in effect being considered as an \\\"ingredient\\\" of the medicinal product |\\n| [props.property] | <code>BackboneElement</code> | Characteristics e.g. a product's onset of action |\\n| [props.routeOfAdministration] | <code>BackboneElement</code> | The path by which the product is taken into or makes contact with the body |\\n\\n\\n* * *\\n\\n\\n### builders.adverseEvent {#builders_adverseEvent}\\n\\n<p><code>adverseEvent(type, props)</code></p>\\n\\nCreate a FHIR AdverseEvent resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for the event |\\n| [props.actuality] | <code>string</code> | actual | potential |\\n| [props.category] | <code>CodeableConcept</code> | product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment |\\n| [props.event] | <code>CodeableConcept</code> | Type of the event itself in relation to the subject |\\n| [props.subject] | <code>Reference</code> | Subject impacted by event |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.date] | <code>dateTime</code> | When the event occurred |\\n| [props.detected] | <code>dateTime</code> | When the event was detected |\\n| [props.recordedDate] | <code>dateTime</code> | When the event was recorded |\\n| [props.resultingCondition] | <code>Reference</code> | Effect on the subject due to this event |\\n| [props.location] | <code>Reference</code> | Location where adverse event occurred |\\n| [props.seriousness] | <code>CodeableConcept</code> | Seriousness of the event |\\n| [props.severity] | <code>CodeableConcept</code> | mild | moderate | severe |\\n| [props.outcome] | <code>CodeableConcept</code> | resolved | recovering | ongoing | resolvedWithSequelae | fatal | unknown |\\n| [props.recorder] | <code>Reference</code> | Who recorded the adverse event |\\n| [props.contributor] | <code>Reference</code> | Who  was involved in the adverse event or the potential adverse event |\\n| [props.suspectEntity] | <code>BackboneElement</code> | The suspected agent causing the adverse event |\\n| [props.subjectMedicalHistory] | <code>Reference</code> | AdverseEvent.subjectMedicalHistory |\\n| [props.referenceDocument] | <code>Reference</code> | AdverseEvent.referenceDocument |\\n| [props.study] | <code>Reference</code> | AdverseEvent.study |\\n\\n\\n* * *\\n\\n\\n### builders.allergyIntolerance {#builders_allergyIntolerance}\\n\\n<p><code>allergyIntolerance(type, props)</code></p>\\n\\nCreate a FHIR AllergyIntolerance resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External ids for this item |\\n| [props.clinicalStatus] | <code>CodeableConcept</code> | active | inactive | resolved |\\n| [props.verificationStatus] | <code>CodeableConcept</code> | unconfirmed | confirmed | refuted | entered-in-error |\\n| [props.type] | <code>string</code> | allergy | intolerance - Underlying mechanism (if known) |\\n| [props.category] | <code>string</code> | food | medication | environment | biologic |\\n| [props.criticality] | <code>string</code> | low | high | unable-to-assess |\\n| [props.code] | <code>CodeableConcept</code> | Code that identifies the allergy or intolerance |\\n| [props.patient] | <code>Reference</code> | Who the sensitivity is for |\\n| [props.encounter] | <code>Reference</code> | Encounter when the allergy or intolerance was asserted |\\n| [props.onset] | <code>dateTime</code> \\\\| <code>Age</code> \\\\| <code>Period</code> \\\\| <code>Range</code> \\\\| <code>string</code> | When allergy or intolerance was identified |\\n| [props.recordedDate] | <code>dateTime</code> | Date first version of the resource instance was recorded |\\n| [props.recorder] | <code>Reference</code> | Who recorded the sensitivity |\\n| [props.asserter] | <code>Reference</code> | Source of the information about the allergy |\\n| [props.lastOccurrence] | <code>dateTime</code> | Date(/time) of last known occurrence of a reaction |\\n| [props.note] | <code>Annotation</code> | Additional text not captured in other fields |\\n| [props.reaction] | <code>BackboneElement</code> | Adverse Reaction Events linked to exposure to substance |\\n\\n\\n* * *\\n\\n\\n### builders.appointment {#builders_appointment}\\n\\n<p><code>appointment(type, props)</code></p>\\n\\nCreate a FHIR Appointment resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this item |\\n| [props.status] | <code>string</code> | proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist |\\n| [props.cancelationReason] | <code>CodeableConcept</code> | The coded reason for the appointment being cancelled |\\n| [props.serviceCategory] | <code>CodeableConcept</code> | A broad categorization of the service that is to be performed during this appointment |\\n| [props.serviceType] | <code>CodeableConcept</code> | The specific service that is to be performed during this appointment |\\n| [props.specialty] | <code>CodeableConcept</code> | The specialty of a practitioner that would be required to perform the service requested in this appointment |\\n| [props.appointmentType] | <code>CodeableConcept</code> | The style of appointment or patient that has been booked in the slot (not service type) |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Coded reason this appointment is scheduled |\\n| [props.reasonReference] | <code>Reference</code> | Reason the appointment is to take place (resource) |\\n| [props.priority] | <code>unsignedInt</code> | Used to make informed decisions if needing to re-prioritize |\\n| [props.description] | <code>string</code> | Shown on a subject line in a meeting request, or appointment list |\\n| [props.supportingInformation] | <code>Reference</code> | Additional information to support the appointment |\\n| [props.start] | <code>instant</code> | When appointment is to take place |\\n| [props.end] | <code>instant</code> | When appointment is to conclude |\\n| [props.minutesDuration] | <code>number</code> | Can be less than start/end (e.g. estimate) |\\n| [props.slot] | <code>Reference</code> | The slots that this appointment is filling |\\n| [props.created] | <code>dateTime</code> | The date that this appointment was initially created |\\n| [props.comment] | <code>string</code> | Additional comments |\\n| [props.patientInstruction] | <code>string</code> | Detailed information and instructions for the patient |\\n| [props.basedOn] | <code>Reference</code> | The service request this appointment is allocated to assess |\\n| [props.participant] | <code>BackboneElement</code> | Participants involved in appointment |\\n| [props.requestedPeriod] | <code>Period</code> | Potential date/time interval(s) requested to allocate the appointment within |\\n\\n\\n* * *\\n\\n\\n### builders.appointmentResponse {#builders_appointmentResponse}\\n\\n<p><code>appointmentResponse(type, props)</code></p>\\n\\nCreate a FHIR AppointmentResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this item |\\n| [props.appointment] | <code>Reference</code> | Appointment this response relates to |\\n| [props.start] | <code>instant</code> | Time from appointment, or requested new start time |\\n| [props.end] | <code>instant</code> | Time from appointment, or requested new end time |\\n| [props.participantType] | <code>CodeableConcept</code> | Role of participant in the appointment |\\n| [props.actor] | <code>Reference</code> | Person, Location, HealthcareService, or Device |\\n| [props.participantStatus] | <code>string</code> | accepted | declined | tentative | needs-action |\\n| [props.comment] | <code>string</code> | Additional comments |\\n\\n\\n* * *\\n\\n\\n### builders.biologicallyDerivedProduct {#builders_biologicallyDerivedProduct}\\n\\n<p><code>biologicallyDerivedProduct(type, props)</code></p>\\n\\nCreate a FHIR BiologicallyDerivedProduct resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External ids for this item |\\n| [props.productCategory] | <code>string</code> | organ | tissue | fluid | cells | biologicalAgent |\\n| [props.productCode] | <code>CodeableConcept</code> | What this biologically derived product is |\\n| [props.status] | <code>string</code> | available | unavailable |\\n| [props.request] | <code>Reference</code> | Procedure request |\\n| [props.quantity] | <code>integer</code> | The amount of this biologically derived product |\\n| [props.parent] | <code>Reference</code> | BiologicallyDerivedProduct parent |\\n| [props.collection] | <code>BackboneElement</code> | How this product was collected |\\n| [props.processing] | <code>BackboneElement</code> | Any processing of the product during collection |\\n| [props.manipulation] | <code>BackboneElement</code> | Any manipulation of product post-collection |\\n| [props.storage] | <code>BackboneElement</code> | Product storage |\\n\\n\\n* * *\\n\\n\\n### builders.bodyStructure {#builders_bodyStructure}\\n\\n<p><code>bodyStructure(type, props)</code></p>\\n\\nCreate a FHIR BodyStructure resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Bodystructure identifier |\\n| [props.active] | <code>boolean</code> | Whether this record is in active use |\\n| [props.morphology] | <code>CodeableConcept</code> | Kind of Structure |\\n| [props.location] | <code>CodeableConcept</code> | Body site |\\n| [props.locationQualifier] | <code>CodeableConcept</code> | Body site modifier |\\n| [props.description] | <code>string</code> | Text description |\\n| [props.image] | <code>Attachment</code> | Attached images |\\n| [props.patient] | <code>Reference</code> | Who this is about |\\n\\n\\n* * *\\n\\n\\n### builders.carePlan {#builders_carePlan}\\n\\n<p><code>carePlan(type, props)</code></p>\\n\\nCreate a FHIR CarePlan resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this plan |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | Fulfills CarePlan |\\n| [props.replaces] | <code>Reference</code> | CarePlan replaced by this CarePlan |\\n| [props.partOf] | <code>Reference</code> | Part of referenced CarePlan |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.intent] | <code>string</code> | proposal | plan | order | option |\\n| [props.category] | <code>CodeableConcept</code> | Type of plan |\\n| [props.title] | <code>string</code> | Human-friendly name for the care plan |\\n| [props.description] | <code>string</code> | Summary of nature of plan |\\n| [props.subject] | <code>Reference</code> | Who the care plan is for |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.period] | <code>Period</code> | Time period plan covers |\\n| [props.created] | <code>dateTime</code> | Date record was first recorded |\\n| [props.author] | <code>Reference</code> | Who is the designated responsible party |\\n| [props.contributor] | <code>Reference</code> | Who provided the content of the care plan |\\n| [props.careTeam] | <code>Reference</code> | Who's involved in plan? |\\n| [props.addresses] | <code>Reference</code> | Health issues this plan addresses |\\n| [props.supportingInfo] | <code>Reference</code> | Information considered as part of plan |\\n| [props.goal] | <code>Reference</code> | Desired outcome of plan |\\n| [props.activity] | <code>BackboneElement</code> | Action to occur as part of plan |\\n| [props.note] | <code>Annotation</code> | Comments about the plan |\\n\\n\\n* * *\\n\\n\\n### builders.careTeam {#builders_careTeam}\\n\\n<p><code>careTeam(type, props)</code></p>\\n\\nCreate a FHIR CareTeam resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this team |\\n| [props.status] | <code>string</code> | proposed | active | suspended | inactive | entered-in-error |\\n| [props.category] | <code>CodeableConcept</code> | Type of team |\\n| [props.name] | <code>string</code> | Name of the team, such as crisis assessment team |\\n| [props.subject] | <code>Reference</code> | Who care team is for |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.period] | <code>Period</code> | Time period team covers |\\n| [props.participant] | <code>BackboneElement</code> | Members of the team |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why the care team exists |\\n| [props.reasonReference] | <code>Reference</code> | Why the care team exists |\\n| [props.managingOrganization] | <code>Reference</code> | Organization responsible for the care team |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the care team (that applies to all members) |\\n| [props.note] | <code>Annotation</code> | Comments made about the CareTeam |\\n\\n\\n* * *\\n\\n\\n### builders.chargeItem {#builders_chargeItem}\\n\\n<p><code>chargeItem(type, props)</code></p>\\n\\nCreate a FHIR ChargeItem resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for item |\\n| [props.definitionUri] | <code>string</code> | Defining information about the code of this charge item |\\n| [props.definitionCanonical] | <code>canonical</code> | Resource defining the code of this ChargeItem |\\n| [props.status] | <code>string</code> | planned | billable | not-billable | aborted | billed | entered-in-error | unknown |\\n| [props.partOf] | <code>Reference</code> | Part of referenced ChargeItem |\\n| [props.code] | <code>CodeableConcept</code> | A code that identifies the charge, like a billing code |\\n| [props.subject] | <code>Reference</code> | Individual service was done for/to |\\n| [props.context] | <code>Reference</code> | Encounter / Episode associated with event |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> | When the charged service was applied |\\n| [props.performer] | <code>BackboneElement</code> | Who performed charged service |\\n| [props.performingOrganization] | <code>Reference</code> | Organization providing the charged service |\\n| [props.requestingOrganization] | <code>Reference</code> | Organization requesting the charged service |\\n| [props.costCenter] | <code>Reference</code> | Organization that has ownership of the (potential, future) revenue |\\n| [props.quantity] | <code>Quantity</code> | Quantity of which the charge item has been serviced |\\n| [props.bodysite] | <code>CodeableConcept</code> | Anatomical location, if relevant |\\n| [props.factorOverride] | <code>decimal</code> | Factor overriding the associated rules |\\n| [props.priceOverride] | <code>Money</code> | Price overriding the associated rules |\\n| [props.overrideReason] | <code>string</code> | Reason for overriding the list price/factor |\\n| [props.enterer] | <code>Reference</code> | Individual who was entering |\\n| [props.enteredDate] | <code>dateTime</code> | Date the charge item was entered |\\n| [props.reason] | <code>CodeableConcept</code> | Why was the charged  service rendered? |\\n| [props.service] | <code>Reference</code> | Which rendered service is being charged? |\\n| [props.product] | <code>Reference</code> \\\\| <code>CodeableConcept</code> | Product charged |\\n| [props.account] | <code>Reference</code> | Account to place this charge |\\n| [props.note] | <code>Annotation</code> | Comments made about the ChargeItem |\\n| [props.supportingInformation] | <code>Reference</code> | Further information supporting this charge |\\n\\n\\n* * *\\n\\n\\n### builders.chargeItemDefinition {#builders_chargeItemDefinition}\\n\\n<p><code>chargeItemDefinition(type, props)</code></p>\\n\\nCreate a FHIR ChargeItemDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this charge item definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the charge item definition |\\n| [props.version] | <code>string</code> | Business version of the charge item definition |\\n| [props.title] | <code>string</code> | Name for this charge item definition (human friendly) |\\n| [props.derivedFromUri] | <code>string</code> | Underlying externally-defined charge item definition |\\n| [props.partOf] | <code>canonical</code> | A larger definition of which this particular definition is a component or step |\\n| [props.replaces] | <code>canonical</code> | Completed or terminated request(s) whose function is taken by this new request |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the charge item definition |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for charge item definition (if applicable) |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the charge item definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the charge item definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the charge item definition is expected to be used |\\n| [props.code] | <code>CodeableConcept</code> | Billing codes or product types this definition applies to |\\n| [props.instance] | <code>Reference</code> | Instances this definition applies to |\\n| [props.applicability] | <code>BackboneElement</code> | Whether or not the billing code is applicable |\\n| [props.propertyGroup] | <code>BackboneElement</code> | Group of properties which are applicable under the same conditions |\\n\\n\\n* * *\\n\\n\\n### builders.citation {#builders_citation}\\n\\n<p><code>citation(type, props)</code></p>\\n\\nCreate a FHIR Citation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this citation, represented as a globally unique URI |\\n| [props.identifier] | <code>Identifier</code> | Identifier for the Citation resource itself |\\n| [props.version] | <code>string</code> | Business version of the citation |\\n| [props.name] | <code>string</code> | Name for this citation (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this citation (human friendly) |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | The publisher of the Citation, not the publisher of the article or artifact being cited |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher of the Citation Resource |\\n| [props.description] | <code>markdown</code> | Natural language description of the citation |\\n| [props.useContext] | <code>UsageContext</code> | The context that the Citation Resource content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for citation (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this citation is defined |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions for the Citation, not for the cited artifact |\\n| [props.approvalDate] | <code>date</code> | When the citation was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the citation was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the citation is expected to be used |\\n| [props.author] | <code>ContactDetail</code> | Who authored the Citation |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the Citation |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the Citation |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the Citation |\\n| [props.summary] | <code>BackboneElement</code> | A human-readable display of the citation |\\n| [props.classification] | <code>BackboneElement</code> | The assignment to an organizing scheme |\\n| [props.note] | <code>Annotation</code> | Used for general notes and annotations not coded elsewhere |\\n| [props.currentState] | <code>CodeableConcept</code> | The status of the citation |\\n| [props.statusDate] | <code>BackboneElement</code> | An effective date or period for a status of the citation |\\n| [props.relatesTo] | <code>BackboneElement</code> | Artifact related to the Citation Resource |\\n| [props.citedArtifact] | <code>BackboneElement</code> | The article or artifact being described |\\n\\n\\n* * *\\n\\n\\n### builders.claim {#builders_claim}\\n\\n<p><code>claim(type, props)</code></p>\\n\\nCreate a FHIR Claim resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for claim |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.type] | <code>CodeableConcept</code> | Category or discipline |\\n| [props.subType] | <code>CodeableConcept</code> | More granular claim type |\\n| [props.use] | <code>string</code> | claim | preauthorization | predetermination |\\n| [props.patient] | <code>Reference</code> | The recipient of the products and services |\\n| [props.billablePeriod] | <code>Period</code> | Relevant time frame for the claim |\\n| [props.created] | <code>dateTime</code> | Resource creation date |\\n| [props.enterer] | <code>Reference</code> | Author of the claim |\\n| [props.insurer] | <code>Reference</code> | Target |\\n| [props.provider] | <code>Reference</code> | Party responsible for the claim |\\n| [props.priority] | <code>CodeableConcept</code> | Desired processing ugency |\\n| [props.fundsReserve] | <code>CodeableConcept</code> | For whom to reserve funds |\\n| [props.related] | <code>BackboneElement</code> | Prior or corollary claims |\\n| [props.prescription] | <code>Reference</code> | Prescription authorizing services and products |\\n| [props.originalPrescription] | <code>Reference</code> | Original prescription if superseded by fulfiller |\\n| [props.payee] | <code>BackboneElement</code> | Recipient of benefits payable |\\n| [props.referral] | <code>Reference</code> | Treatment referral |\\n| [props.facility] | <code>Reference</code> | Servicing facility |\\n| [props.careTeam] | <code>BackboneElement</code> | Members of the care team |\\n| [props.supportingInfo] | <code>BackboneElement</code> | Supporting information |\\n| [props.diagnosis] | <code>BackboneElement</code> | Pertinent diagnosis information |\\n| [props.procedure] | <code>BackboneElement</code> | Clinical procedures performed |\\n| [props.insurance] | <code>BackboneElement</code> | Patient insurance information |\\n| [props.accident] | <code>BackboneElement</code> | Details of the event |\\n| [props.item] | <code>BackboneElement</code> | Product or service provided |\\n| [props.total] | <code>Money</code> | Total claim cost |\\n\\n\\n* * *\\n\\n\\n### builders.claimResponse {#builders_claimResponse}\\n\\n<p><code>claimResponse(type, props)</code></p>\\n\\nCreate a FHIR ClaimResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for a claim response |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.type] | <code>CodeableConcept</code> | More granular claim type |\\n| [props.subType] | <code>CodeableConcept</code> | More granular claim type |\\n| [props.use] | <code>string</code> | claim | preauthorization | predetermination |\\n| [props.patient] | <code>Reference</code> | The recipient of the products and services |\\n| [props.created] | <code>dateTime</code> | Response creation date |\\n| [props.insurer] | <code>Reference</code> | Party responsible for reimbursement |\\n| [props.requestor] | <code>Reference</code> | Party responsible for the claim |\\n| [props.request] | <code>Reference</code> | Id of resource triggering adjudication |\\n| [props.outcome] | <code>string</code> | queued | complete | error | partial |\\n| [props.disposition] | <code>string</code> | Disposition Message |\\n| [props.preAuthRef] | <code>string</code> | Preauthorization reference |\\n| [props.preAuthPeriod] | <code>Period</code> | Preauthorization reference effective period |\\n| [props.payeeType] | <code>CodeableConcept</code> | Party to be paid any benefits payable |\\n| [props.item] | <code>BackboneElement</code> | Adjudication for claim line items |\\n| [props.addItem] | <code>BackboneElement</code> | Insurer added line items |\\n| [props.adjudication] | <code>any</code> | Header-level adjudication |\\n| [props.total] | <code>BackboneElement</code> | Adjudication totals |\\n| [props.payment] | <code>BackboneElement</code> | Payment Details |\\n| [props.fundsReserve] | <code>CodeableConcept</code> | Funds reserved status |\\n| [props.formCode] | <code>CodeableConcept</code> | Printed form identifier |\\n| [props.form] | <code>Attachment</code> | Printed reference or actual form |\\n| [props.processNote] | <code>BackboneElement</code> | Note concerning adjudication |\\n| [props.communicationRequest] | <code>Reference</code> | Request for additional information |\\n| [props.insurance] | <code>BackboneElement</code> | Patient insurance information |\\n| [props.error] | <code>BackboneElement</code> | Processing errors |\\n\\n\\n* * *\\n\\n\\n### builders.clinicalImpression {#builders_clinicalImpression}\\n\\n<p><code>clinicalImpression(type, props)</code></p>\\n\\nCreate a FHIR ClinicalImpression resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.status] | <code>string</code> | in-progress | completed | entered-in-error |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.code] | <code>CodeableConcept</code> | Kind of assessment performed |\\n| [props.description] | <code>string</code> | Why/how the assessment was performed |\\n| [props.subject] | <code>Reference</code> | Patient or group assessed |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.effective] | <code>dateTime</code> \\\\| <code>Period</code> | Time of assessment |\\n| [props.date] | <code>dateTime</code> | When the assessment was documented |\\n| [props.assessor] | <code>Reference</code> | The clinician performing the assessment |\\n| [props.previous] | <code>Reference</code> | Reference to last assessment |\\n| [props.problem] | <code>Reference</code> | Relevant impressions of patient state |\\n| [props.investigation] | <code>BackboneElement</code> | One or more sets of investigations (signs, symptoms, etc.) |\\n| [props.protocol] | <code>string</code> | Clinical Protocol followed |\\n| [props.summary] | <code>string</code> | Summary of the assessment |\\n| [props.finding] | <code>BackboneElement</code> | Possible or likely findings and diagnoses |\\n| [props.prognosisCodeableConcept] | <code>CodeableConcept</code> | Estimate of likely outcome |\\n| [props.prognosisReference] | <code>Reference</code> | RiskAssessment expressing likely outcome |\\n| [props.supportingInfo] | <code>Reference</code> | Information supporting the clinical impression |\\n| [props.note] | <code>Annotation</code> | Comments made about the ClinicalImpression |\\n\\n\\n* * *\\n\\n\\n### builders.clinicalUseDefinition {#builders_clinicalUseDefinition}\\n\\n<p><code>clinicalUseDefinition(type, props)</code></p>\\n\\nCreate a FHIR ClinicalUseDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for this issue |\\n| [props.type] | <code>string</code> | indication | contraindication | interaction | undesirable-effect | warning |\\n| [props.category] | <code>CodeableConcept</code> | A categorisation of the issue, primarily for dividing warnings into subject heading areas such as \\\"Pregnancy\\\", \\\"Overdose\\\" |\\n| [props.subject] | <code>Reference</code> | The medication or procedure for which this is an indication |\\n| [props.status] | <code>CodeableConcept</code> | Whether this is a current issue or one that has been retired etc |\\n| [props.contraindication] | <code>BackboneElement</code> | Specifics for when this is a contraindication |\\n| [props.indication] | <code>BackboneElement</code> | Specifics for when this is an indication |\\n| [props.interaction] | <code>BackboneElement</code> | Specifics for when this is an interaction |\\n| [props.population] | <code>Reference</code> | The population group to which this applies |\\n| [props.undesirableEffect] | <code>BackboneElement</code> | A possible negative outcome from the use of this treatment |\\n| [props.warning] | <code>BackboneElement</code> | Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness' |\\n\\n\\n* * *\\n\\n\\n### builders.communication {#builders_communication}\\n\\n<p><code>communication(type, props)</code></p>\\n\\nCreate a FHIR Communication resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | Request fulfilled by this communication |\\n| [props.partOf] | <code>Reference</code> | Part of this action |\\n| [props.inResponseTo] | <code>Reference</code> | Reply to |\\n| [props.status] | <code>string</code> | preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.category] | <code>CodeableConcept</code> | Message category |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.medium] | <code>CodeableConcept</code> | A channel of communication |\\n| [props.subject] | <code>Reference</code> | Focus of message |\\n| [props.topic] | <code>CodeableConcept</code> | Description of the purpose/content |\\n| [props.about] | <code>Reference</code> | Resources that pertain to this communication |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.sent] | <code>dateTime</code> | When sent |\\n| [props.received] | <code>dateTime</code> | When received |\\n| [props.recipient] | <code>Reference</code> | Message recipient |\\n| [props.sender] | <code>Reference</code> | Message sender |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Indication for message |\\n| [props.reasonReference] | <code>Reference</code> | Why was communication done? |\\n| [props.payload] | <code>BackboneElement</code> | Message payload |\\n| [props.note] | <code>Annotation</code> | Comments made about the communication |\\n\\n\\n* * *\\n\\n\\n### builders.communicationRequest {#builders_communicationRequest}\\n\\n<p><code>communicationRequest(type, props)</code></p>\\n\\nCreate a FHIR CommunicationRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier |\\n| [props.basedOn] | <code>Reference</code> | Fulfills plan or proposal |\\n| [props.replaces] | <code>Reference</code> | Request(s) replaced by this request |\\n| [props.groupIdentifier] | <code>Identifier</code> | Composite request this is part of |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.category] | <code>CodeableConcept</code> | Message category |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.doNotPerform] | <code>boolean</code> | True if request is prohibiting action |\\n| [props.medium] | <code>CodeableConcept</code> | A channel of communication |\\n| [props.subject] | <code>Reference</code> | Focus of message |\\n| [props.about] | <code>Reference</code> | Resources that pertain to this communication request |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.payload] | <code>BackboneElement</code> | Message payload |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> | When scheduled |\\n| [props.authoredOn] | <code>dateTime</code> | When request transitioned to being actionable |\\n| [props.requester] | <code>Reference</code> | Who/what is requesting service |\\n| [props.recipient] | <code>Reference</code> | Message recipient |\\n| [props.sender] | <code>Reference</code> | Message sender |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why is communication needed? |\\n| [props.reasonReference] | <code>Reference</code> | Why is communication needed? |\\n| [props.note] | <code>Annotation</code> | Comments made about communication request |\\n\\n\\n* * *\\n\\n\\n### builders.contract {#builders_contract}\\n\\n<p><code>contract(type, props)</code></p>\\n\\nCreate a FHIR Contract resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Contract number |\\n| [props.url] | <code>string</code> | Basal definition |\\n| [props.version] | <code>string</code> | Business edition |\\n| [props.status] | <code>string</code> | amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated |\\n| [props.legalState] | <code>CodeableConcept</code> | Negotiation status |\\n| [props.instantiatesCanonical] | <code>Reference</code> | Source Contract Definition |\\n| [props.instantiatesUri] | <code>string</code> | External Contract Definition |\\n| [props.contentDerivative] | <code>CodeableConcept</code> | Content derived from the basal information |\\n| [props.issued] | <code>dateTime</code> | When this Contract was issued |\\n| [props.applies] | <code>Period</code> | Effective time |\\n| [props.expirationType] | <code>CodeableConcept</code> | Contract cessation cause |\\n| [props.subject] | <code>Reference</code> | Contract Target Entity |\\n| [props.authority] | <code>Reference</code> | Authority under which this Contract has standing |\\n| [props.domain] | <code>Reference</code> | A sphere of control governed by an authoritative jurisdiction, organization, or person |\\n| [props.site] | <code>Reference</code> | Specific Location |\\n| [props.name] | <code>string</code> | Computer friendly designation |\\n| [props.title] | <code>string</code> | Human Friendly name |\\n| [props.subtitle] | <code>string</code> | Subordinate Friendly name |\\n| [props.alias] | <code>string</code> | Acronym or short name |\\n| [props.author] | <code>Reference</code> | Source of Contract |\\n| [props.scope] | <code>CodeableConcept</code> | Range of Legal Concerns |\\n| [props.topic] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Focus of contract interest |\\n| [props.type] | <code>CodeableConcept</code> | Legal instrument category |\\n| [props.subType] | <code>CodeableConcept</code> | Subtype within the context of type |\\n| [props.contentDefinition] | <code>BackboneElement</code> | Contract precursor content |\\n| [props.term] | <code>BackboneElement</code> | Contract Term List |\\n| [props.supportingInfo] | <code>Reference</code> | Extra Information |\\n| [props.relevantHistory] | <code>Reference</code> | Key event in Contract History |\\n| [props.signer] | <code>BackboneElement</code> | Contract Signatory |\\n| [props.friendly] | <code>BackboneElement</code> | Contract Friendly Language |\\n| [props.legal] | <code>BackboneElement</code> | Contract Legal Language |\\n| [props.rule] | <code>BackboneElement</code> | Computable Contract Language |\\n| [props.legallyBinding] | <code>Attachment</code> \\\\| <code>Reference</code> | Binding Contract |\\n\\n\\n* * *\\n\\n\\n### builders.coverage {#builders_coverage}\\n\\n<p><code>coverage(type, props)</code></p>\\n\\nCreate a FHIR Coverage resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for the coverage |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.type] | <code>CodeableConcept</code> | Coverage category such as medical or accident |\\n| [props.policyHolder] | <code>Reference</code> | Owner of the policy |\\n| [props.subscriber] | <code>Reference</code> | Subscriber to the policy |\\n| [props.subscriberId] | <code>string</code> | ID assigned to the subscriber |\\n| [props.beneficiary] | <code>Reference</code> | Plan beneficiary |\\n| [props.dependent] | <code>string</code> | Dependent number |\\n| [props.relationship] | <code>CodeableConcept</code> | Beneficiary relationship to the subscriber |\\n| [props.period] | <code>Period</code> | Coverage start and end dates |\\n| [props.payor] | <code>Reference</code> | Issuer of the policy |\\n| [props.class] | <code>BackboneElement</code> | Additional coverage classifications |\\n| [props.order] | <code>number</code> | Relative order of the coverage |\\n| [props.network] | <code>string</code> | Insurer network |\\n| [props.costToBeneficiary] | <code>BackboneElement</code> | Patient payments for services/products |\\n| [props.subrogation] | <code>boolean</code> | Reimbursement to insurer |\\n| [props.contract] | <code>Reference</code> | Contract details |\\n\\n\\n* * *\\n\\n\\n### builders.coverageEligibilityRequest {#builders_coverageEligibilityRequest}\\n\\n<p><code>coverageEligibilityRequest(type, props)</code></p>\\n\\nCreate a FHIR CoverageEligibilityRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for coverage eligiblity request |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.priority] | <code>CodeableConcept</code> | Desired processing priority |\\n| [props.purpose] | <code>string</code> | auth-requirements | benefits | discovery | validation |\\n| [props.patient] | <code>Reference</code> | Intended recipient of products and services |\\n| [props.serviced] | <code>date</code> \\\\| <code>Period</code> | Estimated date or dates of service |\\n| [props.created] | <code>dateTime</code> | Creation date |\\n| [props.enterer] | <code>Reference</code> | Author |\\n| [props.provider] | <code>Reference</code> | Party responsible for the request |\\n| [props.insurer] | <code>Reference</code> | Coverage issuer |\\n| [props.facility] | <code>Reference</code> | Servicing facility |\\n| [props.supportingInfo] | <code>BackboneElement</code> | Supporting information |\\n| [props.insurance] | <code>BackboneElement</code> | Patient insurance information |\\n| [props.item] | <code>BackboneElement</code> | Item to be evaluated for eligibiity |\\n\\n\\n* * *\\n\\n\\n### builders.coverageEligibilityResponse {#builders_coverageEligibilityResponse}\\n\\n<p><code>coverageEligibilityResponse(type, props)</code></p>\\n\\nCreate a FHIR CoverageEligibilityResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for coverage eligiblity request |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.purpose] | <code>string</code> | auth-requirements | benefits | discovery | validation |\\n| [props.patient] | <code>Reference</code> | Intended recipient of products and services |\\n| [props.serviced] | <code>date</code> \\\\| <code>Period</code> | Estimated date or dates of service |\\n| [props.created] | <code>dateTime</code> | Response creation date |\\n| [props.requestor] | <code>Reference</code> | Party responsible for the request |\\n| [props.request] | <code>Reference</code> | Eligibility request reference |\\n| [props.outcome] | <code>string</code> | queued | complete | error | partial |\\n| [props.disposition] | <code>string</code> | Disposition Message |\\n| [props.insurer] | <code>Reference</code> | Coverage issuer |\\n| [props.insurance] | <code>BackboneElement</code> | Patient insurance information |\\n| [props.preAuthRef] | <code>string</code> | Preauthorization reference |\\n| [props.form] | <code>CodeableConcept</code> | Printed form identifier |\\n| [props.error] | <code>BackboneElement</code> | Processing errors |\\n\\n\\n* * *\\n\\n\\n### builders.detectedIssue {#builders_detectedIssue}\\n\\n<p><code>detectedIssue(type, props)</code></p>\\n\\nCreate a FHIR DetectedIssue resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique id for the detected issue |\\n| [props.status] | <code>string</code> | registered | preliminary | final | amended + |\\n| [props.code] | <code>CodeableConcept</code> | Issue Category, e.g. drug-drug, duplicate therapy, etc. |\\n| [props.severity] | <code>string</code> | high | moderate | low |\\n| [props.patient] | <code>Reference</code> | Associated patient |\\n| [props.identified] | <code>dateTime</code> \\\\| <code>Period</code> | When identified |\\n| [props.author] | <code>Reference</code> | The provider or device that identified the issue |\\n| [props.implicated] | <code>Reference</code> | Problem resource |\\n| [props.evidence] | <code>BackboneElement</code> | Supporting evidence |\\n| [props.detail] | <code>string</code> | Description and context |\\n| [props.reference] | <code>string</code> | Authority for issue |\\n| [props.mitigation] | <code>BackboneElement</code> | Step taken to address |\\n\\n\\n* * *\\n\\n\\n### builders.device {#builders_device}\\n\\n<p><code>device(type, props)</code></p>\\n\\nCreate a FHIR Device resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Instance identifier |\\n| [props.definition] | <code>Reference</code> | The reference to the definition for the device |\\n| [props.udiCarrier] | <code>BackboneElement</code> | Unique Device Identifier (UDI) Barcode string |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | online | paused | standby | offline | not-ready | transduc-discon | hw-discon | off |\\n| [props.distinctIdentifier] | <code>string</code> | The distinct identification string |\\n| [props.manufacturer] | <code>string</code> | Name of device manufacturer |\\n| [props.manufactureDate] | <code>dateTime</code> | Date when the device was made |\\n| [props.expirationDate] | <code>dateTime</code> | Date and time of expiry of this device (if applicable) |\\n| [props.lotNumber] | <code>string</code> | Lot number of manufacture |\\n| [props.serialNumber] | <code>string</code> | Serial number assigned by the manufacturer |\\n| [props.deviceName] | <code>BackboneElement</code> | The name of the device as given by the manufacturer |\\n| [props.modelNumber] | <code>string</code> | The manufacturer's model number for the device |\\n| [props.partNumber] | <code>string</code> | The part number or catalog number of the device |\\n| [props.type] | <code>CodeableConcept</code> | The kind or type of device |\\n| [props.specialization] | <code>BackboneElement</code> | The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication |\\n| [props.version] | <code>BackboneElement</code> | The actual design of the device or software version running on the device |\\n| [props.property] | <code>BackboneElement</code> | The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties |\\n| [props.patient] | <code>Reference</code> | Patient to whom Device is affixed |\\n| [props.owner] | <code>Reference</code> | Organization responsible for device |\\n| [props.contact] | <code>ContactPoint</code> | Details for human/organization for support |\\n| [props.location] | <code>Reference</code> | Where the device is found |\\n| [props.url] | <code>string</code> | Network address to contact device |\\n| [props.note] | <code>Annotation</code> | Device notes and comments |\\n| [props.safety] | <code>CodeableConcept</code> | Safety Characteristics of Device |\\n| [props.parent] | <code>Reference</code> | The device that this device is attached to or is part of |\\n\\n\\n* * *\\n\\n\\n### builders.deviceDefinition {#builders_deviceDefinition}\\n\\n<p><code>deviceDefinition(type, props)</code></p>\\n\\nCreate a FHIR DeviceDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Instance identifier |\\n| [props.udiDeviceIdentifier] | <code>BackboneElement</code> | Unique Device Identifier (UDI) Barcode string |\\n| [props.manufacturer] | <code>string</code> \\\\| <code>Reference</code> | Name of device manufacturer |\\n| [props.deviceName] | <code>BackboneElement</code> | A name given to the device to identify it |\\n| [props.modelNumber] | <code>string</code> | The model number for the device |\\n| [props.type] | <code>CodeableConcept</code> | What kind of device or device system this is |\\n| [props.specialization] | <code>BackboneElement</code> | The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication |\\n| [props.version] | <code>string</code> | Available versions |\\n| [props.safety] | <code>CodeableConcept</code> | Safety characteristics of the device |\\n| [props.shelfLifeStorage] | <code>ProductShelfLife</code> | Shelf Life and storage information |\\n| [props.physicalCharacteristics] | <code>ProdCharacteristic</code> | Dimensions, color etc. |\\n| [props.languageCode] | <code>CodeableConcept</code> | Language code for the human-readable text strings produced by the device (all supported) |\\n| [props.capability] | <code>BackboneElement</code> | Device capabilities |\\n| [props.property] | <code>BackboneElement</code> | The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties |\\n| [props.owner] | <code>Reference</code> | Organization responsible for device |\\n| [props.contact] | <code>ContactPoint</code> | Details for human/organization for support |\\n| [props.url] | <code>string</code> | Network address to contact device |\\n| [props.onlineInformation] | <code>string</code> | Access to on-line information |\\n| [props.note] | <code>Annotation</code> | Device notes and comments |\\n| [props.quantity] | <code>Quantity</code> | The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product) |\\n| [props.parentDevice] | <code>Reference</code> | The parent device it can be part of |\\n| [props.material] | <code>BackboneElement</code> | A substance used to create the material(s) of which the device is made |\\n\\n\\n* * *\\n\\n\\n### builders.deviceMetric {#builders_deviceMetric}\\n\\n<p><code>deviceMetric(type, props)</code></p>\\n\\nCreate a FHIR DeviceMetric resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Instance identifier |\\n| [props.type] | <code>CodeableConcept</code> | Identity of metric, for example Heart Rate or PEEP Setting |\\n| [props.unit] | <code>CodeableConcept</code> | Unit of Measure for the Metric |\\n| [props.source] | <code>Reference</code> | Describes the link to the source Device |\\n| [props.parent] | <code>Reference</code> | Describes the link to the parent Device |\\n| [props.operationalStatus] | <code>string</code> | on | off | standby | entered-in-error |\\n| [props.color] | <code>string</code> | black | red | green | yellow | blue | magenta | cyan | white |\\n| [props.category] | <code>string</code> | measurement | setting | calculation | unspecified |\\n| [props.measurementPeriod] | <code>Timing</code> | Describes the measurement repetition time |\\n| [props.calibration] | <code>BackboneElement</code> | Describes the calibrations that have been performed or that are required to be performed |\\n\\n\\n* * *\\n\\n\\n### builders.deviceRequest {#builders_deviceRequest}\\n\\n<p><code>deviceRequest(type, props)</code></p>\\n\\nCreate a FHIR DeviceRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Request identifier |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | What request fulfills |\\n| [props.priorRequest] | <code>Reference</code> | What request replaces |\\n| [props.groupIdentifier] | <code>Identifier</code> | Identifier of composite request |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.intent] | <code>string</code> | proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.code] | <code>Reference</code> \\\\| <code>CodeableConcept</code> | Device requested |\\n| [props.parameter] | <code>BackboneElement</code> | Device details |\\n| [props.subject] | <code>Reference</code> | Focus of request |\\n| [props.encounter] | <code>Reference</code> | Encounter motivating request |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> | Desired time or schedule for use |\\n| [props.authoredOn] | <code>dateTime</code> | When recorded |\\n| [props.requester] | <code>Reference</code> | Who/what is requesting diagnostics |\\n| [props.performerType] | <code>CodeableConcept</code> | Filler role |\\n| [props.performer] | <code>Reference</code> | Requested Filler |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Coded Reason for request |\\n| [props.reasonReference] | <code>Reference</code> | Linked Reason for request |\\n| [props.insurance] | <code>Reference</code> | Associated insurance coverage |\\n| [props.supportingInfo] | <code>Reference</code> | Additional clinical information |\\n| [props.note] | <code>Annotation</code> | Notes or comments |\\n| [props.relevantHistory] | <code>Reference</code> | Request provenance |\\n\\n\\n* * *\\n\\n\\n### builders.deviceUseStatement {#builders_deviceUseStatement}\\n\\n<p><code>deviceUseStatement(type, props)</code></p>\\n\\nCreate a FHIR DeviceUseStatement resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier for this record |\\n| [props.basedOn] | <code>Reference</code> | Fulfills plan, proposal or order |\\n| [props.status] | <code>string</code> | active | completed | entered-in-error + |\\n| [props.subject] | <code>Reference</code> | Patient using device |\\n| [props.derivedFrom] | <code>Reference</code> | Supporting information |\\n| [props.timing] | <code>Timing</code> \\\\| <code>Period</code> \\\\| <code>dateTime</code> | How often  the device was used |\\n| [props.recordedOn] | <code>dateTime</code> | When statement was recorded |\\n| [props.source] | <code>Reference</code> | Who made the statement |\\n| [props.device] | <code>Reference</code> | Reference to device used |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why device was used |\\n| [props.reasonReference] | <code>Reference</code> | Why was DeviceUseStatement performed? |\\n| [props.bodySite] | <code>CodeableConcept</code> | Target body site |\\n| [props.note] | <code>Annotation</code> | Addition details (comments, instructions) |\\n\\n\\n* * *\\n\\n\\n### builders.diagnosticReport {#builders_diagnosticReport}\\n\\n<p><code>diagnosticReport(type, props)</code></p>\\n\\nCreate a FHIR DiagnosticReport resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for report |\\n| [props.basedOn] | <code>Reference</code> | What was requested |\\n| [props.status] | <code>string</code> | registered | partial | preliminary | final + |\\n| [props.category] | <code>CodeableConcept</code> | Service category |\\n| [props.code] | <code>CodeableConcept</code> | Name/Code for this diagnostic report |\\n| [props.subject] | <code>Reference</code> | The subject of the report - usually, but not always, the patient |\\n| [props.encounter] | <code>Reference</code> | Health care event when test ordered |\\n| [props.effective] | <code>dateTime</code> \\\\| <code>Period</code> | Clinically relevant time/time-period for report |\\n| [props.issued] | <code>instant</code> | DateTime this version was made |\\n| [props.performer] | <code>Reference</code> | Responsible Diagnostic Service |\\n| [props.resultsInterpreter] | <code>Reference</code> | Primary result interpreter |\\n| [props.specimen] | <code>Reference</code> | Specimens this report is based on |\\n| [props.result] | <code>Reference</code> | Observations |\\n| [props.imagingStudy] | <code>Reference</code> | Reference to full details of imaging associated with the diagnostic report |\\n| [props.media] | <code>BackboneElement</code> | Key images associated with this report |\\n| [props.conclusion] | <code>string</code> | Clinical conclusion (interpretation) of test results |\\n| [props.conclusionCode] | <code>CodeableConcept</code> | Codes for the clinical conclusion of test results |\\n| [props.presentedForm] | <code>Attachment</code> | Entire report as issued |\\n\\n\\n* * *\\n\\n\\n### builders.domainResource {#builders_domainResource}\\n\\n<p><code>domainResource(type, props)</code></p>\\n\\nCreate a FHIR DomainResource resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n\\n\\n* * *\\n\\n\\n### builders.encounter {#builders_encounter}\\n\\n<p><code>encounter(type, props)</code></p>\\n\\nCreate a FHIR Encounter resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifier(s) by which this encounter is known |\\n| [props.status] | <code>string</code> | planned | arrived | triaged | in-progress | onleave | finished | cancelled + |\\n| [props.statusHistory] | <code>BackboneElement</code> | List of past encounter statuses |\\n| [props.class] | <code>Coding</code> | Classification of patient encounter |\\n| [props.classHistory] | <code>BackboneElement</code> | List of past encounter classes |\\n| [props.type] | <code>CodeableConcept</code> | Specific type of encounter |\\n| [props.serviceType] | <code>CodeableConcept</code> | Specific type of service |\\n| [props.priority] | <code>CodeableConcept</code> | Indicates the urgency of the encounter |\\n| [props.subject] | <code>Reference</code> | The patient or group present at the encounter |\\n| [props.episodeOfCare] | <code>Reference</code> | Episode(s) of care that this encounter should be recorded against |\\n| [props.basedOn] | <code>Reference</code> | The ServiceRequest that initiated this encounter |\\n| [props.participant] | <code>BackboneElement</code> | List of participants involved in the encounter |\\n| [props.appointment] | <code>Reference</code> | The appointment that scheduled this encounter |\\n| [props.period] | <code>Period</code> | The start and end time of the encounter |\\n| [props.length] | <code>Duration</code> | Quantity of time the encounter lasted (less time absent) |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Coded reason the encounter takes place |\\n| [props.reasonReference] | <code>Reference</code> | Reason the encounter takes place (reference) |\\n| [props.diagnosis] | <code>BackboneElement</code> | The list of diagnosis relevant to this encounter |\\n| [props.account] | <code>Reference</code> | The set of accounts that may be used for billing for this Encounter |\\n| [props.hospitalization] | <code>BackboneElement</code> | Details about the admission to a healthcare service |\\n| [props.location] | <code>BackboneElement</code> | List of locations where the patient has been |\\n| [props.serviceProvider] | <code>Reference</code> | The organization (facility) responsible for this encounter |\\n| [props.partOf] | <code>Reference</code> | Another Encounter this encounter is part of |\\n\\n\\n* * *\\n\\n\\n### builders.enrollmentRequest {#builders_enrollmentRequest}\\n\\n<p><code>enrollmentRequest(type, props)</code></p>\\n\\nCreate a FHIR EnrollmentRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.created] | <code>dateTime</code> | Creation date |\\n| [props.insurer] | <code>Reference</code> | Target |\\n| [props.provider] | <code>Reference</code> | Responsible practitioner |\\n| [props.candidate] | <code>Reference</code> | The subject to be enrolled |\\n| [props.coverage] | <code>Reference</code> | Insurance information |\\n\\n\\n* * *\\n\\n\\n### builders.enrollmentResponse {#builders_enrollmentResponse}\\n\\n<p><code>enrollmentResponse(type, props)</code></p>\\n\\nCreate a FHIR EnrollmentResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.request] | <code>Reference</code> | Claim reference |\\n| [props.outcome] | <code>string</code> | queued | complete | error | partial |\\n| [props.disposition] | <code>string</code> | Disposition Message |\\n| [props.created] | <code>dateTime</code> | Creation date |\\n| [props.organization] | <code>Reference</code> | Insurer |\\n| [props.requestProvider] | <code>Reference</code> | Responsible practitioner |\\n\\n\\n* * *\\n\\n\\n### builders.episodeOfCare {#builders_episodeOfCare}\\n\\n<p><code>episodeOfCare(type, props)</code></p>\\n\\nCreate a FHIR EpisodeOfCare resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier(s) relevant for this EpisodeOfCare |\\n| [props.status] | <code>string</code> | planned | waitlist | active | onhold | finished | cancelled | entered-in-error |\\n| [props.statusHistory] | <code>BackboneElement</code> | Past list of status codes (the current status may be included to cover the start date of the status) |\\n| [props.type] | <code>CodeableConcept</code> | Type/class  - e.g. specialist referral, disease management |\\n| [props.diagnosis] | <code>BackboneElement</code> | The list of diagnosis relevant to this episode of care |\\n| [props.patient] | <code>Reference</code> | The patient who is the focus of this episode of care |\\n| [props.managingOrganization] | <code>Reference</code> | Organization that assumes care |\\n| [props.period] | <code>Period</code> | Interval during responsibility is assumed |\\n| [props.referralRequest] | <code>Reference</code> | Originating Referral Request(s) |\\n| [props.careManager] | <code>Reference</code> | Care manager/care coordinator for the patient |\\n| [props.team] | <code>Reference</code> | Other practitioners facilitating this episode of care |\\n| [props.account] | <code>Reference</code> | The set of accounts that may be used for billing for this EpisodeOfCare |\\n\\n\\n* * *\\n\\n\\n### builders.eventDefinition {#builders_eventDefinition}\\n\\n<p><code>eventDefinition(type, props)</code></p>\\n\\nCreate a FHIR EventDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this event definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the event definition |\\n| [props.version] | <code>string</code> | Business version of the event definition |\\n| [props.name] | <code>string</code> | Name for this event definition (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this event definition (human friendly) |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the event definition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Type of individual the event definition is focused on |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the event definition |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for event definition (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this event definition is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the event definition |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the event definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the event definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the event definition is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | E.g. Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.trigger] | <code>TriggerDefinition</code> | \\\"when\\\" the event occurs (multiple = 'or') |\\n\\n\\n* * *\\n\\n\\n### builders.evidence {#builders_evidence}\\n\\n<p><code>evidence(type, props)</code></p>\\n\\nCreate a FHIR Evidence resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this evidence, represented as a globally unique URI |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the summary |\\n| [props.version] | <code>string</code> | Business version of this summary |\\n| [props.title] | <code>string</code> | Name for this summary (human friendly) |\\n| [props.citeAs] | <code>Reference</code> \\\\| <code>markdown</code> | Citation for this evidence |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.approvalDate] | <code>date</code> | When the summary was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the summary was last reviewed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Link or citation to artifact associated with the summary |\\n| [props.description] | <code>markdown</code> | Description of the particular summary |\\n| [props.assertion] | <code>markdown</code> | Declarative description of the Evidence |\\n| [props.note] | <code>Annotation</code> | Footnotes and/or explanatory notes |\\n| [props.variableDefinition] | <code>BackboneElement</code> | Evidence variable such as population, exposure, or outcome |\\n| [props.synthesisType] | <code>CodeableConcept</code> | The method to combine studies |\\n| [props.studyType] | <code>CodeableConcept</code> | The type of study that produced this evidence |\\n| [props.statistic] | <code>BackboneElement</code> | Values and parameters for a single statistic |\\n| [props.certainty] | <code>BackboneElement</code> | Certainty or quality of the evidence |\\n\\n\\n* * *\\n\\n\\n### builders.evidenceReport {#builders_evidenceReport}\\n\\n<p><code>evidenceReport(type, props)</code></p>\\n\\nCreate a FHIR EvidenceReport resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this EvidenceReport, represented as a globally unique URI |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier for the evidence report |\\n| [props.relatedIdentifier] | <code>Identifier</code> | Identifiers for articles that may relate to more than one evidence report |\\n| [props.citeAs] | <code>Reference</code> \\\\| <code>markdown</code> | Citation for this report |\\n| [props.type] | <code>CodeableConcept</code> | Kind of report |\\n| [props.note] | <code>Annotation</code> | Used for footnotes and annotations |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Link, description or reference to artifact associated with the report |\\n| [props.subject] | <code>BackboneElement</code> | Focus of the report |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatesTo] | <code>BackboneElement</code> | Relationships to other compositions/documents |\\n| [props.section] | <code>BackboneElement</code> | Composition is broken into sections |\\n\\n\\n* * *\\n\\n\\n### builders.evidenceVariable {#builders_evidenceVariable}\\n\\n<p><code>evidenceVariable(type, props)</code></p>\\n\\nCreate a FHIR EvidenceVariable resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this evidence variable, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the evidence variable |\\n| [props.version] | <code>string</code> | Business version of the evidence variable |\\n| [props.name] | <code>string</code> | Name for this evidence variable (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this evidence variable (human friendly) |\\n| [props.shortTitle] | <code>string</code> | Title for use in informal contexts |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the EvidenceVariable |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.description] | <code>markdown</code> | Natural language description of the evidence variable |\\n| [props.note] | <code>Annotation</code> | Used for footnotes or explanatory notes |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.actual] | <code>boolean</code> | Actual or conceptual |\\n| [props.characteristicCombination] | <code>string</code> | intersection | union |\\n| [props.characteristic] | <code>BackboneElement</code> | What defines the members of the evidence element |\\n| [props.handling] | <code>string</code> | continuous | dichotomous | ordinal | polychotomous |\\n| [props.category] | <code>BackboneElement</code> | A grouping for ordinal or polychotomous variables |\\n\\n\\n* * *\\n\\n\\n### builders.explanationOfBenefit {#builders_explanationOfBenefit}\\n\\n<p><code>explanationOfBenefit(type, props)</code></p>\\n\\nCreate a FHIR ExplanationOfBenefit resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for the resource |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.type] | <code>CodeableConcept</code> | Category or discipline |\\n| [props.subType] | <code>CodeableConcept</code> | More granular claim type |\\n| [props.use] | <code>string</code> | claim | preauthorization | predetermination |\\n| [props.patient] | <code>Reference</code> | The recipient of the products and services |\\n| [props.billablePeriod] | <code>Period</code> | Relevant time frame for the claim |\\n| [props.created] | <code>dateTime</code> | Response creation date |\\n| [props.enterer] | <code>Reference</code> | Author of the claim |\\n| [props.insurer] | <code>Reference</code> | Party responsible for reimbursement |\\n| [props.provider] | <code>Reference</code> | Party responsible for the claim |\\n| [props.priority] | <code>CodeableConcept</code> | Desired processing urgency |\\n| [props.fundsReserveRequested] | <code>CodeableConcept</code> | For whom to reserve funds |\\n| [props.fundsReserve] | <code>CodeableConcept</code> | Funds reserved status |\\n| [props.related] | <code>BackboneElement</code> | Prior or corollary claims |\\n| [props.prescription] | <code>Reference</code> | Prescription authorizing services or products |\\n| [props.originalPrescription] | <code>Reference</code> | Original prescription if superceded by fulfiller |\\n| [props.payee] | <code>BackboneElement</code> | Recipient of benefits payable |\\n| [props.referral] | <code>Reference</code> | Treatment Referral |\\n| [props.facility] | <code>Reference</code> | Servicing Facility |\\n| [props.claim] | <code>Reference</code> | Claim reference |\\n| [props.claimResponse] | <code>Reference</code> | Claim response reference |\\n| [props.outcome] | <code>string</code> | queued | complete | error | partial |\\n| [props.disposition] | <code>string</code> | Disposition Message |\\n| [props.preAuthRef] | <code>string</code> | Preauthorization reference |\\n| [props.preAuthRefPeriod] | <code>Period</code> | Preauthorization in-effect period |\\n| [props.careTeam] | <code>BackboneElement</code> | Care Team members |\\n| [props.supportingInfo] | <code>BackboneElement</code> | Supporting information |\\n| [props.diagnosis] | <code>BackboneElement</code> | Pertinent diagnosis information |\\n| [props.procedure] | <code>BackboneElement</code> | Clinical procedures performed |\\n| [props.precedence] | <code>number</code> | Precedence (primary, secondary, etc.) |\\n| [props.insurance] | <code>BackboneElement</code> | Patient insurance information |\\n| [props.accident] | <code>BackboneElement</code> | Details of the event |\\n| [props.item] | <code>BackboneElement</code> | Product or service provided |\\n| [props.addItem] | <code>BackboneElement</code> | Insurer added line items |\\n| [props.adjudication] | <code>any</code> | Header-level adjudication |\\n| [props.total] | <code>BackboneElement</code> | Adjudication totals |\\n| [props.payment] | <code>BackboneElement</code> | Payment Details |\\n| [props.formCode] | <code>CodeableConcept</code> | Printed form identifier |\\n| [props.form] | <code>Attachment</code> | Printed reference or actual form |\\n| [props.processNote] | <code>BackboneElement</code> | Note concerning adjudication |\\n| [props.benefitPeriod] | <code>Period</code> | When the benefits are applicable |\\n| [props.benefitBalance] | <code>BackboneElement</code> | Balance by Benefit Category |\\n\\n\\n* * *\\n\\n\\n### builders.familyMemberHistory {#builders_familyMemberHistory}\\n\\n<p><code>familyMemberHistory(type, props)</code></p>\\n\\nCreate a FHIR FamilyMemberHistory resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Id(s) for this record |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.status] | <code>string</code> | partial | completed | entered-in-error | health-unknown |\\n| [props.dataAbsentReason] | <code>CodeableConcept</code> | subject-unknown | withheld | unable-to-obtain | deferred |\\n| [props.patient] | <code>Reference</code> | Patient history is about |\\n| [props.date] | <code>dateTime</code> | When history was recorded or last updated |\\n| [props.name] | <code>string</code> | The family member described |\\n| [props.relationship] | <code>CodeableConcept</code> | Relationship to the subject |\\n| [props.sex] | <code>CodeableConcept</code> | male | female | other | unknown |\\n| [props.born] | <code>Period</code> \\\\| <code>date</code> \\\\| <code>string</code> | (approximate) date of birth |\\n| [props.age] | <code>Age</code> \\\\| <code>Range</code> \\\\| <code>string</code> | (approximate) age |\\n| [props.estimatedAge] | <code>boolean</code> | Age is estimated? |\\n| [props.deceased] | <code>boolean</code> \\\\| <code>Age</code> \\\\| <code>Range</code> \\\\| <code>date</code> \\\\| <code>string</code> | Dead? How old/when? |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why was family member history performed? |\\n| [props.reasonReference] | <code>Reference</code> | Why was family member history performed? |\\n| [props.note] | <code>Annotation</code> | General note about related person |\\n| [props.condition] | <code>BackboneElement</code> | Condition that the related person had |\\n\\n\\n* * *\\n\\n\\n### builders.flag {#builders_flag}\\n\\n<p><code>flag(type, props)</code></p>\\n\\nCreate a FHIR Flag resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error |\\n| [props.category] | <code>CodeableConcept</code> | Clinical, administrative, etc. |\\n| [props.code] | <code>CodeableConcept</code> | Coded or textual message to display to user |\\n| [props.subject] | <code>Reference</code> | Who/What is flag about? |\\n| [props.period] | <code>Period</code> | Time period when flag is active |\\n| [props.encounter] | <code>Reference</code> | Alert relevant during encounter |\\n| [props.author] | <code>Reference</code> | Flag creator |\\n\\n\\n* * *\\n\\n\\n### builders.goal {#builders_goal}\\n\\n<p><code>goal(type, props)</code></p>\\n\\nCreate a FHIR Goal resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this goal |\\n| [props.lifecycleStatus] | <code>string</code> | proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected |\\n| [props.achievementStatus] | <code>CodeableConcept</code> | in-progress | improving | worsening | no-change | achieved | sustaining | not-achieved | no-progress | not-attainable |\\n| [props.category] | <code>CodeableConcept</code> | E.g. Treatment, dietary, behavioral, etc. |\\n| [props.priority] | <code>CodeableConcept</code> | high-priority | medium-priority | low-priority |\\n| [props.description] | <code>CodeableConcept</code> | Code or text describing goal |\\n| [props.subject] | <code>Reference</code> | Who this goal is intended for |\\n| [props.start] | <code>date</code> \\\\| <code>CodeableConcept</code> | When goal pursuit begins |\\n| [props.target] | <code>BackboneElement</code> | Target outcome for the goal |\\n| [props.statusDate] | <code>date</code> | When goal status took effect |\\n| [props.statusReason] | <code>string</code> | Reason for current status |\\n| [props.expressedBy] | <code>Reference</code> | Who's responsible for creating Goal? |\\n| [props.addresses] | <code>Reference</code> | Issues addressed by this goal |\\n| [props.note] | <code>Annotation</code> | Comments about the goal |\\n| [props.outcomeCode] | <code>CodeableConcept</code> | What result was achieved regarding the goal? |\\n| [props.outcomeReference] | <code>Reference</code> | Observation that resulted from goal |\\n\\n\\n* * *\\n\\n\\n### builders.group {#builders_group}\\n\\n<p><code>group(type, props)</code></p>\\n\\nCreate a FHIR Group resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique id |\\n| [props.active] | <code>boolean</code> | Whether this group's record is in active use |\\n| [props.type] | <code>string</code> | person | animal | practitioner | device | medication | substance |\\n| [props.actual] | <code>boolean</code> | Descriptive or actual |\\n| [props.code] | <code>CodeableConcept</code> | Kind of Group members |\\n| [props.name] | <code>string</code> | Label for Group |\\n| [props.quantity] | <code>unsignedInt</code> | Number of members |\\n| [props.managingEntity] | <code>Reference</code> | Entity that is the custodian of the Group's definition |\\n| [props.characteristic] | <code>BackboneElement</code> | Include / Exclude group members by Trait |\\n| [props.member] | <code>BackboneElement</code> | Who or what is in group |\\n\\n\\n* * *\\n\\n\\n### builders.guidanceResponse {#builders_guidanceResponse}\\n\\n<p><code>guidanceResponse(type, props)</code></p>\\n\\nCreate a FHIR GuidanceResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.requestIdentifier] | <code>Identifier</code> | The identifier of the request associated with this response, if any |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.module] | <code>string</code> \\\\| <code>canonical</code> \\\\| <code>CodeableConcept</code> | What guidance was requested |\\n| [props.status] | <code>string</code> | success | data-requested | data-required | in-progress | failure | entered-in-error |\\n| [props.subject] | <code>Reference</code> | Patient the request was performed for |\\n| [props.encounter] | <code>Reference</code> | Encounter during which the response was returned |\\n| [props.occurrenceDateTime] | <code>dateTime</code> | When the guidance response was processed |\\n| [props.performer] | <code>Reference</code> | Device returning the guidance |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why guidance is needed |\\n| [props.reasonReference] | <code>Reference</code> | Why guidance is needed |\\n| [props.note] | <code>Annotation</code> | Additional notes about the response |\\n| [props.evaluationMessage] | <code>Reference</code> | Messages resulting from the evaluation of the artifact or artifacts |\\n| [props.outputParameters] | <code>Reference</code> | The output parameters of the evaluation, if any |\\n| [props.result] | <code>Reference</code> | Proposed actions, if any |\\n| [props.dataRequirement] | <code>DataRequirement</code> | Additional required data |\\n\\n\\n* * *\\n\\n\\n### builders.healthcareService {#builders_healthcareService}\\n\\n<p><code>healthcareService(type, props)</code></p>\\n\\nCreate a FHIR HealthcareService resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifiers for this item |\\n| [props.active] | <code>boolean</code> | Whether this HealthcareService record is in active use |\\n| [props.providedBy] | <code>Reference</code> | Organization that provides this service |\\n| [props.category] | <code>CodeableConcept</code> | Broad category of service being performed or delivered |\\n| [props.type] | <code>CodeableConcept</code> | Type of service that may be delivered or performed |\\n| [props.specialty] | <code>CodeableConcept</code> | Specialties handled by the HealthcareService |\\n| [props.location] | <code>Reference</code> | Location(s) where service may be provided |\\n| [props.name] | <code>string</code> | Description of service as presented to a consumer while searching |\\n| [props.comment] | <code>string</code> | Additional description and/or any specific issues not covered elsewhere |\\n| [props.extraDetails] | <code>markdown</code> | Extra details about the service that can't be placed in the other fields |\\n| [props.photo] | <code>Attachment</code> | Facilitates quick identification of the service |\\n| [props.telecom] | <code>ContactPoint</code> | Contacts related to the healthcare service |\\n| [props.coverageArea] | <code>Reference</code> | Location(s) service is intended for/available to |\\n| [props.serviceProvisionCode] | <code>CodeableConcept</code> | Conditions under which service is available/offered |\\n| [props.eligibility] | <code>BackboneElement</code> | Specific eligibility requirements required to use the service |\\n| [props.program] | <code>CodeableConcept</code> | Programs that this service is applicable to |\\n| [props.characteristic] | <code>CodeableConcept</code> | Collection of characteristics (attributes) |\\n| [props.communication] | <code>CodeableConcept</code> | The language that this service is offered in |\\n| [props.referralMethod] | <code>CodeableConcept</code> | Ways that the service accepts referrals |\\n| [props.appointmentRequired] | <code>boolean</code> | If an appointment is required for access to this service |\\n| [props.availableTime] | <code>BackboneElement</code> | Times the Service Site is available |\\n| [props.notAvailable] | <code>BackboneElement</code> | Not available during this time due to provided reason |\\n| [props.availabilityExceptions] | <code>string</code> | Description of availability exceptions |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoints providing access to electronic services operated for the healthcare service |\\n\\n\\n* * *\\n\\n\\n### builders.imagingStudy {#builders_imagingStudy}\\n\\n<p><code>imagingStudy(type, props)</code></p>\\n\\nCreate a FHIR ImagingStudy resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifiers for the whole study |\\n| [props.status] | <code>string</code> | registered | available | cancelled | entered-in-error | unknown |\\n| [props.modality] | <code>Coding</code> | All series modality if actual acquisition modalities |\\n| [props.subject] | <code>Reference</code> | Who or what is the subject of the study |\\n| [props.encounter] | <code>Reference</code> | Encounter with which this imaging study is associated |\\n| [props.started] | <code>dateTime</code> | When the study was started |\\n| [props.basedOn] | <code>Reference</code> | Request fulfilled |\\n| [props.referrer] | <code>Reference</code> | Referring physician |\\n| [props.interpreter] | <code>Reference</code> | Who interpreted images |\\n| [props.endpoint] | <code>Reference</code> | Study access endpoint |\\n| [props.numberOfSeries] | <code>unsignedInt</code> | Number of Study Related Series |\\n| [props.numberOfInstances] | <code>unsignedInt</code> | Number of Study Related Instances |\\n| [props.procedureReference] | <code>Reference</code> | The performed Procedure reference |\\n| [props.procedureCode] | <code>CodeableConcept</code> | The performed procedure code |\\n| [props.location] | <code>Reference</code> | Where ImagingStudy occurred |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why the study was requested |\\n| [props.reasonReference] | <code>Reference</code> | Why was study performed |\\n| [props.note] | <code>Annotation</code> | User-defined comments |\\n| [props.description] | <code>string</code> | Institution-generated description |\\n| [props.series] | <code>BackboneElement</code> | Each study has one or more series of instances |\\n\\n\\n* * *\\n\\n\\n### builders.immunization {#builders_immunization}\\n\\n<p><code>immunization(type, props)</code></p>\\n\\nCreate a FHIR Immunization resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.status] | <code>string</code> | completed | entered-in-error | not-done |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason not done |\\n| [props.vaccineCode] | <code>CodeableConcept</code> | Vaccine product administered |\\n| [props.patient] | <code>Reference</code> | Who was immunized |\\n| [props.encounter] | <code>Reference</code> | Encounter immunization was part of |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>string</code> | Vaccine administration date |\\n| [props.recorded] | <code>dateTime</code> | When the immunization was first captured in the subject's record |\\n| [props.primarySource] | <code>boolean</code> | Indicates context the data was recorded in |\\n| [props.reportOrigin] | <code>CodeableConcept</code> | Indicates the source of a secondarily reported record |\\n| [props.location] | <code>Reference</code> | Where immunization occurred |\\n| [props.manufacturer] | <code>Reference</code> | Vaccine manufacturer |\\n| [props.lotNumber] | <code>string</code> | Vaccine lot number |\\n| [props.expirationDate] | <code>date</code> | Vaccine expiration date |\\n| [props.site] | <code>CodeableConcept</code> | Body site vaccine  was administered |\\n| [props.route] | <code>CodeableConcept</code> | How vaccine entered body |\\n| [props.doseQuantity] | <code>Quantity</code> | Amount of vaccine administered |\\n| [props.performer] | <code>BackboneElement</code> | Who performed event |\\n| [props.note] | <code>Annotation</code> | Additional immunization notes |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why immunization occurred |\\n| [props.reasonReference] | <code>Reference</code> | Why immunization occurred |\\n| [props.isSubpotent] | <code>boolean</code> | Dose potency |\\n| [props.subpotentReason] | <code>CodeableConcept</code> | Reason for being subpotent |\\n| [props.education] | <code>BackboneElement</code> | Educational material presented to patient |\\n| [props.programEligibility] | <code>CodeableConcept</code> | Patient eligibility for a vaccination program |\\n| [props.fundingSource] | <code>CodeableConcept</code> | Funding source for the vaccine |\\n| [props.reaction] | <code>BackboneElement</code> | Details of a reaction that follows immunization |\\n| [props.protocolApplied] | <code>BackboneElement</code> | Protocol followed by the provider |\\n\\n\\n* * *\\n\\n\\n### builders.immunizationEvaluation {#builders_immunizationEvaluation}\\n\\n<p><code>immunizationEvaluation(type, props)</code></p>\\n\\nCreate a FHIR ImmunizationEvaluation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.status] | <code>string</code> | completed | entered-in-error |\\n| [props.patient] | <code>Reference</code> | Who this evaluation is for |\\n| [props.date] | <code>dateTime</code> | Date evaluation was performed |\\n| [props.authority] | <code>Reference</code> | Who is responsible for publishing the recommendations |\\n| [props.targetDisease] | <code>CodeableConcept</code> | Evaluation target disease |\\n| [props.immunizationEvent] | <code>Reference</code> | Immunization being evaluated |\\n| [props.doseStatus] | <code>CodeableConcept</code> | Status of the dose relative to published recommendations |\\n| [props.doseStatusReason] | <code>CodeableConcept</code> | Reason for the dose status |\\n| [props.description] | <code>string</code> | Evaluation notes |\\n| [props.series] | <code>string</code> | Name of vaccine series |\\n| [props.doseNumber] | <code>number</code> \\\\| <code>string</code> | Dose number within series |\\n| [props.seriesDoses] | <code>number</code> \\\\| <code>string</code> | Recommended number of doses for immunity |\\n\\n\\n* * *\\n\\n\\n### builders.immunizationRecommendation {#builders_immunizationRecommendation}\\n\\n<p><code>immunizationRecommendation(type, props)</code></p>\\n\\nCreate a FHIR ImmunizationRecommendation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.patient] | <code>Reference</code> | Who this profile is for |\\n| [props.date] | <code>dateTime</code> | Date recommendation(s) created |\\n| [props.authority] | <code>Reference</code> | Who is responsible for protocol |\\n| [props.recommendation] | <code>BackboneElement</code> | Vaccine administration recommendations |\\n\\n\\n* * *\\n\\n\\n### builders.ingredient {#builders_ingredient}\\n\\n<p><code>ingredient(type, props)</code></p>\\n\\nCreate a FHIR Ingredient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | An identifier or code by which the ingredient can be referenced |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.for] | <code>Reference</code> | The product which this ingredient is a constituent part of |\\n| [props.role] | <code>CodeableConcept</code> | Purpose of the ingredient within the product, e.g. active, inactive |\\n| [props.function] | <code>CodeableConcept</code> | Precise action within the drug product, e.g. antioxidant, alkalizing agent |\\n| [props.allergenicIndicator] | <code>boolean</code> | If the ingredient is a known or suspected allergen |\\n| [props.manufacturer] | <code>BackboneElement</code> | An organization that manufactures this ingredient |\\n| [props.substance] | <code>BackboneElement</code> | The substance that comprises this ingredient |\\n\\n\\n* * *\\n\\n\\n### builders.insurancePlan {#builders_insurancePlan}\\n\\n<p><code>insurancePlan(type, props)</code></p>\\n\\nCreate a FHIR InsurancePlan resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for Product |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.type] | <code>CodeableConcept</code> | Kind of product |\\n| [props.name] | <code>string</code> | Official name |\\n| [props.alias] | <code>string</code> | Alternate names |\\n| [props.period] | <code>Period</code> | When the product is available |\\n| [props.ownedBy] | <code>Reference</code> | Plan issuer |\\n| [props.administeredBy] | <code>Reference</code> | Product administrator |\\n| [props.coverageArea] | <code>Reference</code> | Where product applies |\\n| [props.contact] | <code>BackboneElement</code> | Contact for the product |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoint |\\n| [props.network] | <code>Reference</code> | What networks are Included |\\n| [props.coverage] | <code>BackboneElement</code> | Coverage details |\\n| [props.plan] | <code>BackboneElement</code> | Plan details |\\n\\n\\n* * *\\n\\n\\n### builders.invoice {#builders_invoice}\\n\\n<p><code>invoice(type, props)</code></p>\\n\\nCreate a FHIR Invoice resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for item |\\n| [props.status] | <code>string</code> | draft | issued | balanced | cancelled | entered-in-error |\\n| [props.cancelledReason] | <code>string</code> | Reason for cancellation of this Invoice |\\n| [props.type] | <code>CodeableConcept</code> | Type of Invoice |\\n| [props.subject] | <code>Reference</code> | Recipient(s) of goods and services |\\n| [props.recipient] | <code>Reference</code> | Recipient of this invoice |\\n| [props.date] | <code>dateTime</code> | Invoice date / posting date |\\n| [props.participant] | <code>BackboneElement</code> | Participant in creation of this Invoice |\\n| [props.issuer] | <code>Reference</code> | Issuing Organization of Invoice |\\n| [props.account] | <code>Reference</code> | Account that is being balanced |\\n| [props.lineItem] | <code>BackboneElement</code> | Line items of this Invoice |\\n| [props.totalPriceComponent] | <code>any</code> | Components of Invoice total |\\n| [props.totalNet] | <code>Money</code> | Net total of this Invoice |\\n| [props.totalGross] | <code>Money</code> | Gross total of this Invoice |\\n| [props.paymentTerms] | <code>markdown</code> | Payment details |\\n| [props.note] | <code>Annotation</code> | Comments made about the invoice |\\n\\n\\n* * *\\n\\n\\n### builders.library {#builders_library}\\n\\n<p><code>library(type, props)</code></p>\\n\\nCreate a FHIR Library resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this library, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the library |\\n| [props.version] | <code>string</code> | Business version of the library |\\n| [props.name] | <code>string</code> | Name for this library (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this library (human friendly) |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the library |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.type] | <code>CodeableConcept</code> | logic-library | model-definition | asset-collection | module-definition |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Type of individual the library content is focused on |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the library |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for library (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this library is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the library |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the library was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the library was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the library is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | E.g. Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.parameter] | <code>ParameterDefinition</code> | Parameters defined by the library |\\n| [props.dataRequirement] | <code>DataRequirement</code> | What data is referenced by this library |\\n| [props.content] | <code>Attachment</code> | Contents of the library, either embedded or referenced |\\n\\n\\n* * *\\n\\n\\n### builders.list {#builders_list}\\n\\n<p><code>list(type, props)</code></p>\\n\\nCreate a FHIR List resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.status] | <code>string</code> | current | retired | entered-in-error |\\n| [props.mode] | <code>string</code> | working | snapshot | changes |\\n| [props.title] | <code>string</code> | Descriptive name for the list |\\n| [props.code] | <code>CodeableConcept</code> | What the purpose of this list is |\\n| [props.subject] | <code>Reference</code> | If all resources have the same subject |\\n| [props.encounter] | <code>Reference</code> | Context in which list created |\\n| [props.date] | <code>dateTime</code> | When the list was prepared |\\n| [props.source] | <code>Reference</code> | Who and/or what defined the list contents (aka Author) |\\n| [props.orderedBy] | <code>CodeableConcept</code> | What order the list has |\\n| [props.note] | <code>Annotation</code> | Comments about the list |\\n| [props.entry] | <code>BackboneElement</code> | Entries in the list |\\n| [props.emptyReason] | <code>CodeableConcept</code> | Why list is empty |\\n\\n\\n* * *\\n\\n\\n### builders.location {#builders_location}\\n\\n<p><code>location(type, props)</code></p>\\n\\nCreate a FHIR Location resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique code or number identifying the location to its users |\\n| [props.status] | <code>string</code> | active | suspended | inactive |\\n| [props.operationalStatus] | <code>Coding</code> | The operational status of the location (typically only for a bed/room) |\\n| [props.name] | <code>string</code> | Name of the location as used by humans |\\n| [props.alias] | <code>string</code> | A list of alternate names that the location is known as, or was known as, in the past |\\n| [props.description] | <code>string</code> | Additional details about the location that could be displayed as further information to identify the location beyond its name |\\n| [props.mode] | <code>string</code> | instance | kind |\\n| [props.type] | <code>CodeableConcept</code> | Type of function performed |\\n| [props.telecom] | <code>ContactPoint</code> | Contact details of the location |\\n| [props.address] | <code>Address</code> | Physical location |\\n| [props.physicalType] | <code>CodeableConcept</code> | Physical form of the location |\\n| [props.position] | <code>BackboneElement</code> | The absolute geographic location |\\n| [props.managingOrganization] | <code>Reference</code> | Organization responsible for provisioning and upkeep |\\n| [props.partOf] | <code>Reference</code> | Another Location this one is physically a part of |\\n| [props.hoursOfOperation] | <code>BackboneElement</code> | What days/times during a week is this location usually open |\\n| [props.availabilityExceptions] | <code>string</code> | Description of availability exceptions |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoints providing access to services operated for the location |\\n\\n\\n* * *\\n\\n\\n### builders.manufacturedItemDefinition {#builders_manufacturedItemDefinition}\\n\\n<p><code>manufacturedItemDefinition(type, props)</code></p>\\n\\nCreate a FHIR ManufacturedItemDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.manufacturedDoseForm] | <code>CodeableConcept</code> | Dose form as manufactured (before any necessary transformation) |\\n| [props.unitOfPresentation] | <code>CodeableConcept</code> | The “real world” units in which the quantity of the item is described |\\n| [props.manufacturer] | <code>Reference</code> | Manufacturer of the item (Note that this should be named \\\"manufacturer\\\" but it currently causes technical issues) |\\n| [props.ingredient] | <code>CodeableConcept</code> | The ingredients of this manufactured item. Only needed if these are not specified by incoming references from the Ingredient resource |\\n| [props.property] | <code>BackboneElement</code> | General characteristics of this item |\\n\\n\\n* * *\\n\\n\\n### builders.measure {#builders_measure}\\n\\n<p><code>measure(type, props)</code></p>\\n\\nCreate a FHIR Measure resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this measure, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the measure |\\n| [props.version] | <code>string</code> | Business version of the measure |\\n| [props.name] | <code>string</code> | Name for this measure (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this measure (human friendly) |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the measure |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the measure |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for measure (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this measure is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the measure |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the measure was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the measure was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the measure is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | The category of the measure, such as Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.library] | <code>canonical</code> | Logic used by the measure |\\n| [props.disclaimer] | <code>markdown</code> | Disclaimer for use of the measure or its referenced content |\\n| [props.scoring] | <code>CodeableConcept</code> | proportion | ratio | continuous-variable | cohort |\\n| [props.compositeScoring] | <code>CodeableConcept</code> | opportunity | all-or-nothing | linear | weighted |\\n| [props.type] | <code>CodeableConcept</code> | process | outcome | structure | patient-reported-outcome | composite |\\n| [props.riskAdjustment] | <code>string</code> | How risk adjustment is applied for this measure |\\n| [props.rateAggregation] | <code>string</code> | How is rate aggregation performed for this measure |\\n| [props.rationale] | <code>markdown</code> | Detailed description of why the measure exists |\\n| [props.clinicalRecommendationStatement] | <code>markdown</code> | Summary of clinical guidelines |\\n| [props.improvementNotation] | <code>CodeableConcept</code> | increase | decrease |\\n| [props.definition] | <code>markdown</code> | Defined terms used in the measure documentation |\\n| [props.guidance] | <code>markdown</code> | Additional guidance for implementers |\\n| [props.group] | <code>BackboneElement</code> | Population criteria group |\\n| [props.supplementalData] | <code>BackboneElement</code> | What other data should be reported with the measure |\\n\\n\\n* * *\\n\\n\\n### builders.measureReport {#builders_measureReport}\\n\\n<p><code>measureReport(type, props)</code></p>\\n\\nCreate a FHIR MeasureReport resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the MeasureReport |\\n| [props.status] | <code>string</code> | complete | pending | error |\\n| [props.type] | <code>string</code> | individual | subject-list | summary | data-collection |\\n| [props.measure] | <code>canonical</code> | What measure was calculated |\\n| [props.subject] | <code>Reference</code> | What individual(s) the report is for |\\n| [props.date] | <code>dateTime</code> | When the report was generated |\\n| [props.reporter] | <code>Reference</code> | Who is reporting the data |\\n| [props.period] | <code>Period</code> | What period the report covers |\\n| [props.improvementNotation] | <code>CodeableConcept</code> | increase | decrease |\\n| [props.group] | <code>BackboneElement</code> | Measure results for each group |\\n| [props.evaluatedResource] | <code>Reference</code> | What data was used to calculate the measure score |\\n\\n\\n* * *\\n\\n\\n### builders.media {#builders_media}\\n\\n<p><code>media(type, props)</code></p>\\n\\nCreate a FHIR Media resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifier(s) for the image |\\n| [props.basedOn] | <code>Reference</code> | Procedure that caused this media to be created |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown |\\n| [props.type] | <code>CodeableConcept</code> | Classification of media as image, video, or audio |\\n| [props.modality] | <code>CodeableConcept</code> | The type of acquisition equipment/process |\\n| [props.view] | <code>CodeableConcept</code> | Imaging view, e.g. Lateral or Antero-posterior |\\n| [props.subject] | <code>Reference</code> | Who/What this Media is a record of |\\n| [props.encounter] | <code>Reference</code> | Encounter associated with media |\\n| [props.created] | <code>dateTime</code> \\\\| <code>Period</code> | When Media was collected |\\n| [props.issued] | <code>instant</code> | Date/Time this version was made available |\\n| [props.operator] | <code>Reference</code> | The person who generated the image |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why was event performed? |\\n| [props.bodySite] | <code>CodeableConcept</code> | Observed body part |\\n| [props.deviceName] | <code>string</code> | Name of the device/manufacturer |\\n| [props.device] | <code>Reference</code> | Observing Device |\\n| [props.height] | <code>number</code> | Height of the image in pixels (photo/video) |\\n| [props.width] | <code>number</code> | Width of the image in pixels (photo/video) |\\n| [props.frames] | <code>number</code> | Number of frames if > 1 (photo) |\\n| [props.duration] | <code>decimal</code> | Length in seconds (audio / video) |\\n| [props.content] | <code>Attachment</code> | Actual Media - reference or data |\\n| [props.note] | <code>Annotation</code> | Comments made about the media |\\n\\n\\n* * *\\n\\n\\n### builders.medication {#builders_medication}\\n\\n<p><code>medication(type, props)</code></p>\\n\\nCreate a FHIR Medication resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for this medication |\\n| [props.code] | <code>CodeableConcept</code> | Codes that identify this medication |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error |\\n| [props.manufacturer] | <code>Reference</code> | Manufacturer of the item |\\n| [props.form] | <code>CodeableConcept</code> | powder | tablets | capsule + |\\n| [props.amount] | <code>Ratio</code> | Amount of drug in package |\\n| [props.ingredient] | <code>BackboneElement</code> | Active or inactive ingredient |\\n| [props.batch] | <code>BackboneElement</code> | Details about packaged medications |\\n\\n\\n* * *\\n\\n\\n### builders.medicationAdministration {#builders_medicationAdministration}\\n\\n<p><code>medicationAdministration(type, props)</code></p>\\n\\nCreate a FHIR MedicationAdministration resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier |\\n| [props.instantiates] | <code>string</code> | Instantiates protocol or definition |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason administration not performed |\\n| [props.category] | <code>CodeableConcept</code> | Type of medication usage |\\n| [props.medication] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | What was administered |\\n| [props.subject] | <code>Reference</code> | Who received medication |\\n| [props.context] | <code>Reference</code> | Encounter or Episode of Care administered as part of |\\n| [props.supportingInformation] | <code>Reference</code> | Additional information to support administration |\\n| [props.effective] | <code>dateTime</code> \\\\| <code>Period</code> | Start and end time of administration |\\n| [props.performer] | <code>BackboneElement</code> | Who performed the medication administration and what they did |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Reason administration performed |\\n| [props.reasonReference] | <code>Reference</code> | Condition or observation that supports why the medication was administered |\\n| [props.request] | <code>Reference</code> | Request administration performed against |\\n| [props.device] | <code>Reference</code> | Device used to administer |\\n| [props.note] | <code>Annotation</code> | Information about the administration |\\n| [props.dosage] | <code>BackboneElement</code> | Details of how medication was taken |\\n| [props.eventHistory] | <code>Reference</code> | A list of events of interest in the lifecycle |\\n\\n\\n* * *\\n\\n\\n### builders.medicationDispense {#builders_medicationDispense}\\n\\n<p><code>medicationDispense(type, props)</code></p>\\n\\nCreate a FHIR MedicationDispense resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier |\\n| [props.partOf] | <code>Reference</code> | Event that dispense is part of |\\n| [props.status] | <code>string</code> | preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Why a dispense was not performed |\\n| [props.category] | <code>CodeableConcept</code> | Type of medication dispense |\\n| [props.medication] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | What medication was supplied |\\n| [props.subject] | <code>Reference</code> | Who the dispense is for |\\n| [props.context] | <code>Reference</code> | Encounter / Episode associated with event |\\n| [props.supportingInformation] | <code>Reference</code> | Information that supports the dispensing of the medication |\\n| [props.performer] | <code>BackboneElement</code> | Who performed event |\\n| [props.location] | <code>Reference</code> | Where the dispense occurred |\\n| [props.authorizingPrescription] | <code>Reference</code> | Medication order that authorizes the dispense |\\n| [props.type] | <code>CodeableConcept</code> | Trial fill, partial fill, emergency fill, etc. |\\n| [props.quantity] | <code>Quantity</code> | Amount dispensed |\\n| [props.daysSupply] | <code>Quantity</code> | Amount of medication expressed as a timing amount |\\n| [props.whenPrepared] | <code>dateTime</code> | When product was packaged and reviewed |\\n| [props.whenHandedOver] | <code>dateTime</code> | When product was given out |\\n| [props.destination] | <code>Reference</code> | Where the medication was sent |\\n| [props.receiver] | <code>Reference</code> | Who collected the medication |\\n| [props.note] | <code>Annotation</code> | Information about the dispense |\\n| [props.dosageInstruction] | <code>Dosage</code> | How the medication is to be used by the patient or administered by the caregiver |\\n| [props.substitution] | <code>BackboneElement</code> | Whether a substitution was performed on the dispense |\\n| [props.detectedIssue] | <code>Reference</code> | Clinical issue with action |\\n| [props.eventHistory] | <code>Reference</code> | A list of relevant lifecycle events |\\n\\n\\n* * *\\n\\n\\n### builders.medicationKnowledge {#builders_medicationKnowledge}\\n\\n<p><code>medicationKnowledge(type, props)</code></p>\\n\\nCreate a FHIR MedicationKnowledge resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.code] | <code>CodeableConcept</code> | Code that identifies this medication |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error |\\n| [props.manufacturer] | <code>Reference</code> | Manufacturer of the item |\\n| [props.doseForm] | <code>CodeableConcept</code> | powder | tablets | capsule + |\\n| [props.amount] | <code>Quantity</code> | Amount of drug in package |\\n| [props.synonym] | <code>string</code> | Additional names for a medication |\\n| [props.relatedMedicationKnowledge] | <code>BackboneElement</code> | Associated or related medication information |\\n| [props.associatedMedication] | <code>Reference</code> | A medication resource that is associated with this medication |\\n| [props.productType] | <code>CodeableConcept</code> | Category of the medication or product |\\n| [props.monograph] | <code>BackboneElement</code> | Associated documentation about the medication |\\n| [props.ingredient] | <code>BackboneElement</code> | Active or inactive ingredient |\\n| [props.preparationInstruction] | <code>markdown</code> | The instructions for preparing the medication |\\n| [props.intendedRoute] | <code>CodeableConcept</code> | The intended or approved route of administration |\\n| [props.cost] | <code>BackboneElement</code> | The pricing of the medication |\\n| [props.monitoringProgram] | <code>BackboneElement</code> | Program under which a medication is reviewed |\\n| [props.administrationGuidelines] | <code>BackboneElement</code> | Guidelines for administration of the medication |\\n| [props.medicineClassification] | <code>BackboneElement</code> | Categorization of the medication within a formulary or classification system |\\n| [props.packaging] | <code>BackboneElement</code> | Details about packaged medications |\\n| [props.drugCharacteristic] | <code>BackboneElement</code> | Specifies descriptive properties of the medicine |\\n| [props.contraindication] | <code>Reference</code> | Potential clinical issue with or between medication(s) |\\n| [props.regulatory] | <code>BackboneElement</code> | Regulatory information about a medication |\\n| [props.kinetics] | <code>BackboneElement</code> | The time course of drug absorption, distribution, metabolism and excretion of a medication from the body |\\n\\n\\n* * *\\n\\n\\n### builders.medicationRequest {#builders_medicationRequest}\\n\\n<p><code>medicationRequest(type, props)</code></p>\\n\\nCreate a FHIR MedicationRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External ids for this request |\\n| [props.status] | <code>string</code> | active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.intent] | <code>string</code> | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.category] | <code>CodeableConcept</code> | Type of medication usage |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.doNotPerform] | <code>boolean</code> | True if request is prohibiting action |\\n| [props.reported] | <code>boolean</code> \\\\| <code>Reference</code> | Reported rather than primary record |\\n| [props.medication] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Medication to be taken |\\n| [props.subject] | <code>Reference</code> | Who or group medication request is for |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of encounter/admission/stay |\\n| [props.supportingInformation] | <code>Reference</code> | Information to support ordering of the medication |\\n| [props.authoredOn] | <code>dateTime</code> | When request was initially authored |\\n| [props.requester] | <code>Reference</code> | Who/What requested the Request |\\n| [props.performer] | <code>Reference</code> | Intended performer of administration |\\n| [props.performerType] | <code>CodeableConcept</code> | Desired kind of performer of the medication administration |\\n| [props.recorder] | <code>Reference</code> | Person who entered the request |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Reason or indication for ordering or not ordering the medication |\\n| [props.reasonReference] | <code>Reference</code> | Condition or observation that supports why the prescription is being written |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | What request fulfills |\\n| [props.groupIdentifier] | <code>Identifier</code> | Composite request this is part of |\\n| [props.courseOfTherapyType] | <code>CodeableConcept</code> | Overall pattern of medication administration |\\n| [props.insurance] | <code>Reference</code> | Associated insurance coverage |\\n| [props.note] | <code>Annotation</code> | Information about the prescription |\\n| [props.dosageInstruction] | <code>Dosage</code> | How the medication should be taken |\\n| [props.dispenseRequest] | <code>BackboneElement</code> | Medication supply authorization |\\n| [props.substitution] | <code>BackboneElement</code> | Any restrictions on medication substitution |\\n| [props.priorPrescription] | <code>Reference</code> | An order/prescription that is being replaced |\\n| [props.detectedIssue] | <code>Reference</code> | Clinical Issue with action |\\n| [props.eventHistory] | <code>Reference</code> | A list of events of interest in the lifecycle |\\n\\n\\n* * *\\n\\n\\n### builders.medicationStatement {#builders_medicationStatement}\\n\\n<p><code>medicationStatement(type, props)</code></p>\\n\\nCreate a FHIR MedicationStatement resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier |\\n| [props.basedOn] | <code>Reference</code> | Fulfils plan, proposal or order |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.category] | <code>CodeableConcept</code> | Type of medication usage |\\n| [props.medication] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | What medication was taken |\\n| [props.subject] | <code>Reference</code> | Who is/was taking  the medication |\\n| [props.context] | <code>Reference</code> | Encounter / Episode associated with MedicationStatement |\\n| [props.effective] | <code>dateTime</code> \\\\| <code>Period</code> | The date/time or interval when the medication is/was/will be taken |\\n| [props.dateAsserted] | <code>dateTime</code> | When the statement was asserted? |\\n| [props.informationSource] | <code>Reference</code> | Person or organization that provided the information about the taking of this medication |\\n| [props.derivedFrom] | <code>Reference</code> | Additional supporting information |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Reason for why the medication is being/was taken |\\n| [props.reasonReference] | <code>Reference</code> | Condition or observation that supports why the medication is being/was taken |\\n| [props.note] | <code>Annotation</code> | Further information about the statement |\\n| [props.dosage] | <code>Dosage</code> | Details of how medication is/was taken or should be taken |\\n\\n\\n* * *\\n\\n\\n### builders.medicinalProductDefinition {#builders_medicinalProductDefinition}\\n\\n<p><code>medicinalProductDefinition(type, props)</code></p>\\n\\nCreate a FHIR MedicinalProductDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for this product. Could be an MPID |\\n| [props.type] | <code>CodeableConcept</code> | Regulatory type, e.g. Investigational or Authorized |\\n| [props.domain] | <code>CodeableConcept</code> | If this medicine applies to human or veterinary uses |\\n| [props.version] | <code>string</code> | A business identifier relating to a specific version of the product |\\n| [props.status] | <code>CodeableConcept</code> | The status within the lifecycle of this product record |\\n| [props.statusDate] | <code>dateTime</code> | The date at which the given status became applicable |\\n| [props.description] | <code>markdown</code> | General description of this product |\\n| [props.combinedPharmaceuticalDoseForm] | <code>CodeableConcept</code> | The dose form for a single part product, or combined form of a multiple part product |\\n| [props.route] | <code>CodeableConcept</code> | The path by which the product is taken into or makes contact with the body |\\n| [props.indication] | <code>markdown</code> | Description of indication(s) for this product, used when structured indications are not required |\\n| [props.legalStatusOfSupply] | <code>CodeableConcept</code> | The legal status of supply of the medicinal product as classified by the regulator |\\n| [props.additionalMonitoringIndicator] | <code>CodeableConcept</code> | Whether the Medicinal Product is subject to additional monitoring for regulatory reasons |\\n| [props.specialMeasures] | <code>CodeableConcept</code> | Whether the Medicinal Product is subject to special measures for regulatory reasons |\\n| [props.pediatricUseIndicator] | <code>CodeableConcept</code> | If authorised for use in children |\\n| [props.classification] | <code>CodeableConcept</code> | Allows the product to be classified by various systems |\\n| [props.marketingStatus] | <code>MarketingStatus</code> | Marketing status of the medicinal product, in contrast to marketing authorization |\\n| [props.packagedMedicinalProduct] | <code>CodeableConcept</code> | Package type for the product |\\n| [props.ingredient] | <code>CodeableConcept</code> | The ingredients of this medicinal product - when not detailed in other resources |\\n| [props.impurity] | <code>CodeableReference</code> | Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product |\\n| [props.attachedDocument] | <code>Reference</code> | Additional documentation about the medicinal product |\\n| [props.masterFile] | <code>Reference</code> | A master file for the medicinal product (e.g. Pharmacovigilance System Master File) |\\n| [props.contact] | <code>BackboneElement</code> | A product specific contact, person (in a role), or an organization |\\n| [props.clinicalTrial] | <code>Reference</code> | Clinical trials or studies that this product is involved in |\\n| [props.code] | <code>Coding</code> | A code that this product is known by, within some formal terminology |\\n| [props.name] | <code>BackboneElement</code> | The product's name, including full name and possibly coded parts |\\n| [props.crossReference] | <code>BackboneElement</code> | Reference to another product, e.g. for linking authorised to investigational product |\\n| [props.operation] | <code>BackboneElement</code> | A manufacturing or administrative process for the medicinal product |\\n| [props.characteristic] | <code>BackboneElement</code> | Key product features such as \\\"sugar free\\\", \\\"modified release\\\" |\\n\\n\\n* * *\\n\\n\\n### builders.molecularSequence {#builders_molecularSequence}\\n\\n<p><code>molecularSequence(type, props)</code></p>\\n\\nCreate a FHIR MolecularSequence resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique ID for this particular sequence. This is a FHIR-defined id |\\n| [props.type] | <code>string</code> | aa | dna | rna |\\n| [props.coordinateSystem] | <code>integer</code> | Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end) |\\n| [props.patient] | <code>Reference</code> | Who and/or what this is about |\\n| [props.specimen] | <code>Reference</code> | Specimen used for sequencing |\\n| [props.device] | <code>Reference</code> | The method for sequencing |\\n| [props.performer] | <code>Reference</code> | Who should be responsible for test result |\\n| [props.quantity] | <code>Quantity</code> | The number of copies of the sequence of interest.  (RNASeq) |\\n| [props.referenceSeq] | <code>BackboneElement</code> | A sequence used as reference |\\n| [props.variant] | <code>BackboneElement</code> | Variant in sequence |\\n| [props.observedSeq] | <code>string</code> | Sequence that was observed |\\n| [props.quality] | <code>BackboneElement</code> | An set of value as quality of sequence |\\n| [props.readCoverage] | <code>integer</code> | Average number of reads representing a given nucleotide in the reconstructed sequence |\\n| [props.repository] | <code>BackboneElement</code> | External repository which contains detailed report related with observedSeq in this resource |\\n| [props.pointer] | <code>Reference</code> | Pointer to next atomic sequence |\\n| [props.structureVariant] | <code>BackboneElement</code> | Structural variant |\\n\\n\\n* * *\\n\\n\\n### builders.nutritionOrder {#builders_nutritionOrder}\\n\\n<p><code>nutritionOrder(type, props)</code></p>\\n\\nCreate a FHIR NutritionOrder resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifiers assigned to this order |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.instantiates] | <code>string</code> | Instantiates protocol or definition |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.intent] | <code>string</code> | proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.patient] | <code>Reference</code> | The person who requires the diet, formula or nutritional supplement |\\n| [props.encounter] | <code>Reference</code> | The encounter associated with this nutrition order |\\n| [props.dateTime] | <code>dateTime</code> | Date and time the nutrition order was requested |\\n| [props.orderer] | <code>Reference</code> | Who ordered the diet, formula or nutritional supplement |\\n| [props.allergyIntolerance] | <code>Reference</code> | List of the patient's food and nutrition-related allergies and intolerances |\\n| [props.foodPreferenceModifier] | <code>CodeableConcept</code> | Order-specific modifier about the type of food that should be given |\\n| [props.excludeFoodModifier] | <code>CodeableConcept</code> | Order-specific modifier about the type of food that should not be given |\\n| [props.oralDiet] | <code>BackboneElement</code> | Oral diet components |\\n| [props.supplement] | <code>BackboneElement</code> | Supplement components |\\n| [props.enteralFormula] | <code>BackboneElement</code> | Enteral formula components |\\n| [props.note] | <code>Annotation</code> | Comments |\\n\\n\\n* * *\\n\\n\\n### builders.nutritionProduct {#builders_nutritionProduct}\\n\\n<p><code>nutritionProduct(type, props)</code></p>\\n\\nCreate a FHIR NutritionProduct resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error |\\n| [props.category] | <code>CodeableConcept</code> | A category or class of the nutrition product (halal, kosher, gluten free, vegan, etc) |\\n| [props.code] | <code>CodeableConcept</code> | A code designating a specific type of nutritional product |\\n| [props.manufacturer] | <code>Reference</code> | Manufacturer, representative or officially responsible for the product |\\n| [props.nutrient] | <code>BackboneElement</code> | The product's nutritional information expressed by the nutrients |\\n| [props.ingredient] | <code>BackboneElement</code> | Ingredients contained in this product |\\n| [props.knownAllergen] | <code>CodeableReference</code> | Known or suspected allergens that are a part of this product |\\n| [props.productCharacteristic] | <code>BackboneElement</code> | Specifies descriptive properties of the nutrition product |\\n| [props.instance] | <code>BackboneElement</code> | One or several physical instances or occurrences of the nutrition product |\\n| [props.note] | <code>Annotation</code> | Comments made about the product |\\n\\n\\n* * *\\n\\n\\n### builders.observation {#builders_observation}\\n\\n<p><code>observation(type, props)</code></p>\\n\\nCreate a FHIR Observation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for observation |\\n| [props.basedOn] | <code>Reference</code> | Fulfills plan, proposal or order |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | registered | preliminary | final | amended + |\\n| [props.category] | <code>CodeableConcept</code> | Classification of  type of observation |\\n| [props.code] | <code>CodeableConcept</code> | Type of observation (code / type) |\\n| [props.subject] | <code>Reference</code> | Who and/or what the observation is about |\\n| [props.focus] | <code>Reference</code> | What the observation is about, when it is not about the subject of record |\\n| [props.encounter] | <code>Reference</code> | Healthcare event during which this observation is made |\\n| [props.effective] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> \\\\| <code>instant</code> | Clinically relevant time/time-period for observation |\\n| [props.issued] | <code>instant</code> | Date/Time this version was made available |\\n| [props.performer] | <code>Reference</code> | Who is responsible for the observation |\\n| [props.value] | <code>Quantity</code> \\\\| <code>CodeableConcept</code> \\\\| <code>string</code> \\\\| <code>boolean</code> \\\\| <code>integer</code> \\\\| <code>Range</code> \\\\| <code>Ratio</code> \\\\| <code>SampledData</code> \\\\| <code>time</code> \\\\| <code>dateTime</code> \\\\| <code>Period</code> | Actual result |\\n| [props.dataAbsentReason] | <code>CodeableConcept</code> | Why the result is missing |\\n| [props.interpretation] | <code>CodeableConcept</code> | High, low, normal, etc. |\\n| [props.note] | <code>Annotation</code> | Comments about the observation |\\n| [props.bodySite] | <code>CodeableConcept</code> | Observed body part |\\n| [props.method] | <code>CodeableConcept</code> | How it was done |\\n| [props.specimen] | <code>Reference</code> | Specimen used for this observation |\\n| [props.device] | <code>Reference</code> | (Measurement) Device |\\n| [props.referenceRange] | <code>BackboneElement</code> | Provides guide for interpretation |\\n| [props.hasMember] | <code>Reference</code> | Related resource that belongs to the Observation group |\\n| [props.derivedFrom] | <code>Reference</code> | Related measurements the observation is made from |\\n| [props.component] | <code>BackboneElement</code> | Component results |\\n\\n\\n* * *\\n\\n\\n### builders.observationDefinition {#builders_observationDefinition}\\n\\n<p><code>observationDefinition(type, props)</code></p>\\n\\nCreate a FHIR ObservationDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.category] | <code>CodeableConcept</code> | Category of observation |\\n| [props.code] | <code>CodeableConcept</code> | Type of observation (code / type) |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for this ObservationDefinition instance |\\n| [props.permittedDataType] | <code>string</code> | Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period |\\n| [props.multipleResultsAllowed] | <code>boolean</code> | Multiple results allowed |\\n| [props.method] | <code>CodeableConcept</code> | Method used to produce the observation |\\n| [props.preferredReportName] | <code>string</code> | Preferred report name |\\n| [props.quantitativeDetails] | <code>BackboneElement</code> | Characteristics of quantitative results |\\n| [props.qualifiedInterval] | <code>BackboneElement</code> | Qualified range for continuous and ordinal observation results |\\n| [props.validCodedValueSet] | <code>Reference</code> | Value set of valid coded values for the observations conforming to this ObservationDefinition |\\n| [props.normalCodedValueSet] | <code>Reference</code> | Value set of normal coded values for the observations conforming to this ObservationDefinition |\\n| [props.abnormalCodedValueSet] | <code>Reference</code> | Value set of abnormal coded values for the observations conforming to this ObservationDefinition |\\n| [props.criticalCodedValueSet] | <code>Reference</code> | Value set of critical coded values for the observations conforming to this ObservationDefinition |\\n\\n\\n* * *\\n\\n\\n### builders.organization {#builders_organization}\\n\\n<p><code>organization(type, props)</code></p>\\n\\nCreate a FHIR Organization resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifies this organization  across multiple systems |\\n| [props.active] | <code>boolean</code> | Whether the organization's record is still in active use |\\n| [props.type] | <code>CodeableConcept</code> | Kind of organization |\\n| [props.name] | <code>string</code> | Name used for the organization |\\n| [props.alias] | <code>string</code> | A list of alternate names that the organization is known as, or was known as in the past |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the organization |\\n| [props.address] | <code>Address</code> | An address for the organization |\\n| [props.partOf] | <code>Reference</code> | The organization of which this organization forms a part |\\n| [props.contact] | <code>BackboneElement</code> | Contact for the organization for a certain purpose |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoints providing access to services operated for the organization |\\n\\n\\n* * *\\n\\n\\n### builders.organizationAffiliation {#builders_organizationAffiliation}\\n\\n<p><code>organizationAffiliation(type, props)</code></p>\\n\\nCreate a FHIR OrganizationAffiliation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifiers that are specific to this role |\\n| [props.active] | <code>boolean</code> | Whether this organization affiliation record is in active use |\\n| [props.period] | <code>Period</code> | The period during which the participatingOrganization is affiliated with the primary organization |\\n| [props.organization] | <code>Reference</code> | Organization where the role is available |\\n| [props.participatingOrganization] | <code>Reference</code> | Organization that provides/performs the role (e.g. providing services or is a member of) |\\n| [props.network] | <code>Reference</code> | Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined) |\\n| [props.code] | <code>CodeableConcept</code> | Definition of the role the participatingOrganization plays |\\n| [props.specialty] | <code>CodeableConcept</code> | Specific specialty of the participatingOrganization in the context of the role |\\n| [props.location] | <code>Reference</code> | The location(s) at which the role occurs |\\n| [props.healthcareService] | <code>Reference</code> | Healthcare services provided through the role |\\n| [props.telecom] | <code>ContactPoint</code> | Contact details at the participatingOrganization relevant to this Affiliation |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoints providing access to services operated for this role |\\n\\n\\n* * *\\n\\n\\n### builders.packagedProductDefinition {#builders_packagedProductDefinition}\\n\\n<p><code>packagedProductDefinition(type, props)</code></p>\\n\\nCreate a FHIR PackagedProductDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | A unique identifier for this package as whole |\\n| [props.name] | <code>string</code> | A name for this package. Typically as listed in a drug formulary, catalogue, inventory etc |\\n| [props.type] | <code>CodeableConcept</code> | A high level category e.g. medicinal product, raw material, shipping container etc |\\n| [props.packageFor] | <code>Reference</code> | The product that this is a pack for |\\n| [props.status] | <code>CodeableConcept</code> | The status within the lifecycle of this item. High level - not intended to duplicate details elsewhere e.g. legal status, or authorization/marketing status |\\n| [props.statusDate] | <code>dateTime</code> | The date at which the given status became applicable |\\n| [props.containedItemQuantity] | <code>Quantity</code> | A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size |\\n| [props.description] | <code>markdown</code> | Textual description. Note that this is not the name of the package or product |\\n| [props.legalStatusOfSupply] | <code>BackboneElement</code> | The legal status of supply of the packaged item as classified by the regulator |\\n| [props.marketingStatus] | <code>MarketingStatus</code> | Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated |\\n| [props.characteristic] | <code>CodeableConcept</code> | Allows the key features to be recorded, such as \\\"hospital pack\\\", \\\"nurse prescribable\\\" |\\n| [props.copackagedIndicator] | <code>boolean</code> | If the drug product is supplied with another item such as a diluent or adjuvant |\\n| [props.manufacturer] | <code>Reference</code> | Manufacturer of this package type (multiple means these are all possible manufacturers) |\\n| [props.package] | <code>BackboneElement</code> | A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap |\\n\\n\\n* * *\\n\\n\\n### builders.patient {#builders_patient}\\n\\n<p><code>patient(type, props)</code></p>\\n\\nCreate a FHIR Patient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | An identifier for this patient |\\n| [props.active] | <code>boolean</code> | Whether this patient's record is in active use |\\n| [props.name] | <code>HumanName</code> | A name associated with the patient |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the individual |\\n| [props.gender] | <code>string</code> | male | female | other | unknown |\\n| [props.birthDate] | <code>date</code> | The date of birth for the individual |\\n| [props.deceased] | <code>boolean</code> \\\\| <code>dateTime</code> | Indicates if the individual is deceased or not |\\n| [props.address] | <code>Address</code> | An address for the individual |\\n| [props.maritalStatus] | <code>CodeableConcept</code> | Marital (civil) status of a patient |\\n| [props.multipleBirth] | <code>boolean</code> \\\\| <code>integer</code> | Whether patient is part of a multiple birth |\\n| [props.photo] | <code>Attachment</code> | Image of the patient |\\n| [props.contact] | <code>BackboneElement</code> | A contact party (e.g. guardian, partner, friend) for the patient |\\n| [props.communication] | <code>BackboneElement</code> | A language which may be used to communicate with the patient about his or her health |\\n| [props.generalPractitioner] | <code>Reference</code> | Patient's nominated primary care provider |\\n| [props.managingOrganization] | <code>Reference</code> | Organization that is the custodian of the patient record |\\n| [props.link] | <code>BackboneElement</code> | Link to another patient resource that concerns the same actual person |\\n\\n\\n* * *\\n\\n\\n### builders.paymentNotice {#builders_paymentNotice}\\n\\n<p><code>paymentNotice(type, props)</code></p>\\n\\nCreate a FHIR PaymentNotice resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for the payment noctice |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.request] | <code>Reference</code> | Request reference |\\n| [props.response] | <code>Reference</code> | Response reference |\\n| [props.created] | <code>dateTime</code> | Creation date |\\n| [props.provider] | <code>Reference</code> | Responsible practitioner |\\n| [props.payment] | <code>Reference</code> | Payment reference |\\n| [props.paymentDate] | <code>date</code> | Payment or clearing date |\\n| [props.payee] | <code>Reference</code> | Party being paid |\\n| [props.recipient] | <code>Reference</code> | Party being notified |\\n| [props.amount] | <code>Money</code> | Monetary amount of the payment |\\n| [props.paymentStatus] | <code>CodeableConcept</code> | Issued or cleared Status of the payment |\\n\\n\\n* * *\\n\\n\\n### builders.paymentReconciliation {#builders_paymentReconciliation}\\n\\n<p><code>paymentReconciliation(type, props)</code></p>\\n\\nCreate a FHIR PaymentReconciliation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for a payment reconciliation |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.period] | <code>Period</code> | Period covered |\\n| [props.created] | <code>dateTime</code> | Creation date |\\n| [props.paymentIssuer] | <code>Reference</code> | Party generating payment |\\n| [props.request] | <code>Reference</code> | Reference to requesting resource |\\n| [props.requestor] | <code>Reference</code> | Responsible practitioner |\\n| [props.outcome] | <code>string</code> | queued | complete | error | partial |\\n| [props.disposition] | <code>string</code> | Disposition message |\\n| [props.paymentDate] | <code>date</code> | When payment issued |\\n| [props.paymentAmount] | <code>Money</code> | Total amount of Payment |\\n| [props.paymentIdentifier] | <code>Identifier</code> | Business identifier for the payment |\\n| [props.detail] | <code>BackboneElement</code> | Settlement particulars |\\n| [props.formCode] | <code>CodeableConcept</code> | Printed form identifier |\\n| [props.processNote] | <code>BackboneElement</code> | Note concerning processing |\\n\\n\\n* * *\\n\\n\\n### builders.person {#builders_person}\\n\\n<p><code>person(type, props)</code></p>\\n\\nCreate a FHIR Person resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | A human identifier for this person |\\n| [props.name] | <code>HumanName</code> | A name associated with the person |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the person |\\n| [props.gender] | <code>string</code> | male | female | other | unknown |\\n| [props.birthDate] | <code>date</code> | The date on which the person was born |\\n| [props.address] | <code>Address</code> | One or more addresses for the person |\\n| [props.photo] | <code>Attachment</code> | Image of the person |\\n| [props.managingOrganization] | <code>Reference</code> | The organization that is the custodian of the person record |\\n| [props.active] | <code>boolean</code> | This person's record is in active use |\\n| [props.link] | <code>BackboneElement</code> | Link to a resource that concerns the same actual person |\\n\\n\\n* * *\\n\\n\\n### builders.planDefinition {#builders_planDefinition}\\n\\n<p><code>planDefinition(type, props)</code></p>\\n\\nCreate a FHIR PlanDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this plan definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the plan definition |\\n| [props.version] | <code>string</code> | Business version of the plan definition |\\n| [props.name] | <code>string</code> | Name for this plan definition (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this plan definition (human friendly) |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the plan definition |\\n| [props.type] | <code>CodeableConcept</code> | order-set | clinical-protocol | eca-rule | workflow-definition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> \\\\| <code>canonical</code> | Type of individual the plan definition is focused on |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the plan definition |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for plan definition (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this plan definition is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the plan |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the plan definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the plan definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the plan definition is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | E.g. Education, Treatment, Assessment |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations |\\n| [props.library] | <code>canonical</code> | Logic used by the plan definition |\\n| [props.goal] | <code>BackboneElement</code> | What the plan is trying to accomplish |\\n| [props.action] | <code>BackboneElement</code> | Action defined by the plan |\\n\\n\\n* * *\\n\\n\\n### builders.practitioner {#builders_practitioner}\\n\\n<p><code>practitioner(type, props)</code></p>\\n\\nCreate a FHIR Practitioner resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | An identifier for the person as this agent |\\n| [props.active] | <code>boolean</code> | Whether this practitioner's record is in active use |\\n| [props.name] | <code>HumanName</code> | The name(s) associated with the practitioner |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the practitioner (that apply to all roles) |\\n| [props.address] | <code>Address</code> | Address(es) of the practitioner that are not role specific (typically home address) |\\n| [props.gender] | <code>string</code> | male | female | other | unknown |\\n| [props.birthDate] | <code>date</code> | The date  on which the practitioner was born |\\n| [props.photo] | <code>Attachment</code> | Image of the person |\\n| [props.qualification] | <code>BackboneElement</code> | Certification, licenses, or training pertaining to the provision of care |\\n| [props.communication] | <code>CodeableConcept</code> | A language the practitioner can use in patient communication |\\n\\n\\n* * *\\n\\n\\n### builders.practitionerRole {#builders_practitionerRole}\\n\\n<p><code>practitionerRole(type, props)</code></p>\\n\\nCreate a FHIR PractitionerRole resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifiers that are specific to a role/location |\\n| [props.active] | <code>boolean</code> | Whether this practitioner role record is in active use |\\n| [props.period] | <code>Period</code> | The period during which the practitioner is authorized to perform in these role(s) |\\n| [props.practitioner] | <code>Reference</code> | Practitioner that is able to provide the defined services for the organization |\\n| [props.organization] | <code>Reference</code> | Organization where the roles are available |\\n| [props.code] | <code>CodeableConcept</code> | Roles which this practitioner may perform |\\n| [props.specialty] | <code>CodeableConcept</code> | Specific specialty of the practitioner |\\n| [props.location] | <code>Reference</code> | The location(s) at which this practitioner provides care |\\n| [props.healthcareService] | <code>Reference</code> | The list of healthcare services that this worker provides for this role's Organization/Location(s) |\\n| [props.telecom] | <code>ContactPoint</code> | Contact details that are specific to the role/location/service |\\n| [props.availableTime] | <code>BackboneElement</code> | Times the Service Site is available |\\n| [props.notAvailable] | <code>BackboneElement</code> | Not available during this time due to provided reason |\\n| [props.availabilityExceptions] | <code>string</code> | Description of availability exceptions |\\n| [props.endpoint] | <code>Reference</code> | Technical endpoints providing access to services operated for the practitioner with this role |\\n\\n\\n* * *\\n\\n\\n### builders.procedure {#builders_procedure}\\n\\n<p><code>procedure(type, props)</code></p>\\n\\nCreate a FHIR Procedure resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Identifiers for this procedure |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | A request for this procedure |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.category] | <code>CodeableConcept</code> | Classification of the procedure |\\n| [props.code] | <code>CodeableConcept</code> | Identification of the procedure |\\n| [props.subject] | <code>Reference</code> | Who the procedure was performed on |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.performed] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>string</code> \\\\| <code>Age</code> \\\\| <code>Range</code> | When the procedure was performed |\\n| [props.recorder] | <code>Reference</code> | Who recorded the procedure |\\n| [props.asserter] | <code>Reference</code> | Person who asserts this procedure |\\n| [props.performer] | <code>BackboneElement</code> | The people who performed the procedure |\\n| [props.location] | <code>Reference</code> | Where the procedure happened |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Coded reason procedure performed |\\n| [props.reasonReference] | <code>Reference</code> | The justification that the procedure was performed |\\n| [props.bodySite] | <code>CodeableConcept</code> | Target body sites |\\n| [props.outcome] | <code>CodeableConcept</code> | The result of procedure |\\n| [props.report] | <code>Reference</code> | Any report resulting from the procedure |\\n| [props.complication] | <code>CodeableConcept</code> | Complication following the procedure |\\n| [props.complicationDetail] | <code>Reference</code> | A condition that is a result of the procedure |\\n| [props.followUp] | <code>CodeableConcept</code> | Instructions for follow up |\\n| [props.note] | <code>Annotation</code> | Additional information about the procedure |\\n| [props.focalDevice] | <code>BackboneElement</code> | Manipulated, implanted, or removed device |\\n| [props.usedReference] | <code>Reference</code> | Items used during procedure |\\n| [props.usedCode] | <code>CodeableConcept</code> | Coded items used during the procedure |\\n\\n\\n* * *\\n\\n\\n### builders.questionnaire {#builders_questionnaire}\\n\\n<p><code>questionnaire(type, props)</code></p>\\n\\nCreate a FHIR Questionnaire resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this questionnaire, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the questionnaire |\\n| [props.version] | <code>string</code> | Business version of the questionnaire |\\n| [props.name] | <code>string</code> | Name for this questionnaire (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this questionnaire (human friendly) |\\n| [props.derivedFrom] | <code>canonical</code> | Instantiates protocol or definition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subjectType] | <code>string</code> | Resource that can be subject of QuestionnaireResponse |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the questionnaire |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for questionnaire (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this questionnaire is defined |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the questionnaire was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the questionnaire was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the questionnaire is expected to be used |\\n| [props.code] | <code>Coding</code> | Concept that represents the overall questionnaire |\\n| [props.item] | <code>BackboneElement</code> | Questions and sections within the Questionnaire |\\n\\n\\n* * *\\n\\n\\n### builders.questionnaireResponse {#builders_questionnaireResponse}\\n\\n<p><code>questionnaireResponse(type, props)</code></p>\\n\\nCreate a FHIR QuestionnaireResponse resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique id for this set of answers |\\n| [props.basedOn] | <code>Reference</code> | Request fulfilled by this QuestionnaireResponse |\\n| [props.partOf] | <code>Reference</code> | Part of this action |\\n| [props.questionnaire] | <code>canonical</code> | Form being answered |\\n| [props.status] | <code>string</code> | in-progress | completed | amended | entered-in-error | stopped |\\n| [props.subject] | <code>Reference</code> | The subject of the questions |\\n| [props.encounter] | <code>Reference</code> | Encounter created as part of |\\n| [props.authored] | <code>dateTime</code> | Date the answers were gathered |\\n| [props.author] | <code>Reference</code> | Person who received and recorded the answers |\\n| [props.source] | <code>Reference</code> | The person who answered the questions |\\n| [props.item] | <code>BackboneElement</code> | Groups and questions |\\n\\n\\n* * *\\n\\n\\n### builders.regulatedAuthorization {#builders_regulatedAuthorization}\\n\\n<p><code>regulatedAuthorization(type, props)</code></p>\\n\\nCreate a FHIR RegulatedAuthorization resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier for the authorization, typically assigned by the authorizing body |\\n| [props.subject] | <code>Reference</code> | The product type, treatment, facility or activity that is being authorized |\\n| [props.type] | <code>CodeableConcept</code> | Overall type of this authorization, for example drug marketing approval, orphan drug designation |\\n| [props.description] | <code>markdown</code> | General textual supporting information |\\n| [props.region] | <code>CodeableConcept</code> | The territory in which the authorization has been granted |\\n| [props.status] | <code>CodeableConcept</code> | The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications |\\n| [props.statusDate] | <code>dateTime</code> | The date at which the current status was assigned |\\n| [props.validityPeriod] | <code>Period</code> | The time period in which the regulatory approval etc. is in effect, e.g. a Marketing Authorization includes the date of authorization and/or expiration date |\\n| [props.indication] | <code>CodeableReference</code> | Condition for which the use of the regulated product applies |\\n| [props.intendedUse] | <code>CodeableConcept</code> | The intended use of the product, e.g. prevention, treatment |\\n| [props.basis] | <code>CodeableConcept</code> | The legal/regulatory framework or reasons under which this authorization is granted |\\n| [props.holder] | <code>Reference</code> | The organization that has been granted this authorization, by the regulator |\\n| [props.regulator] | <code>Reference</code> | The regulatory authority or authorizing body granting the authorization |\\n| [props.case] | <code>BackboneElement</code> | The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page) |\\n\\n\\n* * *\\n\\n\\n### builders.relatedPerson {#builders_relatedPerson}\\n\\n<p><code>relatedPerson(type, props)</code></p>\\n\\nCreate a FHIR RelatedPerson resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | A human identifier for this person |\\n| [props.active] | <code>boolean</code> | Whether this related person's record is in active use |\\n| [props.patient] | <code>Reference</code> | The patient this person is related to |\\n| [props.relationship] | <code>CodeableConcept</code> | The nature of the relationship |\\n| [props.name] | <code>HumanName</code> | A name associated with the person |\\n| [props.telecom] | <code>ContactPoint</code> | A contact detail for the person |\\n| [props.gender] | <code>string</code> | male | female | other | unknown |\\n| [props.birthDate] | <code>date</code> | The date on which the related person was born |\\n| [props.address] | <code>Address</code> | Address where the related person can be contacted or visited |\\n| [props.photo] | <code>Attachment</code> | Image of the person |\\n| [props.period] | <code>Period</code> | Period of time that this relationship is considered valid |\\n| [props.communication] | <code>BackboneElement</code> | A language which may be used to communicate with about the patient's health |\\n\\n\\n* * *\\n\\n\\n### builders.requestGroup {#builders_requestGroup}\\n\\n<p><code>requestGroup(type, props)</code></p>\\n\\nCreate a FHIR RequestGroup resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | Fulfills plan, proposal, or order |\\n| [props.replaces] | <code>Reference</code> | Request(s) replaced by this request |\\n| [props.groupIdentifier] | <code>Identifier</code> | Composite request this is part of |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.intent] | <code>string</code> | proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.code] | <code>CodeableConcept</code> | What's being requested/ordered |\\n| [props.subject] | <code>Reference</code> | Who the request group is about |\\n| [props.encounter] | <code>Reference</code> | Created as part of |\\n| [props.authoredOn] | <code>dateTime</code> | When the request group was authored |\\n| [props.author] | <code>Reference</code> | Device or practitioner that authored the request group |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why the request group is needed |\\n| [props.reasonReference] | <code>Reference</code> | Why the request group is needed |\\n| [props.note] | <code>Annotation</code> | Additional notes about the response |\\n| [props.action] | <code>BackboneElement</code> | Proposed actions, if any |\\n\\n\\n* * *\\n\\n\\n### builders.researchDefinition {#builders_researchDefinition}\\n\\n<p><code>researchDefinition(type, props)</code></p>\\n\\nCreate a FHIR ResearchDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this research definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the research definition |\\n| [props.version] | <code>string</code> | Business version of the research definition |\\n| [props.name] | <code>string</code> | Name for this research definition (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this research definition (human friendly) |\\n| [props.shortTitle] | <code>string</code> | Title for use in informal contexts |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the ResearchDefinition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the research definition |\\n| [props.comment] | <code>string</code> | Used for footnotes or explanatory notes |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for research definition (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this research definition is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the ResearchDefinition |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the research definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the research definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the research definition is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | The category of the ResearchDefinition, such as Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.library] | <code>canonical</code> | Logic used by the ResearchDefinition |\\n| [props.population] | <code>Reference</code> | What population? |\\n| [props.exposure] | <code>Reference</code> | What exposure? |\\n| [props.exposureAlternative] | <code>Reference</code> | What alternative exposure state? |\\n| [props.outcome] | <code>Reference</code> | What outcome? |\\n\\n\\n* * *\\n\\n\\n### builders.researchElementDefinition {#builders_researchElementDefinition}\\n\\n<p><code>researchElementDefinition(type, props)</code></p>\\n\\nCreate a FHIR ResearchElementDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.url] | <code>string</code> | Canonical identifier for this research element definition, represented as a URI (globally unique) |\\n| [props.identifier] | <code>Identifier</code> | Additional identifier for the research element definition |\\n| [props.version] | <code>string</code> | Business version of the research element definition |\\n| [props.name] | <code>string</code> | Name for this research element definition (computer friendly) |\\n| [props.title] | <code>string</code> | Name for this research element definition (human friendly) |\\n| [props.shortTitle] | <code>string</code> | Title for use in informal contexts |\\n| [props.subtitle] | <code>string</code> | Subordinate title of the ResearchElementDefinition |\\n| [props.status] | <code>string</code> | draft | active | retired | unknown |\\n| [props.experimental] | <code>boolean</code> | For testing purposes, not real usage |\\n| [props.subject] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device |\\n| [props.date] | <code>dateTime</code> | Date last changed |\\n| [props.publisher] | <code>string</code> | Name of the publisher (organization or individual) |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the publisher |\\n| [props.description] | <code>markdown</code> | Natural language description of the research element definition |\\n| [props.comment] | <code>string</code> | Used for footnotes or explanatory notes |\\n| [props.useContext] | <code>UsageContext</code> | The context that the content is intended to support |\\n| [props.jurisdiction] | <code>CodeableConcept</code> | Intended jurisdiction for research element definition (if applicable) |\\n| [props.purpose] | <code>markdown</code> | Why this research element definition is defined |\\n| [props.usage] | <code>string</code> | Describes the clinical usage of the ResearchElementDefinition |\\n| [props.copyright] | <code>markdown</code> | Use and/or publishing restrictions |\\n| [props.approvalDate] | <code>date</code> | When the research element definition was approved by publisher |\\n| [props.lastReviewDate] | <code>date</code> | When the research element definition was last reviewed |\\n| [props.effectivePeriod] | <code>Period</code> | When the research element definition is expected to be used |\\n| [props.topic] | <code>CodeableConcept</code> | The category of the ResearchElementDefinition, such as Education, Treatment, Assessment, etc. |\\n| [props.author] | <code>ContactDetail</code> | Who authored the content |\\n| [props.editor] | <code>ContactDetail</code> | Who edited the content |\\n| [props.reviewer] | <code>ContactDetail</code> | Who reviewed the content |\\n| [props.endorser] | <code>ContactDetail</code> | Who endorsed the content |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | Additional documentation, citations, etc. |\\n| [props.library] | <code>canonical</code> | Logic used by the ResearchElementDefinition |\\n| [props.type] | <code>string</code> | population | exposure | outcome |\\n| [props.variableType] | <code>string</code> | dichotomous | continuous | descriptive |\\n| [props.characteristic] | <code>BackboneElement</code> | What defines the members of the research element |\\n\\n\\n* * *\\n\\n\\n### builders.researchStudy {#builders_researchStudy}\\n\\n<p><code>researchStudy(type, props)</code></p>\\n\\nCreate a FHIR ResearchStudy resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for study |\\n| [props.title] | <code>string</code> | Name for this study |\\n| [props.protocol] | <code>Reference</code> | Steps followed in executing study |\\n| [props.partOf] | <code>Reference</code> | Part of larger study |\\n| [props.status] | <code>string</code> | active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn |\\n| [props.primaryPurposeType] | <code>CodeableConcept</code> | treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility |\\n| [props.phase] | <code>CodeableConcept</code> | n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4 |\\n| [props.category] | <code>CodeableConcept</code> | Classifications for the study |\\n| [props.focus] | <code>CodeableConcept</code> | Drugs, devices, etc. under study |\\n| [props.condition] | <code>CodeableConcept</code> | Condition being studied |\\n| [props.contact] | <code>ContactDetail</code> | Contact details for the study |\\n| [props.relatedArtifact] | <code>RelatedArtifact</code> | References and dependencies |\\n| [props.keyword] | <code>CodeableConcept</code> | Used to search for the study |\\n| [props.location] | <code>CodeableConcept</code> | Geographic region(s) for study |\\n| [props.description] | <code>markdown</code> | What this is study doing |\\n| [props.enrollment] | <code>Reference</code> | Inclusion & exclusion criteria |\\n| [props.period] | <code>Period</code> | When the study began and ended |\\n| [props.sponsor] | <code>Reference</code> | Organization that initiates and is legally responsible for the study |\\n| [props.principalInvestigator] | <code>Reference</code> | Researcher who oversees multiple aspects of the study |\\n| [props.site] | <code>Reference</code> | Facility where study activities are conducted |\\n| [props.reasonStopped] | <code>CodeableConcept</code> | accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design |\\n| [props.note] | <code>Annotation</code> | Comments made about the study |\\n| [props.arm] | <code>BackboneElement</code> | Defined path through the study for a subject |\\n| [props.objective] | <code>BackboneElement</code> | A goal for the study |\\n\\n\\n* * *\\n\\n\\n### builders.researchSubject {#builders_researchSubject}\\n\\n<p><code>researchSubject(type, props)</code></p>\\n\\nCreate a FHIR ResearchSubject resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for research subject in a study |\\n| [props.status] | <code>string</code> | candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn |\\n| [props.period] | <code>Period</code> | Start and end of participation |\\n| [props.study] | <code>Reference</code> | Study subject is part of |\\n| [props.individual] | <code>Reference</code> | Who is part of study |\\n| [props.assignedArm] | <code>string</code> | What path should be followed |\\n| [props.actualArm] | <code>string</code> | What path was followed |\\n| [props.consent] | <code>Reference</code> | Agreement to participate in study |\\n\\n\\n* * *\\n\\n\\n### builders.riskAssessment {#builders_riskAssessment}\\n\\n<p><code>riskAssessment(type, props)</code></p>\\n\\nCreate a FHIR RiskAssessment resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier for the assessment |\\n| [props.basedOn] | <code>Reference</code> | Request fulfilled by this assessment |\\n| [props.parent] | <code>Reference</code> | Part of this occurrence |\\n| [props.status] | <code>string</code> | registered | preliminary | final | amended + |\\n| [props.method] | <code>CodeableConcept</code> | Evaluation mechanism |\\n| [props.code] | <code>CodeableConcept</code> | Type of assessment |\\n| [props.subject] | <code>Reference</code> | Who/what does assessment apply to? |\\n| [props.encounter] | <code>Reference</code> | Where was assessment performed? |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> | When was assessment made? |\\n| [props.condition] | <code>Reference</code> | Condition assessed |\\n| [props.performer] | <code>Reference</code> | Who did assessment? |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why the assessment was necessary? |\\n| [props.reasonReference] | <code>Reference</code> | Why the assessment was necessary? |\\n| [props.basis] | <code>Reference</code> | Information used in assessment |\\n| [props.prediction] | <code>BackboneElement</code> | Outcome predicted |\\n| [props.mitigation] | <code>string</code> | How to reduce risk |\\n| [props.note] | <code>Annotation</code> | Comments on the risk assessment |\\n\\n\\n* * *\\n\\n\\n### builders.schedule {#builders_schedule}\\n\\n<p><code>schedule(type, props)</code></p>\\n\\nCreate a FHIR Schedule resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this item |\\n| [props.active] | <code>boolean</code> | Whether this schedule is in active use |\\n| [props.serviceCategory] | <code>CodeableConcept</code> | High-level category |\\n| [props.serviceType] | <code>CodeableConcept</code> | Specific service |\\n| [props.specialty] | <code>CodeableConcept</code> | Type of specialty needed |\\n| [props.actor] | <code>Reference</code> | Resource(s) that availability information is being provided for |\\n| [props.planningHorizon] | <code>Period</code> | Period of time covered by schedule |\\n| [props.comment] | <code>string</code> | Comments on availability |\\n\\n\\n* * *\\n\\n\\n### builders.serviceRequest {#builders_serviceRequest}\\n\\n<p><code>serviceRequest(type, props)</code></p>\\n\\nCreate a FHIR ServiceRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifiers assigned to this order |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Instantiates FHIR protocol or definition |\\n| [props.instantiatesUri] | <code>string</code> | Instantiates external protocol or definition |\\n| [props.basedOn] | <code>Reference</code> | What request fulfills |\\n| [props.replaces] | <code>Reference</code> | What request replaces |\\n| [props.requisition] | <code>Identifier</code> | Composite Request ID |\\n| [props.status] | <code>string</code> | draft | active | on-hold | revoked | completed | entered-in-error | unknown |\\n| [props.intent] | <code>string</code> | proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.category] | <code>CodeableConcept</code> | Classification of service |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.doNotPerform] | <code>boolean</code> | True if service/procedure should not be performed |\\n| [props.code] | <code>CodeableConcept</code> | What is being requested/ordered |\\n| [props.orderDetail] | <code>CodeableConcept</code> | Additional order information |\\n| [props.quantity] | <code>Quantity</code> \\\\| <code>Ratio</code> \\\\| <code>Range</code> | Service amount |\\n| [props.subject] | <code>Reference</code> | Individual or Entity the service is ordered for |\\n| [props.encounter] | <code>Reference</code> | Encounter in which the request was created |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> | When service should occur |\\n| [props.asNeeded] | <code>boolean</code> \\\\| <code>CodeableConcept</code> | Preconditions for service |\\n| [props.authoredOn] | <code>dateTime</code> | Date request signed |\\n| [props.requester] | <code>Reference</code> | Who/what is requesting service |\\n| [props.performerType] | <code>CodeableConcept</code> | Performer role |\\n| [props.performer] | <code>Reference</code> | Requested performer |\\n| [props.locationCode] | <code>CodeableConcept</code> | Requested location |\\n| [props.locationReference] | <code>Reference</code> | Requested location |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Explanation/Justification for procedure or service |\\n| [props.reasonReference] | <code>Reference</code> | Explanation/Justification for service or service |\\n| [props.insurance] | <code>Reference</code> | Associated insurance coverage |\\n| [props.supportingInfo] | <code>Reference</code> | Additional clinical information |\\n| [props.specimen] | <code>Reference</code> | Procedure Samples |\\n| [props.bodySite] | <code>CodeableConcept</code> | Location on Body |\\n| [props.note] | <code>Annotation</code> | Comments |\\n| [props.patientInstruction] | <code>string</code> | Patient or consumer-oriented instructions |\\n| [props.relevantHistory] | <code>Reference</code> | Request provenance |\\n\\n\\n* * *\\n\\n\\n### builders.slot {#builders_slot}\\n\\n<p><code>slot(type, props)</code></p>\\n\\nCreate a FHIR Slot resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Ids for this item |\\n| [props.serviceCategory] | <code>CodeableConcept</code> | A broad categorization of the service that is to be performed during this appointment |\\n| [props.serviceType] | <code>CodeableConcept</code> | The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource |\\n| [props.specialty] | <code>CodeableConcept</code> | The specialty of a practitioner that would be required to perform the service requested in this appointment |\\n| [props.appointmentType] | <code>CodeableConcept</code> | The style of appointment or patient that may be booked in the slot (not service type) |\\n| [props.schedule] | <code>Reference</code> | The schedule resource that this slot defines an interval of status information |\\n| [props.status] | <code>string</code> | busy | free | busy-unavailable | busy-tentative | entered-in-error |\\n| [props.start] | <code>instant</code> | Date/Time that the slot is to begin |\\n| [props.end] | <code>instant</code> | Date/Time that the slot is to conclude |\\n| [props.overbooked] | <code>boolean</code> | This slot has already been overbooked, appointments are unlikely to be accepted for this time |\\n| [props.comment] | <code>string</code> | Comments on the slot to describe any extended information. Such as custom constraints on the slot |\\n\\n\\n* * *\\n\\n\\n### builders.specimen {#builders_specimen}\\n\\n<p><code>specimen(type, props)</code></p>\\n\\nCreate a FHIR Specimen resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External Identifier |\\n| [props.accessionIdentifier] | <code>Identifier</code> | Identifier assigned by the lab |\\n| [props.status] | <code>string</code> | available | unavailable | unsatisfactory | entered-in-error |\\n| [props.type] | <code>CodeableConcept</code> | Kind of material that forms the specimen |\\n| [props.subject] | <code>Reference</code> | Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device |\\n| [props.receivedTime] | <code>dateTime</code> | The time when specimen was received for processing |\\n| [props.parent] | <code>Reference</code> | Specimen from which this specimen originated |\\n| [props.request] | <code>Reference</code> | Why the specimen was collected |\\n| [props.collection] | <code>BackboneElement</code> | Collection details |\\n| [props.processing] | <code>BackboneElement</code> | Processing and processing step details |\\n| [props.container] | <code>BackboneElement</code> | Direct container of specimen (tube/slide, etc.) |\\n| [props.condition] | <code>CodeableConcept</code> | State of the specimen |\\n| [props.note] | <code>Annotation</code> | Comments |\\n\\n\\n* * *\\n\\n\\n### builders.specimenDefinition {#builders_specimenDefinition}\\n\\n<p><code>specimenDefinition(type, props)</code></p>\\n\\nCreate a FHIR SpecimenDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business identifier of a kind of specimen |\\n| [props.typeCollected] | <code>CodeableConcept</code> | Kind of material to collect |\\n| [props.patientPreparation] | <code>CodeableConcept</code> | Patient preparation for collection |\\n| [props.timeAspect] | <code>string</code> | Time aspect for collection |\\n| [props.collection] | <code>CodeableConcept</code> | Specimen collection procedure |\\n| [props.typeTested] | <code>BackboneElement</code> | Specimen in container intended for testing by lab |\\n\\n\\n* * *\\n\\n\\n### builders.substance {#builders_substance}\\n\\n<p><code>substance(type, props)</code></p>\\n\\nCreate a FHIR Substance resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Unique identifier |\\n| [props.status] | <code>string</code> | active | inactive | entered-in-error |\\n| [props.category] | <code>CodeableConcept</code> | What class/type of substance this is |\\n| [props.code] | <code>CodeableConcept</code> | What substance this is |\\n| [props.description] | <code>string</code> | Textual description of the substance, comments |\\n| [props.instance] | <code>BackboneElement</code> | If this describes a specific package/container of the substance |\\n| [props.ingredient] | <code>BackboneElement</code> | Composition information about the substance |\\n\\n\\n* * *\\n\\n\\n### builders.substanceDefinition {#builders_substanceDefinition}\\n\\n<p><code>substanceDefinition(type, props)</code></p>\\n\\nCreate a FHIR SubstanceDefinition resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Identifier by which this substance is known |\\n| [props.version] | <code>string</code> | A business level version identifier of the substance |\\n| [props.status] | <code>CodeableConcept</code> | Status of substance within the catalogue e.g. active, retired |\\n| [props.classification] | <code>CodeableConcept</code> | A categorization, high level e.g. polymer or nucleic acid, or food, chemical, biological, or lower e.g. polymer linear or branch chain, or type of impurity |\\n| [props.domain] | <code>CodeableConcept</code> | If the substance applies to human or veterinary use |\\n| [props.grade] | <code>CodeableConcept</code> | The quality standard, established benchmark, to which substance complies (e.g. USP/NF, BP) |\\n| [props.description] | <code>markdown</code> | Textual description of the substance |\\n| [props.informationSource] | <code>Reference</code> | Supporting literature |\\n| [props.note] | <code>Annotation</code> | Textual comment about the substance's catalogue or registry record |\\n| [props.manufacturer] | <code>Reference</code> | The entity that creates, makes, produces or fabricates the substance |\\n| [props.supplier] | <code>Reference</code> | An entity that is the source for the substance. It may be different from the manufacturer |\\n| [props.moiety] | <code>BackboneElement</code> | Moiety, for structural modifications |\\n| [props.property] | <code>BackboneElement</code> | General specifications for this substance |\\n| [props.molecularWeight] | <code>BackboneElement</code> | The molecular weight or weight range |\\n| [props.structure] | <code>BackboneElement</code> | Structural information |\\n| [props.code] | <code>BackboneElement</code> | Codes associated with the substance |\\n| [props.name] | <code>BackboneElement</code> | Names applicable to this substance |\\n| [props.relationship] | <code>BackboneElement</code> | A link between this substance and another |\\n| [props.sourceMaterial] | <code>BackboneElement</code> | Material or taxonomic/anatomical source |\\n\\n\\n* * *\\n\\n\\n### builders.supplyDelivery {#builders_supplyDelivery}\\n\\n<p><code>supplyDelivery(type, props)</code></p>\\n\\nCreate a FHIR SupplyDelivery resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier |\\n| [props.basedOn] | <code>Reference</code> | Fulfills plan, proposal or order |\\n| [props.partOf] | <code>Reference</code> | Part of referenced event |\\n| [props.status] | <code>string</code> | in-progress | completed | abandoned | entered-in-error |\\n| [props.patient] | <code>Reference</code> | Patient for whom the item is supplied |\\n| [props.type] | <code>CodeableConcept</code> | Category of dispense event |\\n| [props.suppliedItem] | <code>BackboneElement</code> | The item that is delivered or supplied |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> | When event occurred |\\n| [props.supplier] | <code>Reference</code> | Dispenser |\\n| [props.destination] | <code>Reference</code> | Where the Supply was sent |\\n| [props.receiver] | <code>Reference</code> | Who collected the Supply |\\n\\n\\n* * *\\n\\n\\n### builders.supplyRequest {#builders_supplyRequest}\\n\\n<p><code>supplyRequest(type, props)</code></p>\\n\\nCreate a FHIR SupplyRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for SupplyRequest |\\n| [props.status] | <code>string</code> | draft | active | suspended + |\\n| [props.category] | <code>CodeableConcept</code> | The kind of supply (central, non-stock, etc.) |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.item] | <code>CodeableConcept</code> \\\\| <code>Reference</code> | Medication, Substance, or Device requested to be supplied |\\n| [props.quantity] | <code>Quantity</code> | The requested amount of the item indicated |\\n| [props.parameter] | <code>BackboneElement</code> | Ordered item details |\\n| [props.occurrence] | <code>dateTime</code> \\\\| <code>Period</code> \\\\| <code>Timing</code> | When the request should be fulfilled |\\n| [props.authoredOn] | <code>dateTime</code> | When the request was made |\\n| [props.requester] | <code>Reference</code> | Individual making the request |\\n| [props.supplier] | <code>Reference</code> | Who is intended to fulfill the request |\\n| [props.reasonCode] | <code>CodeableConcept</code> | The reason why the supply item was requested |\\n| [props.reasonReference] | <code>Reference</code> | The reason why the supply item was requested |\\n| [props.deliverFrom] | <code>Reference</code> | The origin of the supply |\\n| [props.deliverTo] | <code>Reference</code> | The destination of the supply |\\n\\n\\n* * *\\n\\n\\n### builders.task {#builders_task}\\n\\n<p><code>task(type, props)</code></p>\\n\\nCreate a FHIR Task resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Task Instance Identifier |\\n| [props.instantiatesCanonical] | <code>canonical</code> | Formal definition of task |\\n| [props.instantiatesUri] | <code>string</code> | Formal definition of task |\\n| [props.basedOn] | <code>Reference</code> | Request fulfilled by this task |\\n| [props.groupIdentifier] | <code>Identifier</code> | Requisition or grouper id |\\n| [props.partOf] | <code>Reference</code> | Composite task |\\n| [props.status] | <code>string</code> | draft | requested | received | accepted | + |\\n| [props.statusReason] | <code>CodeableConcept</code> | Reason for current status |\\n| [props.businessStatus] | <code>CodeableConcept</code> | E.g. \\\"Specimen collected\\\", \\\"IV prepped\\\" |\\n| [props.intent] | <code>string</code> | unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option |\\n| [props.priority] | <code>string</code> | routine | urgent | asap | stat |\\n| [props.code] | <code>CodeableConcept</code> | Task Type |\\n| [props.description] | <code>string</code> | Human-readable explanation of task |\\n| [props.focus] | <code>Reference</code> | What task is acting on |\\n| [props.for] | <code>Reference</code> | Beneficiary of the Task |\\n| [props.encounter] | <code>Reference</code> | Healthcare event during which this task originated |\\n| [props.executionPeriod] | <code>Period</code> | Start and end time of execution |\\n| [props.authoredOn] | <code>dateTime</code> | Task Creation Date |\\n| [props.lastModified] | <code>dateTime</code> | Task Last Modified Date |\\n| [props.requester] | <code>Reference</code> | Who is asking for task to be done |\\n| [props.performerType] | <code>CodeableConcept</code> | Requested performer |\\n| [props.owner] | <code>Reference</code> | Responsible individual |\\n| [props.location] | <code>Reference</code> | Where task occurs |\\n| [props.reasonCode] | <code>CodeableConcept</code> | Why task is needed |\\n| [props.reasonReference] | <code>Reference</code> | Why task is needed |\\n| [props.insurance] | <code>Reference</code> | Associated insurance coverage |\\n| [props.note] | <code>Annotation</code> | Comments made about the task |\\n| [props.relevantHistory] | <code>Reference</code> | Key events in history of the Task |\\n| [props.restriction] | <code>BackboneElement</code> | Constraints on fulfillment tasks |\\n| [props.input] | <code>BackboneElement</code> | Information used to perform task |\\n| [props.output] | <code>BackboneElement</code> | Information produced as part of task |\\n\\n\\n* * *\\n\\n\\n### builders.testReport {#builders_testReport}\\n\\n<p><code>testReport(type, props)</code></p>\\n\\nCreate a FHIR TestReport resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | External identifier |\\n| [props.name] | <code>string</code> | Informal name of the executed TestScript |\\n| [props.status] | <code>string</code> | completed | in-progress | waiting | stopped | entered-in-error |\\n| [props.testScript] | <code>Reference</code> | Reference to the  version-specific TestScript that was executed to produce this TestReport |\\n| [props.result] | <code>string</code> | pass | fail | pending |\\n| [props.score] | <code>decimal</code> | The final score (percentage of tests passed) resulting from the execution of the TestScript |\\n| [props.tester] | <code>string</code> | Name of the tester producing this report (Organization or individual) |\\n| [props.issued] | <code>dateTime</code> | When the TestScript was executed and this TestReport was generated |\\n| [props.participant] | <code>BackboneElement</code> | A participant in the test execution, either the execution engine, a client, or a server |\\n| [props.setup] | <code>BackboneElement</code> | The results of the series of required setup operations before the tests were executed |\\n| [props.test] | <code>BackboneElement</code> | A test executed from the test script |\\n| [props.teardown] | <code>BackboneElement</code> | The results of running the series of required clean up steps |\\n\\n\\n* * *\\n\\n\\n### builders.verificationResult {#builders_verificationResult}\\n\\n<p><code>verificationResult(type, props)</code></p>\\n\\nCreate a FHIR VerificationResult resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.target] | <code>Reference</code> | A resource that was validated |\\n| [props.targetLocation] | <code>string</code> | The fhirpath location(s) within the resource that was validated |\\n| [props.need] | <code>CodeableConcept</code> | none | initial | periodic |\\n| [props.status] | <code>string</code> | attested | validated | in-process | req-revalid | val-fail | reval-fail |\\n| [props.statusDate] | <code>dateTime</code> | When the validation status was updated |\\n| [props.validationType] | <code>CodeableConcept</code> | nothing | primary | multiple |\\n| [props.validationProcess] | <code>CodeableConcept</code> | The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context) |\\n| [props.frequency] | <code>Timing</code> | Frequency of revalidation |\\n| [props.lastPerformed] | <code>dateTime</code> | The date/time validation was last completed (including failed validations) |\\n| [props.nextScheduled] | <code>date</code> | The date when target is next validated, if appropriate |\\n| [props.failureAction] | <code>CodeableConcept</code> | fatal | warn | rec-only | none |\\n| [props.primarySource] | <code>BackboneElement</code> | Information about the primary source(s) involved in validation |\\n| [props.attestation] | <code>BackboneElement</code> | Information about the entity attesting to information |\\n| [props.validator] | <code>BackboneElement</code> | Information about the entity validating information |\\n\\n\\n* * *\\n\\n\\n### builders.visionPrescription {#builders_visionPrescription}\\n\\n<p><code>visionPrescription(type, props)</code></p>\\n\\nCreate a FHIR VisionPrescription resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant. Optional. |\\n| props | <code>object</code> | Properties to apply to the resource (includes common and custom properties). |\\n| [props.identifier] | <code>Identifier</code> | Business Identifier for vision prescription |\\n| [props.status] | <code>string</code> | active | cancelled | draft | entered-in-error |\\n| [props.created] | <code>dateTime</code> | Response creation date |\\n| [props.patient] | <code>Reference</code> | Who prescription is for |\\n| [props.encounter] | <code>Reference</code> | Created during encounter / admission / stay |\\n| [props.dateWritten] | <code>dateTime</code> | When prescription was authorized |\\n| [props.prescriber] | <code>Reference</code> | Who authorized the vision prescription |\\n| [props.lensSpecification] | <code>BackboneElement</code> | Vision lens authorization |\\n\\n\\n* * *\\n\\n\\n## datatypes\\n\\nThese functions belong to the datatypes namespace.\\n### datatypes.addExtension {#datatypes_addExtension}\\n\\n<p><code>addExtension(resource, url, value)</code></p>\\n\\nAdd an extension to a resource (or object).\\nAn object will be created and added to an `extension` array on the provided resource.\\nThe extension array will be set if it does not exist on the resource.\\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource |  | a FHIR resource object to add an extension too |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n\\n\\n* * *\\n\\n\\n### datatypes.cc {#datatypes_cc}\\n\\n<p><code>cc()</code></p>\\n\\nAlias for b.concept()\\n\\n\\n* * *\\n\\n\\n### datatypes.coding {#datatypes_coding}\\n\\n<p><code>coding(code, system)</code></p>\\n\\nCreate a coding object { code, system }. Systems will be mapped using the system map.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| code | <code>string</code> | the code value |\\n| system | <code>string</code> | URL to the system. Will be mapped using the system map. |\\n\\n\\n* * *\\n\\n\\n### datatypes.composite {#datatypes_composite}\\n\\n<p><code>composite(object, key, value)</code></p>\\n\\nWrite a value to the target object using a typed key\\nIe, if key is `value` and the value is a date time string,\\nthis function will write `valueDateTime` to the object.\\n\\nThis function is poorly named.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| object |  | the object to write the composite key to |\\n| key | <code>string</code> | the base key to use to write the value |\\n| value |  | some value to write to the object |\\n\\n\\n* * *\\n\\n\\n### datatypes.concept {#datatypes_concept}\\n\\n<p><code>concept(value, extra)</code></p>\\n\\nCreate a CodeableConcept. Codings can be coding objects or\\n[code, system, extra] tuples (such as passed to b.coding())\\nSystems will be mapped with the system map\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>string</code> | the value |\\n| extra | <code>object</code> | Extra properties to write to the coding |\\n\\n**Example:** Create a codeableConcept\\n```js\\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n**Example:** Create a codeableConcept with text\\n```js\\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n\\n* * *\\n\\n\\n### datatypes.ext {#datatypes_ext}\\n\\n<p><code>ext()</code></p>\\n\\nAlias for b.extension()\\n\\n\\n* * *\\n\\n\\n### datatypes.extension {#datatypes_extension}\\n\\n<p><code>extension(url, value, props)</code></p>\\n\\nCreate an extension with a system and value\\nValues will be typemapped (ie, `value` -> `valueString`)\\nOptionally pass extra keys on the third argument\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n| props |  | extra props to add to the extension |\\n\\n\\n* * *\\n\\n\\n### datatypes.findExtension {#datatypes_findExtension}\\n\\n<p><code>findExtension(obj, targetUrl, [path])</code></p>\\n\\nFind an extension with a given url in some array\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj |  | a fhir resource |\\n| targetUrl | <code>string</code> | the extension URL you want to find |\\n| [path] | <code>string</code> | a path to extract from the resource. Optional. |\\n\\n\\n* * *\\n\\n\\n### datatypes.id {#datatypes_id}\\n\\n<p><code>id()</code></p>\\n\\nAlias for b.identifier()\\n\\n\\n* * *\\n\\n\\n### datatypes.identifier {#datatypes_identifier}\\n\\n<p><code>identifier(id, ext, [system])</code></p>\\n\\nCreate an Identifier. Systems will be mapped against the system map. Pass extensions as extra arguments.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id |  | A string identifier, a FHIR identifier object, or an array of either. |\\n| ext |  | Any other arguments will be treated as extensions |\\n| [system] | <code>string</code> | the string system to use by default if |\\n\\n\\n* * *\\n\\n\\n### datatypes.ref {#datatypes_ref}\\n\\n<p><code>ref()</code></p>\\n\\nAlias for b.reference()\\n\\n\\n* * *\\n\\n\\n### datatypes.reference {#datatypes_reference}\\n\\n<p><code>reference(ref)</code></p>\\n\\nCreate a reference object of the form { reference }\\nIf ref is an array, each item will be mapped and an array returned.\\nIf ref is a FHIR resource, a reference to it will be generated\\nIf ref is a string, it'll be treated as a reference id and returned as an object\\nIf ref is a valid FHIR reference, it'll just be returned.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| ref | the thing to generate a reference from |\\n\\n\\n* * *\\n\\n\\n### datatypes.setSystemMap {#datatypes_setSystemMap}\\n\\n<p><code>setSystemMap()</code></p>\\n\\nDefine a set of mapped system values.\\n\\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.\\n\\n**Example:** Set shortcut system mappings\\n```js\\nb.setSystemMap({\\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\\n});\\ncreate(builders.patient({ identifier: b.identifier('xyz', 'SmartCareId') }))\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-fhir-4 <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn adaptor for building integration jobs for use with the fhir-4 API.\\n\\nThis adaptor has been auto-generated from a FHIR spec. Do not modify generated\\ncode or changes will be lost.\\n\\n## Build command\\n\\n```\\npnpm generate-fhir fhir-4 \\\\\\n  --spec https://hl7.org/fhir/R4B/definitions.json.zip \\\\\\n  --mappings tools/generate-fhir/tmp/mappings-fhir4.js \\\\\\n  --tests \\\\\\n  --simple-builders\\n```\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/fhir-4-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-4-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test`\\n\\nBuild the adaptor using `pnpm build`.\\n\\nRe-generate the adaptor source with `pnpm generate-fhir fhir-4`\\n\\nTo update the spec an re-generate, run `pnpm generate-fhir fhir-4 --respec`. You\\ncan update the spec url with `--spec <www>` or by modifying package.json\\n\"","changelog":"\"# @openfn/language-fhir-4\\n\\n## 0.1.5 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.1.4 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.3 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.2 - 21 March 2025\\n\\n### Patch Changes\\n\\n- Fix common dependency in package.json\\n\\n## 0.1.1 - 20 March 2025\\n\\n### Patch Changes\\n\\n- Fix errors in generated docs\\n\\n## 1.0.0\\n\\nInitial release.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"baseUrl":{"title":"Base Url","type":"string","description":"The baseUrl","examples":["https://hapi.fhir.org"]},"apiPath":{"title":"API Path","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"R4","description":"FHIR api path","minLength":1,"examples":["baseR4","R3","R4"]},"username":{"title":"Username","type":"string","description":"Username","examples":["openfn_test"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your FHIR access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"required":["baseUrl","apiPath"]}},
[
  {
    "id": "account",
    "longname": "account",
    "name": "account",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Account resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Account number",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error | on-hold | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. patient, expense, depreciation",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Human-readable label",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The entity that caused the expenses",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Transaction window",
        "name": "props.servicePeriod"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account",
        "name": "props.coverage"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Entity managing the Account",
        "name": "props.owner"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Explanation of purpose/use",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The parties ultimately responsible for balancing the Account",
        "name": "props.guarantor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to a parent Account",
        "name": "props.partOf"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 115,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 7,
    "newscope": true,
    "level": 0
  },
  {
    "id": "activityDefinition",
    "longname": "activityDefinition",
    "name": "activityDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ActivityDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this activity definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the activity definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the activity definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this activity definition (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this activity definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the activity definition",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference",
            "canonical"
          ]
        },
        "optional": true,
        "description": "Type of individual the activity definition is intended for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the activity definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for activity definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this activity definition is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the activity definition",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the activity definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the activity definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the activity definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Logic used by the activity definition",
        "name": "props.library"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Kind of resource",
        "name": "props.kind"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "What profile the resource needs to conform to",
        "name": "props.profile"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Detail type of activity",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "True if the activity should not be performed",
        "name": "props.doNotPerform"
      },
      {
        "type": {
          "names": [
            "Timing",
            "dateTime",
            "Age",
            "Period",
            "Range",
            "Duration"
          ]
        },
        "optional": true,
        "description": "When activity is to occur",
        "name": "props.timing"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where it should happen",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who should participate in the action",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "Reference",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What's administered/supplied",
        "name": "props.product"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "How much is administered/consumed/supplied",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Dosage"
          ]
        },
        "optional": true,
        "description": "Detailed dosage instructions",
        "name": "props.dosage"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What part of body to perform on",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What specimens are required to perform this action",
        "name": "props.specimenRequirement"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What observations are required to perform this action",
        "name": "props.observationRequirement"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What observations must be produced by this action",
        "name": "props.observationResultRequirement"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Transform to apply the template",
        "name": "props.transform"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Dynamic aspects of the definition",
        "name": "props.dynamicValue"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 153,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "addExtension",
    "longname": "addExtension",
    "name": "addExtension",
    "kind": "function",
    "scope": "datatypes",
    "description": "Add an extension to a resource (or object).\nAn object will be created and added to an `extension` array on the provided resource.\nThe extension array will be set if it does not exist on the resource.\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString",
    "params": [
      {
        "description": "a FHIR resource object to add an extension too",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 89,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 117,
    "newscope": true,
    "level": 0
  },
  {
    "id": "addToBundle",
    "longname": "addToBundle",
    "name": "addToBundle",
    "kind": "function",
    "scope": "global",
    "description": "Add a resource to a bundle on state, using the `name` as the key (or `bundle` by default).\nThe resource will be upserted (via PUT).\nA new bundle will be generated if one does not already exist.",
    "params": [
      {
        "type": {
          "names": [
            "object/array"
          ]
        },
        "description": "A resource or array of resources to add to the bundle",
        "name": "resources"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A name (key) for this bundle on state (defaults to `bundle`)",
        "name": "name"
      }
    ],
    "examples": [
      "<caption>Add a new patient resource to the default bundle</caption>\naddToBundle(b.patient($.patientDetails))"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 259,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "bundle",
        "description": "the updated bundle",
        "type": null
      }
    ],
    "order": 5,
    "newscope": true,
    "level": 0
  },
  {
    "id": "administrableProductDefinition",
    "longname": "administrableProductDefinition",
    "name": "administrableProductDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR AdministrableProductDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "An identifier for the administrable product",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "References a product from which one or more of the constituent parts of that product can be prepared and used as described by this administrable product",
        "name": "props.formOf"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The dose form of the final product after necessary reconstitution or processing",
        "name": "props.administrableDoseForm"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The presentation type in which this item is given to a patient. e.g. for a spray - 'puff'",
        "name": "props.unitOfPresentation"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Indicates the specific manufactured items that are part of the 'formOf' product that are used in the preparation of this specific administrable form",
        "name": "props.producedFrom"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The ingredients of this administrable medicinal product. This is only needed if the ingredients are not specified either using ManufacturedItemDefiniton, or using by incoming references from the Ingredient resource",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A device that is integral to the medicinal product, in effect being considered as an \"ingredient\" of the medicinal product",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Characteristics e.g. a product's onset of action",
        "name": "props.property"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The path by which the product is taken into or makes contact with the body",
        "name": "props.routeOfAdministration"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 226,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "adverseEvent",
    "longname": "adverseEvent",
    "name": "adverseEvent",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR AdverseEvent resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for the event",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "actual | potential",
        "name": "props.actuality"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "product-problem | product-quality | product-use-error | wrong-dose | incorrect-prescribing-information | wrong-technique | wrong-route-of-administration | wrong-rate | wrong-duration | wrong-time | expired-drug | medical-device-use-error | problem-different-manufacturer | unsafe-physical-environment",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of the event itself in relation to the subject",
        "name": "props.event"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Subject impacted by event",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the event occurred",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the event was detected",
        "name": "props.detected"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the event was recorded",
        "name": "props.recordedDate"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Effect on the subject due to this event",
        "name": "props.resultingCondition"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Location where adverse event occurred",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Seriousness of the event",
        "name": "props.seriousness"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "mild | moderate | severe",
        "name": "props.severity"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "resolved | recovering | ongoing | resolvedWithSequelae | fatal | unknown",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who recorded the adverse event",
        "name": "props.recorder"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who  was involved in the adverse event or the potential adverse event",
        "name": "props.contributor"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The suspected agent causing the adverse event",
        "name": "props.suspectEntity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "AdverseEvent.subjectMedicalHistory",
        "name": "props.subjectMedicalHistory"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "AdverseEvent.referenceDocument",
        "name": "props.referenceDocument"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "AdverseEvent.study",
        "name": "props.study"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 263,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "allergyIntolerance",
    "longname": "allergyIntolerance",
    "name": "allergyIntolerance",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR AllergyIntolerance resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "active | inactive | resolved",
        "name": "props.clinicalStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "unconfirmed | confirmed | refuted | entered-in-error",
        "name": "props.verificationStatus"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "allergy | intolerance - Underlying mechanism (if known)",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "food | medication | environment | biologic",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "low | high | unable-to-assess",
        "name": "props.criticality"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Code that identifies the allergy or intolerance",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who the sensitivity is for",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter when the allergy or intolerance was asserted",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Age",
            "Period",
            "Range",
            "string"
          ]
        },
        "optional": true,
        "description": "When allergy or intolerance was identified",
        "name": "props.onset"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date first version of the resource instance was recorded",
        "name": "props.recordedDate"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who recorded the sensitivity",
        "name": "props.recorder"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Source of the information about the allergy",
        "name": "props.asserter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date(/time) of last known occurrence of a reaction",
        "name": "props.lastOccurrence"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Additional text not captured in other fields",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Adverse Reaction Events linked to exposure to substance",
        "name": "props.reaction"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 310,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "appointment",
    "longname": "appointment",
    "name": "appointment",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Appointment resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The coded reason for the appointment being cancelled",
        "name": "props.cancelationReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A broad categorization of the service that is to be performed during this appointment",
        "name": "props.serviceCategory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The specific service that is to be performed during this appointment",
        "name": "props.serviceType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The style of appointment or patient that has been booked in the slot (not service type)",
        "name": "props.appointmentType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded reason this appointment is scheduled",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reason the appointment is to take place (resource)",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "unsignedInt"
          ]
        },
        "optional": true,
        "description": "Used to make informed decisions if needing to re-prioritize",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Shown on a subject line in a meeting request, or appointment list",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional information to support the appointment",
        "name": "props.supportingInformation"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "When appointment is to take place",
        "name": "props.start"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "When appointment is to conclude",
        "name": "props.end"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Can be less than start/end (e.g. estimate)",
        "name": "props.minutesDuration"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The slots that this appointment is filling",
        "name": "props.slot"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The date that this appointment was initially created",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Additional comments",
        "name": "props.comment"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Detailed information and instructions for the patient",
        "name": "props.patientInstruction"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The service request this appointment is allocated to assess",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Participants involved in appointment",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Potential date/time interval(s) requested to allocate the appointment within",
        "name": "props.requestedPeriod"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 353,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "appointmentResponse",
    "longname": "appointmentResponse",
    "name": "appointmentResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR AppointmentResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Appointment this response relates to",
        "name": "props.appointment"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Time from appointment, or requested new start time",
        "name": "props.start"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Time from appointment, or requested new end time",
        "name": "props.end"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Role of participant in the appointment",
        "name": "props.participantType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Person, Location, HealthcareService, or Device",
        "name": "props.actor"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "accepted | declined | tentative | needs-action",
        "name": "props.participantStatus"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Additional comments",
        "name": "props.comment"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 402,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "biologicallyDerivedProduct",
    "longname": "biologicallyDerivedProduct",
    "name": "biologicallyDerivedProduct",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR BiologicallyDerivedProduct resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "organ | tissue | fluid | cells | biologicalAgent",
        "name": "props.productCategory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What this biologically derived product is",
        "name": "props.productCode"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "available | unavailable",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Procedure request",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "description": "The amount of this biologically derived product",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "BiologicallyDerivedProduct parent",
        "name": "props.parent"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "How this product was collected",
        "name": "props.collection"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Any processing of the product during collection",
        "name": "props.processing"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Any manipulation of product post-collection",
        "name": "props.manipulation"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Product storage",
        "name": "props.storage"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 437,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "bodyStructure",
    "longname": "bodyStructure",
    "name": "bodyStructure",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR BodyStructure resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Bodystructure identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of Structure",
        "name": "props.morphology"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Body site",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Body site modifier",
        "name": "props.locationQualifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Text description",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Attached images",
        "name": "props.image"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who this is about",
        "name": "props.patient"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 475,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "carePlan",
    "longname": "carePlan",
    "name": "carePlan",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CarePlan resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this plan",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills CarePlan",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "CarePlan replaced by this CarePlan",
        "name": "props.replaces"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced CarePlan",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of plan",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Human-friendly name for the care plan",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Summary of nature of plan",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who the care plan is for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Time period plan covers",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date record was first recorded",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is the designated responsible party",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who provided the content of the care plan",
        "name": "props.contributor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who's involved in plan?",
        "name": "props.careTeam"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Health issues this plan addresses",
        "name": "props.addresses"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Information considered as part of plan",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Desired outcome of plan",
        "name": "props.goal"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Action to occur as part of plan",
        "name": "props.activity"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments about the plan",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 510,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "careTeam",
    "longname": "careTeam",
    "name": "careTeam",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CareTeam resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this team",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposed | active | suspended | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of team",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the team, such as crisis assessment team",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who care team is for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Time period team covers",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Members of the team",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why the care team exists",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why the care team exists",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization responsible for the care team",
        "name": "props.managingOrganization"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the care team (that applies to all members)",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the CareTeam",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 560,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "cc",
    "longname": "cc",
    "name": "cc",
    "kind": "function",
    "scope": "datatypes",
    "description": "Alias for b.concept()",
    "access": "public",
    "meta": {
      "lineno": 239,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 124,
    "level": 0
  },
  {
    "id": "chargeItem",
    "longname": "chargeItem",
    "name": "chargeItem",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ChargeItem resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Defining information about the code of this charge item",
        "name": "props.definitionUri"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Resource defining the code of this ChargeItem",
        "name": "props.definitionCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "planned | billable | not-billable | aborted | billed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced ChargeItem",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A code that identifies the charge, like a billing code",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Individual service was done for/to",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter / Episode associated with event",
        "name": "props.context"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing"
          ]
        },
        "optional": true,
        "description": "When the charged service was applied",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who performed charged service",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization providing the charged service",
        "name": "props.performingOrganization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization requesting the charged service",
        "name": "props.requestingOrganization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that has ownership of the (potential, future) revenue",
        "name": "props.costCenter"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "Quantity of which the charge item has been serviced",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Anatomical location, if relevant",
        "name": "props.bodysite"
      },
      {
        "type": {
          "names": [
            "decimal"
          ]
        },
        "optional": true,
        "description": "Factor overriding the associated rules",
        "name": "props.factorOverride"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Price overriding the associated rules",
        "name": "props.priceOverride"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for overriding the list price/factor",
        "name": "props.overrideReason"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Individual who was entering",
        "name": "props.enterer"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date the charge item was entered",
        "name": "props.enteredDate"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why was the charged  service rendered?",
        "name": "props.reason"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Which rendered service is being charged?",
        "name": "props.service"
      },
      {
        "type": {
          "names": [
            "Reference",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Product charged",
        "name": "props.product"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Account to place this charge",
        "name": "props.account"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the ChargeItem",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Further information supporting this charge",
        "name": "props.supportingInformation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 600,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "chargeItemDefinition",
    "longname": "chargeItemDefinition",
    "name": "chargeItemDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ChargeItemDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this charge item definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the charge item definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the charge item definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this charge item definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Underlying externally-defined charge item definition",
        "name": "props.derivedFromUri"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "A larger definition of which this particular definition is a component or step",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Completed or terminated request(s) whose function is taken by this new request",
        "name": "props.replaces"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the charge item definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for charge item definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the charge item definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the charge item definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the charge item definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Billing codes or product types this definition applies to",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Instances this definition applies to",
        "name": "props.instance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Whether or not the billing code is applicable",
        "name": "props.applicability"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Group of properties which are applicable under the same conditions",
        "name": "props.propertyGroup"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 653,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "citation",
    "longname": "citation",
    "name": "citation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Citation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this citation, represented as a globally unique URI",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier for the Citation resource itself",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the citation",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this citation (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this citation (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The publisher of the Citation, not the publisher of the article or artifact being cited",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher of the Citation Resource",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the citation",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the Citation Resource content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for citation (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this citation is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions for the Citation, not for the cited artifact",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the citation was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the citation was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the citation is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the Citation",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the Citation",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the Citation",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the Citation",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A human-readable display of the citation",
        "name": "props.summary"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The assignment to an organizing scheme",
        "name": "props.classification"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Used for general notes and annotations not coded elsewhere",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The status of the citation",
        "name": "props.currentState"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "An effective date or period for a status of the citation",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Artifact related to the Citation Resource",
        "name": "props.relatesTo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The article or artifact being described",
        "name": "props.citedArtifact"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 703,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "claim",
    "longname": "claim",
    "name": "claim",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Claim resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for claim",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Category or discipline",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "More granular claim type",
        "name": "props.subType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "claim | preauthorization | predetermination",
        "name": "props.use"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The recipient of the products and services",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Relevant time frame for the claim",
        "name": "props.billablePeriod"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Resource creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Author of the claim",
        "name": "props.enterer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Target",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for the claim",
        "name": "props.provider"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Desired processing ugency",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "For whom to reserve funds",
        "name": "props.fundsReserve"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Prior or corollary claims",
        "name": "props.related"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Prescription authorizing services and products",
        "name": "props.prescription"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Original prescription if superseded by fulfiller",
        "name": "props.originalPrescription"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Recipient of benefits payable",
        "name": "props.payee"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Treatment referral",
        "name": "props.referral"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Servicing facility",
        "name": "props.facility"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Members of the care team",
        "name": "props.careTeam"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Supporting information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Pertinent diagnosis information",
        "name": "props.diagnosis"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Clinical procedures performed",
        "name": "props.procedure"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient insurance information",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details of the event",
        "name": "props.accident"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Product or service provided",
        "name": "props.item"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Total claim cost",
        "name": "props.total"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 759,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "claimResponse",
    "longname": "claimResponse",
    "name": "claimResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ClaimResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for a claim response",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "More granular claim type",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "More granular claim type",
        "name": "props.subType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "claim | preauthorization | predetermination",
        "name": "props.use"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The recipient of the products and services",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Response creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for reimbursement",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for the claim",
        "name": "props.requestor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Id of resource triggering adjudication",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "queued | complete | error | partial",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Disposition Message",
        "name": "props.disposition"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Preauthorization reference",
        "name": "props.preAuthRef"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Preauthorization reference effective period",
        "name": "props.preAuthPeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Party to be paid any benefits payable",
        "name": "props.payeeType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Adjudication for claim line items",
        "name": "props.item"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Insurer added line items",
        "name": "props.addItem"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "description": "Header-level adjudication",
        "name": "props.adjudication"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Adjudication totals",
        "name": "props.total"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Payment Details",
        "name": "props.payment"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Funds reserved status",
        "name": "props.fundsReserve"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Printed form identifier",
        "name": "props.formCode"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Printed reference or actual form",
        "name": "props.form"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Note concerning adjudication",
        "name": "props.processNote"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request for additional information",
        "name": "props.communicationRequest"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient insurance information",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Processing errors",
        "name": "props.error"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 813,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "clinicalImpression",
    "longname": "clinicalImpression",
    "name": "clinicalImpression",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ClinicalImpression resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "in-progress | completed | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of assessment performed",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Why/how the assessment was performed",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient or group assessed",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "Time of assessment",
        "name": "props.effective"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the assessment was documented",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The clinician performing the assessment",
        "name": "props.assessor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to last assessment",
        "name": "props.previous"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Relevant impressions of patient state",
        "name": "props.problem"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "One or more sets of investigations (signs, symptoms, etc.)",
        "name": "props.investigation"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Clinical Protocol followed",
        "name": "props.protocol"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Summary of the assessment",
        "name": "props.summary"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Possible or likely findings and diagnoses",
        "name": "props.finding"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Estimate of likely outcome",
        "name": "props.prognosisCodeableConcept"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "RiskAssessment expressing likely outcome",
        "name": "props.prognosisReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Information supporting the clinical impression",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the ClinicalImpression",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 867,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "clinicalUseDefinition",
    "longname": "clinicalUseDefinition",
    "name": "clinicalUseDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ClinicalUseDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for this issue",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "indication | contraindication | interaction | undesirable-effect | warning",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A categorisation of the issue, primarily for dividing warnings into subject heading areas such as \"Pregnancy\", \"Overdose\"",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The medication or procedure for which this is an indication",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Whether this is a current issue or one that has been retired etc",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specifics for when this is a contraindication",
        "name": "props.contraindication"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specifics for when this is an indication",
        "name": "props.indication"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specifics for when this is an interaction",
        "name": "props.interaction"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The population group to which this applies",
        "name": "props.population"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A possible negative outcome from the use of this treatment",
        "name": "props.undesirableEffect"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Critical environmental, health or physical risks or hazards. For example 'Do not operate heavy machinery', 'May cause drowsiness'",
        "name": "props.warning"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 914,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 24,
    "level": 0
  },
  {
    "id": "coding",
    "longname": "coding",
    "name": "coding",
    "kind": "function",
    "scope": "datatypes",
    "description": "Create a coding object { code, system }. Systems will be mapped using the system map.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the code value",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to the system. Will be mapped using the system map.",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 157,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 121,
    "level": 0
  },
  {
    "id": "communication",
    "longname": "communication",
    "name": "communication",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Communication resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request fulfilled by this communication",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of this action",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reply to",
        "name": "props.inResponseTo"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Message category",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A channel of communication",
        "name": "props.medium"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Focus of message",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Description of the purpose/content",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Resources that pertain to this communication",
        "name": "props.about"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When sent",
        "name": "props.sent"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When received",
        "name": "props.received"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Message recipient",
        "name": "props.recipient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Message sender",
        "name": "props.sender"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Indication for message",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why was communication done?",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Message payload",
        "name": "props.payload"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the communication",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 952,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 25,
    "level": 0
  },
  {
    "id": "communicationRequest",
    "longname": "communicationRequest",
    "name": "communicationRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CommunicationRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills plan or proposal",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request(s) replaced by this request",
        "name": "props.replaces"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Composite request this is part of",
        "name": "props.groupIdentifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Message category",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "True if request is prohibiting action",
        "name": "props.doNotPerform"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A channel of communication",
        "name": "props.medium"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Focus of message",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Resources that pertain to this communication request",
        "name": "props.about"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Message payload",
        "name": "props.payload"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "When scheduled",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When request transitioned to being actionable",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/what is requesting service",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Message recipient",
        "name": "props.recipient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Message sender",
        "name": "props.sender"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why is communication needed?",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why is communication needed?",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about communication request",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1002,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 26,
    "level": 0
  },
  {
    "id": "composite",
    "longname": "composite",
    "name": "composite",
    "kind": "function",
    "scope": "datatypes",
    "description": "Write a value to the target object using a typed key\nIe, if key is `value` and the value is a date time string,\nthis function will write `valueDateTime` to the object.\n\nThis function is poorly named.",
    "params": [
      {
        "description": "the object to write the composite key to",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the base key to use to write the value",
        "name": "key"
      },
      {
        "description": "some value to write to the object",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 290,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 127,
    "level": 0
  },
  {
    "id": "concept",
    "longname": "concept",
    "name": "concept",
    "kind": "function",
    "scope": "datatypes",
    "description": "Create a CodeableConcept. Codings can be coding objects or\n[code, system, extra] tuples (such as passed to b.coding())\nSystems will be mapped with the system map",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the value",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Extra properties to write to the coding",
        "name": "extra"
      }
    ],
    "examples": [
      "<caption>Create a codeableConcept</caption>\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])",
      "<caption>Create a codeableConcept with text</caption>\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])"
    ],
    "access": "public",
    "meta": {
      "lineno": 191,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 123,
    "level": 0
  },
  {
    "id": "contract",
    "longname": "contract",
    "name": "contract",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Contract resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Contract number",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Basal definition",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business edition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Negotiation status",
        "name": "props.legalState"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Source Contract Definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "External Contract Definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Content derived from the basal information",
        "name": "props.contentDerivative"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When this Contract was issued",
        "name": "props.issued"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Effective time",
        "name": "props.applies"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Contract cessation cause",
        "name": "props.expirationType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Contract Target Entity",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Authority under which this Contract has standing",
        "name": "props.authority"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A sphere of control governed by an authoritative jurisdiction, organization, or person",
        "name": "props.domain"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Specific Location",
        "name": "props.site"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Computer friendly designation",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Human Friendly name",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate Friendly name",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Acronym or short name",
        "name": "props.alias"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Source of Contract",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Range of Legal Concerns",
        "name": "props.scope"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Focus of contract interest",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Legal instrument category",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Subtype within the context of type",
        "name": "props.subType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contract precursor content",
        "name": "props.contentDefinition"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contract Term List",
        "name": "props.term"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Extra Information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Key event in Contract History",
        "name": "props.relevantHistory"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contract Signatory",
        "name": "props.signer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contract Friendly Language",
        "name": "props.friendly"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contract Legal Language",
        "name": "props.legal"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Computable Contract Language",
        "name": "props.rule"
      },
      {
        "type": {
          "names": [
            "Attachment",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Binding Contract",
        "name": "props.legallyBinding"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1051,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 27,
    "level": 0
  },
  {
    "id": "coverage",
    "longname": "coverage",
    "name": "coverage",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Coverage resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for the coverage",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coverage category such as medical or accident",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Owner of the policy",
        "name": "props.policyHolder"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Subscriber to the policy",
        "name": "props.subscriber"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "ID assigned to the subscriber",
        "name": "props.subscriberId"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Plan beneficiary",
        "name": "props.beneficiary"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Dependent number",
        "name": "props.dependent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Beneficiary relationship to the subscriber",
        "name": "props.relationship"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Coverage start and end dates",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Issuer of the policy",
        "name": "props.payor"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Additional coverage classifications",
        "name": "props.class"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Relative order of the coverage",
        "name": "props.order"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Insurer network",
        "name": "props.network"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient payments for services/products",
        "name": "props.costToBeneficiary"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Reimbursement to insurer",
        "name": "props.subrogation"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Contract details",
        "name": "props.contract"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1111,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 28,
    "level": 0
  },
  {
    "id": "coverageEligibilityRequest",
    "longname": "coverageEligibilityRequest",
    "name": "coverageEligibilityRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CoverageEligibilityRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for coverage eligiblity request",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Desired processing priority",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "auth-requirements | benefits | discovery | validation",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Intended recipient of products and services",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "date",
            "Period"
          ]
        },
        "optional": true,
        "description": "Estimated date or dates of service",
        "name": "props.serviced"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Author",
        "name": "props.enterer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for the request",
        "name": "props.provider"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Coverage issuer",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Servicing facility",
        "name": "props.facility"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Supporting information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient insurance information",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Item to be evaluated for eligibiity",
        "name": "props.item"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1155,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 29,
    "level": 0
  },
  {
    "id": "coverageEligibilityResponse",
    "longname": "coverageEligibilityResponse",
    "name": "coverageEligibilityResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CoverageEligibilityResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for coverage eligiblity request",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "auth-requirements | benefits | discovery | validation",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Intended recipient of products and services",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "date",
            "Period"
          ]
        },
        "optional": true,
        "description": "Estimated date or dates of service",
        "name": "props.serviced"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Response creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for the request",
        "name": "props.requestor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Eligibility request reference",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "queued | complete | error | partial",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Disposition Message",
        "name": "props.disposition"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Coverage issuer",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient insurance information",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Preauthorization reference",
        "name": "props.preAuthRef"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Printed form identifier",
        "name": "props.form"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Processing errors",
        "name": "props.error"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1196,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 30,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a new resource. The resource does not need to include an id.\nThe created resource will be returned to state.data.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The resource to create.",
        "name": "resource"
      }
    ],
    "examples": [
      "<caption>Create a Patient with a builder function</caption>\ncreate(b.patient({\n  name: { family: \"Messi\", given: \"Lionel\", use: \"official\" },\n}))"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 222,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the newly created resource.",
        "type": null
      },
      {
        "name": "response",
        "description": "the HTTP response returned by the server.",
        "type": null
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "delete",
    "longname": "delete",
    "name": "delete",
    "kind": "function",
    "scope": "global",
    "description": "Delete a single FHIR resource.",
    "alias": "delete",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type and ID of the resource to delete, eg, `Patient/123`",
        "name": "reference"
      }
    ],
    "examples": [
      "<caption>Delete a single Patient resource</caption>\ndelete('Patient/12345')"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 194,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "response",
        "description": "the HTTP response returned by the server.",
        "type": null
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "detectedIssue",
    "longname": "detectedIssue",
    "name": "detectedIssue",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DetectedIssue resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique id for the detected issue",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "registered | preliminary | final | amended +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Issue Category, e.g. drug-drug, duplicate therapy, etc.",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "high | moderate | low",
        "name": "props.severity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Associated patient",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "When identified",
        "name": "props.identified"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The provider or device that identified the issue",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Problem resource",
        "name": "props.implicated"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Supporting evidence",
        "name": "props.evidence"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Description and context",
        "name": "props.detail"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Authority for issue",
        "name": "props.reference"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Step taken to address",
        "name": "props.mitigation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1238,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 31,
    "level": 0
  },
  {
    "id": "device",
    "longname": "device",
    "name": "device",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Device resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Instance identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The reference to the definition for the device",
        "name": "props.definition"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Unique Device Identifier (UDI) Barcode string",
        "name": "props.udiCarrier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "online | paused | standby | offline | not-ready | transduc-discon | hw-discon | off",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The distinct identification string",
        "name": "props.distinctIdentifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of device manufacturer",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date when the device was made",
        "name": "props.manufactureDate"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date and time of expiry of this device (if applicable)",
        "name": "props.expirationDate"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Lot number of manufacture",
        "name": "props.lotNumber"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Serial number assigned by the manufacturer",
        "name": "props.serialNumber"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The name of the device as given by the manufacturer",
        "name": "props.deviceName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The manufacturer's model number for the device",
        "name": "props.modelNumber"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The part number or catalog number of the device",
        "name": "props.partNumber"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The kind or type of device",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication",
        "name": "props.specialization"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The actual design of the device or software version running on the device",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties",
        "name": "props.property"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient to whom Device is affixed",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization responsible for device",
        "name": "props.owner"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Details for human/organization for support",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the device is found",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Network address to contact device",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Device notes and comments",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Safety Characteristics of Device",
        "name": "props.safety"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The device that this device is attached to or is part of",
        "name": "props.parent"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1277,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 32,
    "level": 0
  },
  {
    "id": "deviceDefinition",
    "longname": "deviceDefinition",
    "name": "deviceDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DeviceDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Instance identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Unique Device Identifier (UDI) Barcode string",
        "name": "props.udiDeviceIdentifier"
      },
      {
        "type": {
          "names": [
            "string",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Name of device manufacturer",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A name given to the device to identify it",
        "name": "props.deviceName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The model number for the device",
        "name": "props.modelNumber"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What kind of device or device system this is",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication",
        "name": "props.specialization"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Available versions",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Safety characteristics of the device",
        "name": "props.safety"
      },
      {
        "type": {
          "names": [
            "ProductShelfLife"
          ]
        },
        "optional": true,
        "description": "Shelf Life and storage information",
        "name": "props.shelfLifeStorage"
      },
      {
        "type": {
          "names": [
            "ProdCharacteristic"
          ]
        },
        "optional": true,
        "description": "Dimensions, color etc.",
        "name": "props.physicalCharacteristics"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Language code for the human-readable text strings produced by the device (all supported)",
        "name": "props.languageCode"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Device capabilities",
        "name": "props.capability"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties",
        "name": "props.property"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization responsible for device",
        "name": "props.owner"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Details for human/organization for support",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Network address to contact device",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Access to on-line information",
        "name": "props.onlineInformation"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Device notes and comments",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product)",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The parent device it can be part of",
        "name": "props.parentDevice"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A substance used to create the material(s) of which the device is made",
        "name": "props.material"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1330,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 33,
    "level": 0
  },
  {
    "id": "deviceMetric",
    "longname": "deviceMetric",
    "name": "deviceMetric",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DeviceMetric resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Instance identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Identity of metric, for example Heart Rate or PEEP Setting",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Unit of Measure for the Metric",
        "name": "props.unit"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Describes the link to the source Device",
        "name": "props.source"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Describes the link to the parent Device",
        "name": "props.parent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "on | off | standby | entered-in-error",
        "name": "props.operationalStatus"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "black | red | green | yellow | blue | magenta | cyan | white",
        "name": "props.color"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "measurement | setting | calculation | unspecified",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "Timing"
          ]
        },
        "optional": true,
        "description": "Describes the measurement repetition time",
        "name": "props.measurementPeriod"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Describes the calibrations that have been performed or that are required to be performed",
        "name": "props.calibration"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1379,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 34,
    "level": 0
  },
  {
    "id": "deviceRequest",
    "longname": "deviceRequest",
    "name": "deviceRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DeviceRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Request identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What request fulfills",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What request replaces",
        "name": "props.priorRequest"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier of composite request",
        "name": "props.groupIdentifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "Reference",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Device requested",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Device details",
        "name": "props.parameter"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Focus of request",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter motivating request",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing"
          ]
        },
        "optional": true,
        "description": "Desired time or schedule for use",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When recorded",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/what is requesting diagnostics",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Filler role",
        "name": "props.performerType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Requested Filler",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded Reason for request",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Linked Reason for request",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Associated insurance coverage",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional clinical information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Notes or comments",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request provenance",
        "name": "props.relevantHistory"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1416,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 35,
    "level": 0
  },
  {
    "id": "deviceUseStatement",
    "longname": "deviceUseStatement",
    "name": "deviceUseStatement",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DeviceUseStatement resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier for this record",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills plan, proposal or order",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | completed | entered-in-error +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient using device",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Supporting information",
        "name": "props.derivedFrom"
      },
      {
        "type": {
          "names": [
            "Timing",
            "Period",
            "dateTime"
          ]
        },
        "optional": true,
        "description": "How often  the device was used",
        "name": "props.timing"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When statement was recorded",
        "name": "props.recordedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who made the statement",
        "name": "props.source"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to device used",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why device was used",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why was DeviceUseStatement performed?",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Target body site",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Addition details (comments, instructions)",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1467,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 36,
    "level": 0
  },
  {
    "id": "diagnosticReport",
    "longname": "diagnosticReport",
    "name": "diagnosticReport",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DiagnosticReport resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for report",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What was requested",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "registered | partial | preliminary | final +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Service category",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Name/Code for this diagnostic report",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The subject of the report - usually, but not always, the patient",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Health care event when test ordered",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "Clinically relevant time/time-period for report",
        "name": "props.effective"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "DateTime this version was made",
        "name": "props.issued"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible Diagnostic Service",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Primary result interpreter",
        "name": "props.resultsInterpreter"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Specimens this report is based on",
        "name": "props.specimen"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Observations",
        "name": "props.result"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to full details of imaging associated with the diagnostic report",
        "name": "props.imagingStudy"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Key images associated with this report",
        "name": "props.media"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Clinical conclusion (interpretation) of test results",
        "name": "props.conclusion"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Codes for the clinical conclusion of test results",
        "name": "props.conclusionCode"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Entire report as issued",
        "name": "props.presentedForm"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1507,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 37,
    "level": 0
  },
  {
    "id": "domainResource",
    "longname": "domainResource",
    "name": "domainResource",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR DomainResource resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1552,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 38,
    "level": 0
  },
  {
    "id": "encounter",
    "longname": "encounter",
    "name": "encounter",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Encounter resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier(s) by which this encounter is known",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "planned | arrived | triaged | in-progress | onleave | finished | cancelled +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "List of past encounter statuses",
        "name": "props.statusHistory"
      },
      {
        "type": {
          "names": [
            "Coding"
          ]
        },
        "optional": true,
        "description": "Classification of patient encounter",
        "name": "props.class"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "List of past encounter classes",
        "name": "props.classHistory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specific type of encounter",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specific type of service",
        "name": "props.serviceType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Indicates the urgency of the encounter",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The patient or group present at the encounter",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Episode(s) of care that this encounter should be recorded against",
        "name": "props.episodeOfCare"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The ServiceRequest that initiated this encounter",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "List of participants involved in the encounter",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The appointment that scheduled this encounter",
        "name": "props.appointment"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "The start and end time of the encounter",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Duration"
          ]
        },
        "optional": true,
        "description": "Quantity of time the encounter lasted (less time absent)",
        "name": "props.length"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded reason the encounter takes place",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reason the encounter takes place (reference)",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The list of diagnosis relevant to this encounter",
        "name": "props.diagnosis"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The set of accounts that may be used for billing for this Encounter",
        "name": "props.account"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details about the admission to a healthcare service",
        "name": "props.hospitalization"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "List of locations where the patient has been",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The organization (facility) responsible for this encounter",
        "name": "props.serviceProvider"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Another Encounter this encounter is part of",
        "name": "props.partOf"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1580,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 39,
    "level": 0
  },
  {
    "id": "enrollmentRequest",
    "longname": "enrollmentRequest",
    "name": "enrollmentRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EnrollmentRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Target",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible practitioner",
        "name": "props.provider"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The subject to be enrolled",
        "name": "props.candidate"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Insurance information",
        "name": "props.coverage"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1630,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 40,
    "level": 0
  },
  {
    "id": "enrollmentResponse",
    "longname": "enrollmentResponse",
    "name": "enrollmentResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EnrollmentResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Claim reference",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "queued | complete | error | partial",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Disposition Message",
        "name": "props.disposition"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Insurer",
        "name": "props.organization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible practitioner",
        "name": "props.requestProvider"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1664,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 41,
    "level": 0
  },
  {
    "id": "episodeOfCare",
    "longname": "episodeOfCare",
    "name": "episodeOfCare",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EpisodeOfCare resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier(s) relevant for this EpisodeOfCare",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "planned | waitlist | active | onhold | finished | cancelled | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Past list of status codes (the current status may be included to cover the start date of the status)",
        "name": "props.statusHistory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type/class  - e.g. specialist referral, disease management",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The list of diagnosis relevant to this episode of care",
        "name": "props.diagnosis"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The patient who is the focus of this episode of care",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that assumes care",
        "name": "props.managingOrganization"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Interval during responsibility is assumed",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Originating Referral Request(s)",
        "name": "props.referralRequest"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Care manager/care coordinator for the patient",
        "name": "props.careManager"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Other practitioners facilitating this episode of care",
        "name": "props.team"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The set of accounts that may be used for billing for this EpisodeOfCare",
        "name": "props.account"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1699,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 42,
    "level": 0
  },
  {
    "id": "eventDefinition",
    "longname": "eventDefinition",
    "name": "eventDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EventDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this event definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the event definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the event definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this event definition (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this event definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the event definition",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Type of individual the event definition is focused on",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the event definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for event definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this event definition is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the event definition",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the event definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the event definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the event definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "TriggerDefinition"
          ]
        },
        "optional": true,
        "description": "\"when\" the event occurs (multiple = 'or')",
        "name": "props.trigger"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1738,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 43,
    "level": 0
  },
  {
    "id": "evidence",
    "longname": "evidence",
    "name": "evidence",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Evidence resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this evidence, represented as a globally unique URI",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the summary",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of this summary",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this summary (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "Reference",
            "markdown"
          ]
        },
        "optional": true,
        "description": "Citation for this evidence",
        "name": "props.citeAs"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the summary was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the summary was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Link or citation to artifact associated with the summary",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Description of the particular summary",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Declarative description of the Evidence",
        "name": "props.assertion"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Footnotes and/or explanatory notes",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Evidence variable such as population, exposure, or outcome",
        "name": "props.variableDefinition"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The method to combine studies",
        "name": "props.synthesisType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The type of study that produced this evidence",
        "name": "props.studyType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Values and parameters for a single statistic",
        "name": "props.statistic"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Certainty or quality of the evidence",
        "name": "props.certainty"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1793,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 44,
    "level": 0
  },
  {
    "id": "evidenceReport",
    "longname": "evidenceReport",
    "name": "evidenceReport",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EvidenceReport resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this EvidenceReport, represented as a globally unique URI",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier for the evidence report",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifiers for articles that may relate to more than one evidence report",
        "name": "props.relatedIdentifier"
      },
      {
        "type": {
          "names": [
            "Reference",
            "markdown"
          ]
        },
        "optional": true,
        "description": "Citation for this report",
        "name": "props.citeAs"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of report",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Used for footnotes and annotations",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Link, description or reference to artifact associated with the report",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Focus of the report",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Relationships to other compositions/documents",
        "name": "props.relatesTo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Composition is broken into sections",
        "name": "props.section"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1845,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 45,
    "level": 0
  },
  {
    "id": "evidenceVariable",
    "longname": "evidenceVariable",
    "name": "evidenceVariable",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR EvidenceVariable resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this evidence variable, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the evidence variable",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the evidence variable",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this evidence variable (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this evidence variable (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Title for use in informal contexts",
        "name": "props.shortTitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the EvidenceVariable",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the evidence variable",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Used for footnotes or explanatory notes",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Actual or conceptual",
        "name": "props.actual"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "intersection | union",
        "name": "props.characteristicCombination"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "What defines the members of the evidence element",
        "name": "props.characteristic"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "continuous | dichotomous | ordinal | polychotomous",
        "name": "props.handling"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A grouping for ordinal or polychotomous variables",
        "name": "props.category"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1890,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 46,
    "level": 0
  },
  {
    "id": "explanationOfBenefit",
    "longname": "explanationOfBenefit",
    "name": "explanationOfBenefit",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ExplanationOfBenefit resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for the resource",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Category or discipline",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "More granular claim type",
        "name": "props.subType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "claim | preauthorization | predetermination",
        "name": "props.use"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The recipient of the products and services",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Relevant time frame for the claim",
        "name": "props.billablePeriod"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Response creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Author of the claim",
        "name": "props.enterer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for reimbursement",
        "name": "props.insurer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party responsible for the claim",
        "name": "props.provider"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Desired processing urgency",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "For whom to reserve funds",
        "name": "props.fundsReserveRequested"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Funds reserved status",
        "name": "props.fundsReserve"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Prior or corollary claims",
        "name": "props.related"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Prescription authorizing services or products",
        "name": "props.prescription"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Original prescription if superceded by fulfiller",
        "name": "props.originalPrescription"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Recipient of benefits payable",
        "name": "props.payee"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Treatment Referral",
        "name": "props.referral"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Servicing Facility",
        "name": "props.facility"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Claim reference",
        "name": "props.claim"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Claim response reference",
        "name": "props.claimResponse"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "queued | complete | error | partial",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Disposition Message",
        "name": "props.disposition"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Preauthorization reference",
        "name": "props.preAuthRef"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Preauthorization in-effect period",
        "name": "props.preAuthRefPeriod"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Care Team members",
        "name": "props.careTeam"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Supporting information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Pertinent diagnosis information",
        "name": "props.diagnosis"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Clinical procedures performed",
        "name": "props.procedure"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Precedence (primary, secondary, etc.)",
        "name": "props.precedence"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Patient insurance information",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details of the event",
        "name": "props.accident"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Product or service provided",
        "name": "props.item"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Insurer added line items",
        "name": "props.addItem"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "description": "Header-level adjudication",
        "name": "props.adjudication"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Adjudication totals",
        "name": "props.total"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Payment Details",
        "name": "props.payment"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Printed form identifier",
        "name": "props.formCode"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Printed reference or actual form",
        "name": "props.form"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Note concerning adjudication",
        "name": "props.processNote"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the benefits are applicable",
        "name": "props.benefitPeriod"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Balance by Benefit Category",
        "name": "props.benefitBalance"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1941,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 47,
    "level": 0
  },
  {
    "id": "ext",
    "longname": "ext",
    "name": "ext",
    "kind": "function",
    "scope": "datatypes",
    "description": "Alias for b.extension()",
    "access": "public",
    "meta": {
      "lineno": 134,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 119,
    "level": 0
  },
  {
    "id": "extension",
    "longname": "extension",
    "name": "extension",
    "kind": "function",
    "scope": "datatypes",
    "description": "Create an extension with a system and value\nValues will be typemapped (ie, `value` -> `valueString`)\nOptionally pass extra keys on the third argument",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      },
      {
        "description": "extra props to add to the extension",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 111,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 118,
    "level": 0
  },
  {
    "id": "familyMemberHistory",
    "longname": "familyMemberHistory",
    "name": "familyMemberHistory",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR FamilyMemberHistory resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Id(s) for this record",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "partial | completed | entered-in-error | health-unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "subject-unknown | withheld | unable-to-obtain | deferred",
        "name": "props.dataAbsentReason"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient history is about",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When history was recorded or last updated",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The family member described",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Relationship to the subject",
        "name": "props.relationship"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "male | female | other | unknown",
        "name": "props.sex"
      },
      {
        "type": {
          "names": [
            "Period",
            "date",
            "string"
          ]
        },
        "optional": true,
        "description": "(approximate) date of birth",
        "name": "props.born"
      },
      {
        "type": {
          "names": [
            "Age",
            "Range",
            "string"
          ]
        },
        "optional": true,
        "description": "(approximate) age",
        "name": "props.age"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Age is estimated?",
        "name": "props.estimatedAge"
      },
      {
        "type": {
          "names": [
            "boolean",
            "Age",
            "Range",
            "date",
            "string"
          ]
        },
        "optional": true,
        "description": "Dead? How old/when?",
        "name": "props.deceased"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why was family member history performed?",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why was family member history performed?",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "General note about related person",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Condition that the related person had",
        "name": "props.condition"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2011,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 48,
    "level": 0
  },
  {
    "id": "findExtension",
    "longname": "findExtension",
    "name": "findExtension",
    "kind": "function",
    "scope": "datatypes",
    "description": "Find an extension with a given url in some array",
    "params": [
      {
        "description": "a fhir resource",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the extension URL you want to find",
        "name": "targetUrl"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a path to extract from the resource. Optional.",
        "name": "path"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 141,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 120,
    "level": 0
  },
  {
    "id": "flag",
    "longname": "flag",
    "name": "flag",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Flag resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Clinical, administrative, etc.",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded or textual message to display to user",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/What is flag about?",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Time period when flag is active",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Alert relevant during encounter",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Flag creator",
        "name": "props.author"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2056,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 49,
    "level": 0
  },
  {
    "id": "goal",
    "longname": "goal",
    "name": "goal",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Goal resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this goal",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposed | planned | accepted | active | on-hold | completed | cancelled | entered-in-error | rejected",
        "name": "props.lifecycleStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "in-progress | improving | worsening | no-change | achieved | sustaining | not-achieved | no-progress | not-attainable",
        "name": "props.achievementStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. Treatment, dietary, behavioral, etc.",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "high-priority | medium-priority | low-priority",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Code or text describing goal",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who this goal is intended for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "date",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "When goal pursuit begins",
        "name": "props.start"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Target outcome for the goal",
        "name": "props.target"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When goal status took effect",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who's responsible for creating Goal?",
        "name": "props.expressedBy"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Issues addressed by this goal",
        "name": "props.addresses"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments about the goal",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What result was achieved regarding the goal?",
        "name": "props.outcomeCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Observation that resulted from goal",
        "name": "props.outcomeReference"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2091,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 50,
    "level": 0
  },
  {
    "id": "group",
    "longname": "group",
    "name": "group",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Group resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique id",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this group's record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "person | animal | practitioner | device | medication | substance",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Descriptive or actual",
        "name": "props.actual"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of Group members",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Label for Group",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "unsignedInt"
          ]
        },
        "optional": true,
        "description": "Number of members",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Entity that is the custodian of the Group's definition",
        "name": "props.managingEntity"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Include / Exclude group members by Trait",
        "name": "props.characteristic"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who or what is in group",
        "name": "props.member"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2134,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 51,
    "level": 0
  },
  {
    "id": "guidanceResponse",
    "longname": "guidanceResponse",
    "name": "guidanceResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR GuidanceResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "The identifier of the request associated with this response, if any",
        "name": "props.requestIdentifier"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string",
            "canonical",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What guidance was requested",
        "name": "props.module"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "success | data-requested | data-required | in-progress | failure | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient the request was performed for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter during which the response was returned",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the guidance response was processed",
        "name": "props.occurrenceDateTime"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Device returning the guidance",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why guidance is needed",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why guidance is needed",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Additional notes about the response",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Messages resulting from the evaluation of the artifact or artifacts",
        "name": "props.evaluationMessage"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The output parameters of the evaluation, if any",
        "name": "props.outputParameters"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Proposed actions, if any",
        "name": "props.result"
      },
      {
        "type": {
          "names": [
            "DataRequirement"
          ]
        },
        "optional": true,
        "description": "Additional required data",
        "name": "props.dataRequirement"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2171,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 52,
    "level": 0
  },
  {
    "id": "healthcareService",
    "longname": "healthcareService",
    "name": "healthcareService",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR HealthcareService resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifiers for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this HealthcareService record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that provides this service",
        "name": "props.providedBy"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Broad category of service being performed or delivered",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of service that may be delivered or performed",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specialties handled by the HealthcareService",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Location(s) where service may be provided",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Description of service as presented to a consumer while searching",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Additional description and/or any specific issues not covered elsewhere",
        "name": "props.comment"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Extra details about the service that can't be placed in the other fields",
        "name": "props.extraDetails"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Facilitates quick identification of the service",
        "name": "props.photo"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Contacts related to the healthcare service",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Location(s) service is intended for/available to",
        "name": "props.coverageArea"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Conditions under which service is available/offered",
        "name": "props.serviceProvisionCode"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specific eligibility requirements required to use the service",
        "name": "props.eligibility"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Programs that this service is applicable to",
        "name": "props.program"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Collection of characteristics (attributes)",
        "name": "props.characteristic"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The language that this service is offered in",
        "name": "props.communication"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Ways that the service accepts referrals",
        "name": "props.referralMethod"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "If an appointment is required for access to this service",
        "name": "props.appointmentRequired"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Times the Service Site is available",
        "name": "props.availableTime"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Not available during this time due to provided reason",
        "name": "props.notAvailable"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Description of availability exceptions",
        "name": "props.availabilityExceptions"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoints providing access to electronic services operated for the healthcare service",
        "name": "props.endpoint"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2213,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 53,
    "level": 0
  },
  {
    "id": "id",
    "longname": "id",
    "name": "id",
    "kind": "function",
    "scope": "datatypes",
    "description": "Alias for b.identifier()",
    "access": "public",
    "meta": {
      "lineno": 82,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 116,
    "level": 0
  },
  {
    "id": "identifier",
    "longname": "identifier",
    "name": "identifier",
    "kind": "function",
    "scope": "datatypes",
    "description": "Create an Identifier. Systems will be mapped against the system map. Pass extensions as extra arguments.",
    "params": [
      {
        "description": "A string identifier, a FHIR identifier object, or an array of either.",
        "name": "id"
      },
      {
        "description": "Any other arguments will be treated as extensions",
        "name": "ext"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the string system to use by default if",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 46,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 115,
    "level": 0
  },
  {
    "id": "imagingStudy",
    "longname": "imagingStudy",
    "name": "imagingStudy",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ImagingStudy resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifiers for the whole study",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "registered | available | cancelled | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Coding"
          ]
        },
        "optional": true,
        "description": "All series modality if actual acquisition modalities",
        "name": "props.modality"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who or what is the subject of the study",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter with which this imaging study is associated",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the study was started",
        "name": "props.started"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request fulfilled",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Referring physician",
        "name": "props.referrer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who interpreted images",
        "name": "props.interpreter"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Study access endpoint",
        "name": "props.endpoint"
      },
      {
        "type": {
          "names": [
            "unsignedInt"
          ]
        },
        "optional": true,
        "description": "Number of Study Related Series",
        "name": "props.numberOfSeries"
      },
      {
        "type": {
          "names": [
            "unsignedInt"
          ]
        },
        "optional": true,
        "description": "Number of Study Related Instances",
        "name": "props.numberOfInstances"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The performed Procedure reference",
        "name": "props.procedureReference"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The performed procedure code",
        "name": "props.procedureCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where ImagingStudy occurred",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why the study was requested",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why was study performed",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "User-defined comments",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Institution-generated description",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Each study has one or more series of instances",
        "name": "props.series"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2264,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 54,
    "level": 0
  },
  {
    "id": "immunization",
    "longname": "immunization",
    "name": "immunization",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Immunization resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "completed | entered-in-error | not-done",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason not done",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Vaccine product administered",
        "name": "props.vaccineCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who was immunized",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter immunization was part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "string"
          ]
        },
        "optional": true,
        "description": "Vaccine administration date",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the immunization was first captured in the subject's record",
        "name": "props.recorded"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Indicates context the data was recorded in",
        "name": "props.primarySource"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Indicates the source of a secondarily reported record",
        "name": "props.reportOrigin"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where immunization occurred",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Vaccine manufacturer",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Vaccine lot number",
        "name": "props.lotNumber"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "Vaccine expiration date",
        "name": "props.expirationDate"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Body site vaccine  was administered",
        "name": "props.site"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "How vaccine entered body",
        "name": "props.route"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "Amount of vaccine administered",
        "name": "props.doseQuantity"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who performed event",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Additional immunization notes",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why immunization occurred",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why immunization occurred",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Dose potency",
        "name": "props.isSubpotent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for being subpotent",
        "name": "props.subpotentReason"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Educational material presented to patient",
        "name": "props.education"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Patient eligibility for a vaccination program",
        "name": "props.programEligibility"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Funding source for the vaccine",
        "name": "props.fundingSource"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details of a reaction that follows immunization",
        "name": "props.reaction"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Protocol followed by the provider",
        "name": "props.protocolApplied"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2311,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 55,
    "level": 0
  },
  {
    "id": "immunizationEvaluation",
    "longname": "immunizationEvaluation",
    "name": "immunizationEvaluation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ImmunizationEvaluation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "completed | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who this evaluation is for",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date evaluation was performed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is responsible for publishing the recommendations",
        "name": "props.authority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Evaluation target disease",
        "name": "props.targetDisease"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Immunization being evaluated",
        "name": "props.immunizationEvent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Status of the dose relative to published recommendations",
        "name": "props.doseStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for the dose status",
        "name": "props.doseStatusReason"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Evaluation notes",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of vaccine series",
        "name": "props.series"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "Dose number within series",
        "name": "props.doseNumber"
      },
      {
        "type": {
          "names": [
            "number",
            "string"
          ]
        },
        "optional": true,
        "description": "Recommended number of doses for immunity",
        "name": "props.seriesDoses"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2366,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 56,
    "level": 0
  },
  {
    "id": "immunizationRecommendation",
    "longname": "immunizationRecommendation",
    "name": "immunizationRecommendation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ImmunizationRecommendation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who this profile is for",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date recommendation(s) created",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is responsible for protocol",
        "name": "props.authority"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Vaccine administration recommendations",
        "name": "props.recommendation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2406,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 57,
    "level": 0
  },
  {
    "id": "ingredient",
    "longname": "ingredient",
    "name": "ingredient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Ingredient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "An identifier or code by which the ingredient can be referenced",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The product which this ingredient is a constituent part of",
        "name": "props.for"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Purpose of the ingredient within the product, e.g. active, inactive",
        "name": "props.role"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Precise action within the drug product, e.g. antioxidant, alkalizing agent",
        "name": "props.function"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "If the ingredient is a known or suspected allergen",
        "name": "props.allergenicIndicator"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "An organization that manufactures this ingredient",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The substance that comprises this ingredient",
        "name": "props.substance"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2438,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 58,
    "level": 0
  },
  {
    "id": "insurancePlan",
    "longname": "insurancePlan",
    "name": "insurancePlan",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR InsurancePlan resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for Product",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of product",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Official name",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Alternate names",
        "name": "props.alias"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the product is available",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Plan issuer",
        "name": "props.ownedBy"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Product administrator",
        "name": "props.administeredBy"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where product applies",
        "name": "props.coverageArea"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contact for the product",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoint",
        "name": "props.endpoint"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What networks are Included",
        "name": "props.network"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Coverage details",
        "name": "props.coverage"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Plan details",
        "name": "props.plan"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2473,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 59,
    "level": 0
  },
  {
    "id": "invoice",
    "longname": "invoice",
    "name": "invoice",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Invoice resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | issued | balanced | cancelled | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Reason for cancellation of this Invoice",
        "name": "props.cancelledReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of Invoice",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Recipient(s) of goods and services",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Recipient of this invoice",
        "name": "props.recipient"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Invoice date / posting date",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Participant in creation of this Invoice",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Issuing Organization of Invoice",
        "name": "props.issuer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Account that is being balanced",
        "name": "props.account"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Line items of this Invoice",
        "name": "props.lineItem"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "optional": true,
        "description": "Components of Invoice total",
        "name": "props.totalPriceComponent"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Net total of this Invoice",
        "name": "props.totalNet"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Gross total of this Invoice",
        "name": "props.totalGross"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Payment details",
        "name": "props.paymentTerms"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the invoice",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2514,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 60,
    "level": 0
  },
  {
    "id": "library",
    "longname": "library",
    "name": "library",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Library resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this library, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the library",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the library",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this library (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this library (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the library",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "logic-library | model-definition | asset-collection | module-definition",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Type of individual the library content is focused on",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the library",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for library (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this library is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the library",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the library was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the library was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the library is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "ParameterDefinition"
          ]
        },
        "optional": true,
        "description": "Parameters defined by the library",
        "name": "props.parameter"
      },
      {
        "type": {
          "names": [
            "DataRequirement"
          ]
        },
        "optional": true,
        "description": "What data is referenced by this library",
        "name": "props.dataRequirement"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Contents of the library, either embedded or referenced",
        "name": "props.content"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2557,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 61,
    "level": 0
  },
  {
    "id": "list",
    "longname": "list",
    "name": "list",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR List resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "current | retired | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "working | snapshot | changes",
        "name": "props.mode"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Descriptive name for the list",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What the purpose of this list is",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "If all resources have the same subject",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Context in which list created",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the list was prepared",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who and/or what defined the list contents (aka Author)",
        "name": "props.source"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What order the list has",
        "name": "props.orderedBy"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments about the list",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Entries in the list",
        "name": "props.entry"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why list is empty",
        "name": "props.emptyReason"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2615,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 62,
    "level": 0
  },
  {
    "id": "location",
    "longname": "location",
    "name": "location",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Location resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique code or number identifying the location to its users",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | suspended | inactive",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Coding"
          ]
        },
        "optional": true,
        "description": "The operational status of the location (typically only for a bed/room)",
        "name": "props.operationalStatus"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the location as used by humans",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A list of alternate names that the location is known as, or was known as, in the past",
        "name": "props.alias"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Additional details about the location that could be displayed as further information to identify the location beyond its name",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "instance | kind",
        "name": "props.mode"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of function performed",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Contact details of the location",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "Physical location",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Physical form of the location",
        "name": "props.physicalType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The absolute geographic location",
        "name": "props.position"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization responsible for provisioning and upkeep",
        "name": "props.managingOrganization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Another Location this one is physically a part of",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "What days/times during a week is this location usually open",
        "name": "props.hoursOfOperation"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Description of availability exceptions",
        "name": "props.availabilityExceptions"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoints providing access to services operated for the location",
        "name": "props.endpoint"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2655,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 63,
    "level": 0
  },
  {
    "id": "manufacturedItemDefinition",
    "longname": "manufacturedItemDefinition",
    "name": "manufacturedItemDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ManufacturedItemDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Dose form as manufactured (before any necessary transformation)",
        "name": "props.manufacturedDoseForm"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The “real world” units in which the quantity of the item is described",
        "name": "props.unitOfPresentation"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Manufacturer of the item (Note that this should be named \"manufacturer\" but it currently causes technical issues)",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The ingredients of this manufactured item. Only needed if these are not specified by incoming references from the Ingredient resource",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "General characteristics of this item",
        "name": "props.property"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2699,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 64,
    "level": 0
  },
  {
    "id": "measure",
    "longname": "measure",
    "name": "measure",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Measure resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this measure, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the measure",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the measure",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this measure (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this measure (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the measure",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the measure",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for measure (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this measure is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the measure",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the measure was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the measure was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the measure is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The category of the measure, such as Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Logic used by the measure",
        "name": "props.library"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Disclaimer for use of the measure or its referenced content",
        "name": "props.disclaimer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "proportion | ratio | continuous-variable | cohort",
        "name": "props.scoring"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "opportunity | all-or-nothing | linear | weighted",
        "name": "props.compositeScoring"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "process | outcome | structure | patient-reported-outcome | composite",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How risk adjustment is applied for this measure",
        "name": "props.riskAdjustment"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How is rate aggregation performed for this measure",
        "name": "props.rateAggregation"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Detailed description of why the measure exists",
        "name": "props.rationale"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Summary of clinical guidelines",
        "name": "props.clinicalRecommendationStatement"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "increase | decrease",
        "name": "props.improvementNotation"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Defined terms used in the measure documentation",
        "name": "props.definition"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Additional guidance for implementers",
        "name": "props.guidance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Population criteria group",
        "name": "props.group"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "What other data should be reported with the measure",
        "name": "props.supplementalData"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2733,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 65,
    "level": 0
  },
  {
    "id": "measureReport",
    "longname": "measureReport",
    "name": "measureReport",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MeasureReport resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the MeasureReport",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "complete | pending | error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "individual | subject-list | summary | data-collection",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "What measure was calculated",
        "name": "props.measure"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What individual(s) the report is for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the report was generated",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is reporting the data",
        "name": "props.reporter"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "What period the report covers",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "increase | decrease",
        "name": "props.improvementNotation"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Measure results for each group",
        "name": "props.group"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What data was used to calculate the measure score",
        "name": "props.evaluatedResource"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2801,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 66,
    "level": 0
  },
  {
    "id": "media",
    "longname": "media",
    "name": "media",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Media resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier(s) for the image",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Procedure that caused this media to be created",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Classification of media as image, video, or audio",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The type of acquisition equipment/process",
        "name": "props.modality"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Imaging view, e.g. Lateral or Antero-posterior",
        "name": "props.view"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/What this Media is a record of",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter associated with media",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "When Media was collected",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Date/Time this version was made available",
        "name": "props.issued"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The person who generated the image",
        "name": "props.operator"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why was event performed?",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Observed body part",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the device/manufacturer",
        "name": "props.deviceName"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Observing Device",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Height of the image in pixels (photo/video)",
        "name": "props.height"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Width of the image in pixels (photo/video)",
        "name": "props.width"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "description": "Number of frames if > 1 (photo)",
        "name": "props.frames"
      },
      {
        "type": {
          "names": [
            "decimal"
          ]
        },
        "optional": true,
        "description": "Length in seconds (audio / video)",
        "name": "props.duration"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Actual Media - reference or data",
        "name": "props.content"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the media",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2839,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 67,
    "level": 0
  },
  {
    "id": "medication",
    "longname": "medication",
    "name": "medication",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Medication resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for this medication",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Codes that identify this medication",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Manufacturer of the item",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "powder | tablets | capsule +",
        "name": "props.form"
      },
      {
        "type": {
          "names": [
            "Ratio"
          ]
        },
        "optional": true,
        "description": "Amount of drug in package",
        "name": "props.amount"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Active or inactive ingredient",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details about packaged medications",
        "name": "props.batch"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2888,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 68,
    "level": 0
  },
  {
    "id": "medicationAdministration",
    "longname": "medicationAdministration",
    "name": "medicationAdministration",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationAdministration resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates protocol or definition",
        "name": "props.instantiates"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "in-progress | not-done | on-hold | completed | entered-in-error | stopped | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason administration not performed",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of medication usage",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "What was administered",
        "name": "props.medication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who received medication",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter or Episode of Care administered as part of",
        "name": "props.context"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional information to support administration",
        "name": "props.supportingInformation"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "Start and end time of administration",
        "name": "props.effective"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who performed the medication administration and what they did",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason administration performed",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Condition or observation that supports why the medication was administered",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request administration performed against",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Device used to administer",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Information about the administration",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details of how medication was taken",
        "name": "props.dosage"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A list of events of interest in the lifecycle",
        "name": "props.eventHistory"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2923,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 69,
    "level": 0
  },
  {
    "id": "medicationDispense",
    "longname": "medicationDispense",
    "name": "medicationDispense",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationDispense resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Event that dispense is part of",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why a dispense was not performed",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of medication dispense",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "What medication was supplied",
        "name": "props.medication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who the dispense is for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter / Episode associated with event",
        "name": "props.context"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Information that supports the dispensing of the medication",
        "name": "props.supportingInformation"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Who performed event",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the dispense occurred",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Medication order that authorizes the dispense",
        "name": "props.authorizingPrescription"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Trial fill, partial fill, emergency fill, etc.",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "Amount dispensed",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "Amount of medication expressed as a timing amount",
        "name": "props.daysSupply"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When product was packaged and reviewed",
        "name": "props.whenPrepared"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When product was given out",
        "name": "props.whenHandedOver"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the medication was sent",
        "name": "props.destination"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who collected the medication",
        "name": "props.receiver"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Information about the dispense",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Dosage"
          ]
        },
        "optional": true,
        "description": "How the medication is to be used by the patient or administered by the caregiver",
        "name": "props.dosageInstruction"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Whether a substitution was performed on the dispense",
        "name": "props.substitution"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Clinical issue with action",
        "name": "props.detectedIssue"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A list of relevant lifecycle events",
        "name": "props.eventHistory"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2969,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 70,
    "level": 0
  },
  {
    "id": "medicationKnowledge",
    "longname": "medicationKnowledge",
    "name": "medicationKnowledge",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationKnowledge resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Code that identifies this medication",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Manufacturer of the item",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "powder | tablets | capsule +",
        "name": "props.doseForm"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "Amount of drug in package",
        "name": "props.amount"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Additional names for a medication",
        "name": "props.synonym"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Associated or related medication information",
        "name": "props.relatedMedicationKnowledge"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A medication resource that is associated with this medication",
        "name": "props.associatedMedication"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Category of the medication or product",
        "name": "props.productType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Associated documentation about the medication",
        "name": "props.monograph"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Active or inactive ingredient",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "The instructions for preparing the medication",
        "name": "props.preparationInstruction"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The intended or approved route of administration",
        "name": "props.intendedRoute"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The pricing of the medication",
        "name": "props.cost"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Program under which a medication is reviewed",
        "name": "props.monitoringProgram"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Guidelines for administration of the medication",
        "name": "props.administrationGuidelines"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Categorization of the medication within a formulary or classification system",
        "name": "props.medicineClassification"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Details about packaged medications",
        "name": "props.packaging"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specifies descriptive properties of the medicine",
        "name": "props.drugCharacteristic"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Potential clinical issue with or between medication(s)",
        "name": "props.contraindication"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Regulatory information about a medication",
        "name": "props.regulatory"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The time course of drug absorption, distribution, metabolism and excretion of a medication from the body",
        "name": "props.kinetics"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3020,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 71,
    "level": 0
  },
  {
    "id": "medicationRequest",
    "longname": "medicationRequest",
    "name": "medicationRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External ids for this request",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of medication usage",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "True if request is prohibiting action",
        "name": "props.doNotPerform"
      },
      {
        "type": {
          "names": [
            "boolean",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reported rather than primary record",
        "name": "props.reported"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Medication to be taken",
        "name": "props.medication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who or group medication request is for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of encounter/admission/stay",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Information to support ordering of the medication",
        "name": "props.supportingInformation"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When request was initially authored",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/What requested the Request",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Intended performer of administration",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Desired kind of performer of the medication administration",
        "name": "props.performerType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Person who entered the request",
        "name": "props.recorder"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason or indication for ordering or not ordering the medication",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Condition or observation that supports why the prescription is being written",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What request fulfills",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Composite request this is part of",
        "name": "props.groupIdentifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Overall pattern of medication administration",
        "name": "props.courseOfTherapyType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Associated insurance coverage",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Information about the prescription",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Dosage"
          ]
        },
        "optional": true,
        "description": "How the medication should be taken",
        "name": "props.dosageInstruction"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Medication supply authorization",
        "name": "props.dispenseRequest"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Any restrictions on medication substitution",
        "name": "props.substitution"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "An order/prescription that is being replaced",
        "name": "props.priorPrescription"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Clinical Issue with action",
        "name": "props.detectedIssue"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A list of events of interest in the lifecycle",
        "name": "props.eventHistory"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3069,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 72,
    "level": 0
  },
  {
    "id": "medicationStatement",
    "longname": "medicationStatement",
    "name": "medicationStatement",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationStatement resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfils plan, proposal or order",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | completed | entered-in-error | intended | stopped | on-hold | unknown | not-taken",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of medication usage",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "What medication was taken",
        "name": "props.medication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is/was taking  the medication",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter / Episode associated with MedicationStatement",
        "name": "props.context"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "The date/time or interval when the medication is/was/will be taken",
        "name": "props.effective"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the statement was asserted?",
        "name": "props.dateAsserted"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Person or organization that provided the information about the taking of this medication",
        "name": "props.informationSource"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional supporting information",
        "name": "props.derivedFrom"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for why the medication is being/was taken",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Condition or observation that supports why the medication is being/was taken",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Further information about the statement",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Dosage"
          ]
        },
        "optional": true,
        "description": "Details of how medication is/was taken or should be taken",
        "name": "props.dosage"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3128,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 73,
    "level": 0
  },
  {
    "id": "medicinalProductDefinition",
    "longname": "medicinalProductDefinition",
    "name": "medicinalProductDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicinalProductDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for this product. Could be an MPID",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Regulatory type, e.g. Investigational or Authorized",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "If this medicine applies to human or veterinary uses",
        "name": "props.domain"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A business identifier relating to a specific version of the product",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The status within the lifecycle of this product record",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The date at which the given status became applicable",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "General description of this product",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The dose form for a single part product, or combined form of a multiple part product",
        "name": "props.combinedPharmaceuticalDoseForm"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The path by which the product is taken into or makes contact with the body",
        "name": "props.route"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Description of indication(s) for this product, used when structured indications are not required",
        "name": "props.indication"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The legal status of supply of the medicinal product as classified by the regulator",
        "name": "props.legalStatusOfSupply"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Whether the Medicinal Product is subject to additional monitoring for regulatory reasons",
        "name": "props.additionalMonitoringIndicator"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Whether the Medicinal Product is subject to special measures for regulatory reasons",
        "name": "props.specialMeasures"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "If authorised for use in children",
        "name": "props.pediatricUseIndicator"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Allows the product to be classified by various systems",
        "name": "props.classification"
      },
      {
        "type": {
          "names": [
            "MarketingStatus"
          ]
        },
        "optional": true,
        "description": "Marketing status of the medicinal product, in contrast to marketing authorization",
        "name": "props.marketingStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Package type for the product",
        "name": "props.packagedMedicinalProduct"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The ingredients of this medicinal product - when not detailed in other resources",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "CodeableReference"
          ]
        },
        "optional": true,
        "description": "Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product",
        "name": "props.impurity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional documentation about the medicinal product",
        "name": "props.attachedDocument"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A master file for the medicinal product (e.g. Pharmacovigilance System Master File)",
        "name": "props.masterFile"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A product specific contact, person (in a role), or an organization",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Clinical trials or studies that this product is involved in",
        "name": "props.clinicalTrial"
      },
      {
        "type": {
          "names": [
            "Coding"
          ]
        },
        "optional": true,
        "description": "A code that this product is known by, within some formal terminology",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The product's name, including full name and possibly coded parts",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Reference to another product, e.g. for linking authorised to investigational product",
        "name": "props.crossReference"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A manufacturing or administrative process for the medicinal product",
        "name": "props.operation"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Key product features such as \"sugar free\", \"modified release\"",
        "name": "props.characteristic"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3172,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 74,
    "level": 0
  },
  {
    "id": "molecularSequence",
    "longname": "molecularSequence",
    "name": "molecularSequence",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MolecularSequence resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique ID for this particular sequence. This is a FHIR-defined id",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "aa | dna | rna",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "description": "Base number of coordinate system (0 for 0-based numbering or coordinates, inclusive start, exclusive end, 1 for 1-based numbering, inclusive start, inclusive end)",
        "name": "props.coordinateSystem"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who and/or what this is about",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Specimen used for sequencing",
        "name": "props.specimen"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The method for sequencing",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who should be responsible for test result",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "The number of copies of the sequence of interest.  (RNASeq)",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A sequence used as reference",
        "name": "props.referenceSeq"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Variant in sequence",
        "name": "props.variant"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Sequence that was observed",
        "name": "props.observedSeq"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "An set of value as quality of sequence",
        "name": "props.quality"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "description": "Average number of reads representing a given nucleotide in the reconstructed sequence",
        "name": "props.readCoverage"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "External repository which contains detailed report related with observedSeq in this resource",
        "name": "props.repository"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Pointer to next atomic sequence",
        "name": "props.pointer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Structural variant",
        "name": "props.structureVariant"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3227,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 75,
    "level": 0
  },
  {
    "id": "nutritionOrder",
    "longname": "nutritionOrder",
    "name": "nutritionOrder",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR NutritionOrder resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifiers assigned to this order",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates protocol or definition",
        "name": "props.instantiates"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The person who requires the diet, formula or nutritional supplement",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The encounter associated with this nutrition order",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date and time the nutrition order was requested",
        "name": "props.dateTime"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who ordered the diet, formula or nutritional supplement",
        "name": "props.orderer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "List of the patient's food and nutrition-related allergies and intolerances",
        "name": "props.allergyIntolerance"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Order-specific modifier about the type of food that should be given",
        "name": "props.foodPreferenceModifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Order-specific modifier about the type of food that should not be given",
        "name": "props.excludeFoodModifier"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Oral diet components",
        "name": "props.oralDiet"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Supplement components",
        "name": "props.supplement"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Enteral formula components",
        "name": "props.enteralFormula"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3270,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 76,
    "level": 0
  },
  {
    "id": "nutritionProduct",
    "longname": "nutritionProduct",
    "name": "nutritionProduct",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR NutritionProduct resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A category or class of the nutrition product (halal, kosher, gluten free, vegan, etc)",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A code designating a specific type of nutritional product",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Manufacturer, representative or officially responsible for the product",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The product's nutritional information expressed by the nutrients",
        "name": "props.nutrient"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Ingredients contained in this product",
        "name": "props.ingredient"
      },
      {
        "type": {
          "names": [
            "CodeableReference"
          ]
        },
        "optional": true,
        "description": "Known or suspected allergens that are a part of this product",
        "name": "props.knownAllergen"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specifies descriptive properties of the nutrition product",
        "name": "props.productCharacteristic"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "One or several physical instances or occurrences of the nutrition product",
        "name": "props.instance"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the product",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3314,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 77,
    "level": 0
  },
  {
    "id": "observation",
    "longname": "observation",
    "name": "observation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Observation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for observation",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills plan, proposal or order",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "registered | preliminary | final | amended +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Classification of  type of observation",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of observation (code / type)",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who and/or what the observation is about",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What the observation is about, when it is not about the subject of record",
        "name": "props.focus"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Healthcare event during which this observation is made",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing",
            "instant"
          ]
        },
        "optional": true,
        "description": "Clinically relevant time/time-period for observation",
        "name": "props.effective"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Date/Time this version was made available",
        "name": "props.issued"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is responsible for the observation",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Quantity",
            "CodeableConcept",
            "string",
            "boolean",
            "integer",
            "Range",
            "Ratio",
            "SampledData",
            "time",
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "Actual result",
        "name": "props.value"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why the result is missing",
        "name": "props.dataAbsentReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "High, low, normal, etc.",
        "name": "props.interpretation"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments about the observation",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Observed body part",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "How it was done",
        "name": "props.method"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Specimen used for this observation",
        "name": "props.specimen"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "(Measurement) Device",
        "name": "props.device"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Provides guide for interpretation",
        "name": "props.referenceRange"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Related resource that belongs to the Observation group",
        "name": "props.hasMember"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Related measurements the observation is made from",
        "name": "props.derivedFrom"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Component results",
        "name": "props.component"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3351,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 78,
    "level": 0
  },
  {
    "id": "observationDefinition",
    "longname": "observationDefinition",
    "name": "observationDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ObservationDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Category of observation",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of observation (code / type)",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for this ObservationDefinition instance",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period",
        "name": "props.permittedDataType"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Multiple results allowed",
        "name": "props.multipleResultsAllowed"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Method used to produce the observation",
        "name": "props.method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Preferred report name",
        "name": "props.preferredReportName"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Characteristics of quantitative results",
        "name": "props.quantitativeDetails"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Qualified range for continuous and ordinal observation results",
        "name": "props.qualifiedInterval"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Value set of valid coded values for the observations conforming to this ObservationDefinition",
        "name": "props.validCodedValueSet"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Value set of normal coded values for the observations conforming to this ObservationDefinition",
        "name": "props.normalCodedValueSet"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Value set of abnormal coded values for the observations conforming to this ObservationDefinition",
        "name": "props.abnormalCodedValueSet"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Value set of critical coded values for the observations conforming to this ObservationDefinition",
        "name": "props.criticalCodedValueSet"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3402,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 79,
    "level": 0
  },
  {
    "id": "organization",
    "longname": "organization",
    "name": "organization",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Organization resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifies this organization  across multiple systems",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether the organization's record is still in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of organization",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name used for the organization",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A list of alternate names that the organization is known as, or was known as in the past",
        "name": "props.alias"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the organization",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "An address for the organization",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The organization of which this organization forms a part",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Contact for the organization for a certain purpose",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoints providing access to services operated for the organization",
        "name": "props.endpoint"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3442,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 80,
    "level": 0
  },
  {
    "id": "organizationAffiliation",
    "longname": "organizationAffiliation",
    "name": "organizationAffiliation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR OrganizationAffiliation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifiers that are specific to this role",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this organization affiliation record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "The period during which the participatingOrganization is affiliated with the primary organization",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization where the role is available",
        "name": "props.organization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that provides/performs the role (e.g. providing services or is a member of)",
        "name": "props.participatingOrganization"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Health insurance provider network in which the participatingOrganization provides the role's services (if defined) at the indicated locations (if defined)",
        "name": "props.network"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Definition of the role the participatingOrganization plays",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specific specialty of the participatingOrganization in the context of the role",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The location(s) at which the role occurs",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Healthcare services provided through the role",
        "name": "props.healthcareService"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Contact details at the participatingOrganization relevant to this Affiliation",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoints providing access to services operated for this role",
        "name": "props.endpoint"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3479,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 81,
    "level": 0
  },
  {
    "id": "packagedProductDefinition",
    "longname": "packagedProductDefinition",
    "name": "packagedProductDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PackagedProductDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "A unique identifier for this package as whole",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A name for this package. Typically as listed in a drug formulary, catalogue, inventory etc",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A high level category e.g. medicinal product, raw material, shipping container etc",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The product that this is a pack for",
        "name": "props.packageFor"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The status within the lifecycle of this item. High level - not intended to duplicate details elsewhere e.g. legal status, or authorization/marketing status",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The date at which the given status became applicable",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "A total of the complete count of contained items of a particular type/form, independent of sub-packaging or organization. This can be considered as the pack size",
        "name": "props.containedItemQuantity"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Textual description. Note that this is not the name of the package or product",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The legal status of supply of the packaged item as classified by the regulator",
        "name": "props.legalStatusOfSupply"
      },
      {
        "type": {
          "names": [
            "MarketingStatus"
          ]
        },
        "optional": true,
        "description": "Allows specifying that an item is on the market for sale, or that it is not available, and the dates and locations associated",
        "name": "props.marketingStatus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Allows the key features to be recorded, such as \"hospital pack\", \"nurse prescribable\"",
        "name": "props.characteristic"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "If the drug product is supplied with another item such as a diluent or adjuvant",
        "name": "props.copackagedIndicator"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Manufacturer of this package type (multiple means these are all possible manufacturers)",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A packaging item, as a container for medically related items, possibly with other packaging items within, or a packaging component, such as bottle cap",
        "name": "props.package"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3518,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 82,
    "level": 0
  },
  {
    "id": "patient",
    "longname": "patient",
    "name": "patient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Patient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "An identifier for this patient",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this patient's record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "HumanName"
          ]
        },
        "optional": true,
        "description": "A name associated with the patient",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the individual",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "male | female | other | unknown",
        "name": "props.gender"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "The date of birth for the individual",
        "name": "props.birthDate"
      },
      {
        "type": {
          "names": [
            "boolean",
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Indicates if the individual is deceased or not",
        "name": "props.deceased"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "An address for the individual",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Marital (civil) status of a patient",
        "name": "props.maritalStatus"
      },
      {
        "type": {
          "names": [
            "boolean",
            "integer"
          ]
        },
        "optional": true,
        "description": "Whether patient is part of a multiple birth",
        "name": "props.multipleBirth"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Image of the patient",
        "name": "props.photo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A contact party (e.g. guardian, partner, friend) for the patient",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A language which may be used to communicate with the patient about his or her health",
        "name": "props.communication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient's nominated primary care provider",
        "name": "props.generalPractitioner"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that is the custodian of the patient record",
        "name": "props.managingOrganization"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Link to another patient resource that concerns the same actual person",
        "name": "props.link"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3559,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 83,
    "level": 0
  },
  {
    "id": "paymentNotice",
    "longname": "paymentNotice",
    "name": "paymentNotice",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PaymentNotice resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for the payment noctice",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request reference",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Response reference",
        "name": "props.response"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible practitioner",
        "name": "props.provider"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Payment reference",
        "name": "props.payment"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "Payment or clearing date",
        "name": "props.paymentDate"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party being paid",
        "name": "props.payee"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party being notified",
        "name": "props.recipient"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Monetary amount of the payment",
        "name": "props.amount"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Issued or cleared Status of the payment",
        "name": "props.paymentStatus"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3602,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 84,
    "level": 0
  },
  {
    "id": "paymentReconciliation",
    "longname": "paymentReconciliation",
    "name": "paymentReconciliation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PaymentReconciliation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for a payment reconciliation",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Period covered",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Party generating payment",
        "name": "props.paymentIssuer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to requesting resource",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible practitioner",
        "name": "props.requestor"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "queued | complete | error | partial",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Disposition message",
        "name": "props.disposition"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When payment issued",
        "name": "props.paymentDate"
      },
      {
        "type": {
          "names": [
            "Money"
          ]
        },
        "optional": true,
        "description": "Total amount of Payment",
        "name": "props.paymentAmount"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for the payment",
        "name": "props.paymentIdentifier"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Settlement particulars",
        "name": "props.detail"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Printed form identifier",
        "name": "props.formCode"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Note concerning processing",
        "name": "props.processNote"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3641,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 85,
    "level": 0
  },
  {
    "id": "person",
    "longname": "person",
    "name": "person",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Person resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "A human identifier for this person",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "HumanName"
          ]
        },
        "optional": true,
        "description": "A name associated with the person",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the person",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "male | female | other | unknown",
        "name": "props.gender"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "The date on which the person was born",
        "name": "props.birthDate"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "One or more addresses for the person",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Image of the person",
        "name": "props.photo"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The organization that is the custodian of the person record",
        "name": "props.managingOrganization"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "This person's record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Link to a resource that concerns the same actual person",
        "name": "props.link"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3683,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 86,
    "level": 0
  },
  {
    "id": "planDefinition",
    "longname": "planDefinition",
    "name": "planDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PlanDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this plan definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the plan definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the plan definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this plan definition (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this plan definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the plan definition",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "order-set | clinical-protocol | eca-rule | workflow-definition",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference",
            "canonical"
          ]
        },
        "optional": true,
        "description": "Type of individual the plan definition is focused on",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the plan definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for plan definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this plan definition is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the plan",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the plan definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the plan definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the plan definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. Education, Treatment, Assessment",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Logic used by the plan definition",
        "name": "props.library"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "What the plan is trying to accomplish",
        "name": "props.goal"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Action defined by the plan",
        "name": "props.action"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3720,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 87,
    "level": 0
  },
  {
    "id": "practitioner",
    "longname": "practitioner",
    "name": "practitioner",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Practitioner resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "An identifier for the person as this agent",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this practitioner's record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "HumanName"
          ]
        },
        "optional": true,
        "description": "The name(s) associated with the practitioner",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the practitioner (that apply to all roles)",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "Address(es) of the practitioner that are not role specific (typically home address)",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "male | female | other | unknown",
        "name": "props.gender"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "The date  on which the practitioner was born",
        "name": "props.birthDate"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Image of the person",
        "name": "props.photo"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Certification, licenses, or training pertaining to the provision of care",
        "name": "props.qualification"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A language the practitioner can use in patient communication",
        "name": "props.communication"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3778,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 88,
    "level": 0
  },
  {
    "id": "practitionerRole",
    "longname": "practitionerRole",
    "name": "practitionerRole",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PractitionerRole resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifiers that are specific to a role/location",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this practitioner role record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "The period during which the practitioner is authorized to perform in these role(s)",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Practitioner that is able to provide the defined services for the organization",
        "name": "props.practitioner"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization where the roles are available",
        "name": "props.organization"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Roles which this practitioner may perform",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specific specialty of the practitioner",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The location(s) at which this practitioner provides care",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The list of healthcare services that this worker provides for this role's Organization/Location(s)",
        "name": "props.healthcareService"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "Contact details that are specific to the role/location/service",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Times the Service Site is available",
        "name": "props.availableTime"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Not available during this time due to provided reason",
        "name": "props.notAvailable"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Description of availability exceptions",
        "name": "props.availabilityExceptions"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Technical endpoints providing access to services operated for the practitioner with this role",
        "name": "props.endpoint"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3815,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 89,
    "level": 0
  },
  {
    "id": "procedure",
    "longname": "procedure",
    "name": "procedure",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Procedure resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Identifiers for this procedure",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A request for this procedure",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Classification of the procedure",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Identification of the procedure",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who the procedure was performed on",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "string",
            "Age",
            "Range"
          ]
        },
        "optional": true,
        "description": "When the procedure was performed",
        "name": "props.performed"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who recorded the procedure",
        "name": "props.recorder"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Person who asserts this procedure",
        "name": "props.asserter"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The people who performed the procedure",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the procedure happened",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded reason procedure performed",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The justification that the procedure was performed",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Target body sites",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The result of procedure",
        "name": "props.outcome"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Any report resulting from the procedure",
        "name": "props.report"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Complication following the procedure",
        "name": "props.complication"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A condition that is a result of the procedure",
        "name": "props.complicationDetail"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Instructions for follow up",
        "name": "props.followUp"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Additional information about the procedure",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Manipulated, implanted, or removed device",
        "name": "props.focalDevice"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Items used during procedure",
        "name": "props.usedReference"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Coded items used during the procedure",
        "name": "props.usedCode"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3856,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 90,
    "level": 0
  },
  {
    "id": "questionnaire",
    "longname": "questionnaire",
    "name": "questionnaire",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Questionnaire resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this questionnaire, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the questionnaire",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the questionnaire",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this questionnaire (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this questionnaire (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates protocol or definition",
        "name": "props.derivedFrom"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Resource that can be subject of QuestionnaireResponse",
        "name": "props.subjectType"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the questionnaire",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for questionnaire (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this questionnaire is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the questionnaire was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the questionnaire was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the questionnaire is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "Coding"
          ]
        },
        "optional": true,
        "description": "Concept that represents the overall questionnaire",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Questions and sections within the Questionnaire",
        "name": "props.item"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3911,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 91,
    "level": 0
  },
  {
    "id": "questionnaireResponse",
    "longname": "questionnaireResponse",
    "name": "questionnaireResponse",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR QuestionnaireResponse resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique id for this set of answers",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request fulfilled by this QuestionnaireResponse",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of this action",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Form being answered",
        "name": "props.questionnaire"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "in-progress | completed | amended | entered-in-error | stopped",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The subject of the questions",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date the answers were gathered",
        "name": "props.authored"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Person who received and recorded the answers",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The person who answered the questions",
        "name": "props.source"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Groups and questions",
        "name": "props.item"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3960,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 92,
    "level": 0
  },
  {
    "id": "read",
    "longname": "read",
    "name": "read",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a single FHIR resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type and ID of the resource to read, eg, `Patient/123`",
        "name": "reference"
      }
    ],
    "examples": [
      "<caption>Read a single Patient resource</caption>\nread('Patient/12345')"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the newly updated resource, as returned by the server",
        "type": null
      },
      {
        "name": "response",
        "description": "the HTTP response returned by the server.",
        "type": null
      }
    ],
    "order": 0,
    "level": 0
  },
  {
    "id": "ref",
    "longname": "ref",
    "name": "ref",
    "kind": "function",
    "scope": "datatypes",
    "description": "Alias for b.reference()",
    "access": "public",
    "meta": {
      "lineno": 283,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 126,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "datatypes",
    "description": "Create a reference object of the form { reference }\nIf ref is an array, each item will be mapped and an array returned.\nIf ref is a FHIR resource, a reference to it will be generated\nIf ref is a string, it'll be treated as a reference id and returned as an object\nIf ref is a valid FHIR reference, it'll just be returned.",
    "params": [
      {
        "description": "the thing to generate a reference from",
        "name": "ref"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 246,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 125,
    "level": 0
  },
  {
    "id": "regulatedAuthorization",
    "longname": "regulatedAuthorization",
    "name": "regulatedAuthorization",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RegulatedAuthorization resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier for the authorization, typically assigned by the authorizing body",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The product type, treatment, facility or activity that is being authorized",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Overall type of this authorization, for example drug marketing approval, orphan drug designation",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "General textual supporting information",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The territory in which the authorization has been granted",
        "name": "props.region"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The status that is authorised e.g. approved. Intermediate states can be tracked with cases and applications",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The date at which the current status was assigned",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "The time period in which the regulatory approval etc. is in effect, e.g. a Marketing Authorization includes the date of authorization and/or expiration date",
        "name": "props.validityPeriod"
      },
      {
        "type": {
          "names": [
            "CodeableReference"
          ]
        },
        "optional": true,
        "description": "Condition for which the use of the regulated product applies",
        "name": "props.indication"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The intended use of the product, e.g. prevention, treatment",
        "name": "props.intendedUse"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The legal/regulatory framework or reasons under which this authorization is granted",
        "name": "props.basis"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The organization that has been granted this authorization, by the regulator",
        "name": "props.holder"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The regulatory authority or authorizing body granting the authorization",
        "name": "props.regulator"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The case or regulatory procedure for granting or amending a regulated authorization. Note: This area is subject to ongoing review and the workgroup is seeking implementer feedback on its use (see link at bottom of page)",
        "name": "props.case"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3998,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 93,
    "level": 0
  },
  {
    "id": "relatedPerson",
    "longname": "relatedPerson",
    "name": "relatedPerson",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RelatedPerson resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "A human identifier for this person",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this related person's record is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The patient this person is related to",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The nature of the relationship",
        "name": "props.relationship"
      },
      {
        "type": {
          "names": [
            "HumanName"
          ]
        },
        "optional": true,
        "description": "A name associated with the person",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "ContactPoint"
          ]
        },
        "optional": true,
        "description": "A contact detail for the person",
        "name": "props.telecom"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "male | female | other | unknown",
        "name": "props.gender"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "The date on which the related person was born",
        "name": "props.birthDate"
      },
      {
        "type": {
          "names": [
            "Address"
          ]
        },
        "optional": true,
        "description": "Address where the related person can be contacted or visited",
        "name": "props.address"
      },
      {
        "type": {
          "names": [
            "Attachment"
          ]
        },
        "optional": true,
        "description": "Image of the person",
        "name": "props.photo"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Period of time that this relationship is considered valid",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A language which may be used to communicate with about the patient's health",
        "name": "props.communication"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4039,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 94,
    "level": 0
  },
  {
    "id": "requestGroup",
    "longname": "requestGroup",
    "name": "requestGroup",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RequestGroup resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills plan, proposal, or order",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request(s) replaced by this request",
        "name": "props.replaces"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Composite request this is part of",
        "name": "props.groupIdentifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What's being requested/ordered",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who the request group is about",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Created as part of",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the request group was authored",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Device or practitioner that authored the request group",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why the request group is needed",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why the request group is needed",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Additional notes about the response",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Proposed actions, if any",
        "name": "props.action"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4078,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 95,
    "level": 0
  },
  {
    "id": "researchDefinition",
    "longname": "researchDefinition",
    "name": "researchDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ResearchDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this research definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the research definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the research definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this research definition (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this research definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Title for use in informal contexts",
        "name": "props.shortTitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the ResearchDefinition",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the research definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Used for footnotes or explanatory notes",
        "name": "props.comment"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for research definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this research definition is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the ResearchDefinition",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the research definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the research definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the research definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The category of the ResearchDefinition, such as Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Logic used by the ResearchDefinition",
        "name": "props.library"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What population?",
        "name": "props.population"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What exposure?",
        "name": "props.exposure"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What alternative exposure state?",
        "name": "props.exposureAlternative"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What outcome?",
        "name": "props.outcome"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4123,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 96,
    "level": 0
  },
  {
    "id": "researchElementDefinition",
    "longname": "researchElementDefinition",
    "name": "researchElementDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ResearchElementDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Canonical identifier for this research element definition, represented as a URI (globally unique)",
        "name": "props.url"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Additional identifier for the research element definition",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Business version of the research element definition",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this research element definition (computer friendly)",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this research element definition (human friendly)",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Title for use in informal contexts",
        "name": "props.shortTitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Subordinate title of the ResearchElementDefinition",
        "name": "props.subtitle"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | retired | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "For testing purposes, not real usage",
        "name": "props.experimental"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date last changed",
        "name": "props.date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the publisher (organization or individual)",
        "name": "props.publisher"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the publisher",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Natural language description of the research element definition",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Used for footnotes or explanatory notes",
        "name": "props.comment"
      },
      {
        "type": {
          "names": [
            "UsageContext"
          ]
        },
        "optional": true,
        "description": "The context that the content is intended to support",
        "name": "props.useContext"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Intended jurisdiction for research element definition (if applicable)",
        "name": "props.jurisdiction"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Why this research element definition is defined",
        "name": "props.purpose"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Describes the clinical usage of the ResearchElementDefinition",
        "name": "props.usage"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Use and/or publishing restrictions",
        "name": "props.copyright"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the research element definition was approved by publisher",
        "name": "props.approvalDate"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "When the research element definition was last reviewed",
        "name": "props.lastReviewDate"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the research element definition is expected to be used",
        "name": "props.effectivePeriod"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The category of the ResearchElementDefinition, such as Education, Treatment, Assessment, etc.",
        "name": "props.topic"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who authored the content",
        "name": "props.author"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who edited the content",
        "name": "props.editor"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who reviewed the content",
        "name": "props.reviewer"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Who endorsed the content",
        "name": "props.endorser"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "Additional documentation, citations, etc.",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Logic used by the ResearchElementDefinition",
        "name": "props.library"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "population | exposure | outcome",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "dichotomous | continuous | descriptive",
        "name": "props.variableType"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "What defines the members of the research element",
        "name": "props.characteristic"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4184,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 97,
    "level": 0
  },
  {
    "id": "researchStudy",
    "longname": "researchStudy",
    "name": "researchStudy",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ResearchStudy resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for study",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name for this study",
        "name": "props.title"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Steps followed in executing study",
        "name": "props.protocol"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of larger study",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility",
        "name": "props.primaryPurposeType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4",
        "name": "props.phase"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Classifications for the study",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Drugs, devices, etc. under study",
        "name": "props.focus"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Condition being studied",
        "name": "props.condition"
      },
      {
        "type": {
          "names": [
            "ContactDetail"
          ]
        },
        "optional": true,
        "description": "Contact details for the study",
        "name": "props.contact"
      },
      {
        "type": {
          "names": [
            "RelatedArtifact"
          ]
        },
        "optional": true,
        "description": "References and dependencies",
        "name": "props.relatedArtifact"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Used to search for the study",
        "name": "props.keyword"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Geographic region(s) for study",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "What this is study doing",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Inclusion & exclusion criteria",
        "name": "props.enrollment"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "When the study began and ended",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Organization that initiates and is legally responsible for the study",
        "name": "props.sponsor"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Researcher who oversees multiple aspects of the study",
        "name": "props.principalInvestigator"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Facility where study activities are conducted",
        "name": "props.site"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design",
        "name": "props.reasonStopped"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the study",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Defined path through the study for a subject",
        "name": "props.arm"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A goal for the study",
        "name": "props.objective"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4244,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 98,
    "level": 0
  },
  {
    "id": "researchSubject",
    "longname": "researchSubject",
    "name": "researchSubject",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ResearchSubject resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for research subject in a study",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "candidate | eligible | follow-up | ineligible | not-registered | off-study | on-study | on-study-intervention | on-study-observation | pending-on-study | potential-candidate | screening | withdrawn",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Start and end of participation",
        "name": "props.period"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Study subject is part of",
        "name": "props.study"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is part of study",
        "name": "props.individual"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "What path should be followed",
        "name": "props.assignedArm"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "What path was followed",
        "name": "props.actualArm"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Agreement to participate in study",
        "name": "props.consent"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4295,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 99,
    "level": 0
  },
  {
    "id": "riskAssessment",
    "longname": "riskAssessment",
    "name": "riskAssessment",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RiskAssessment resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier for the assessment",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request fulfilled by this assessment",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of this occurrence",
        "name": "props.parent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "registered | preliminary | final | amended +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Evaluation mechanism",
        "name": "props.method"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of assessment",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/what does assessment apply to?",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where was assessment performed?",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period"
          ]
        },
        "optional": true,
        "description": "When was assessment made?",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Condition assessed",
        "name": "props.condition"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who did assessment?",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why the assessment was necessary?",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why the assessment was necessary?",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Information used in assessment",
        "name": "props.basis"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Outcome predicted",
        "name": "props.prediction"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "How to reduce risk",
        "name": "props.mitigation"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments on the risk assessment",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4330,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 100,
    "level": 0
  },
  {
    "id": "schedule",
    "longname": "schedule",
    "name": "schedule",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Schedule resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "Whether this schedule is in active use",
        "name": "props.active"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "High-level category",
        "name": "props.serviceCategory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specific service",
        "name": "props.serviceType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Type of specialty needed",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Resource(s) that availability information is being provided for",
        "name": "props.actor"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Period of time covered by schedule",
        "name": "props.planningHorizon"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Comments on availability",
        "name": "props.comment"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4374,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 101,
    "level": 0
  },
  {
    "id": "search",
    "longname": "search",
    "name": "search",
    "kind": "function",
    "scope": "global",
    "description": "Search for matching FHIR resources. Exclude _ from search parameters, and pass query terms on options.query.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of the resource to search for.",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Parameters, query and filter.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Pass supported query parameters without underscore. See {@link https://www.hl7.org/fhir/R4/search.html#Summary FHIR Search Summary}.",
        "name": "options.*"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "query terms to search for. These are appended to the query URL veratim..",
        "name": "options.query"
      }
    ],
    "examples": [
      "<caption>Search with parameter and query term</caption>\nsearch('Patient', {\n  lastUpdated: $.cursor,\n  count: 10,\n  query: { given: 'messi' },\n})",
      "<caption>Search for patients with a given name containing \"eve\"</caption>\nsearch('Patient', {\n  query: { 'given:contains': 'eve' },\n})"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the newly updated resource, as returned by the server",
        "type": null
      },
      {
        "name": "response",
        "description": "the HTTP response returned by the server.",
        "type": null
      }
    ],
    "order": 1,
    "level": 0
  },
  {
    "id": "serviceRequest",
    "longname": "serviceRequest",
    "name": "serviceRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ServiceRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifiers assigned to this order",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Instantiates FHIR protocol or definition",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Instantiates external protocol or definition",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What request fulfills",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What request replaces",
        "name": "props.replaces"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Composite Request ID",
        "name": "props.requisition"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | on-hold | revoked | completed | entered-in-error | unknown",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Classification of service",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "True if service/procedure should not be performed",
        "name": "props.doNotPerform"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What is being requested/ordered",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Additional order information",
        "name": "props.orderDetail"
      },
      {
        "type": {
          "names": [
            "Quantity",
            "Ratio",
            "Range"
          ]
        },
        "optional": true,
        "description": "Service amount",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Individual or Entity the service is ordered for",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Encounter in which the request was created",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing"
          ]
        },
        "optional": true,
        "description": "When service should occur",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "boolean",
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Preconditions for service",
        "name": "props.asNeeded"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Date request signed",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who/what is requesting service",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Performer role",
        "name": "props.performerType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Requested performer",
        "name": "props.performer"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Requested location",
        "name": "props.locationCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Requested location",
        "name": "props.locationReference"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Explanation/Justification for procedure or service",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Explanation/Justification for service or service",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Associated insurance coverage",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Additional clinical information",
        "name": "props.supportingInfo"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Procedure Samples",
        "name": "props.specimen"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Location on Body",
        "name": "props.bodySite"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Patient or consumer-oriented instructions",
        "name": "props.patientInstruction"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request provenance",
        "name": "props.relevantHistory"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4409,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 102,
    "level": 0
  },
  {
    "id": "setSystemMap",
    "longname": "setSystemMap",
    "name": "setSystemMap",
    "kind": "function",
    "scope": "datatypes",
    "description": "Define a set of mapped system values.\n\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.",
    "examples": [
      "<caption>Set shortcut system mappings</caption>\nb.setSystemMap({\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\n});\ncreate(builders.patient({ identifier: b.identifier('xyz', 'SmartCareId') }))"
    ],
    "access": "public",
    "meta": {
      "lineno": 25,
      "filename": "datatypes.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 114,
    "level": 0
  },
  {
    "id": "slot",
    "longname": "slot",
    "name": "slot",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Slot resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Ids for this item",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A broad categorization of the service that is to be performed during this appointment",
        "name": "props.serviceCategory"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource",
        "name": "props.serviceType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The specialty of a practitioner that would be required to perform the service requested in this appointment",
        "name": "props.specialty"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The style of appointment or patient that may be booked in the slot (not service type)",
        "name": "props.appointmentType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The schedule resource that this slot defines an interval of status information",
        "name": "props.schedule"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "busy | free | busy-unavailable | busy-tentative | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Date/Time that the slot is to begin",
        "name": "props.start"
      },
      {
        "type": {
          "names": [
            "instant"
          ]
        },
        "optional": true,
        "description": "Date/Time that the slot is to conclude",
        "name": "props.end"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "This slot has already been overbooked, appointments are unlikely to be accepted for this time",
        "name": "props.overbooked"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Comments on the slot to describe any extended information. Such as custom constraints on the slot",
        "name": "props.comment"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4469,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 103,
    "level": 0
  },
  {
    "id": "specimen",
    "longname": "specimen",
    "name": "specimen",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Specimen resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External Identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier assigned by the lab",
        "name": "props.accessionIdentifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "available | unavailable | unsatisfactory | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of material that forms the specimen",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the specimen came from. This may be from patient(s), from a location (e.g., the source of an environmental sample), or a sampling of a substance or a device",
        "name": "props.subject"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The time when specimen was received for processing",
        "name": "props.receivedTime"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Specimen from which this specimen originated",
        "name": "props.parent"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why the specimen was collected",
        "name": "props.request"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Collection details",
        "name": "props.collection"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Processing and processing step details",
        "name": "props.processing"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Direct container of specimen (tube/slide, etc.)",
        "name": "props.container"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "State of the specimen",
        "name": "props.condition"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments",
        "name": "props.note"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4507,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 104,
    "level": 0
  },
  {
    "id": "specimenDefinition",
    "longname": "specimenDefinition",
    "name": "specimenDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR SpecimenDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business identifier of a kind of specimen",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Kind of material to collect",
        "name": "props.typeCollected"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Patient preparation for collection",
        "name": "props.patientPreparation"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Time aspect for collection",
        "name": "props.timeAspect"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Specimen collection procedure",
        "name": "props.collection"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Specimen in container intended for testing by lab",
        "name": "props.typeTested"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4547,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 105,
    "level": 0
  },
  {
    "id": "substance",
    "longname": "substance",
    "name": "substance",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Substance resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Unique identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | inactive | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What class/type of substance this is",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "What substance this is",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Textual description of the substance, comments",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "If this describes a specific package/container of the substance",
        "name": "props.instance"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Composition information about the substance",
        "name": "props.ingredient"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4580,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 106,
    "level": 0
  },
  {
    "id": "substanceDefinition",
    "longname": "substanceDefinition",
    "name": "substanceDefinition",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR SubstanceDefinition resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Identifier by which this substance is known",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A business level version identifier of the substance",
        "name": "props.version"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Status of substance within the catalogue e.g. active, retired",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "A categorization, high level e.g. polymer or nucleic acid, or food, chemical, biological, or lower e.g. polymer linear or branch chain, or type of impurity",
        "name": "props.classification"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "If the substance applies to human or veterinary use",
        "name": "props.domain"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The quality standard, established benchmark, to which substance complies (e.g. USP/NF, BP)",
        "name": "props.grade"
      },
      {
        "type": {
          "names": [
            "markdown"
          ]
        },
        "optional": true,
        "description": "Textual description of the substance",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Supporting literature",
        "name": "props.informationSource"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Textual comment about the substance's catalogue or registry record",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The entity that creates, makes, produces or fabricates the substance",
        "name": "props.manufacturer"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "An entity that is the source for the substance. It may be different from the manufacturer",
        "name": "props.supplier"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Moiety, for structural modifications",
        "name": "props.moiety"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "General specifications for this substance",
        "name": "props.property"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The molecular weight or weight range",
        "name": "props.molecularWeight"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Structural information",
        "name": "props.structure"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Codes associated with the substance",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Names applicable to this substance",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A link between this substance and another",
        "name": "props.relationship"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Material or taxonomic/anatomical source",
        "name": "props.sourceMaterial"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4614,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 107,
    "level": 0
  },
  {
    "id": "supplyDelivery",
    "longname": "supplyDelivery",
    "name": "supplyDelivery",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR SupplyDelivery resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Fulfills plan, proposal or order",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Part of referenced event",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "in-progress | completed | abandoned | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Patient for whom the item is supplied",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Category of dispense event",
        "name": "props.type"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The item that is delivered or supplied",
        "name": "props.suppliedItem"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing"
          ]
        },
        "optional": true,
        "description": "When event occurred",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Dispenser",
        "name": "props.supplier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where the Supply was sent",
        "name": "props.destination"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who collected the Supply",
        "name": "props.receiver"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4660,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 108,
    "level": 0
  },
  {
    "id": "supplyRequest",
    "longname": "supplyRequest",
    "name": "supplyRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR SupplyRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for SupplyRequest",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | active | suspended +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The kind of supply (central, non-stock, etc.)",
        "name": "props.category"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept",
            "Reference"
          ]
        },
        "optional": true,
        "description": "Medication, Substance, or Device requested to be supplied",
        "name": "props.item"
      },
      {
        "type": {
          "names": [
            "Quantity"
          ]
        },
        "optional": true,
        "description": "The requested amount of the item indicated",
        "name": "props.quantity"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Ordered item details",
        "name": "props.parameter"
      },
      {
        "type": {
          "names": [
            "dateTime",
            "Period",
            "Timing"
          ]
        },
        "optional": true,
        "description": "When the request should be fulfilled",
        "name": "props.occurrence"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the request was made",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Individual making the request",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is intended to fulfill the request",
        "name": "props.supplier"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The reason why the supply item was requested",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The reason why the supply item was requested",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The origin of the supply",
        "name": "props.deliverFrom"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "The destination of the supply",
        "name": "props.deliverTo"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4698,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 109,
    "level": 0
  },
  {
    "id": "task",
    "longname": "task",
    "name": "task",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Task resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Task Instance Identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "canonical"
          ]
        },
        "optional": true,
        "description": "Formal definition of task",
        "name": "props.instantiatesCanonical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Formal definition of task",
        "name": "props.instantiatesUri"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Request fulfilled by this task",
        "name": "props.basedOn"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Requisition or grouper id",
        "name": "props.groupIdentifier"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Composite task",
        "name": "props.partOf"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "draft | requested | received | accepted | +",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Reason for current status",
        "name": "props.statusReason"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "E.g. \"Specimen collected\", \"IV prepped\"",
        "name": "props.businessStatus"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option",
        "name": "props.intent"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "routine | urgent | asap | stat",
        "name": "props.priority"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Task Type",
        "name": "props.code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Human-readable explanation of task",
        "name": "props.description"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "What task is acting on",
        "name": "props.focus"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Beneficiary of the Task",
        "name": "props.for"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Healthcare event during which this task originated",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "Period"
          ]
        },
        "optional": true,
        "description": "Start and end time of execution",
        "name": "props.executionPeriod"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Task Creation Date",
        "name": "props.authoredOn"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Task Last Modified Date",
        "name": "props.lastModified"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who is asking for task to be done",
        "name": "props.requester"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Requested performer",
        "name": "props.performerType"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Responsible individual",
        "name": "props.owner"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Where task occurs",
        "name": "props.location"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "Why task is needed",
        "name": "props.reasonCode"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Why task is needed",
        "name": "props.reasonReference"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Associated insurance coverage",
        "name": "props.insurance"
      },
      {
        "type": {
          "names": [
            "Annotation"
          ]
        },
        "optional": true,
        "description": "Comments made about the task",
        "name": "props.note"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Key events in history of the Task",
        "name": "props.relevantHistory"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Constraints on fulfillment tasks",
        "name": "props.restriction"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Information used to perform task",
        "name": "props.input"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Information produced as part of task",
        "name": "props.output"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4740,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 110,
    "level": 0
  },
  {
    "id": "testReport",
    "longname": "testReport",
    "name": "testReport",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR TestReport resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "External identifier",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Informal name of the executed TestScript",
        "name": "props.name"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "completed | in-progress | waiting | stopped | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Reference to the  version-specific TestScript that was executed to produce this TestReport",
        "name": "props.testScript"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "pass | fail | pending",
        "name": "props.result"
      },
      {
        "type": {
          "names": [
            "decimal"
          ]
        },
        "optional": true,
        "description": "The final score (percentage of tests passed) resulting from the execution of the TestScript",
        "name": "props.score"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Name of the tester producing this report (Organization or individual)",
        "name": "props.tester"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the TestScript was executed and this TestReport was generated",
        "name": "props.issued"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A participant in the test execution, either the execution engine, a client, or a server",
        "name": "props.participant"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The results of the series of required setup operations before the tests were executed",
        "name": "props.setup"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "A test executed from the test script",
        "name": "props.test"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "The results of running the series of required clean up steps",
        "name": "props.teardown"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4798,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 111,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update a resource. If the resource does not already exist, it will be created and `state.response.statusCode` will be 201.\nOtherwise, the existing resource will be replaced.\nTo partially update a resource, use `patch()`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type and ID of the resource to update, eg, `Patient/123`",
        "name": "reference"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The new version of this resource.",
        "name": "resource"
      }
    ],
    "examples": [
      "<caption>Update a Patient with a builder function</caption>\nupdate('Patient/123', b.patient({\n  id: 'Patient/123',\n  name: { family: \"Messi\", given: \"Lionel\", use: \"official\" },\n}))"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 125,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the newly updated resource, as returned by the server",
        "type": null
      },
      {
        "name": "response",
        "description": "the HTTP response returned by the server.",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "uploadBundle",
    "longname": "uploadBundle",
    "name": "uploadBundle",
    "kind": "function",
    "scope": "global",
    "description": "Upload a bundle from state (created by addToBundle) as a transaction.",
    "params": [
      {
        "type": {
          "names": [
            "string/object"
          ]
        },
        "description": "A bundle object or name of a bundle on state",
        "name": "bundle"
      }
    ],
    "examples": [
      "<caption>Upload the default bundle</caption>\nuploadBundle()",
      "<caption>Create and a bundle with a custom name</caption>\naddToBundle($.patients, 'patientsBundle')\nuploadBundle('patientsBundle')",
      "<caption>Upload a bundle from state</caption>\nuploadBundle($.patientsBundle)"
    ],
    "returns": [
      {
        "description": "Operation"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 306,
      "filename": "Adaptor.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "verificationResult",
    "longname": "verificationResult",
    "name": "verificationResult",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR VerificationResult resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "A resource that was validated",
        "name": "props.target"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The fhirpath location(s) within the resource that was validated",
        "name": "props.targetLocation"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "none | initial | periodic",
        "name": "props.need"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "attested | validated | in-process | req-revalid | val-fail | reval-fail",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When the validation status was updated",
        "name": "props.statusDate"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "nothing | primary | multiple",
        "name": "props.validationType"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "The primary process by which the target is validated (edit check; value set; primary source; multiple sources; standalone; in context)",
        "name": "props.validationProcess"
      },
      {
        "type": {
          "names": [
            "Timing"
          ]
        },
        "optional": true,
        "description": "Frequency of revalidation",
        "name": "props.frequency"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "The date/time validation was last completed (including failed validations)",
        "name": "props.lastPerformed"
      },
      {
        "type": {
          "names": [
            "date"
          ]
        },
        "optional": true,
        "description": "The date when target is next validated, if appropriate",
        "name": "props.nextScheduled"
      },
      {
        "type": {
          "names": [
            "CodeableConcept"
          ]
        },
        "optional": true,
        "description": "fatal | warn | rec-only | none",
        "name": "props.failureAction"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Information about the primary source(s) involved in validation",
        "name": "props.primarySource"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Information about the entity attesting to information",
        "name": "props.attestation"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Information about the entity validating information",
        "name": "props.validator"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4837,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 112,
    "level": 0
  },
  {
    "id": "visionPrescription",
    "longname": "visionPrescription",
    "name": "visionPrescription",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR VisionPrescription resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant. Optional.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Properties to apply to the resource (includes common and custom properties).",
        "name": "props"
      },
      {
        "type": {
          "names": [
            "Identifier"
          ]
        },
        "optional": true,
        "description": "Business Identifier for vision prescription",
        "name": "props.identifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "active | cancelled | draft | entered-in-error",
        "name": "props.status"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "Response creation date",
        "name": "props.created"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who prescription is for",
        "name": "props.patient"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Created during encounter / admission / stay",
        "name": "props.encounter"
      },
      {
        "type": {
          "names": [
            "dateTime"
          ]
        },
        "optional": true,
        "description": "When prescription was authorized",
        "name": "props.dateWritten"
      },
      {
        "type": {
          "names": [
            "Reference"
          ]
        },
        "optional": true,
        "description": "Who authorized the vision prescription",
        "name": "props.prescriber"
      },
      {
        "type": {
          "names": [
            "BackboneElement"
          ]
        },
        "optional": true,
        "description": "Vision lens authorization",
        "name": "props.lensSpecification"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4878,
      "filename": "builders.ts",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-4/src"
    },
    "order": 113,
    "level": 0
  }
],
{"name":"fhir-fr","adaptor":"@openfn/language-fhir-fr","version":"1.0.11","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#utils_addExtension\\\">utils.addExtension(resource, url, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_cc\\\">utils.cc()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_coding\\\">utils.coding(code, system)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_composite\\\">utils.composite(object, key, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_concept\\\">utils.concept()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_findExtension\\\">utils.findExtension(obj, targetUrl, [path])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_id\\\">utils.id()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_identifier\\\">utils.identifier(input, [system])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_ref\\\">utils.ref()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_reference\\\">utils.reference(ref)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_setSystemMap\\\">utils.setSystemMap()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_address\\\">builders.address(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_appointment\\\">builders.appointment(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_contactPoint\\\">builders.contactPoint(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_encounter\\\">builders.encounter(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_extension\\\">builders.extension(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_healthcareService\\\">builders.healthcareService(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_humanName\\\">builders.humanName(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_location\\\">builders.location(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationAdministration\\\">builders.medicationAdministration(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observation\\\">builders.observation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_organization\\\">builders.organization(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_patient\\\">builders.patient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitioner\\\">builders.practitioner(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_practitionerRole\\\">builders.practitionerRole(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_relatedPerson\\\">builders.relatedPerson(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_schedule\\\">builders.schedule(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_slot\\\">builders.slot(type, props)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n## utils\\n\\nThese functions belong to the utils namespace.\\n### utils.addExtension {#utils_addExtension}\\n\\n<p><code>addExtension(resource, url, value)</code></p>\\n\\nAdd an extension to a resource (or object).\\nAn object will be created and added to an `extension` array on the provided resource.\\nThe extension array will be set if it does not exist on the resource.\\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource |  | a FHIR resource object to add an extension too |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n\\n\\n* * *\\n\\n\\n### utils.cc {#utils_cc}\\n\\n<p><code>cc()</code></p>\\n\\nAlias for util.concept()\\n\\n\\n* * *\\n\\n\\n### utils.coding {#utils_coding}\\n\\n<p><code>coding(code, system)</code></p>\\n\\nCreate a coding object { code, system }. Systems will be mapped using the system map.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| code | <code>string</code> | the code value |\\n| system | <code>string</code> | URL to the system. Well be mapped using the system map. |\\n\\n\\n* * *\\n\\n\\n### utils.composite {#utils_composite}\\n\\n<p><code>composite(object, key, value)</code></p>\\n\\nWrite a value to the target object using a typed key\\nIe, if key is `value` and the value is a date time string,\\nthis function will write `valueDateTime` to the object.\\n\\nThis function is poorly named.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| object |  | the object to write the composite key to |\\n| key | <code>string</code> | the base key to use to write the value |\\n| value |  | some value to write to the object |\\n\\n\\n* * *\\n\\n\\n### utils.concept {#utils_concept}\\n\\n<p><code>concept()</code></p>\\n\\nCreate a codeableConcept. Codings can be coding objects or\\n[code, system] tuples\\nif the first argument is a string, it will be set as the text.\\nSystems will be mapped with the system map\\n\\n**Example:** Create a codeableConcept\\n```js\\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n**Example:** Create a codeableConcept with text\\n```js\\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n\\n* * *\\n\\n\\n### utils.findExtension {#utils_findExtension}\\n\\n<p><code>findExtension(obj, targetUrl, [path])</code></p>\\n\\nFind an extension with a given url in some array\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj |  | a fhir resource |\\n| targetUrl | <code>string</code> | the extension URL you want to find |\\n| [path] | <code>string</code> | a path to extract from the resource. Optional. |\\n\\n\\n* * *\\n\\n\\n### utils.id {#utils_id}\\n\\n<p><code>id()</code></p>\\n\\nAlias for util.identifier()\\n\\n\\n* * *\\n\\n\\n### utils.identifier {#utils_identifier}\\n\\n<p><code>identifier(input, [system])</code></p>\\n\\nCreate an identifier resource. Systems will be mapped against the system map.\\nThe input can be a string value, or an identifier object.\\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input |  | an array of strings, or a identifier value as a string or object |\\n| [system] | <code>string</code> | the string system to use by default if |\\n\\n\\n* * *\\n\\n\\n### utils.ref {#utils_ref}\\n\\n<p><code>ref()</code></p>\\n\\nAlias for util.reference()\\n\\n\\n* * *\\n\\n\\n### utils.reference {#utils_reference}\\n\\n<p><code>reference(ref)</code></p>\\n\\nCreate a reference object of the form { reference }\\nIf ref is an array, each item will be mapped and an array returned.\\nIf ref is a FHIR resource, a reference to it will be generated\\nIf ref is a string, it'll be treated as a reference id and returned as an object\\nIf ref is a valid FHIR reference, it'll just be returned.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| ref | the thing to generate a reference from |\\n\\n\\n* * *\\n\\n\\n### utils.setSystemMap {#utils_setSystemMap}\\n\\n<p><code>setSystemMap()</code></p>\\n\\nDefine a set of mapped system values.\\n\\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.\\n\\n**Example:** Set shortcut sustem mappings\\n```js\\nutil.setSystemMap({\\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\\n});\\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\\n};\\n```\\n\\n* * *\\n\\n\\n## builders\\n\\nThese functions belong to the builders namespace.\\n### builders.address {#builders_address}\\n\\n<p><code>address(type, props)</code></p>\\n\\nCreate a FHIR Address resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.appointment {#builders_appointment}\\n\\n<p><code>appointment(type, props)</code></p>\\n\\nCreate a FHIR Appointment resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.contactPoint {#builders_contactPoint}\\n\\n<p><code>contactPoint(type, props)</code></p>\\n\\nCreate a FHIR ContactPoint resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.encounter {#builders_encounter}\\n\\n<p><code>encounter(type, props)</code></p>\\n\\nCreate a FHIR Encounter resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.extension {#builders_extension}\\n\\n<p><code>extension(type, props)</code></p>\\n\\nCreate a FHIR Extension resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.healthcareService {#builders_healthcareService}\\n\\n<p><code>healthcareService(type, props)</code></p>\\n\\nCreate a FHIR HealthcareService resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.humanName {#builders_humanName}\\n\\n<p><code>humanName(type, props)</code></p>\\n\\nCreate a FHIR HumanName resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.location {#builders_location}\\n\\n<p><code>location(type, props)</code></p>\\n\\nCreate a FHIR Location resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationAdministration {#builders_medicationAdministration}\\n\\n<p><code>medicationAdministration(type, props)</code></p>\\n\\nCreate a FHIR MedicationAdministration resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.observation {#builders_observation}\\n\\n<p><code>observation(type, props)</code></p>\\n\\nCreate a FHIR Observation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.organization {#builders_organization}\\n\\n<p><code>organization(type, props)</code></p>\\n\\nCreate a FHIR Organization resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.patient {#builders_patient}\\n\\n<p><code>patient(type, props)</code></p>\\n\\nCreate a FHIR Patient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.practitioner {#builders_practitioner}\\n\\n<p><code>practitioner(type, props)</code></p>\\n\\nCreate a FHIR Practitioner resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.practitionerRole {#builders_practitionerRole}\\n\\n<p><code>practitionerRole(type, props)</code></p>\\n\\nCreate a FHIR PractitionerRole resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.relatedPerson {#builders_relatedPerson}\\n\\n<p><code>relatedPerson(type, props)</code></p>\\n\\nCreate a FHIR RelatedPerson resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.schedule {#builders_schedule}\\n\\n<p><code>schedule(type, props)</code></p>\\n\\nCreate a FHIR Schedule resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.slot {#builders_slot}\\n\\n<p><code>slot(type, props)</code></p>\\n\\nCreate a FHIR Slot resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-fhir-fr <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn adaptor for building integration jobs for use with the fhir-fr API.\\n\\nThis adaptor has been auto-generated from a FHIR spec. Do not modify generated\\ncode or changes will be lost.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/fhir-fr-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-fr-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test`\\n\\nBuild the adaptor using `pnpm build`.\\n\\nRe-generate the adaptor source with `pnpm generate-fhir fhir-fr`\\n\\nTo update the spec an re-generate, run `pnpm generate-fhir fhir-fr --respec`.\\nYou can update the spec url with `--spec <www>` or by modifying package.json\\n\"","changelog":"\"# @openfn/language-fhir-fr\\n\\n## 1.0.11 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.10 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.9 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.8 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.0.6 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.0.5 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.0.4 - 01 December 2024\\n\\n### Patch Changes\\n\\n- Fix exports\\n\\n## 1.0.3 - 30 November 2024\\n\\n### Patch Changes\\n\\n- Attempt to fix typings in lightning using new builder\\n\\n## 1.0.2 - 30 November 2024\\n\\n### Patch Changes\\n\\n- Type and build fixes\\n\\n## 1.0.1 - 29 November 2024\\n\\n### Patch Changes\\n\\n- Fix typings\\n\\n## 1.0.0 - 28 November 2024\\n\\nInitial release.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"baseUrl":{"title":"Base Url","type":"string","description":"The baseUrl","examples":["https://hapi.fhir.org"]},"apiPath":{"title":"API Path","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"R4","description":"FHIR api path","minLength":1,"examples":["baseR4","R3","R4"]},"username":{"title":"Username","type":"string","description":"Username","examples":["openfn_test"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your FHIR access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"required":["baseUrl","apiPath"]}},
[
  {
    "id": "addExtension",
    "longname": "addExtension",
    "name": "addExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Add an extension to a resource (or object).\nAn object will be created and added to an `extension` array on the provided resource.\nThe extension array will be set if it does not exist on the resource.\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString",
    "params": [
      {
        "description": "a FHIR resource object to add an extension too",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 101,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 20,
    "newscope": true,
    "level": 0
  },
  {
    "id": "address",
    "longname": "address",
    "name": "address",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Address resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 16,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 0,
    "newscope": true,
    "level": 0
  },
  {
    "id": "appointment",
    "longname": "appointment",
    "name": "appointment",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Appointment resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cc",
    "longname": "cc",
    "name": "cc",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.concept()",
    "access": "public",
    "meta": {
      "lineno": 178,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 24,
    "level": 0
  },
  {
    "id": "coding",
    "longname": "coding",
    "name": "coding",
    "kind": "function",
    "scope": "utils",
    "description": "Create a coding object { code, system }. Systems will be mapped using the system map.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the code value",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to the system. Well be mapped using the system map.",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 137,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "composite",
    "longname": "composite",
    "name": "composite",
    "kind": "function",
    "scope": "utils",
    "description": "Write a value to the target object using a typed key\nIe, if key is `value` and the value is a date time string,\nthis function will write `valueDateTime` to the object.\n\nThis function is poorly named.",
    "params": [
      {
        "description": "the object to write the composite key to",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the base key to use to write the value",
        "name": "key"
      },
      {
        "description": "some value to write to the object",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 236,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 27,
    "level": 0
  },
  {
    "id": "concept",
    "longname": "concept",
    "name": "concept",
    "kind": "function",
    "scope": "utils",
    "description": "Create a codeableConcept. Codings can be coding objects or\n[code, system] tuples\nif the first argument is a string, it will be set as the text.\nSystems will be mapped with the system map",
    "examples": [
      "<caption>Create a codeableConcept</caption>\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])",
      "<caption>Create a codeableConcept with text</caption>\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])"
    ],
    "access": "public",
    "meta": {
      "lineno": 151,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "contactPoint",
    "longname": "contactPoint",
    "name": "contactPoint",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR ContactPoint resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 285,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "encounter",
    "longname": "encounter",
    "name": "encounter",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Encounter resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 345,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "extension",
    "longname": "extension",
    "name": "extension",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Extension resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 750,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "findExtension",
    "longname": "findExtension",
    "name": "findExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Find an extension with a given url in some array",
    "params": [
      {
        "description": "a fhir resource",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the extension URL you want to find",
        "name": "targetUrl"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a path to extract from the resource. Optional.",
        "name": "path"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 120,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "healthcareService",
    "longname": "healthcareService",
    "name": "healthcareService",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR HealthcareService resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2132,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "humanName",
    "longname": "humanName",
    "name": "humanName",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR HumanName resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2410,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "id",
    "longname": "id",
    "name": "id",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.identifier()",
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "identifier",
    "longname": "identifier",
    "name": "identifier",
    "kind": "function",
    "scope": "utils",
    "description": "Create an identifier resource. Systems will be mapped against the system map.\nThe input can be a string value, or an identifier object.\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.",
    "params": [
      {
        "description": "an array of strings, or a identifier value as a string or object",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the string system to use by default if",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 57,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "location",
    "longname": "location",
    "name": "location",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Location resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2478,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "medicationAdministration",
    "longname": "medicationAdministration",
    "name": "medicationAdministration",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationAdministration resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2730,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "observation",
    "longname": "observation",
    "name": "observation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Observation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2933,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "organization",
    "longname": "organization",
    "name": "organization",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Organization resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5322,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "patient",
    "longname": "patient",
    "name": "patient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Patient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6051,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "practitioner",
    "longname": "practitioner",
    "name": "practitioner",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Practitioner resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6715,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "practitionerRole",
    "longname": "practitionerRole",
    "name": "practitionerRole",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR PractitionerRole resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 6884,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "ref",
    "longname": "ref",
    "name": "ref",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.reference()",
    "access": "public",
    "meta": {
      "lineno": 222,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 26,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "utils",
    "description": "Create a reference object of the form { reference }\nIf ref is an array, each item will be mapped and an array returned.\nIf ref is a FHIR resource, a reference to it will be generated\nIf ref is a string, it'll be treated as a reference id and returned as an object\nIf ref is a valid FHIR reference, it'll just be returned.",
    "params": [
      {
        "description": "the thing to generate a reference from",
        "name": "ref"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 190,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 25,
    "level": 0
  },
  {
    "id": "relatedPerson",
    "longname": "relatedPerson",
    "name": "relatedPerson",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RelatedPerson resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7290,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "schedule",
    "longname": "schedule",
    "name": "schedule",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Schedule resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7443,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "setSystemMap",
    "longname": "setSystemMap",
    "name": "setSystemMap",
    "kind": "function",
    "scope": "utils",
    "description": "Define a set of mapped system values.\n\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.",
    "examples": [
      "<caption>Set shortcut sustem mappings</caption>\nutil.setSystemMap({\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\n});\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\n};"
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "slot",
    "longname": "slot",
    "name": "slot",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Slot resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 7537,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-fr/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir-ndr-et","adaptor":"@openfn/language-fhir-ndr-et","version":"0.1.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, resource, params, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#utils_addExtension\\\">utils.addExtension(resource, url, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_cc\\\">utils.cc()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_coding\\\">utils.coding(code, system)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_composite\\\">utils.composite(object, key, value)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_concept\\\">utils.concept()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_findExtension\\\">utils.findExtension(obj, targetUrl, [path])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_id\\\">utils.id()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_identifier\\\">utils.identifier(input, [system])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_ref\\\">utils.ref()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_reference\\\">utils.reference(ref)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#utils_setSystemMap\\\">utils.setSystemMap()</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_carePlan\\\">builders.carePlan(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_encounter\\\">builders.encounter(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medication\\\">builders.medication(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationAdministration\\\">builders.medicationAdministration(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationDispense\\\">builders.medicationDispense(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_medicationRequest\\\">builders.medicationRequest(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_observation\\\">builders.observation(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_patient\\\">builders.patient(type, props)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#builders_relatedPerson\\\">builders.relatedPerson(type, props)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resourceType, resource, params, callback) ⇒ Operation</code></p>\\n\\nCreates a new resource with a server assigned resourceType.\\nThe resource object doesn't need resourceType or id\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>FhirResourceTypes</code> | The resource type to create |\\n| resource | <code>FhirResource</code> | The resource to create |\\n| params | <code>object</code> | (Optional) FHIR parameters to control and configure resource creation. You can specify a version ie r4 here. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n**Example:** Create a new patient\\n```js\\ncreate('Patient', {\\n  name: [\\n    {\\n      use: 'official',\\n      family: 'La Paradisio',\\n      given: ['Josephine', 'Nessa'],\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n\\n## utils\\n\\nThese functions belong to the utils namespace.\\n### utils.addExtension {#utils_addExtension}\\n\\n<p><code>addExtension(resource, url, value)</code></p>\\n\\nAdd an extension to a resource (or object).\\nAn object will be created and added to an `extension` array on the provided resource.\\nThe extension array will be set if it does not exist on the resource.\\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource |  | a FHIR resource object to add an extension too |\\n| url | <code>string</code> | the URL to set for the extension |\\n| value |  | the value that the extension should contain |\\n\\n\\n* * *\\n\\n\\n### utils.cc {#utils_cc}\\n\\n<p><code>cc()</code></p>\\n\\nAlias for util.concept()\\n\\n\\n* * *\\n\\n\\n### utils.coding {#utils_coding}\\n\\n<p><code>coding(code, system)</code></p>\\n\\nCreate a coding object { code, system }. Systems will be mapped using the system map.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| code | <code>string</code> | the code value |\\n| system | <code>string</code> | URL to the system. Well be mapped using the system map. |\\n\\n\\n* * *\\n\\n\\n### utils.composite {#utils_composite}\\n\\n<p><code>composite(object, key, value)</code></p>\\n\\nWrite a value to the target object using a typed key\\nIe, if key is `value` and the value is a date time string,\\nthis function will write `valueDateTime` to the object.\\n\\nThis function is poorly named.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| object |  | the object to write the composite key to |\\n| key | <code>string</code> | the base key to use to write the value |\\n| value |  | some value to write to the object |\\n\\n\\n* * *\\n\\n\\n### utils.concept {#utils_concept}\\n\\n<p><code>concept()</code></p>\\n\\nCreate a codeableConcept. Codings can be coding objects or\\n[code, system] tuples\\nif the first argument is a string, it will be set as the text.\\nSystems will be mapped with the system map\\n\\n**Example:** Create a codeableConcept\\n```js\\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n**Example:** Create a codeableConcept with text\\n```js\\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])\\n```\\n\\n* * *\\n\\n\\n### utils.findExtension {#utils_findExtension}\\n\\n<p><code>findExtension(obj, targetUrl, [path])</code></p>\\n\\nFind an extension with a given url in some array\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj |  | a fhir resource |\\n| targetUrl | <code>string</code> | the extension URL you want to find |\\n| [path] | <code>string</code> | a path to extract from the resource. Optional. |\\n\\n\\n* * *\\n\\n\\n### utils.id {#utils_id}\\n\\n<p><code>id()</code></p>\\n\\nAlias for util.identifier()\\n\\n\\n* * *\\n\\n\\n### utils.identifier {#utils_identifier}\\n\\n<p><code>identifier(input, [system])</code></p>\\n\\nCreate an identifier resource. Systems will be mapped against the system map.\\nThe input can be a string value, or an identifier object.\\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input |  | an array of strings, or a identifier value as a string or object |\\n| [system] | <code>string</code> | the string system to use by default if |\\n\\n\\n* * *\\n\\n\\n### utils.ref {#utils_ref}\\n\\n<p><code>ref()</code></p>\\n\\nAlias for util.reference()\\n\\n\\n* * *\\n\\n\\n### utils.reference {#utils_reference}\\n\\n<p><code>reference(ref)</code></p>\\n\\nCreate a reference object of the form { reference }\\nIf ref is an array, each item will be mapped and an array returned.\\nIf ref is a FHIR resource, a reference to it will be generated\\nIf ref is a string, it'll be treated as a reference id and returned as an object\\nIf ref is a valid FHIR reference, it'll just be returned.\\n\\n\\n| Param | Description |\\n| --- | --- |\\n| ref | the thing to generate a reference from |\\n\\n\\n* * *\\n\\n\\n### utils.setSystemMap {#utils_setSystemMap}\\n\\n<p><code>setSystemMap()</code></p>\\n\\nDefine a set of mapped system values.\\n\\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.\\n\\n**Example:** Set shortcut sustem mappings\\n```js\\nutil.setSystemMap({\\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\\n});\\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\\n};\\n```\\n\\n* * *\\n\\n\\n## builders\\n\\nThese functions belong to the builders namespace.\\n### builders.carePlan {#builders_carePlan}\\n\\n<p><code>carePlan(type, props)</code></p>\\n\\nCreate a FHIR CarePlan resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.encounter {#builders_encounter}\\n\\n<p><code>encounter(type, props)</code></p>\\n\\nCreate a FHIR Encounter resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medication {#builders_medication}\\n\\n<p><code>medication(type, props)</code></p>\\n\\nCreate a FHIR Medication resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationAdministration {#builders_medicationAdministration}\\n\\n<p><code>medicationAdministration(type, props)</code></p>\\n\\nCreate a FHIR MedicationAdministration resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationDispense {#builders_medicationDispense}\\n\\n<p><code>medicationDispense(type, props)</code></p>\\n\\nCreate a FHIR MedicationDispense resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.medicationRequest {#builders_medicationRequest}\\n\\n<p><code>medicationRequest(type, props)</code></p>\\n\\nCreate a FHIR MedicationRequest resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.observation {#builders_observation}\\n\\n<p><code>observation(type, props)</code></p>\\n\\nCreate a FHIR Observation resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.patient {#builders_patient}\\n\\n<p><code>patient(type, props)</code></p>\\n\\nCreate a FHIR Patient resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n### builders.relatedPerson {#builders_relatedPerson}\\n\\n<p><code>relatedPerson(type, props)</code></p>\\n\\nCreate a FHIR RelatedPerson resource.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | The profile id for the resource variant |\\n| props |  | Properties to apply to the resource |\\n\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-fhir-ndr-et <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the FHIR API\\nfor NDR Ethopia.\\n\\n## Documentation\\n\\nThis adaptor is largely auto-generated from the spec at\\nhttps://build.fhir.org/ig/jembi/ethiopia-hiv/branches/master/definitions.json.zip.\\nSee below for more details about that.\\n\\nWe **strongly** recommend not editing generated source files by hand! Better to\\nupdate the spec, mappings, or code generation rules. Otherwise your changes will\\nbe lost.\\n\\nUnlike most adaptors, types are checked-in (because they are largely\\nautogenerated). A custom dts build is used.\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/fhir-ndr-et-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-ndr-et-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Building\\n\\nTo generate the adaptor source, run `pnpm build:src`. This will generate the\\nbuilder functions and typings, but not generate all the other adaptor stuff,\\nlike docs and dist.\\n\\nThe source is NOT rebuilt in CI or during a general repo build (because a change\\nto the remote spec can result in a diff in the source, and a diff in the source\\ncreates problems all over)\\n\\nThe standard `pnpm build` will generate docs and typedefs and stuff, but NOT the\\nsource.\\n\\nSo locally, run `pnpm build:src` to rebuild the adaptor code.\\n\\nThe first time the source build runs, a new \\\"spec\\\" file will be downloaded. To\\nforce a new download (ie to update the spec) delete `./spec/spec.json`\\n\\n## How to use\\n\\nThis adaptor provides a bunch of helper functions to create FHIR resources in\\nthe right structure.\\n\\nUse `builders.*` (or `b.*` for short) namespace to create resource types, like\\nthis:\\n\\n```\\nfn(() => {\\n  const encounter = builders.encounter('target-facility-encounter', {\\n    id,\\n    /* add props as needed */\\n  });\\n})\\n```\\n\\nAll supported resource types have a main function on the `builders` object. The\\nfirst argument is the profile id for that resource, the second is JSON data to\\ndefine the resource.\\n\\nCode assist is available in Lightning for profile ids - just hit ctrl + space to\\nbring up the list. It's also available in VSC (see the\\n[Wiki article](https://github.com/OpenFn/adaptors/wiki/How-to-get-code-assist-for-adaptors-in-VSC))\\n\\nThe json object is designed to be smart and do stuff like generate references\\nautomatically, or map typed keys like effective -> effectiveDateTime.\\n\\nTypescript and documentation should help here although work is needed on this\\nstuff. The design is to give it a sensible value and trust it to do the right\\nthing.\\n\\nSee Resources.tests.js for some examples of creating the supported resources\\nfrom inputs.\\n\\nAs well as the builders, the adaptor also exports util functions to make it a\\nbit easier to create references, codeableconcepts, codings and so on.\\n\\nSo you can do stuff like this:\\n\\n```js\\nfn(() => {\\n  const encounter = builders.encounter('target-facility-encounter', {\\n    id,\\n    subject: util.reference('some-resource-id'),\\n    class: util.coding([value, system]),\\n  });\\n});\\n```\\n\\n## Code Generation\\n\\nA number of files in `src` are auto-generated (you can tell because they have a\\nnice clear comment up at the top).\\n\\nThe build logic is all handled in the `build/` folder.\\n\\nHere is roughly how the code generation works.\\n\\nThe objective is to read in the snapshot definition of all the fhir resources in\\nthe destination system, and for each resource type that we're interested in,\\ngenerate a) an easy-to-use builder function and b) a list of typescript\\ndefinitions to match it.\\n\\nFirst, we check to see whether `./spec/spec.json` exists if it does not,\\ndownload it!\\n\\nThen we load this spec.json into memory. It's a large complex file so we break\\nit down into a simpler JSON representation which we call a schema.\\n\\nThe schema contains a simple expression of rules that our builder function will\\nneed to apply. It looks a bit like this:\\n\\n```json\\n{\\n  \\\"id\\\": \\\"arv-regimen-medication\\\",\\n  \\\"type\\\": \\\"Medication\\\",\\n  \\\"url\\\": \\\"http://moh.gov.et/fhir/hiv/StructureDefinition/arv-regimen-medication\\\",\\n  \\\"props\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"string\\\",\\n      \\\"isArray\\\": false,\\n      \\\"desc\\\": \\\"Logical id of this artifact\\\",\\n      \\\"isComposite\\\": false,\\n      \\\"defaults\\\": {}\\n    }\\n    // ...\\n  }\\n}\\n```\\n\\nThis tells us for exaple that an arv-regimen-medication has a property called\\n`id`, which is a type string. So our builder function will need to handle that.\\n\\nWe only generate a simple schema for the resource types we're interested in.\\nThat's controlled by a file called `./build/mappings.ts`. The mappings has two\\njobs:\\n\\n1. Specific which resource types to generate builder functions for\\n2. Provide manual override rules for those builders. This lets us provide\\n   special mappings on keys for example, or provide defaults if the schema is\\n   missing some information.\\n\\nSo now we've generated simple schema objects for the resource types we're\\ninterested in.\\n\\nNext we generate the builder functions. We use a library call `ast-types` to\\nhelp us do this. Mostly we build an AST tree directly - that is, we\\nprogrammatically define the structure of the code using a neat API. And from\\nthis structure we generate code strings with nice formatting.\\n\\nThis keeps our code generation nice and robust. The API ensures that the\\ngenerated code is syntactically valid, and throws errors if we ask it do do\\nsomething illegal - like nest a statement inside the condition of an\\nif-statement. If we were generating strings directly, we'd have to be very\\ncareful about things like typos and couldn't apply smart transformations to the\\ncode.\\n\\nUsing the schema information and mapping overrides, we generate code statements\\nto take the input data passed as the second argument, and apply it smartly to a\\nnew FHIR resource, which we finally return. We lean heavily on the util\\nfunctions in `src/utils.js` to simplify this.\\n\\nOnce we've got our code, we have to generate matching TypeScript definitions for\\neach builder. This ensures that we get code assist and intellisense on our\\ngenerated functions, making the builders much safer and easier to use.\\n\\nWe use the TypeScript compiler to do this, just like how we use `ast-types` to\\ngenerate the code (although it has to be said that the TypeScript compiler has a\\nway less nice API).\\n\\nOnce finished, generated files are written into `src/`, where they can be\\ntested.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-fhir-ndr-et\\n\\n## 0.1.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n  - @openfn/language-fhir@5.0.4\\n\\n## 0.1.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.1.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.1.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.1.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.1.7 - 03 November 2024\\n\\n### Patch Changes\\n\\n- Fix typescript definitions\\n\\n## 0.1.6 - 28 October 2024\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n  - @openfn/language-fhir@5.0.3\\n\\n## 0.1.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Order the generated code alphabetically\\n\\n## 0.1.4 - 23 October 2024\\n\\n### Patch Changes\\n\\n- 47bf58f: Adjust build process to fix docs\\n\\n## 0.1.3 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.1.2 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.1.1 - 09 October 2024\\n\\n### Patch Changes\\n\\n- Update spec version\\n\\n## 0.1.0 - 27 September 2024\\n\\nInitial release\\n\\n## 0..19\\n\\n- Map text values into \\\"code\\\"\\n\\n## 0.0.18\\n\\n- Make composite types smarter when passed a Resource (convert it to a\\n  reference)\\n\\n## 0.0.17\\n\\n- support more types in addExtension\\n\\n## 0.0.16\\n\\n- Add `text` to each resource type\\n\\n## 0.0.15\\n\\n- Update schema to lateest version\\n\\n## 0.0.14\\n\\n- add relatedPerson builder\\n\\n## 0.0.13\\n\\n- reference will generate a reference to a resource if you pass it in (in form\\n  type/id)\\n- add aliases for util.ref, util.id, util.cc\\n- properly track arrays of references\\n\\n## 0.0.12\\n\\n- Make util.findExtension safe for resources without an extension\\n\\n## 0.0.11\\n\\n- Add builders for MedicationDispense and Medication\\n- Tighten extension mapping\\n\\n## 0.0.10\\n\\n- Improvements to observation (map references, default static values, and handle\\n  value)\\n\\n## 0.0.9\\n\\n- Fix prop mapping which arent in an array util.\\n- concept accepts codings as anarray allow systems map to map system shorthands\\n  and longhands to new values\\n- Fix utils namespace\\n\\n## 0.0.8\\n\\nIgnore nullish keys in mapping (ie, passing undefined will not set a key on the\\nnew object)\\n\\n## 0.0.7\\n\\n- restore all builders\\n- more docs in type defs\\n\\n## 0.0.6\\n\\n- Support more types\\n- remove generic property mapping - most props should map now\\n\\n## 0.0.5\\n\\n- restore patient and observation types\\n- hide internal builder functions\\n\\n## 0.0.4\\n\\nadd type variants add flat assignment of props to resource\\n\\n## 0.0.3\\n\\nexpose more stuff from common\\n\\n## 0.0.2\\n\\nexpose fn\\n\\n## 0.0.1\\n\\nInitial alpha release.\\n\"","functions":["create"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username"]}},
[
  {
    "id": "addExtension",
    "longname": "addExtension",
    "name": "addExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Add an extension to a resource (or object).\nAn object will be created and added to an `extension` array on the provided resource.\nThe extension array will be set if it does not exist on the resource.\nThe value will be smartly written to the object, ie, valueDateTime or valueReference or valueString",
    "params": [
      {
        "description": "a FHIR resource object to add an extension too",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the URL to set for the extension",
        "name": "url"
      },
      {
        "description": "the value that the extension should contain",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 99,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 13,
    "newscope": true,
    "level": 0
  },
  {
    "id": "carePlan",
    "longname": "carePlan",
    "name": "carePlan",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR CarePlan resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 16,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "cc",
    "longname": "cc",
    "name": "cc",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.concept()",
    "access": "public",
    "meta": {
      "lineno": 176,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "coding",
    "longname": "coding",
    "name": "coding",
    "kind": "function",
    "scope": "utils",
    "description": "Create a coding object { code, system }. Systems will be mapped using the system map.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the code value",
        "name": "code"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "URL to the system. Well be mapped using the system map.",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 135,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "composite",
    "longname": "composite",
    "name": "composite",
    "kind": "function",
    "scope": "utils",
    "description": "Write a value to the target object using a typed key\nIe, if key is `value` and the value is a date time string,\nthis function will write `valueDateTime` to the object.\n\nThis function is poorly named.",
    "params": [
      {
        "description": "the object to write the composite key to",
        "name": "object"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the base key to use to write the value",
        "name": "key"
      },
      {
        "description": "some value to write to the object",
        "name": "value"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 234,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "concept",
    "longname": "concept",
    "name": "concept",
    "kind": "function",
    "scope": "utils",
    "description": "Create a codeableConcept. Codings can be coding objects or\n[code, system] tuples\nif the first argument is a string, it will be set as the text.\nSystems will be mapped with the system map",
    "examples": [
      "<caption>Create a codeableConcept</caption>\nconst myConcept = util.concept(['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])",
      "<caption>Create a codeableConcept with text</caption>\nconst myConcept = util.concept('smart care id', ['abc', 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'])"
    ],
    "access": "public",
    "meta": {
      "lineno": 149,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Creates a new resource with a server assigned resourceType.\nThe resource object doesn't need resourceType or id",
    "params": [
      {
        "type": {
          "names": [
            "FhirResourceTypes"
          ]
        },
        "description": "The resource type to create",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "FhirResource"
          ]
        },
        "description": "The resource to create",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) FHIR parameters to control and configure resource creation. You can specify a version ie r4 here.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new patient</caption>\ncreate('Patient', {\n  name: [\n    {\n      use: 'official',\n      family: 'La Paradisio',\n      given: ['Josephine', 'Nessa'],\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 33,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 0,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encounter",
    "longname": "encounter",
    "name": "encounter",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Encounter resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1120,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "findExtension",
    "longname": "findExtension",
    "name": "findExtension",
    "kind": "function",
    "scope": "utils",
    "description": "Find an extension with a given url in some array",
    "params": [
      {
        "description": "a fhir resource",
        "name": "obj"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "the extension URL you want to find",
        "name": "targetUrl"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "a path to extract from the resource. Optional.",
        "name": "path"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 118,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "id",
    "longname": "id",
    "name": "id",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.identifier()",
    "access": "public",
    "meta": {
      "lineno": 86,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "identifier",
    "longname": "identifier",
    "name": "identifier",
    "kind": "function",
    "scope": "utils",
    "description": "Create an identifier resource. Systems will be mapped against the system map.\nThe input can be a string value, or an identifier object.\nIf input is an array of identifiers, an array of mapped/parsed values will be returned.",
    "params": [
      {
        "description": "an array of strings, or a identifier value as a string or object",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "the string system to use by default if",
        "name": "system"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 55,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "medication",
    "longname": "medication",
    "name": "medication",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Medication resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1955,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "medicationAdministration",
    "longname": "medicationAdministration",
    "name": "medicationAdministration",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationAdministration resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 2428,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "medicationDispense",
    "longname": "medicationDispense",
    "name": "medicationDispense",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationDispense resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3045,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "medicationRequest",
    "longname": "medicationRequest",
    "name": "medicationRequest",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR MedicationRequest resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 3897,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "observation",
    "longname": "observation",
    "name": "observation",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Observation resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5195,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "patient",
    "longname": "patient",
    "name": "patient",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR Patient resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 30569,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "ref",
    "longname": "ref",
    "name": "ref",
    "kind": "function",
    "scope": "utils",
    "description": "Alias for util.reference()",
    "access": "public",
    "meta": {
      "lineno": 220,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "reference",
    "longname": "reference",
    "name": "reference",
    "kind": "function",
    "scope": "utils",
    "description": "Create a reference object of the form { reference }\nIf ref is an array, each item will be mapped and an array returned.\nIf ref is a FHIR resource, a reference to it will be generated\nIf ref is a string, it'll be treated as a reference id and returned as an object\nIf ref is a valid FHIR reference, it'll just be returned.",
    "params": [
      {
        "description": "the thing to generate a reference from",
        "name": "ref"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 188,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "relatedPerson",
    "longname": "relatedPerson",
    "name": "relatedPerson",
    "kind": "function",
    "scope": "builders",
    "description": "Create a FHIR RelatedPerson resource.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The profile id for the resource variant",
        "name": "type"
      },
      {
        "description": "Properties to apply to the resource",
        "name": "props"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 30977,
      "filename": "builders.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "setSystemMap",
    "longname": "setSystemMap",
    "name": "setSystemMap",
    "kind": "function",
    "scope": "utils",
    "description": "Define a set of mapped system values.\n\nBuilder functions will use this mappings when they encounter them in system keys. Useful for setting shortcuts.",
    "examples": [
      "<caption>Set shortcut sustem mappings</caption>\nutil.setSystemMap({\n  SmartCareID: 'http://moh.gov.et/fhir/hiv/identifier/SmartCareID'\n});\nbuilders.patient('patient', { identifier: util.identifier('xyz', 'SmartCareId') })\n};"
    ],
    "access": "public",
    "meta": {
      "lineno": 42,
      "filename": "utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir-ndr-et/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"5.0.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resourceType, resource, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createtransactionbundle\\\">createTransactionBundle(entries, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getclaim\\\">getClaim(claimId, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resourceType, resource, params, callback) ⇒ Operation</code></p>\\n\\nCreates a new resource with a server assigned resourceType.\\nThe resource object doesn't need resourceType or id\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The resource type to create |\\n| resource | <code>object</code> | The resource to create |\\n| params | <code>object</code> | (Optional) FHIR parameters to control and configure resource creation |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create a new patient\\n```js\\ncreate('Patient', {\\n  name: [\\n    {\\n      use: 'official',\\n      family: 'La Paradisio',\\n      given: ['Josephine', 'Nessa'],\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n### createTransactionBundle\\n\\n<p><code>createTransactionBundle(entries, callback) ⇒ Operation</code></p>\\n\\nCreate a transaction bundle to process multiple requests at once\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| entries | <code>array</code> | array of transactions |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example**\\n```js\\ncreateTransactionBundle([\\n  {\\n    fullUrl: \\\"https://hapi.fhir.org/baseR4/Patient/592442\\\",\\n    resource: {\\n      resourceType: \\\"Patient\\\",\\n      id: \\\"592442\\\",\\n      name: [{ given: \\\"Caleb\\\", family: \\\"Cushing\\\" }],\\n    },\\n    request: {\\n      method: \\\"POST\\\",\\n      url: \\\"Patient\\\",\\n    },\\n  },\\n]);\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, params, options, callback) ⇒ Operation</code></p>\\n\\nSend a HTTP GET request to the baseURL defined in config\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | (Optional) Parameters to encode into the URL query |\\n| options | [<code>GetOptions</code>](#getoptions) | (Optional) Options to control the request |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get a Patient resource by id\\n```js\\nget('Patient/0bd0038b-8aad-4719-8d55-ff94bd3de5d0');\\n```\\n**Example:** Get a resource with query parameters\\n```js\\nget(\\\"Claim\\\", { _include: \\\"Claim:patient\\\", _sort: \\\"-_lastUpdated\\\", _count: 200 })\\n```\\n\\n* * *\\n\\n### getClaim\\n\\n<p><code>getClaim(claimId, params, callback) ⇒ Operation</code></p>\\n\\nGet Claim in a FHIR system\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| claimId | <code>string</code> | claim id |\\n| params | <code>object</code> | query parameters |\\n| callback | <code>function</code> | callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example**\\n```js\\ngetClaim('',{ _include: \\\"Claim:patient\\\", _sort: \\\"-_lastUpdated\\\", _count: 200 });\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, options, callback) ⇒ Operation</code></p>\\n\\nSend a HTTP POST request to the baseURL defined in config\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | JSON data to append to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | (Optional) Additional options for the request |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the FHIR HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create bundle\\n```js\\npost(\\\"Bundle\\\",{\\n  \\\"resourceType\\\": \\\"Bundle\\\"\\n})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### GetOptions\\n\\nOptions provided to a GET HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to a HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| headers | <code>object</code> | Object of headers to append to the request |\\n| body | <code>object</code> | JSON payload to attach to the request |\\n| query | <code>object</code> | Query parameters for the request. Will be encoded into the URL |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-fhir\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HAPI FHIR\\nAPI.\\n\\n## FHIR Documentation\\n\\nThe Restfull API can be seen here: https://www.hl7.org/fhir/http.html\\n\\n## Documentation\\n\\n\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/fhir-configuration-schema/)\\ndefinition.\\n\\n#### Creates a resource in a destination system using a POST request\\n\\n```js\\ncreate('/endpoint', { foo: 'bar' });\\n```\\n\\n#### Creates a transactionBundle for HAPI FHIR\\n\\n```js\\ncreateTransactionBundle({\\n  entry: [transactionBundle],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-fhir\\n\\n## 5.0.4 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 5.0.3 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- 940996b: Use common helper code to handle invalid absolute URLs\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 5.0.0 - 19 July 2024\\n\\n#### Added\\n\\n- Improved type definitions for `request()` and `get()`\\n\\n#### Changed\\n\\n- Updated `request` function to the new signature:\\n\\n  ```js\\n  export const request =\\n    async (method, path, options = {}, callback) =>\\n    state => ({\\n      ...state,\\n      data,\\n      response,\\n    });\\n  ```\\n\\n- Updated `post` function to the new signature:\\n\\n  ```js\\n  export const post = (path, data, options, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `get` function to the new signature:\\n\\n  ```js\\n  export const get = (path, params, options, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `create` function to the new signature:\\n\\n  ```js\\n  export const create = (resource, resource, params, callback) => state => ({\\n    ...state,\\n    data,\\n    response,\\n  });\\n  ```\\n\\n- Updated `createTransactionBundle` function:\\n\\n  ```js\\n  export const createTransactionBundle = (entries, callback) => state => ({\\n    ...state,\\n    data,\\n  });\\n  ```\\n\\n- Updated `getClaim` function to the new signature:\\n\\n  ```js\\n  export const getClaim =\\n    (claimId, params, callback = s => s) =>\\n    state => ({\\n      ...state,\\n      data,\\n    });\\n  ```\\n\\n- Updated `configuration-schema.json`\\n  - Removed `authType`\\n  - Rename `token` to `access_token`\\n  - Add `username` and `password`\\n\\n#### Removed\\n\\n- Removed `parseAs` from the options.\\n\\n## 4.0.0 - 14 June 2024\\n\\n### Major Changes\\n\\n- a42ffeb9: - All HTTP methods now write `{ data, response }` to state, where\\n  data is the response body and response is the raw response\\n  - All HTTP methods now support a `throwOnError` param, which defaults to true.\\n    If false, the adaptor will not throw if the HTTP status is &lt;=400\\n  - request: return { data, response } directly\\n  - request: fix an issue where default headers would override user headers\\n  - request: if the body contains application/json content, parse it as JSON\\n\\n## 3.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.1.2 - 17 May 2024\\n\\n### Patch Changes\\n\\n- 2b283549: - Update `create()` example\\n  - Update required properties in configuration schema\\n\\n## 3.1.1 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 3.1.0 - 28 July 2023\\n\\n### Minor Changes\\n\\n- d94e9ee: Migrate from axios to using `fetch` from `undici` and add uniti tests\\n\\n## 3.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.0.0 - 06 June 2023\\n\\n### Major Changes\\n\\n- d4b4094: - Update configuration schema,\\n  - Add `get()` function\\n  - Fix `create()` axios config\\n  - Remove unused code\\n  - Improve error handling\\n  - Improve response handling\\n\\n## 1.1.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.2 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.1.1 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0 - 04 November 2022\\n\\n### Minor Changes\\n\\n- fee607e: Migrate FHIR, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["create","createTransactionBundle","get","getClaim","post"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","properties":{"baseUrl":{"title":"Base Url","type":"string","description":"The baseUrl","examples":["https://hapi.fhir.org"]},"apiPath":{"title":"API Path","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"R4","description":"FHIR api path","minLength":1,"examples":["baseR4","R3","R4"]},"username":{"title":"Username","type":"string","description":"Username","examples":["openfn_test"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your FHIR access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"required":["baseUrl","apiPath"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Creates a new resource with a server assigned resourceType.\nThe resource object doesn't need resourceType or id",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The resource type to create",
        "name": "resourceType"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The resource to create",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) FHIR parameters to control and configure resource creation",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new patient</caption>\ncreate('Patient', {\n  name: [\n    {\n      use: 'official',\n      family: 'La Paradisio',\n      given: ['Josephine', 'Nessa'],\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 179,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 7,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createTransactionBundle",
    "longname": "createTransactionBundle",
    "name": "createTransactionBundle",
    "kind": "function",
    "scope": "global",
    "description": "Create a transaction bundle to process multiple requests at once",
    "params": [
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "array of transactions",
        "name": "entries"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createTransactionBundle([\n  {\n    fullUrl: \"https://hapi.fhir.org/baseR4/Patient/592442\",\n    resource: {\n      resourceType: \"Patient\",\n      id: \"592442\",\n      name: [{ given: \"Caleb\", family: \"Cushing\" }],\n    },\n    request: {\n      method: \"POST\",\n      url: \"Patient\",\n    },\n  },\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 223,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "FHIRHttpState",
    "longname": "FHIRHttpState",
    "name": "FHIRHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the FHIR HTTP server (with the body removed)",
        "name": "response"
      },
      {
        "description": "an array of all the previous data values",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 6,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP GET request to the baseURL defined in config",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Parameters to encode into the URL query",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "GetOptions"
          ]
        },
        "description": "(Optional) Options to control the request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a Patient resource by id</caption>\nget('Patient/0bd0038b-8aad-4719-8d55-ff94bd3de5d0');",
      "<caption>Get a resource with query parameters</caption>\nget(\"Claim\", { _include: \"Claim:patient\", _sort: \"-_lastUpdated\", _count: 200 })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 138,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "getClaim",
    "longname": "getClaim",
    "name": "getClaim",
    "kind": "function",
    "scope": "global",
    "description": "Get Claim in a FHIR system",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "claim id",
        "name": "claimId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "query parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getClaim('',{ _include: \"Claim:patient\", _sort: \"-_lastUpdated\", _count: 200 });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 251,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "GetOptions",
    "longname": "GetOptions",
    "name": "GetOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to a GET HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 26,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP POST request to the baseURL defined in config",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON data to append to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "(Optional) Additional options for the request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create bundle</caption>\npost(\"Bundle\",{\n  \"resourceType\": \"Bundle\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 104,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "FHIRHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to a HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of headers to append to the request",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON payload to attach to the request",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters for the request. Will be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 15,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/fhir/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"ghana-bdr","adaptor":"@openfn/language-ghana-bdr","version":"0.1.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data)</a></dt>\\n<dt>\\n    <a href=\\\"#sendbirthnotification\\\">sendBirthNotification(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, query) ⇒ Operation</code></p>\\n\\nMake a GET request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nget(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data) ⇒ Operation</code></p>\\n\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\npost(\\\"patient\\\", { \\\"name\\\":\\\"Bukayo\\\" });\\n```\\n\\n* * *\\n\\n### sendBirthNotification\\n\\n<p><code>sendBirthNotification(data) ⇒ Operation</code></p>\\n\\nGenerate a birth certificate\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nsendBirthNotification({\\n  registry_code: 'abc123',\\n  child: {},\\n  mother: {},\\n  father: {},\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-ghana-bdr <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Ghana\\nBirths and Deaths Registration (BDR) API.\\n\\nThere is no public documentation for the Ghana HBDRP, but the the BDR itself can\\nbe reached at https://bdr.gov.gh/\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/ghana-bdr-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/ghana-bdr-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-ghana-bdr\\n\\n## 0.1.7 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.1.6 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.5 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.4 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.1.3 - 31 January 2025\\n\\n### Patch Changes\\n\\n- 7c677a5: Update mock and examples for bdr, add auth to test\\n\\n## 0.1.2 - 29 January 2025\\n\\n### Patch Changes\\n\\n- 5e3b3cf: Updates to the mock endpoint, these are still moving targets\\n\\n## 0.1.1 - 28 January 2025\\n\\n### Patch Changes\\n\\n- 8fb854a: Swapped inline example for BDR and NIA\\n\\n## 0.1.0 - 28 January 2025\\n\\n- Add `get()` operation\\n- Add `post()` operation\\n- Add `sendBirthNotification()` operation\\n\"","functions":["get","post","sendBirthNotification"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      }
    ],
    "examples": [
      "get(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-bdr/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "/**\nState object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 28,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-bdr/src"
    },
    "order": 1
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "data"
      }
    ],
    "examples": [
      "post(\"patient\", { \"name\":\"Bukayo\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 64,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-bdr/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "sendBirthNotification",
    "longname": "sendBirthNotification",
    "name": "sendBirthNotification",
    "kind": "function",
    "scope": "global",
    "description": "Generate a birth certificate",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "data"
      }
    ],
    "examples": [
      "sendBirthNotification({\n  registry_code: 'abc123',\n  child: {},\n  mother: {},\n  father: {},\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 83,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-bdr/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"ghana-nia","adaptor":"@openfn/language-ghana-nia","version":"0.1.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data)</a></dt>\\n<dt>\\n    <a href=\\\"#registerchild\\\">registerChild(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, query) ⇒ Operation</code></p>\\n\\nMake a GET request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nget(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data) ⇒ Operation</code></p>\\n\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\npost(\\\"patient\\\", { \\\"name\\\":\\\"Bukayo\\\" });\\n```\\n\\n* * *\\n\\n### registerChild\\n\\n<p><code>registerChild(data) ⇒ Operation</code></p>\\n\\nGenerate a national ID\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nregisterChild({\\n  babyData: {\\n    dateOfBirth: \\\"string\\\",\\n    fatherName: \\\"string\\\",\\n    forenames: \\\"string\\\",\\n    gender: \\\"string\\\",\\n    lightwaveETrackerID: \\\"string\\\",\\n    motherName: \\\"string\\\",\\n    noSiblingsInDelivery: \\\"string\\\",\\n    placeOfBirth: \\\"string\\\",\\n    surname: \\\"string\\\",\\n    timeOfbirth: \\\"string\\\",\\n    weightAtBirth: \\\"string\\\",\\n    babyPicture: \\\"string\\\"\\n  },\\n  personVouching: {\\n    etrackerLightwaveID: \\\"string\\\",\\n    ghanaCardPIN: \\\"string\\\",\\n    relationToBaby: \\\"string\\\",\\n    relativePhone: \\\"string\\\",\\n    relativePicture: \\\"string\\\"\\n  }\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-ghana-nia <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Ghana\\nNational Identification Authority (NIA) API.\\n\\nThere is no public documentation for the Ghana NIA system, but the the NIA\\nitself can be reached at https://nia.gov.gh/\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/ghana-nia-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/ghana-nia-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-ghana-nia\\n\\n## 0.1.7 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.1.6 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.5 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.4 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.1.3 - 31 January 2025\\n\\n### Patch Changes\\n\\n- 7c677a5: Update mock and nia, add auth to test\\n\\n## 0.1.2 - 29 January 2025\\n\\n### Patch Changes\\n\\n- 5e3b3cf: Updates to the mock endpoint, these are still moving targets\\n\\n## 0.1.1 - 28 January 2025\\n\\n### Patch Changes\\n\\n- 8fb854a: Swapped inline example for BDR and NIA\\n\\n## 0.1.0 - 28 January 2025\\n\\n- Add `get()` operation\\n- Add `post()` operation\\n- Add `registerChild()` operation\\n\"","functions":["get","post","registerChild"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"merchantKey":{"title":"NIA Merchant Key","type":"string","description":"NI Merchant Key","examples":["abc-123-def"]}},"type":"object","additionalProperties":true,"required":["baseUrl","merchantKey"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      }
    ],
    "examples": [
      "get(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-nia/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "/**\nState object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 28,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-nia/src"
    },
    "order": 1
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "data"
      }
    ],
    "examples": [
      "post(\"patient\", { \"name\":\"Bukayo\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 64,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-nia/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "registerChild",
    "longname": "registerChild",
    "name": "registerChild",
    "kind": "function",
    "scope": "global",
    "description": "Generate a national ID",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "data"
      }
    ],
    "examples": [
      "registerChild({\n  babyData: {\n    dateOfBirth: \"string\",\n    fatherName: \"string\",\n    forenames: \"string\",\n    gender: \"string\",\n    lightwaveETrackerID: \"string\",\n    motherName: \"string\",\n    noSiblingsInDelivery: \"string\",\n    placeOfBirth: \"string\",\n    surname: \"string\",\n    timeOfbirth: \"string\",\n    weightAtBirth: \"string\",\n    babyPicture: \"string\"\n  },\n  personVouching: {\n    etrackerLightwaveID: \"string\",\n    ghanaCardPIN: \"string\",\n    relationToBaby: \"string\",\n    relativePhone: \"string\",\n    relativePicture: \"string\"\n  }\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 100,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ghana-nia/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"gmail","adaptor":"@openfn/language-gmail","version":"1.3.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getcontentsfrommessages\\\">getContentsFromMessages(options)</a></dt>\\n<dt>\\n    <a href=\\\"#sendmessage\\\">sendMessage(message)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getContentsFromMessages\\n\\n<p><code>getContentsFromMessages(options) ⇒ Operation</code></p>\\n\\nDownloads contents from messages of a Gmail account.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | [<code>Options</code>](#options) | Customized options including desired contents and query. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The returned message objects, of the form `{ messageId, contents } ` |\\n| processedIds | An array of string ids processed by this request |\\n**Example:** Get a message with a specific subject\\n```js\\ngetContentsFromMessages(\\n  {\\n    query: 'subject:my+test+message'\\n  }\\n)\\n```\\n**Example:** Get messages after a specific date, with subject and report.txt attachment\\n```js\\ngetContentsFromMessages(\\n  {\\n    query: 'after:15/01/2025',\\n    contents: [\\n      'subject',\\n      { type: 'file', name: 'metadata', file: 'report.txt'}\\n    ]\\n  }\\n)\\n```\\n\\n* * *\\n\\n### sendMessage\\n\\n<p><code>sendMessage(message) ⇒ Operation</code></p>\\n\\nSends a Gmail message using the provided configuration.\\nSupports attachments and standard email fields like subject, body, and recipients.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| message | [<code>SendMessageOptions</code>](#sendmessageoptions) \\\\| [<code>Array.&lt;SendMessageOptions&gt;</code>](#sendmessageoptions) | The message configuration object or array of objects. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The Gmail API response from sending the message. |\\n**Example**\\n```js\\nsendMessage({\\n  to: 'recipient@example.org',\\n  subject: 'Test Message',\\n  body: 'Hello from OpenFn!',\\n  attachments: [\\n    { filename: 'test.txt', content: 'Some text content' }\\n  ]\\n})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### MessageContent\\n\\nUsed to isolate the type of content to retrieve from the message.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| [type] | <code>string</code> | Message content type. Valid types: from, date, subject, body, archive, file. |\\n| [name] | <code>string</code> | A custom description for the content type. |\\n| [archive] | <code>RegExp</code> \\\\| <code>string</code> | Identifier to isolate the desired attachment when type is 'archive'.   Use a regular expression for pattern matching or a string for a literal match. Required if type is 'archive'. |\\n| [file] | <code>RegExp</code> \\\\| <code>string</code> | Identifier to isolate the desired attachment when type is 'file' or 'archive'.   Use a regular expression for pattern matching or a string for a literal match. Required if type is 'file' or 'archive'. |\\n| [maxLength] | <code>number</code> | Maximum number of characters to retrieve from the content. |\\n\\n\\n* * *\\n\\n### Options\\n\\nConfigurable options provided to the Gmail adaptor.\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [query] | <code>string</code> |  | Gmail search query string. |\\n| [contents] | <code>Array.&lt;(string\\\\|MessageContent)&gt;</code> | <code>[&#x27;from&#x27;, &#x27;date&#x27;, &#x27;subject&#x27;, &#x27;body&#x27;]</code> | An array of strings or MessageContent objects used to specify which parts of the message to retrieve. |\\n| [processedIds] | <code>Array.&lt;string&gt;</code> |  | Ignore message ids which have already been processed. |\\n| [email] | <code>string</code> |  | The user account to retrieve messages from. Defaults to the authenticated user. |\\n| [maxResults] | <code>int</code> |  | Maximum number of messages to process per request. Default is 1000. |\\n\\n\\n* * *\\n\\n### SendMessageOptions\\n\\nConfigurable fields for composing an outbound Gmail message.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| to | <code>string</code> | Recipient email address. |\\n| subject | <code>string</code> | Subject line of the email. |\\n| body | <code>string</code> | Email body content. |\\n| [attachments] | <code>Array.&lt;{filename: string, content: (string\\\\|Buffer)}&gt;</code> | Optional list of files to attach. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Gmail adaptor\\n\\nSend and receive Gmail messages with file attachments using simple, configurable logic.\\n\\n# `getContentsFromMessages`\\n\\nThis function is used to extract specific content from Gmail messages using custom desired \\\"content\\\" configurations. The sample code specifies how to query Gmail for messages and identify desired attachments and metadata.\\n\\nWithout any parameters, the `getContentsFromMessages()` function will return an array containing every message in the account of the authenticated user including `from`, `date` and `subject`.\\n\\nA number of options are available to isolated the desired messages and to customize the output.\\n\\n## Parameters\\n\\nAn `options` object can configure the results of the function call. Optional parameters include: `contents`, `query`, `email`, `processedIds`, `maxResults`\\n\\n### options.contents\\n\\nUse the `options.contents` array to specify the content to retrieve from each message. Always included are `from`, `date`, and `subject`.\\n\\nEach item can be a simple string (ie, `'body'`, `'subject'`) or an MessageContent object offering advanced configuration.\\n\\n#### Basic metadata\\n\\nThe following types of content can be extracted:\\n\\n- `body`: Extracts the message body.\\n- `subject`: Extracts the email subject.\\n- `date`: Extracts the timestamp of the email.\\n- `from`: Extracts the sender's information.\\n\\nOptionally, each of these content strings can be expanded to include additional specifications:\\n\\n```js\\nconst mySubject = {\\n  type: 'subject',\\n  name: 'email-title',\\n  maxLength: 25,\\n};\\n```\\n\\n- The `type` property instructs the function which content type to extract.\\n- The `name` property allows you to add a custom name to this information.\\n- The `maxLength` property allows you to limit the length of the content returned.\\n\\n#### Attachment: basic file\\n\\nExtract content from a file attachment.\\n\\n`file`: Identify the specific file inside the archive by providing its name as a string or using a regular expression to matching a pattern.\\n\\n```js\\nconst myMetadata = {\\n  type: 'file',\\n  name: 'metadata',\\n  file: /^summary\\\\.txt$/,\\n};\\n```\\n\\n```js\\nconst myMetadata = {\\n  type: 'file',\\n  file: 'summary.txt',\\n  maxLength: 500,\\n};\\n```\\n\\n#### Attachment: archived file\\n\\nExtract content from a file embedded in an archive attachment.\\n\\n- `archive`: Specify the file name of the archive using either a string for an exact match or a regular expression to match a pattern.\\n- `file`: Identify the specific file inside the archive by providing its name as a string or using a regular expression to match a pattern.\\n\\n```js\\nconst myArchivedFile = {\\n  type: 'archive',\\n  name: 'data',\\n  archive: 'devicedata.zip',\\n  file: /_CURRENT_DATA_\\\\w*?\\\\.json$/,\\n  maxLength: 5000,\\n};\\n```\\n\\n```js\\noptions.contents = [mySubject, 'body', myMetadata, myArchivedFile];\\n```\\n\\n### options.query\\n\\nUse a `query` parameter to filter the messages returned.\\n\\nThe query syntax supports the same query format as the Gmail `search` box.\\n\\n```js\\noptions.query = 'from:ple.com rfc822msgid:<somemsgid@example.com> is:unread';\\n```\\n\\nA full list of supported search operations can be found here: [Refine searches in Gmail](https://support.google.com/mail/answer/7190)\\n\\n### options.email\\n\\nOptionally specify the email address used for the Gmail account. This almost always the same email associated with the authenticated user so this parameter is optional.\\n\\n```js\\noptions.email = '<EMAIL>';\\n```\\n\\n### options.processedIds\\n\\nIn some scenarios, it may be necessary to skip certain messages to prevent the retrieval of duplicate data. Passing an array of messageIds will allow the function to skip these messages if any of the ids are encountered in the returned messages.\\n\\n```js\\noptions.processedIds = [\\n  '194e3cf1ca0ccd66',\\n  '283e2df2ca0ecd75',\\n  '572e1af3ca0bcd84',\\n];\\n```\\n\\n### options.maxResults\\n\\nTo prevent inadventant massive retrieval of messages, you can limit the number of results returned. The default value is 1000.\\n\\nThis works in conjuction with the `options.processedIds` parameter. For example:\\n\\n- account contains messages [1, 2, 3]\\n- `options.processedIds = [1];`\\n- `options.maxResults = 1;`\\n- this will skip message #1 and resulting dataset will contain a single message #2\\n\\n## Example jobs\\n\\n```js\\nconst query = 'in:inbox newer_than:2d';\\nconst contents = ['body'];\\nconst maxResults = 200;\\ngetContentsFromMessages({ query, contents, maxResults });\\n```\\n\\n```js\\nconst subject = 'device data summary'.replace(' ', '+');\\nconst query = `in:inbox subject:${subject} newer_than:1m`;\\n\\nconst email = 'special_assigned_delegate@gmail.com';\\n\\nconst metadataFile = {\\n  type: 'file',\\n  name: 'metadata',\\n  file: /summary\\\\.txt$/,\\n  maxLength: 500,\\n};\\n\\nconst dataFile = {\\n  type: 'archive',\\n  name: 'data',\\n  archive: /_device_data\\\\.zip$/,\\n  file: /_CURRENT_DATA_\\\\w*?\\\\.json$/,\\n};\\n\\nconst contents = [metadataFile, dataFile];\\n\\ngetContentsFromMessages({ query, email, contents });\\n```\\n\\n## Sample `state.data` output\\n\\nFor each matched message, the extracted content is returned as a message object of content properties. Here's an example `state.data` for a single matched message:\\n\\n```js\\n[\\n  {\\n    messageId: '1934c017c1752c01',\\n    from: 'Friendly Sender <sender@gmail.com>',\\n    date: '2024-11-20T23:56:08.000Z',\\n    subject: 'Fwd: FW: Facility Anomaly Report (Summary Data)',\\n    metadata: {\\n      filename: 'daily_summary.txt',\\n      content: '{ \\\"appInfo\\\": { \\\"isAutomaticTime\\\": true }',\\n    },\\n    data: {\\n      archiveFilename: '0031_device_data.zip',\\n      filename: '0031_CURRENT_DATA_P100DT9H45M46S_20241115T102926Z.json',\\n      content: '{ \\\"AMOD\\\": \\\"VL45\\\", \\\"AMFR\\\": \\\"ICECO\\\" }',\\n    },\\n  },\\n];\\n```\\n\\nEach property on the message object represents a specific piece of information extracted:\\n\\n- **from**: Sender's email and name.\\n- **date**: The timestamp when the email was sent.\\n- **subject**: Contains the email subject.\\n- **metadata**: Metadata-named file content, with its matched file name.\\n- **data**: Data-named archive file content, with its matched archive name and file name.\\n\\n# `sendMessage`\\n\\nUse `sendMessage()` to send an email with optional file attachments. This function supports plain text messages as well as attachments and archives.\\n\\n## Parameters\\n\\nPass a single `message` object with the following fields:\\n\\n- `to` (string): Required. The recipient's email address.\\n- `subject` (string): Required. The email subject.\\n- `body` (string): Required. The message body as plain text.\\n- `attachments` (array): Optional. List of file attachments or archives.\\n\\nEach item in the `attachments` array must include:\\n\\n- `filename` (string): The name of the file.\\n- Either `content` or `archive`:\\n  - `content` (string): The file content.\\n  - `archive` (array): Use this to send a `.zip` file. Provide an array of `{ filename, content }` objects.\\n\\n## Example jobs\\n\\n```js\\nsendMessage({\\n  to: \\\"recipient@gmail.com\\\",\\n  subject: \\\"Device Summary\\\",\\n  body: \\\"Here is the latest device summary.\\\",\\n  attachments: [\\n    {\\n      filename: \\\"summary.txt\\\",\\n      content: \\\"This is the summary file.\\\",\\n    },\\n    {\\n      filename: \\\"report.json\\\",\\n      content: '{ \\\"status\\\": \\\"OK\\\" }',\\n    },\\n    {\\n      filename: \\\"data.zip\\\",\\n      archive: [\\n        {\\n          filename: \\\"one.json\\\",\\n          content: '{ \\\"value\\\": 1 }',\\n        },\\n        {\\n          filename: \\\"two.json\\\",\\n          content: '{ \\\"value\\\": 2 }',\\n        },\\n      ],\\n    },\\n  ],\\n});\\n```\\n\\nThis will send an email with two plain attachments and one ZIP archive containing two files.\\n\\n# Acquiring an access token\\n\\nThe Gmail adaptor implicitly uses the Gmail account of the Google account that is used to authenticate the application.\\n\\nAllowing the Gmail adaptor to access a Gmail account is a multi-step process.\\n\\n## Create an OAuth 2.0 client ID\\n\\nFollow the instructions are found here:\\nhttps://support.google.com/googleapi/answer/6158849\\n\\n- Go to [Google Cloud Platform Console](https://console.cloud.google.com/)\\n- Go to \\\"APIs & Services\\\"\\n- Click \\\"Credentials\\\"\\n- Click \\\"Create Credentials\\\"\\n- Select \\\"OAuth client ID\\\"\\n- Select \\\"Create OAuth client ID\\\"\\n- Select Application type \\\"Web application\\\"\\n  - Add a uniquely-identifiable name\\n  - Click \\\"Create\\\"\\n- On the resulting popup screen, find and click \\\"DOWNLOAD JSON\\\" and save this file to a secure location.\\n\\n## Use the Postman application to query the OAuth enpoint and retrieve an access token\\n\\nInitially, you'll need to configure an authentication request using Postman's built-in OAuth 2.0 implementation:\\n\\n- Open Postman\\n- Create a new request\\n- Switch to the \\\"Authorization\\\" tab\\n- On the left side, select Type OAuth 2.0\\n- On the right side, scroll down to the \\\"Configure New Token\\\" section\\n- Fill out the form using information from the downloaded json file from the\\n  previous section\\n  - Token Name: Google Oauth\\n  - Grant Type: Authorization Code\\n  - Auth URL: (found in the json file as auth_url)\\n  - Access Token URL: (found in the json file as token_url)\\n  - Client ID: (found in the json file as client_id)\\n  - Client Secret: (found in the json file as client_secret)\\n  - Scope:\\n    https://www.googleapis.com/auth/gmail.readonly\\n    https://www.googleapis.com/auth/gmail.send\\n  - State: (any random string is fine)\\n  - Client Authentication: Send as Basic Auth header\\n\\nOnce the form is filled out, repeat these steps each hour to retrieve a new\\naccess token:\\n\\n- Click on \\\"Get New Access Token\\\"\\n- A browser will open and you'll be asked to authenticate with your Google Account\\n- Accept the request to allow this OAuth session to access your Google Account.\\n- In the MANAGE ACCESS TOKENS popup, find and copy the new Access Token\\n- This access token will be valid for 1 hour.\\n\\n## Configure OpenFn CLI to find the access token\\n\\nThe Gmail adaptor looks for the access token in the configuration section under `access_token`.\\n\\nExample configuration using a workflow:\\n\\n```\\n\\\"workflow\\\": {\\n  \\\"steps\\\": [\\n    {\\n      \\\"id\\\": \\\"getGmailContent\\\",\\n      \\\"adaptors\\\": [\\n        \\\"gmail\\\"\\n      ],\\n      \\\"expression\\\": \\\"path/to/gmail.js\\\",\\n      \\\"configuration\\\": {\\n        \\\"access_token\\\": \\\"(access token acquired from Postman)\\\"\\n      }\\n    }\\n  ]\\n}\\n```\\n\"","changelog":"\"# @openfn/language-gmail\\n\\n## 1.3.0 - 30 May 2025\\n\\n### Minor Changes\\n\\n- 1205796: Enhance `sendMessage()` to accept an array of configuration objects,\\n  allowing multiple messages to be send in a single command.\\n\\n## 1.2.0 - 22 April 2025\\n\\n### Minor Changes\\n\\n- 7d6d513: Added support for sending messages. Upgraded zip library to support\\n  creating archives as well as reading archives.\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.1.4 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.1.3 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.1.2 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.1.1 - 05 February 2025\\n\\n### Patch Changes\\n\\n- 658971a: Fixed bug which prevented multiple content of the same \\\"type\\\" and now\\n  correctly works to prevent multiple of the same \\\"name\\\".\\n\\n## 1.1.0 - 23 January 2025\\n\\n### Minor Changes\\n\\n- 8203e90: Added options.maxResults field to limit excessive data transfer.\\n\\n## 1.0.1 - 18 January 2025\\n\\n### Patch Changes\\n\\n- 01b4aa9: This patch includes breaking changes to the API - but since the\\n  adpator has only been released a couple of days we don't anticipate this\\n  affecting any users.\\n\\n  - Removed the `userId` parameter from `getContentsFromMessages()`. Pass\\n    `options.email` instead.\\n  - Renamed `options.desiredContents` to `options.contents`\\n  - Revised documentation for clarity and accuracy\\n\\n## 1.0.0 - 16 January 2025\\n\\nInitial release.\\n\"","functions":["getContentsFromMessages","sendMessage"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Gmail access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmhax0rZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "getContentsFromMessages",
    "longname": "getContentsFromMessages",
    "name": "getContentsFromMessages",
    "kind": "function",
    "scope": "global",
    "description": "Downloads contents from messages of a Gmail account.",
    "params": [
      {
        "type": {
          "names": [
            "Options"
          ]
        },
        "description": "Customized options including desired contents and query.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get a message with a specific subject</caption>\ngetContentsFromMessages(\n  {\n    query: 'subject:my+test+message'\n  }\n)",
      "<caption>Get messages after a specific date, with subject and report.txt attachment</caption>\ngetContentsFromMessages(\n  {\n    query: 'after:15/01/2025',\n    contents: [\n      'subject',\n      { type: 'file', name: 'metadata', file: 'report.txt'}\n    ]\n  }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 71,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/gmail/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The returned message objects, of the form `{ messageId, contents } `",
        "type": "Array"
      },
      {
        "name": "processedIds",
        "description": "An array of string ids processed by this request",
        "type": "Array.<string>"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "MessageContent",
    "longname": "MessageContent",
    "name": "MessageContent",
    "kind": "typedef",
    "scope": "global",
    "description": "Used to isolate the type of content to retrieve from the message.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Message content type. Valid types: from, date, subject, body, archive, file.",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A custom description for the content type.",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "RegExp",
            "string"
          ]
        },
        "optional": true,
        "description": "Identifier to isolate the desired attachment when type is 'archive'.\n  Use a regular expression for pattern matching or a string for a literal match. Required if type is 'archive'.",
        "name": "archive"
      },
      {
        "type": {
          "names": [
            "RegExp",
            "string"
          ]
        },
        "optional": true,
        "description": "Identifier to isolate the desired attachment when type is 'file' or 'archive'.\n  Use a regular expression for pattern matching or a string for a literal match. Required if type is 'file' or 'archive'.",
        "name": "file"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "Maximum number of characters to retrieve from the content.",
        "name": "maxLength"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 21,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/gmail/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "Options",
    "longname": "Options",
    "name": "Options",
    "kind": "typedef",
    "scope": "global",
    "description": "Configurable options provided to the Gmail adaptor.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "Gmail search query string.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Array.<(string|MessageContent)>"
          ]
        },
        "optional": true,
        "defaultvalue": "['from', 'date', 'subject', 'body']",
        "description": "An array of strings or MessageContent objects used to specify which parts of the message to retrieve.",
        "name": "contents"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "optional": true,
        "description": "Ignore message ids which have already been processed.",
        "name": "processedIds"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "The user account to retrieve messages from. Defaults to the authenticated user.",
        "name": "email"
      },
      {
        "type": {
          "names": [
            "int"
          ]
        },
        "optional": true,
        "nullable": true,
        "description": "Maximum number of messages to process per request. Default is 1000.",
        "name": "maxResults"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 34,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/gmail/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "sendMessage",
    "longname": "sendMessage",
    "name": "sendMessage",
    "kind": "function",
    "scope": "global",
    "description": "Sends a Gmail message using the provided configuration.\nSupports attachments and standard email fields like subject, body, and recipients.",
    "params": [
      {
        "type": {
          "names": [
            "SendMessageOptions",
            "Array.<SendMessageOptions>"
          ]
        },
        "description": "The message configuration object or array of objects.",
        "name": "message"
      }
    ],
    "examples": [
      "sendMessage({\n  to: 'recipient@example.org',\n  subject: 'Test Message',\n  body: 'Hello from OpenFn!',\n  attachments: [\n    { filename: 'test.txt', content: 'Some text content' }\n  ]\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 186,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/gmail/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The Gmail API response from sending the message.",
        "type": "Object"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "SendMessageOptions",
    "longname": "SendMessageOptions",
    "name": "SendMessageOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Configurable fields for composing an outbound Gmail message.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Recipient email address.",
        "name": "to"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Subject line of the email.",
        "name": "subject"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Email body content.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "Array.<{filename: string, content: (string|Buffer)}>"
          ]
        },
        "optional": true,
        "description": "Optional list of files to attach.",
        "name": "attachments"
      }
    ],
    "meta": {
      "lineno": 158,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/gmail/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"godata","adaptor":"@openfn/language-godata","version":"3.5.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getcase\\\">getCase(id, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getcontact\\\">getContact(id, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlocation\\\">getLocation(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getoutbreak\\\">getOutbreak(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getreferencedata\\\">getReferenceData(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listcases\\\">listCases(id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listcontacts\\\">listContacts(id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listlocations\\\">listLocations(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listoutbreaks\\\">listOutbreaks(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#listreferencedata\\\">listReferenceData(callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcase\\\">upsertCase(id, externalId, goDataCase, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcontact\\\">upsertContact(id, externalId, goDataContact, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertlocation\\\">upsertLocation(externalId, goDataLocation, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertoutbreak\\\">upsertOutbreak(outbreak, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertreferencedata\\\">upsertReferenceData(externalId, goDataReferenceData, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getCase\\n\\n<p><code>getCase(id, query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple cases within an outbreak from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetCase(\\n   '3b55-cdf4',\\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\\n   state => {\\n     console.log(state);\\n     return state;\\n   }\\n);\\n```\\n\\n* * *\\n\\n### getContact\\n\\n<p><code>getContact(id, query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple contacts within an outbreak from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetContact(\\\"343d-dc3e\\\", {\\\"where\\\":{\\\"firstName\\\": \\\"Luca\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getLocation\\n\\n<p><code>getLocation(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple locations from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetLocation({\\\"where\\\":{\\\"name\\\": \\\"30 DE OCTUBRE\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getOutbreak\\n\\n<p><code>getOutbreak(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple outbreaks from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetOutbreak({\\\"where\\\":{\\\"name\\\": \\\"Outbreak demo\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### getReferenceData\\n\\n<p><code>getReferenceData(query, callback) ⇒ Operation</code></p>\\n\\nGet one or multiple reference data from a query filter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object with a query filter parameter |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\ngetReferenceData({\\\"where\\\":{\\\"categoryId\\\": \\\"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\\\"}}, state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listCases\\n\\n<p><code>listCases(id, callback) ⇒ Operation</code></p>\\n\\nFetch the list of cases within a particular outbreak using its ID.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistCases(\\\"343d-dc3e\\\", state => {\\n   console.log(state);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listContacts\\n\\n<p><code>listContacts(id, callback) ⇒ Operation</code></p>\\n\\nFetch the list of contacts within a particular outbreak using its ID.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistContacts(\\\"343d-dc3e\\\", // Outbreak Id\\n   state => {\\n      console.log(state);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listLocations\\n\\n<p><code>listLocations(callback) ⇒ Operation</code></p>\\n\\nFetch the list of locations\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistLocations(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listOutbreaks\\n\\n<p><code>listOutbreaks(callback) ⇒ Operation</code></p>\\n\\nFetch the list of outbreaks\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistOutbreaks(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### listReferenceData\\n\\n<p><code>listReferenceData(callback) ⇒ Operation</code></p>\\n\\nFetch the list of reference data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nlistReferenceData(state => {\\n   console.log(state.data);\\n   return state;\\n });\\n```\\n\\n* * *\\n\\n### upsertCase\\n\\n<p><code>upsertCase(id, externalId, goDataCase, callback) ⇒ Operation</code></p>\\n\\nUpsert case to godata using an external id to mach a specific record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataCase | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertCase(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   data: state => {\\n     const patient = state.data.body;\\n      return {\\n        firstName: patient.Patient_name.split(' ')[0],\\n        lastName: patient.Patient_name.split(' ')[1],\\n        visualId: patient.Case_ID,\\n        'age:years': patient.Age_in_year,\\n        gender: patient.Sex,\\n      };\\n })\\n```\\n\\n* * *\\n\\n### upsertContact\\n\\n<p><code>upsertContact(id, externalId, goDataContact, callback) ⇒ Operation</code></p>\\n\\nUpsert contact to godata using an external id to match a specific record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | Outbreak id |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataContact | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertContact(\\\"4dce-3eedce3-rd33\\\", 'visualId',\\n   {\\n     firstName: 'Luca',\\n     gender: 'male',\\n     'age:years': '20'\\n     ...\\n   }\\n )\\n```\\n\\n* * *\\n\\n### upsertLocation\\n\\n<p><code>upsertLocation(externalId, goDataLocation, callback) ⇒ Operation</code></p>\\n\\nUpsert location to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataLocation | <code>object</code> | an object with some location data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertLocation('name', {...})\\n```\\n\\n* * *\\n\\n### upsertOutbreak\\n\\n<p><code>upsertOutbreak(outbreak, callback) ⇒ Operation</code></p>\\n\\nUpsert outbreak to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| outbreak | <code>object</code> | an object with an externalId and some outbreak data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertOutbreak({externalId: \\\"3dec33-ede3\\\", data: {...}})\\n```\\n\\n* * *\\n\\n### upsertReferenceData\\n\\n<p><code>upsertReferenceData(externalId, goDataReferenceData, callback) ⇒ Operation</code></p>\\n\\nUpsert reference data to godata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>string</code> | External Id to match |\\n| goDataReferenceData | <code>object</code> | an object with some reference data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nupsertReferenceData('id', {...})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-godata\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the WHO\\nGo.Data API.\\n\\n[Go.Data](https://www.who.int/godata) is an outbreak investigation tool for\\nfield data collection during public health emergencies. The tool includes\\nfunctionality for case investigation, contact follow-up, visualization of chains\\nof transmission including secure data exchange and is designed for flexibility\\nin the field, to adapt to the wide range of outbreak scenarios.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/godata-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/godata-configuration-schema/)\\ndefinition.\\n\\n## Helper Functions\\n\\n### post(...)\\n\\n## Fetch the list of outbreaks\\n\\nThis function is used to fetch the whole list of outbreaks in Go.Data.\\n\\n```js\\nlistOutbreaks(state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Get a specific outbreak\\n\\nThis function can be used to fetch one specific outbreak. A filtering mechanism\\nis used to specify a criteria to match. Mutliple outbreaks could be returned if\\nmatched by the filter.\\n\\n```js\\ngetOutbreak({ where: { name: 'Outbreak demo' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update an outbreak using a unique id as a key\\n\\nThis function is used to either update a record in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertOutbreak({\\n  externalId: '3dec33-ede3',\\n  data: {\\n    name: 'string',\\n    description: 'string',\\n    disease: 'string',\\n    countries: [\\n      {\\n        id: 'SENEGAL',\\n      },\\n    ],\\n    startDate: '2020-12-17T14:54:19.498Z',\\n    endDate: '2020-12-17T14:54:19.498Z',\\n    longPeriodsBetweenCaseOnset: 0,\\n    periodOfFollowup: 0,\\n  },\\n});\\n```\\n\\n## Fetch the list of cases\\n\\nThis function is used to fetch the whole list of cases for a specific outbreak\\nin Go.Data.\\n\\n```js\\nlistCases('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific case\\n\\nThis function can be used to fetch one specific case for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple cases could be\\nreturned if matched by the filter.\\n\\n```js\\ngetCase(\\n  '4c444f7-4e11-41d0-c1af-331dd15a892e',\\n  { 'where.relationship': { active: true }, where: { firstName: 'Luca' } },\\n  state => {\\n    console.log(state);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a case using a unique id as a key\\n\\nThis function is used to either update a case in Go.Data if matched or insert a\\nnew one if no record matched the unique id.\\n\\n```js\\nupsertCase('4dce-3eedce3-rd33', 'visualId',\\n  data: state => {\\n    const patient = state.data.body;\\n    return {\\n      firstName: patient.Patient_name.split(' ')[0],\\n      lastName: patient.Patient_name.split(' ')[1],\\n      visualId: patient.Case_ID,\\n      'age:years': patient.Age_in_year,\\n      gender: patient.Sex,\\n    };\\n  });\\n```\\n\\n## Fetch the list of contacts\\n\\nThis function is used to fetch the whole list of contacts for a specific\\noutbreak in Go.Data.\\n\\n```js\\nlistContacts('4c444f7-4e11-41d0-c1af-331dd15a892e', state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific contact\\n\\nThis function can be used to get one specific contact for an outbreak. A\\nfiltering mechanism can specify a criteria to match. Mutliple contacts could be\\nreturned if matched by the filter.\\n\\n```js\\ngetContact('343d-dc3e', { where: { firstName: 'Luca' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a contact using a unique id as a key\\n\\nThis function is used to either update a contact in Go.Data if matched or insert\\na new one if no record matched the unique id.\\n\\n```js\\nupsertContact('4dce-3eedce3-rd33', 'visualId', {\\n  firstName: 'Luca',\\n  gender: 'male',\\n  'age:years': '20',\\n});\\n```\\n\\n## Fetch the list of locations\\n\\nThis function is used to fetch the list of locations.\\n\\n```js\\nlistLocations(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific location\\n\\nThis function can be used to get one specific location. A filtering mechanism\\ncan specify a criteria to match. Mutliple locations could be returned if matched\\nby the filter.\\n\\n```js\\ngetLocation({ where: { name: '30 DE MAYO' } }, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n## Insert or Update a location using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertLocation('name', {\\n  name: '30 DE DECIEMBRE',\\n  synonyms: [],\\n  identifiers: [],\\n  active: true,\\n  populationDensity: 0,\\n  geoLocation: {\\n    lat: -45.343244,\\n    lng: -67.193873,\\n  },\\n});\\n```\\n\\n## Fetch the list of reference data\\n\\nThis function is used to fetch the list of reference data.\\n\\n```js\\nlistReferenceData(state => {\\n  console.log(state);\\n  return state;\\n});\\n```\\n\\n## Get a specific reference data\\n\\nThis function can be used to get one specific reference data. A filtering\\nmechanism can specify a criteria to match.\\n\\n```js\\ngetReferenceData(\\n  { where: { categoryId: 'LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME' } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Insert or Update a reference data using a unique id as a key\\n\\nThis function is used to either update a location if matched or insert a new. A\\ncustom `externalId` can be provided.\\n\\n```js\\nupsertReferenceData('id', {\\n  categoryId: 'CATEGORY',\\n  value: 'VALUE',\\n  readOnly: false,\\n  active: true,\\n  id: 'ID',\\n  createdAt: '2020-10-01T18:48:31.784Z',\\n  createdBy: '95d31ea9',\\n  updatedAt: '2020-10-01T18:48:31.784Z',\\n  updatedBy: '95d31ea9',\\n  createdOn: 'API',\\n  deleted: false,\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-godata\\n\\n## 3.5.4 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.5.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 3.5.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.5.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.4.0 - 14 December 2023\\n\\n### Minor Changes\\n\\n- df4cfca: Switch from `'writeOnly: true'` to `'format: email'` in the godata\\n  configuration schema.\\n\\n## 3.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 3.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.2.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.2.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 3.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.2.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 3.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 8e7a79e: Migrate Godata\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\"","functions":["getCase","getContact","getLocation","getOutbreak","getReferenceData","listCases","listContacts","listLocations","listOutbreaks","listReferenceData","upsertCase","upsertContact","upsertLocation","upsertOutbreak","upsertReferenceData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"Godata API URL","default":"https://www.who-godata.com/api","format":"uri","minLength":1,"examples":["https://www.who-godata.com/api"]},"email":{"title":"Email","type":"string","description":"Your Godata login email","format":"email","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Godata login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["apiUrl","email","password"]}},
[
  {
    "id": "getCase",
    "longname": "getCase",
    "name": "getCase",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple cases within an outbreak from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getCase(\n   '3b55-cdf4',\n   { 'where.relationship': { active: true }, where: { firstName: 'Luca'} },\n   state => {\n     console.log(state);\n     return state;\n   }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 441,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getContact",
    "longname": "getContact",
    "name": "getContact",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple contacts within an outbreak from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getContact(\"343d-dc3e\", {\"where\":{\"firstName\": \"Luca\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 122,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getLocation",
    "longname": "getLocation",
    "name": "getLocation",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple locations from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getLocation({\"where\":{\"name\": \"30 DE OCTUBRE\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 609,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "getOutbreak",
    "longname": "getOutbreak",
    "name": "getOutbreak",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple outbreaks from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getOutbreak({\"where\":{\"name\": \"Outbreak demo\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 286,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getReferenceData",
    "longname": "getReferenceData",
    "name": "getReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Get one or multiple reference data from a query filter",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with a query filter parameter",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getReferenceData({\"where\":{\"categoryId\": \"LNG_REFERENCE_DATA_CATEGORY_CENTRE_NAME\"}}, state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 768,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "listCases",
    "longname": "listCases",
    "name": "listCases",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of cases within a particular outbreak using its ID.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listCases(\"343d-dc3e\", state => {\n   console.log(state);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 400,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "listContacts",
    "longname": "listContacts",
    "name": "listContacts",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of contacts within a particular outbreak using its ID.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listContacts(\"343d-dc3e\", // Outbreak Id\n   state => {\n      console.log(state);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "listLocations",
    "longname": "listLocations",
    "name": "listLocations",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of locations",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listLocations(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 573,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "listOutbreaks",
    "longname": "listOutbreaks",
    "name": "listOutbreaks",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of outbreaks",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listOutbreaks(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 250,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "listReferenceData",
    "longname": "listReferenceData",
    "name": "listReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Fetch the list of reference data",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "listReferenceData(state => {\n   console.log(state.data);\n   return state;\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 732,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "upsertCase",
    "longname": "upsertCase",
    "name": "upsertCase",
    "kind": "function",
    "scope": "global",
    "description": "Upsert case to godata using an external id to mach a specific record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "goDataCase"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertCase(\"4dce-3eedce3-rd33\", 'visualId',\n   data: state => {\n     const patient = state.data.body;\n      return {\n        firstName: patient.Patient_name.split(' ')[0],\n        lastName: patient.Patient_name.split(' ')[1],\n        visualId: patient.Case_ID,\n        'age:years': patient.Age_in_year,\n        gender: patient.Sex,\n      };\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 489,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "upsertContact",
    "longname": "upsertContact",
    "name": "upsertContact",
    "kind": "function",
    "scope": "global",
    "description": "Upsert contact to godata using an external id to match a specific record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Outbreak id",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "goDataContact"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertContact(\"4dce-3eedce3-rd33\", 'visualId',\n   {\n     firstName: 'Luca',\n     gender: 'male',\n     'age:years': '20'\n     ...\n   }\n )"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertLocation",
    "longname": "upsertLocation",
    "name": "upsertLocation",
    "kind": "function",
    "scope": "global",
    "description": "Upsert location to godata",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some location data.",
        "name": "goDataLocation"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertLocation('name', {...})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 646,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "upsertOutbreak",
    "longname": "upsertOutbreak",
    "name": "upsertOutbreak",
    "kind": "function",
    "scope": "global",
    "description": "Upsert outbreak to godata",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId and some outbreak data.",
        "name": "outbreak"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertOutbreak({externalId: \"3dec33-ede3\", data: {...}})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 322,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "upsertReferenceData",
    "longname": "upsertReferenceData",
    "name": "upsertReferenceData",
    "kind": "function",
    "scope": "global",
    "description": "Upsert reference data to godata",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External Id to match",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some reference data.",
        "name": "goDataReferenceData"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertReferenceData('id', {...})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 805,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/godata/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"googledrive","adaptor":"@openfn/language-googledrive","version":"1.0.1","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(content, fileName, options)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(fileId)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(fileId, content, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(content, fileName, options) ⇒ function</code></p>\\n\\nUploads a file to Google Drive.\\n\\n**Returns**: <code>function</code> - An operation that uploads the file.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| content | <code>string</code> | Base64 encoded file content. |\\n| fileName | <code>string</code> | Name for the uploaded file. |\\n| options | <code>Object</code> | File upload parameters. |\\n| options.folderId | <code>string</code> | ID of the parent folder. |\\n\\n**Example:** Upload a file to a root folder\\n```js\\ncreate(\\\"SGVsbG8gV29ybGQ=\\\", \\\"hello-world.txt\\\");\\n```\\n**Example:** Upload a file to a specificfolder\\n```js\\ncreate(\\\"SGVsbG8gV29ybGQ=\\\", \\\"hello-world.txt\\\", {\\n  folderId: \\\"15tLwRj0lmr4mGIslEm5QEAS8YJ1EAXep\\\",\\n});\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(fileId) ⇒ function</code></p>\\n\\nDownloads a file from Google Drive.\\n\\n**Returns**: <code>function</code> - An operation that retrieves the file as a base64 string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fileId | <code>string</code> | ID of the file to download. |\\n\\n**Example:** Download a file\\n```js\\nget('1B1dHwY2uLgm_-U96LNl9zFsRYq8953jL')\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(fileId, content, options) ⇒ function</code></p>\\n\\nUpdates an existing file in Google Drive.\\n\\n**Returns**: <code>function</code> - An operation that updates the file.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fileId | <code>string</code> | ID of the file to update. |\\n| content | <code>string</code> | Base64 encoded new content. |\\n| options | <code>Object</code> | File update options. |\\n\\n**Example:** Update a file\\n```js\\nupdate('1B1dHwY2uLgm_-U96LNl9zFsRYq8953jL', 'SGVsbG8gTWlrZQ==');\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-googledrive <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\ngoogledrive API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/googledrive-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googledrive-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-googledrive\\n\\n## 1.0.1 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.0\\n\\nInitial release.\\n\"","functions":["create","get","update"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Google Drive access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Uploads a file to Google Drive.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Base64 encoded file content.",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Name for the uploaded file.",
        "name": "fileName"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "File upload parameters.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "ID of the parent folder.",
        "name": "options.folderId"
      }
    ],
    "examples": [
      "<caption>Upload a file to a root folder</caption>\ncreate(\"SGVsbG8gV29ybGQ=\", \"hello-world.txt\");",
      "<caption>Upload a file to a specificfolder</caption>\ncreate(\"SGVsbG8gV29ybGQ=\", \"hello-world.txt\", {\n  folderId: \"15tLwRj0lmr4mGIslEm5QEAS8YJ1EAXep\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An operation that uploads the file."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googledrive/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Downloads a file from Google Drive.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "ID of the file to download.",
        "name": "fileId"
      }
    ],
    "examples": [
      "<caption>Download a file</caption>\nget('1B1dHwY2uLgm_-U96LNl9zFsRYq8953jL')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An operation that retrieves the file as a base64 string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 125,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googledrive/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Updates an existing file in Google Drive.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "ID of the file to update.",
        "name": "fileId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Base64 encoded new content.",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "File update options.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Update a file</caption>\nupdate('1B1dHwY2uLgm_-U96LNl9zFsRYq8953jL', 'SGVsbG8gTWlrZQ==');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An operation that updates the file."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 154,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googledrive/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"googlehealthcare","adaptor":"@openfn/language-googlehealthcare","version":"1.1.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createfhirresource\\\">createFhirResource([fhirStore], resource, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createFhirResource\\n\\n<p><code>createFhirResource([fhirStore], resource, callback) ⇒ Operation</code></p>\\n\\nCreate some resource in Google Cloud Healthcare\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| [fhirStore] | <code>Object</code> | The FHIR store information.    - `cloudRegion` (string): The cloud region where the FHIR store is located.    - `projectId` (string): The ID of the project that contains the FHIR store.    - `datasetId` (string): The ID of the dataset that contains the FHIR store.    - `fhirStoreId` (string): The ID of the FHIR store. |\\n| resource | <code>object</code> | The FHIR resource data to be created |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateFhirResource(\\n  {\\n    cloudRegion: \\\"us-central1\\\",\\n    projectId: \\\"adjective-noun-123\\\",\\n    datasetId: \\\"my-dataset\\\",\\n    fhirStoreId: \\\"my-fhir-store\\\",\\n  },\\n  {\\n    resourceType: \\\"Patient\\\",\\n    name: [{ use: \\\"official\\\", family: \\\"Smith\\\", given: [\\\"Darcy\\\"] }],\\n    gender: \\\"female\\\",\\n    birthDate: \\\"1970-01-01\\\",\\n  }\\n);\\n```\\n**Example**\\n```js\\ncreateFhirResource(\\n  {\\n    cloudRegion: \\\"us-central1\\\",\\n    projectId: \\\"adjective-noun-123\\\",\\n    datasetId: \\\"my-dataset\\\",\\n    fhirStoreId: \\\"my-fhir-store\\\",\\n  },\\n  (state) => ({\\n    resourceType: \\\"Encounter\\\",\\n    status: \\\"finished\\\",\\n    class: {\\n      system: \\\"http://hl7.org/fhir/v3/ActCode\\\",\\n      code: \\\"IMP\\\",\\n      display: \\\"inpatient encounter\\\",\\n    },\\n    reasonCode: [\\n      {\\n        text: \\\"The patient had an abnormal heart rate. She was concerned about this.\\\",\\n      },\\n    ],\\n    subject: {\\n      reference: `Patient/${state.data.id}`,\\n    },\\n  })\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-googlehealthcare <img src='assets/sq-256x256.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[Google Cloud Healthcare API](https://cloud.google.com/healthcare-api/docs/how-tos/fhir-resources#healthcare-create-patient-nodejs).\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/googlehealthcare-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googlehealthcare-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-googlehealthcare\\n\\n## 1.1.3 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.1.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.0 - 21 July 2023\\n\\n### Major Changes\\n\\n- 7df7e20: remove `projectId`, `dataSetId`, `cloudRegion`, and `fhirStoreId` out\\n  of configuration\\n\\n  The new implementation of `createFhirResource(fhirStore, resource, callback)`\\n  allows you to use one set of credentials to access different Google Healthcare\\n  Cloud FHIR stores. `fhirStore` is an object that contains the FHIR store\\n  information\\n  (`{cloudRegion: string, projectId: string, datasetId: string, fhirStoreId: string}`).\\n\\n## 0.1.0 - 30 June 2023\\n\\n### Minor Changes\\n\\n- 861d774: add createFhirResource function\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\"","functions":["createFhirResource"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","type":"object","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Google Cloud Healthcare access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]},"apiVersion":{"title":"API Version","type":"string","description":"The API version","default":"v1","examples":["v1","v1beta1"]}},"required":["access_token"]}},
[
  {
    "id": "createFhirResource",
    "longname": "createFhirResource",
    "name": "createFhirResource",
    "kind": "function",
    "scope": "global",
    "description": "Create some resource in Google Cloud Healthcare",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The FHIR store information.\n   - `cloudRegion` (string): The cloud region where the FHIR store is located.\n   - `projectId` (string): The ID of the project that contains the FHIR store.\n   - `datasetId` (string): The ID of the dataset that contains the FHIR store.\n   - `fhirStoreId` (string): The ID of the FHIR store.",
        "name": "fhirStore"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The FHIR resource data to be created",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createFhirResource(\n  {\n    cloudRegion: \"us-central1\",\n    projectId: \"adjective-noun-123\",\n    datasetId: \"my-dataset\",\n    fhirStoreId: \"my-fhir-store\",\n  },\n  {\n    resourceType: \"Patient\",\n    name: [{ use: \"official\", family: \"Smith\", given: [\"Darcy\"] }],\n    gender: \"female\",\n    birthDate: \"1970-01-01\",\n  }\n);",
      "createFhirResource(\n  {\n    cloudRegion: \"us-central1\",\n    projectId: \"adjective-noun-123\",\n    datasetId: \"my-dataset\",\n    fhirStoreId: \"my-fhir-store\",\n  },\n  (state) => ({\n    resourceType: \"Encounter\",\n    status: \"finished\",\n    class: {\n      system: \"http://hl7.org/fhir/v3/ActCode\",\n      code: \"IMP\",\n      display: \"inpatient encounter\",\n    },\n    reasonCode: [\n      {\n        text: \"The patient had an abnormal heart rate. She was concerned about this.\",\n      },\n    ],\n    subject: {\n      reference: `Patient/${state.data.id}`,\n    },\n  })\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 94,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlehealthcare/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"googlesheets","adaptor":"@openfn/language-googlesheets","version":"3.0.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#appendvalues\\\">appendValues(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#batchupdatevalues\\\">batchUpdateValues(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getvalues\\\">getValues(spreadsheetId, range, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### appendValues\\n\\n<p><code>appendValues(params, callback) ⇒ Operation</code></p>\\n\\nAdd an array of rows to the spreadsheet.\\nhttps://developers.google.com/sheets/api/samples/writing#append_values\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n| [params.spreadsheetId] | <code>string</code> | The spreadsheet ID. |\\n| [params.range] | <code>string</code> | The range of values to update. |\\n| [params.values] | <code>array</code> | A 2d array of values to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\\n* * *\\n\\n### batchUpdateValues\\n\\n<p><code>batchUpdateValues(params, callback) ⇒ Operation</code></p>\\n\\nBatch update values in a Spreadsheet.\\n\\n**Returns**: <code>Operation</code> - spreadsheet information  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n| [params.spreadsheetId] | <code>string</code> | The spreadsheet ID. |\\n| [params.range] | <code>string</code> | The range of values to update. |\\n| [params.valueInputOption] | <code>string</code> | (Optional) Value update options. Defaults to 'USER_ENTERED' |\\n| [params.values] | <code>array</code> | A 2d array of values to update. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nbatchUpdateValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\\n* * *\\n\\n### getValues\\n\\n<p><code>getValues(spreadsheetId, range, callback) ⇒ Operation</code></p>\\n\\nGets cell values from a Spreadsheet.\\n\\n**Returns**: <code>Operation</code> - spreadsheet information  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spreadsheetId | <code>string</code> | The spreadsheet ID. |\\n| range | <code>string</code> | The sheet range. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetValues('1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos','Sheet1!A1:E1')\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Google Sheets\\n\\nLanguage Pack for building expressions and operations to make Google Sheets API\\ncalls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/googlesheets-configuration-schema/)\\ndefinition.\\n\\n### appendValues()\\n\\nAdd rows to an existing sheet:\\n`https://sheets.googleapis.com/v4/spreadsheets/spreadsheetId/values/Sheet1!A1:E1:append?valueInputOption=USER_ENTERED`\\n\\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-googlesheets\\n\\n## 3.0.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.0.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.0.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.0.9 - 27 January 2025\\n\\n### Patch Changes\\n\\n- `update()` and `append()` will exit early with a gentle warning if an empty\\n  array is passed. This allows a no-op update to be error free.\\n\\n## 3.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 3.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 3.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 3.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.5.2\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.5.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.4.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.3.1 - 08 April 2024\\n\\n### Patch Changes\\n\\n- 4594a324: add callback jsdocs\\n\\n## 2.3.0 - 03 April 2024\\n\\n### Minor Changes\\n\\n- 8405fc9a: - Add `getValues()` function\\n  - Improve connection handling\\n  - Improve error logs\\n\\n## 2.2.2 - 30 June 2023\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.1.6 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.1.5 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.1.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.1.3 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 2.1.2 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.1.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.1.0 - 25 October 2022\\n\\n### Minor Changes\\n\\n- 9e7d458: Migrate googlesheets\\n\"","functions":["appendValues","batchUpdateValues","getValues"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"access_token":{"title":"Access Token","type":"string","description":"Your Google Sheets access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "appendValues",
    "longname": "appendValues",
    "name": "appendValues",
    "kind": "function",
    "scope": "global",
    "description": "Add an array of rows to the spreadsheet.\nhttps://developers.google.com/sheets/api/samples/writing#append_values",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data object to add to the spreadsheet.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The spreadsheet ID.",
        "name": "params.spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The range of values to update.",
        "name": "params.range"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "optional": true,
        "description": "A 2d array of values to update.",
        "name": "params.values"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "appendValues({\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\n  range: 'Sheet1!A1:E1',\n  values: [\n    ['From expression', '$15', '2', '3/15/2016'],\n    ['Really now!', '$100', '1', '3/20/2016'],\n  ],\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 97,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "batchUpdateValues",
    "longname": "batchUpdateValues",
    "name": "batchUpdateValues",
    "kind": "function",
    "scope": "global",
    "description": "Batch update values in a Spreadsheet.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Data object to add to the spreadsheet.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The spreadsheet ID.",
        "name": "params.spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The range of values to update.",
        "name": "params.range"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "(Optional) Value update options. Defaults to 'USER_ENTERED'",
        "name": "params.valueInputOption"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "optional": true,
        "description": "A 2d array of values to update.",
        "name": "params.values"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "batchUpdateValues({\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\n  range: 'Sheet1!A1:E1',\n  values: [\n    ['From expression', '$15', '2', '3/15/2016'],\n    ['Really now!', '$100', '1', '3/20/2016'],\n  ],\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "spreadsheet information"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 160,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getValues",
    "longname": "getValues",
    "name": "getValues",
    "kind": "function",
    "scope": "global",
    "description": "Gets cell values from a Spreadsheet.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spreadsheet ID.",
        "name": "spreadsheetId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The sheet range.",
        "name": "range"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getValues('1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos','Sheet1!A1:E1')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        },
        "description": "spreadsheet information"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 210,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/googlesheets/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"hive","adaptor":"@openfn/language-hive","version":"0.3.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#query\\\">query(qs, options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### query\\n\\n<p><code>query(qs, options, callback) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| qs | <code>string</code> | SQL statement |\\n| options | <code>object</code> | (Optional) options for executing sql statement |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example:** Get patient count from hive database\\n```js\\nquery(\\\"select count(*) from patient\\\");\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-hive <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the HIVE API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/hive-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/hive-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `query` function\\n\\n```js\\nquery('select count(*) from patient');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-hive\\n\\n## 0.3.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.3.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.3.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.3.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.3.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.3.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.3.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.3.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.3.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- e53b30f: Update hive-driver dependency\\n\\n## 0.3.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1 - 24 April 2024\\n\\n### Patch Changes\\n\\n- 02ab7a89: - Change `host` format from `uri` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `database`\\n\\n## 0.2.0 - 26 September 2023\\n\\n### Minor Changes\\n\\n- a380347: Add query function\\n\"","functions":["query"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The database instance host URL","format":"string","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":10001,"description":"Database instance port","minLength":1,"examples":[10001]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"username":{"title":"Username","type":"string","description":"The username to log in the database","minLength":1,"examples":["admin-demo"]},"password":{"title":"Password","type":"string","description":"The password to log in the database","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","database","username","password"]}},
[
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "SQL statement",
        "name": "qs"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) options for executing sql statement",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get patient count from hive database</caption>\nquery(\"select count(*) from patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hive/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"http","adaptor":"@openfn/language-http","version":"7.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#del\\\">del(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#parsexml\\\">parseXML(data, script)</a></dt>\\n<dt>\\n    <a href=\\\"#patch\\\">patch(path, data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, data, options-)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, options)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#util_decode\\\">util.decode(base64Data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_encode\\\">util.encode(data)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_uuid\\\">util.uuid()</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#humanproper\\\">humanProper()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#splitkeys\\\">splitKeys()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n## Functions\\n### del\\n\\n<p><code>del(path, options) ⇒ Operation</code></p>\\n\\nMake a DELETE request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Auth parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** DELETE a resource by ID\\n```js\\ndel(`/myendpoint/${$.data.id}`);\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Authentication parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** GET request with query parameters and custom headers\\n```js\\nget('/patient', {\\n  query: { foo: 'bar', a: 1 },\\n});\\n```\\n\\n* * *\\n\\n### parseXML\\n\\n<p><code>parseXML(data, script) ⇒ Operation</code></p>\\n\\nParse XML with the Cheerio parser\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> | Body string to be parsed |\\n| script | <code>function</code> | script for extracting data |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed XML as a JSON object |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Parse XML from state.response\\n```js\\n parseXML(\\n  (state) => state.response,\\n  ($) => {\\n    return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n  }\\n);\\n```\\n**Example:** Using parseXML with a callback to extract data\\n```js\\nparseXML(\\n  (state) => state.response,\\n  ($) => $(\\\"table[class=your_table]\\\").parsetable(true, true, true)\\n).then((next) => ({ ...next, results: next.data.data }));\\n```\\n\\n* * *\\n\\n### patch\\n\\n<p><code>patch(path, data, options) ⇒ Operation</code></p>\\n\\nMake a PATCH request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| data | <code>object</code> | Body data to append to the request. JSON will be converted to a string. |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Auth parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** PATCH a resource from state\\n```js\\npatch('/patient', $.data);\\n```\\n**Example:** PATCH a resource with custom headers\\n```js\\npatch('/patient', $.data, {\\n  headers: { 'content-type': 'application/fhir+json' },\\n});\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, options) ⇒ operation</code></p>\\n\\nMake a POST request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| data | <code>object</code> | Body data to append to the request. JSON will be converted to a string. |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Authentication parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** POST a resource with from state\\n```js\\npost('/patient', $.data);\\n```\\n**Example:** POST a resource with custom headers\\n```js\\npost('/patient', $.data, {\\n  headers: { 'content-type': 'application/fhir+json' },\\n});\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, data, options-) ⇒ Operation</code></p>\\n\\nMake a PUT request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| data | <code>object</code> | Body data to append to the request. JSON will be converted to a string. |\\n| options- | [<code>RequestOptions</code>](#requestoptions) | Query, Headers and Auth parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** PUT a resource from state\\n```js\\nput('/patient', $.data);\\n```\\n**Example:** PUT a resource with custom headers\\n```js\\nput('/patient', $.data, {\\n  headers: { 'content-type': 'application/fhir+json' },\\n})\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, options) ⇒ Operation</code></p>\\n\\nMake a HTTP request. If `configuration.baseUrl` is set, paths must be relative.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method to use. |\\n| path | <code>string</code> | Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`. |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Body, Query, Headers and Authentication parameters |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Make a GET request\\n```js\\nrequest('GET', '/patient', {\\n  query: { foo: 'bar', a: 1 },\\n});\\n```\\n**Example:** Make a POST request with a body\\n```js\\nrequest('POST', '/todos', {\\n  body:{\\n    \\\"userId\\\": 1,\\n    \\\"title\\\": \\\"delectus aut autem\\\",\\n    \\\"completed\\\": false\\n  },\\n});\\n```\\n\\n* * *\\n\\n\\n## util\\n\\nThese functions belong to the util namespace.\\n### util.decode {#util_decode}\\n\\n<p><code>decode(base64Data) ⇒ string</code></p>\\n\\nDecodes a Base64 encoded string back to its original format.\\n\\n**Returns**: <code>string</code> - - The decoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| base64Data | <code>string</code> | The Base64 encoded string. |\\n\\n**Example:** Decode a Base64 string\\n```js\\nconst decoded = util.decode('SGVsbG8gV29ybGQ=');\\nconsole.log(decoded); // Output: Hello World\\n```\\n\\n* * *\\n\\n\\n### util.encode {#util_encode}\\n\\n<p><code>encode(data) ⇒ string</code></p>\\n\\nEncodes a given string into Base64 format.\\n\\n**Returns**: <code>string</code> - - The Base64 encoded string.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>string</code> | The string to be encoded. |\\n\\n**Example:** Encode a string\\n```js\\nconst encoded = util.encode('Hello World');\\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ=\\n```\\n\\n* * *\\n\\n\\n### util.uuid {#util_uuid}\\n\\n<p><code>uuid() ⇒ string</code></p>\\n\\nGenerates a UUID (Universally Unique Identifier).\\n\\n**Returns**: <code>string</code> - - A newly generated UUID.  \\n**Example:** Generate a UUID\\n```js\\nconst id = util.uuid();\\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| contentType | <code>string</code> | Sets the `Content-Type` header on the request. Defaults to `json`. Supported values: `json`, `xml`, `string`, and `form` (for FormData). |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).This is only applicable to the request function |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language HTTP\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/http-configuration-schema/)\\ndefinition.\\n\\n### Get data\\n\\nThis helper function allows the use of a get method to fetch data. You can\\nspecify a query string for filter.\\n\\n```js\\nget(\\n  '/myendpoint',\\n  {\\n    query: { foo: 'bar', a: 1 },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'taylor', password: 'somethingsecret' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Post existing data\\n\\nSend some data to an existing endpoint.\\n\\n```js\\npost('/endpoint', {\\n  body: state => {\\n    return {\\n      field_1: 'some_data',\\n      field_2: 'some_more_data',\\n      field_id: dataValue('Some.Json.Object.Id')(state),\\n    };\\n  },\\n  headers: {\\n    Authorization: 'AUTH_KEY',\\n    'Content-Type': 'application/json',\\n  },\\n});\\n```\\n\\n### Update existing data with PUT or PATCH\\n\\n```js\\nput(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n```js\\npatch(\\n  '/myendpoint',\\n  {\\n    body: { firstname: 'taylor', lastname: 'downs' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Delete data\\n\\n```js\\ndel(\\n  '/myendpoint',\\n  {\\n    query: { id: 'someId' },\\n    headers: { 'content-type': 'application/json' },\\n    authentication: { username: 'user', password: 'pass' },\\n  },\\n  state => {\\n    return state;\\n  }\\n);\\n```\\n\\n### Parse XML\\n\\nThis function allows you to parse some xml data. A callback function can be use\\nto store in a table.\\n\\n```js\\nparseXML(body, function ($) {\\n  return $('table[class=your_table]').parsetable(true, true, true);\\n});\\n```\\n\\n### Parse CSV\\n\\n```js\\nparseCSV('someData.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n});\\n```\\n\\n### Sample parse local CSV file\\n\\n```js\\nparseCSV('PatientsJan2009.csv', {\\n  quoteChar: '\\\"',\\n  header: false,\\n  columns: true,\\n  skip_empty_lines: true,\\n  trim: true,\\n  bom: true,\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`.\\n\\nTo build the docs for this repo, run `pnpm build:docs`.\\n\"","changelog":"\"# @openfn/language-http\\n\\n## 7.0.6 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- 99e4b48: Fix parseAs option in all operations\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 7.0.5 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 7.0.4 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 7.0.3 - 04 April 2025\\n\\n### Patch Changes\\n\\n- 2073994: - Add a `POST` example to the `request()` function\\n\\n## 7.0.2 - 20 March 2025\\n\\n### Patch Changes\\n\\n- 7174293: improve function examples\\n\\n## 7.0.1 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 7.0.0 - 05 March 2025\\n\\n### Major Changes\\n\\n- 8b28b87: - Remove all callback functions\\n- 57a2a63: - Add `contentType` option to requests. This defaults to `json`\\n- ba84591: - Add a `data` argument to `put()`, `patch()` and `post()`\\n- Remove the deprecated `json` property on `RequestOptions`\\n\\n### Patch Changes\\n\\n- b1ce36f: - Remove duplicated body response from `http`.\\n\\n### Migration Guide\\n\\n#### Content Types\\n\\nThe HTTP adaptor now assumes that all requests are JSON, unless otherwise\\nspecified.\\n\\nYou can set the `contentType` option or pass a `'Content-Type'` header to\\nmanually set the content type. For example, to upload a form:\\n\\n```js\\npost($.url, $.data, { contentType: 'form' });\\n```\\n\\n#### Updated put, patch and post signatures\\n\\n`put()`, `patch()` and `post()` have had their signatures changed from\\n`post(path, options, callback)` to `post(path, data, options)`.\\n\\nThe payload attached to the body, which in 6.0 was passed on the options object\\nas `body`, is now the second argument to the function.\\n\\nSo if you used to do this:\\n\\n```js\\npost('/patient', { body: $.patient });\\n```\\n\\nYou must edit your code to do this:\\n\\n```js\\npost('/patient', $.patient);\\n```\\n\\nYou can still pass options to the request via the third argument:\\n\\n```js\\npost('/patient', $.patient, { query: $.query, headers: $.headers });\\n```\\n\\nCallbacks have now been removed, use `.then()` instead.\\n\\nSo if you used to do this:\\n\\n```js\\npost('/patient', { body: $.patient }, next => {\\n  state.results.push(next.response.body);\\n  return next;\\n});\\n```\\n\\nYou must edit your code to do this:\\n\\n```js\\npost('/patient', $.patient).then(next => {\\n  state.results.push(next.response.body);\\n  return next;\\n});\\n```\\n\\n## 6.5.4 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 6.5.3 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 6.5.2 - 09 January 2025\\n\\n### Patch Changes\\n\\n- 4b9a5b9: - Fix typo in util functions examples\\n  - Remove export for `addAuth()` helper\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 6.5.1 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 6.5.0 - 18 October 2024\\n\\n### Minor Changes\\n\\n- b433d7f: Add `util.encode`, `util.decode` and `util.uuid` helpers\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 6.4.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 6.4.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- e01d7b3: - Fix an issue where an error is thrown if `state.configuration` is\\n  `null`\\n  - better error when `baseUrl` is not set and the passed url is a relative url.\\n  - better error when `baseUrl` is not set and no url is provided.\\n\\n## 6.4.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 6.4.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 6.4.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- c803bab: In all functions, if baseUrl if set, path MUST be relative.\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 6.4.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 6.4.0 - 19 June 2024\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 6.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 6.2.3 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Fix an issue where query parameters in the URL did not get sent to the server\\n\\n## 6.2.2 - 24 May 2024\\n\\n### Patch Changes\\n\\n- Automatically apply api/oauth tokens from config\\n\\n## 6.2.1 - 07 May 2024\\n\\n### Patch Changes\\n\\n- Fixed an issue where the Authorization header could be overwritten if username\\n  and password are set on config\\n- Configuration schema: demoted `username` and `password` to optional\\n- Configuration schema: Added `token`. This is not automated and must be\\n  manually add to the HTTP headers.\\n\\n## 6.2.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- Add cursor() function\\n\\n## 6.1.0 - 19 March 2024\\n\\n### Minor Changes\\n\\n- cfe1ccb: Add callback support for parseXML\\n\\n## 6.0.0 - 24 January 2024\\n\\n### Major Changes\\n\\n- f741086: The axios library has been removed and the operation API simplified.\\n\\n### New features\\n\\n- Error mapping. Provide custom errors to response status codes, eg, Eg:\\n  `{errors: {404: \\\"You don't have access\\\"}}`\\n- parseAs option. Overrides the default response type. Eg: `{parseAs: \\\"json\\\"}`\\n- Request logging. All requests are now logged to stdout.\\n- tls options. Pass SSL certificates using the `tls` option on any request.\\n\\n### Breaking changes\\n\\n- Removed `axios` export\\n- Axios options on `get`, `post`, `put`, `patch`, and `del` are no longer\\n  supported (unless otherwise stated). This includes `gzip`,`qs`, `formData`,\\n  `successCodes`, `transformResponse`, `data` and other options.\\n- `keepCookie` has been removed\\n- Option params `json` and `agentOptions` have been deprecated. They still work,\\n  but you should use `body` and `tls` instead (the behaviour should be the same)\\n\\n### Migration Guide\\n\\n- Use `query` instead of `params` or `qs` parameters to a request.\\n- Convert succcessCodes to the `errorMap`. Ie, `successCodes: [200, 404]`\\n  becomes `errorMap: { 404: false }`\\n- Instead of `transformResponse`, use the callback parameter.\\n- Convert `agentOptions` to `tls`.The values should be the same.\\n- Convert `responseType` to `parseAs`. Note that this is really only useful for\\n  JSON, and only needed if the server does not include a content-type response\\n  header.\\n- Convert `formData` to `form`.The values should be the same.\\n- The `authentication` or `auth` property is no longer needed, use\\n  `state.configuration`.\\n- The `data` parameter is now `body`.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[7f52699]\\n  - @openfn/language-common@1.12.0\\n\\n## 5.1.1 - 11 December 2023\\n\\n### Patch Changes\\n\\n- a8d655e: Update `parseXML` to use `expandReferences`\\n\\n## 5.1.0 - 16 November 2023\\n\\n### Minor Changes\\n\\n- 8e2b79c: Clean up `state.response.request` by returning only\\n  `{ method, path, host, protocol, _headers }`\\n\\n## 5.0.4 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 5.0.3 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 5.0.2 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 5.0.1 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 5.0.0 - 14 July 2023\\n\\n### Major Changes\\n\\n- 0b6f20b: use parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.3.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.3.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.2.8 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 4.2.7 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 4.2.6 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.2.5 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.2.4 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 4.2.3 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 4.2.2 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 9a2755e: Update dependency on language-common\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 4.2.1 - 21 October 2022\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 4.2.0 - 19 October 2022\\n\\n### Minor Changes\\n\\n- f670bf8: Added credential schema to enable new ui\\n\\n## 4.1.0 - 18 October 2022\\n\\n### Minor Changes\\n\\n- 8e1b86d: update http to new format\\n\\n## 4.0.1 - 13 October 2022\\n\\n### Patch Changes\\n\\n- 4671e89: Migrate language-http\\n\"","functions":["del","get","parseXML","patch","post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Password"]},"access_token":{"title":"Access Token","type":"string","description":"OAuth Access token, API key or other Bearer token","writeOnly":true,"examples":["00QCjAl4MlV-WPX"]},"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://instance_name.surveycto.com"]}},"type":"object","additionalProperties":true}},
[
  {
    "id": "decode",
    "longname": "decode",
    "name": "decode",
    "kind": "function",
    "scope": "util",
    "description": "Decodes a Base64 encoded string back to its original format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Base64 encoded string.",
        "name": "base64Data"
      }
    ],
    "examples": [
      "<caption>Decode a Base64 string</caption>\nconst decoded = util.decode('SGVsbG8gV29ybGQ=');\nconsole.log(decoded); // Output: Hello World"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The decoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 187,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 13,
    "newscope": true,
    "level": 0
  },
  {
    "id": "del",
    "longname": "del",
    "name": "del",
    "kind": "function",
    "scope": "global",
    "description": "Make a DELETE request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Auth parameters",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>DELETE a resource by ID</caption>\ndel(`/myendpoint/${$.data.id}`);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "encode",
    "longname": "encode",
    "name": "encode",
    "kind": "function",
    "scope": "util",
    "description": "Encodes a given string into Base64 format.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The string to be encoded.",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Encode a string</caption>\nconst encoded = util.encode('Hello World');\nconsole.log(encoded); // Output: SGVsbG8gV29ybGQ="
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- The Base64 encoded string."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 176,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Authentication parameters",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET request with query parameters and custom headers</caption>\nget('/patient', {\n  query: { foo: 'bar', a: 1 },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 18,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 1
  },
  {
    "id": "parseXML",
    "longname": "parseXML",
    "name": "parseXML",
    "kind": "function",
    "scope": "global",
    "description": "Parse XML with the Cheerio parser",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Body string to be parsed",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "script for extracting data",
        "name": "script"
      }
    ],
    "examples": [
      "<caption>Parse XML from state.response</caption>\n parseXML(\n  (state) => state.response,\n  ($) => {\n    return $(\"table[class=your_table]\").parsetable(true, true, true);\n  }\n);",
      "<caption>Using parseXML with a callback to extract data</caption>\nparseXML(\n  (state) => state.response,\n  ($) => $(\"table[class=your_table]\").parsetable(true, true, true)\n).then((next) => ({ ...next, results: next.data.data }));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 190,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": "data",
        "description": "the parsed XML as a JSON object",
        "type": null
      },
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "global",
    "description": "Make a PATCH request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request. JSON will be converted to a string.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Auth parameters",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>PATCH a resource from state</caption>\npatch('/patient', $.data);",
      "<caption>PATCH a resource with custom headers</caption>\npatch('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 149,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request. JSON will be converted to a string.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>POST a resource with from state</caption>\npost('/patient', $.data);",
      "<caption>POST a resource with custom headers</caption>\npost('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 109,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body data to append to the request. JSON will be converted to a string.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, Headers and Auth parameters",
        "name": "options-"
      }
    ],
    "examples": [
      "<caption>PUT a resource from state</caption>\nput('/patient', $.data);",
      "<caption>PUT a resource with custom headers</caption>\nput('/patient', $.data, {\n  headers: { 'content-type': 'application/fhir+json' },\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 129,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a HTTP request. If `configuration.baseUrl` is set, paths must be relative.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method to use.",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource. Can be an absolute URL if baseURL is NOT set on `state.configuration`.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Body, Query, Headers and Authentication parameters",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Make a GET request</caption>\nrequest('GET', '/patient', {\n  query: { foo: 'bar', a: 1 },\n});",
      "<caption>Make a POST request with a body</caption>\nrequest('POST', '/todos', {\n  body:{\n    \"userId\": 1,\n    \"title\": \"delectus aut autem\",\n    \"completed\": false\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 71,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Sets the `Content-Type` header on the request. Defaults to `json`. Supported values: `json`, `xml`, `string`, and `form` (for FormData).",
        "name": "contentType"
      },
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).This is only applicable to the request function",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "uuid",
    "longname": "uuid",
    "name": "uuid",
    "kind": "function",
    "scope": "util",
    "description": "Generates a UUID (Universally Unique Identifier).",
    "examples": [
      "<caption>Generate a UUID</caption>\nconst id = util.uuid();\nconsole.log(id); // Output:'3f4e254e-8f6f-4f8b-9651-1c1c262cc83f'"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- A newly generated UUID."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 197,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/http/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "humanProper",
    "common": true,
    "name": "humanProper",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "splitKeys",
    "common": true,
    "name": "splitKeys",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"hubtel","adaptor":"@openfn/language-hubtel","version":"1.0.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSMS(data, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"POST\\\", \\\"patient\\\", { \\\"name\\\": \\\"Bukayo\\\" });\\n```\\n\\n* * *\\n\\n### sendSMS\\n\\n<p><code>sendSMS(data, options) ⇒ Operation</code></p>\\n\\nSend an SMS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | An object with `from`, `to`, and `content` attributes |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional hubtel options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nsendSMS({\\n  from: 'OpenFn-Test-01',\\n  to: '233538675309',\\n  content: 'hi there, this is OpenFn using the new Hubtel adaptor',\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-hubtel <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the hubtel\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/hubtel-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/hubtel-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `create` function\\n\\n```js\\nsendSMS({\\n  from: 'OpenFn-Test-01',\\n  to: '233538675309',\\n  content: 'hi there, this is from OpenFn using the Hubtel adaptor',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-hubtel\\n\\n## 1.0.5 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.4 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.3 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.2 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.1 - 30 January 2025\\n\\n### Patch Changes\\n\\n- f762c5a: Fix schema and docs\\n\\n## 1.0.0 - 22 January 2025\\n\\nInitial release.\\n\"","functions":["request","sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"clientId":{"title":"Client ID","type":"string","description":"Client ID","examples":["abc123def"]},"clientSecret":{"title":"Client Secret","type":"string","description":"Client Secret","writeOnly":true,"examples":["ghi456jkl"]}},"type":"object","additionalProperties":true,"required":["baseUrl","clientId","clientSecret"]}},
[
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 55,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hubtel/src"
    },
    "order": 2
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "request(\"POST\", \"patient\", { \"name\": \"Bukayo\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 36,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hubtel/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 64,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hubtel/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "sendSMS",
    "longname": "sendSMS",
    "name": "sendSMS",
    "kind": "function",
    "scope": "global",
    "description": "Send an SMS",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object with `from`, `to`, and `content` attributes",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional hubtel options",
        "name": "options"
      }
    ],
    "examples": [
      "sendSMS({\n  from: 'OpenFn-Test-01',\n  to: '233538675309',\n  content: 'hi there, this is OpenFn using the new Hubtel adaptor',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 19,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/hubtel/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 0,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"inform","adaptor":"@openfn/language-inform","version":"1.0.1","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#downloadattachment\\\">downloadAttachment(attachmentId, options)</a></dt>\\n<dt>\\n    <a href=\\\"#getattachmentmetadata\\\">getAttachmentMetadata(attachmentId)</a></dt>\\n<dt>\\n    <a href=\\\"#getform\\\">getForm(formId, options)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(options)</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmission\\\">getSubmission(formId, submissionId)</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmissions\\\">getSubmissions(formId, options)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, options)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, path, options)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### downloadAttachment\\n\\n<p><code>downloadAttachment(attachmentId, options) ⇒ Operation</code></p>\\n\\nDownload an attachment in binary or base64 format\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attachmentId | <code>string</code> | Id of the attachment to be retrieved. |\\n| options | <code>object</code> | Optional request options. Supported options are: `filename` for the specific attachment to be downloaded, and `parseAs` for either `stream` or `base64`. Defaults to `parseAs: stream`. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Download an attachment\\n```js\\ndownloadAttachment('622038', {\\n  filename:\\n    'project/attachments/download_1.png',\\n});\\n```\\n**Example:** Download an attachment in base64 format\\n```js\\ndownloadAttachment('622038', {\\n  filename:\\n    'project/attachments/download_1.png',\\n  parseAs: 'base64',\\n});\\n```\\n\\n* * *\\n\\n### getAttachmentMetadata\\n\\n<p><code>getAttachmentMetadata(attachmentId) ⇒ Operation</code></p>\\n\\nFetch a single attachment's metadata\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attachmentId | <code>string</code> | Id of the attachment to be retrieved. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\ngetAttachmentMetadata('621985');\\n```\\n\\n* * *\\n\\n### getForm\\n\\n<p><code>getForm(formId, options) ⇒ Operation</code></p>\\n\\nGet metadata or structural data for a single form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Id of the form to be retrieved. |\\n| options | <code>object</code> | Optional filter options. |\\n| options.structureOnly | <code>boolean</code> | If true, only the form structure is returned in JSON format. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:**  Get a single form \\n```js\\ngetForm('6225');\\n```\\n**Example:**  Get a single form structure \\n```js\\ngetForm('6225', {\\n  structureOnly: true,\\n});\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(options) ⇒ Operation</code></p>\\n\\nFetch all forms\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Optional filter options. Some supported options are: `public`, `tags`, `page`, and `page_size`. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all forms without filter options\\n```js\\ngetForms();\\n```\\n**Example:** Get all forms with filter options\\n```js\\ngetForms({\\n  public: true,\\n  page: 1,\\n  page_size: 5,\\n});\\n```\\n\\n* * *\\n\\n### getSubmission\\n\\n<p><code>getSubmission(formId, submissionId) ⇒ Operation</code></p>\\n\\nGet a single data submission for a single form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Id of the form's submissions to be retrieved. |\\n| submissionId | <code>string</code> | Id of the submission to be retrieved. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\ngetSubmission('6225', '7783155');\\n```\\n\\n* * *\\n\\n### getSubmissions\\n\\n<p><code>getSubmissions(formId, options) ⇒ Operation</code></p>\\n\\nGet submission data of a single form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Id of the form's submissions to be retrieved. |\\n| options | <code>object</code> | Optional filter options. Some supported options are: `query`, `limit`, `start`, `page`, and `page_size`. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get submissions without filter options\\n```js\\ngetSubmissions('6225');\\n```\\n**Example:** Get submissions with filter options\\n```js\\ngetSubmissions('6225', {\\n  query: `{\\\"_submission_time\\\":{\\\"$gte\\\":\\\"2024-11-05\\\"}}`,\\n  limit: 1,\\n});\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request to Inform\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all forms\\n```js\\nhttp.get('forms')\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, path, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request to Inform\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all forms with a query\\n```js\\nhttp.request('GET', 'forms', {\\n  query: {\\n    public: true,\\n    page: 1,\\n    page_size: 5,\\n  },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the Inform request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string. |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-inform <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\ninform API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/inform-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/inform-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-inform\\n\\n## 1.0.1 - 28 May 2025\\n\\n### Patch Changes\\n\\n- 62ec0a4: - Update square logo\\n  - Add semi-colon after each example.\\n  - Add options description to downloadAttachment function\\n  - Remove sensitive data in examples\\n\\n## 1.0.0 - 12 May 2025\\n\\n- Implement an `inform` adaptor with `http` and helper functions\\n- A user can use `get()` and `request()` http helpers to make any request to\\n  inform\\n- A user can use different helper functions such as `getForm()`,\\n  `getSubmissions()` to get different types of data from `inform`\\n\"","functions":["downloadAttachment","getAttachmentMetadata","getForm","getForms","getSubmission","getSubmissions"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (https://data.inform.unicef.org)","format":"uri","minLength":1,"examples":["https://data.inform.unicef.org"]},"access_token":{"title":"Access Token","type":"string","description":"Your Inform access token","examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]},"apiVersion":{"title":"Api Version","type":"string","placeholder":"v1","description":"Inform api version","examples":["v1"]}},"type":"object","additionalProperties":true,"required":["baseUrl","access_token"]}},
[
  {
    "id": "downloadAttachment",
    "longname": "downloadAttachment",
    "name": "downloadAttachment",
    "kind": "function",
    "scope": "global",
    "description": "Download an attachment in binary or base64 format",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the attachment to be retrieved.",
        "name": "attachmentId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional request options. Supported options are: `filename` for the specific attachment to be downloaded, and `parseAs` for either `stream` or `base64`. Defaults to `parseAs: stream`.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Download an attachment</caption>\ndownloadAttachment('622038', {\n  filename:\n    'project/attachments/download_1.png',\n});",
      "<caption>Download an attachment in base64 format</caption>\ndownloadAttachment('622038', {\n  filename:\n    'project/attachments/download_1.png',\n  parseAs: 'base64',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 184,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 6,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to Inform",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get all forms</caption>\nhttp.get('forms')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 34,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 9,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getAttachmentMetadata",
    "longname": "getAttachmentMetadata",
    "name": "getAttachmentMetadata",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a single attachment's metadata",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the attachment to be retrieved.",
        "name": "attachmentId"
      }
    ],
    "examples": [
      "getAttachmentMetadata('621985');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 150,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "getForm",
    "longname": "getForm",
    "name": "getForm",
    "kind": "function",
    "scope": "global",
    "description": "Get metadata or structural data for a single form",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the form to be retrieved.",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional filter options.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "If true, only the form structure is returned in JSON format.",
        "name": "options.structureOnly"
      }
    ],
    "examples": [
      "<caption> Get a single form </caption>\ngetForm('6225');",
      "<caption> Get a single form structure </caption>\ngetForm('6225', {\n  structureOnly: true,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 59,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all forms",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional filter options. Some supported options are: `public`, `tags`, `page`, and `page_size`.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get all forms without filter options</caption>\ngetForms();",
      "<caption>Get all forms with filter options</caption>\ngetForms({\n  public: true,\n  page: 1,\n  page_size: 5,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 29,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 1,
    "level": 0
  },
  {
    "id": "getSubmission",
    "longname": "getSubmission",
    "name": "getSubmission",
    "kind": "function",
    "scope": "global",
    "description": "Get a single data submission for a single form",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the form's submissions to be retrieved.",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the submission to be retrieved.",
        "name": "submissionId"
      }
    ],
    "examples": [
      "getSubmission('6225', '7783155');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 122,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "getSubmissions",
    "longname": "getSubmissions",
    "name": "getSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Get submission data of a single form",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the form's submissions to be retrieved.",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional filter options. Some supported options are: `query`, `limit`, `start`, `page`, and `page_size`.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get submissions without filter options</caption>\ngetSubmissions('6225');",
      "<caption>Get submissions with filter options</caption>\ngetSubmissions('6225', {\n  query: `{\"_submission_time\":{\"$gte\":\"2024-11-05\"}}`,\n  limit: 1,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "order": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the Inform server, including headers, statusCode, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "order": 7
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a general HTTP request to Inform",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get all forms with a query</caption>\nhttp.request('GET', 'forms', {\n  query: {\n    public: true,\n    page: 1,\n    page_size: 5,\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 56,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 10,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Inform request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/inform/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"intuit","adaptor":"@openfn/language-intuit","version":"1.0.4","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, data, [options])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ Operation</code></p>\\n\\nMake a GET request to any intuit endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to resource |\\n| [options] | [<code>IntuitOptions</code>](#intuitoptions) | <code>{}</code> | An object containing query and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Quickbook(intuit) server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get intuit user company information.\\n```js\\nhttp.get(\\\"/v3/company/9341453908059456/companyinfo/9341453908059456\\\");\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, data, [options]) ⇒ Operation</code></p>\\n\\nMake a POST request to any Intuit endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to resource |\\n| data | <code>object</code> |  | The request body (as JSON) |\\n| [options] | [<code>IntuitOptions</code>](#intuitoptions) | <code>{}</code> | An object containing query, and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Quickbook(intuit) server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Create an account on intuit.\\n```js\\nhttp.post(\\\"/v3/company/9341453908059456/account\\\",\\n {\\n      \\\"Name\\\": \\\"MyJobs_testing\\\",\\n      \\\"AccountType\\\": \\\"Accounts Receivable\\\"\\n },\\n {\\n query: {\\n   minorversion: 40,\\n  },\\n})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### IntuitOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', or 'stream') |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-intuit <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the intuit\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/intuit-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/intuit-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `create` function\\n\\n```js\\nhttp.post(\\n  '/v3/company/9341453908059321/account',\\n  {\\n    Name: 'MyJobs_testing',\\n    AccountType: 'Accounts Receivable',\\n  },\\n  {\\n    query: {\\n      minorversion: 40,\\n    },\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-intuit\\n\\n## 1.0.4 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.3 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.2 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.1 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.0 - 30 January 2025\\n\\nInitial release.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"The Quickbooks(intuit) base URL","format":"uri","minLength":1,"examples":["https://sandbox-quickbooks.api.intuit.com"]},"access_token":{"title":"Access Token","type":"string","description":"Your Quickbooks(intuit) access token","examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":["access_token","baseUrl"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to any intuit endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "IntuitOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get intuit user company information.</caption>\nhttp.get(\"/v3/company/9341453908059456/companyinfo/9341453908059456\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 32,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/intuit/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "IntuitState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "IntuitOptions",
    "longname": "IntuitOptions",
    "name": "IntuitOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', or 'stream')",
        "name": "parseAs"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/intuit/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "IntuitState",
    "longname": "IntuitState",
    "name": "IntuitState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Quickbook(intuit) server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/intuit/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request to any Intuit endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The request body (as JSON)",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "IntuitOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query, and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Create an account on intuit.</caption>\nhttp.post(\"/v3/company/9341453908059456/account\",\n {\n      \"Name\": \"MyJobs_testing\",\n      \"AccountType\": \"Accounts Receivable\"\n },\n {\n query: {\n   minorversion: 40,\n  },\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 71,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/intuit/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "IntuitState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"khanacademy","adaptor":"@openfn/language-khanacademy","version":"0.5.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#fetch\\\">fetch(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### fetch\\n\\n<p><code>fetch(params) ⇒ Operation</code></p>\\n\\nFetch data from the Khan Academy API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the query |\\n\\n**Example:** Fetch data from the Khan Academy API\\n```js\\nfetch({ getEndpoint: \\\"topictree\\\", queryParams: { subject: \\\"math\\\" } });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language KhanAcademy\\n\\nLanguage Pack for building expressions and operations to make HTTP calls.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/khanacademy-configuration-schema/)\\ndefinition.\\n\\n## fetch\\n\\n#### sample usage\\n\\n```js\\nfetch({\\n  getEndpoint: 'user',\\n  queryParams: {\\n    email: 'thisoneuser@something.org',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/your-uuid',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-khanacademy\\n\\n## 0.5.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.10 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.5.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 9137655: migrate khanacademy\\n\"","functions":["fetch"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"email":{"title":"Email","type":"string","description":"Your Khanacademy login email","format":"email","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Your Khanacademy login password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"consumerKey":{"title":"Consumer Key","type":"string","description":"Your Khanacademy consumer key","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]},"secretKey":{"title":"Secret Key","type":"string","description":"Your Khanacademy secret key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["email","password","secretKey","consumerKey"]}},
[
  {
    "id": "fetch",
    "longname": "fetch",
    "name": "fetch",
    "kind": "function",
    "scope": "global",
    "description": "Fetch data from the Khan Academy API",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the query",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Fetch data from the Khan Academy API</caption>\nfetch({ getEndpoint: \"topictree\", queryParams: { subject: \"math\" } });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 36,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/khanacademy/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"kobotoolbox","adaptor":"@openfn/language-kobotoolbox","version":"4.1.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getdeploymentinfo\\\">getDeploymentInfo(formId)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms()</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmissions\\\">getSubmissions(formId, [options])</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_put\\\">http.put(path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, path, [options])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getDeploymentInfo\\n\\n<p><code>getDeploymentInfo(formId) ⇒ Operation</code></p>\\n\\nGet deployment information for a specific form. Calls `/api/v2/assets/<id>/deployment/`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Form Id to get the deployment information |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | an object containing deployment information |\\n**Example**\\n```js\\ngetDeploymentInfo('aXecHjmbATuF6iGFmvBLBX');\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms() ⇒ Operation</code></p>\\n\\nMake a request to fetch all survey forms accessible to the authorized user. Calls `/api/v2/assets/?asset_type=survey`.\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | an array of form objects |\\n**Example**\\n```js\\ngetForms();\\n```\\n\\n* * *\\n\\n### getSubmissions\\n\\n<p><code>getSubmissions(formId, [options]) ⇒ Operation</code></p>\\n\\nGet submissions for a specific form. Calls `/api/v2/assets/<formId>/data/`\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| formId | <code>string</code> |  | Form Id to get the specific submissions |\\n| [options] | <code>object</code> | <code>{}</code> | Options to control the request |\\n| [options.sort] | <code>object</code> |  | Field and direction to sort submissions by. |\\n| [options.query] | <code>object</code> |  | Query options to filter the submissions. See query operators [http://docs.mongodb.org/manual/reference/operator/query/.](http://docs.mongodb.org/manual/reference/operator/query/.) |\\n| [options.start] | <code>number</code> | <code>0</code> | The index of the first submission to return. |\\n| [options.limit] | <code>number</code> | <code>30000</code> | Maximum number of submissions to fetch. Pass Infinity to disable the limit and download all submissions |\\n| [options.pageSize] | <code>number</code> | <code>10000</code> | Limits the size of each page of submissions. Maximum value is 30000. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | an array of submission objects |\\n**Example:** Get submissions for a specific form\\n```js\\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX');.\\n```\\n**Example:** Get all submissions for a specific form\\n```js\\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { limit: Infinity });\\n```\\n**Example:** Get form submissions with a query\\n```js\\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { query: { _submission_time:{ $gte: \\\"2025-03-12T21:54:20\\\" } } });\\n```\\n**Example:** Get form submissions with sorting\\n```js\\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { sort: { _submission_time: -1 } });\\n```\\n**Example:** Get form submissions with specific start index\\n```js\\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { start: 10 });\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ operation</code></p>\\n\\nMake a GET request to any KoboToolbox endpoint.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the KoboToolbox server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** GET assets resource\\n```js\\nhttp.get('assets')\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, data, [options]) ⇒ operation</code></p>\\n\\nMake a POST request to a KoboToolbox endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| data | <code>any</code> |  | the body data in JSON format |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the KoboToolbox server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Create an asset resource\\n```js\\nhttp.post(\\n '/assets/',\\n {\\n  name: 'Feedback Survey Test',\\n  asset_type: 'survey',\\n },\\n );\\n```\\n\\n* * *\\n\\n\\n### http.put {#http_put}\\n\\n<p><code>put(path, data, [options]) ⇒ operation</code></p>\\n\\nMake a PUT request to a KoboToolbox endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| data | <code>any</code> |  | the body data in JSON format |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the KoboToolbox server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Update an asset resource\\n```js\\nhttp.put(\\n 'assets/a4jAWzoa8SZWzZGhx84sB5/deployment/',\\n {\\n  name: 'Feedback Survey Test',\\n  asset_type: 'survey',\\n },\\n );\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, path, [options]) ⇒ Operation</code></p>\\n\\nMake a HTTP request to any KoboToolbox endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| method | <code>string</code> |  | HTTP method to use |\\n| path | <code>string</code> |  | Path to resource |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query, headers, and body for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the KoboToolbox server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Bulk updating of submissions\\n```js\\nhttp.request(\\\"PATCH\\\", `assets/${$.form_uid}/data/bulk/`, {\\n  body: {\\n    submission_ids: [$.data.submission_id],\\n    data: {\\n      Transaction_status: \\\"success\\\",\\n    },\\n  },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### HTTPRequestOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| body | <code>object</code> |  | The request body (as JSON) |\\n| maxRedirections | <code>number</code> |  | The maximum number of redirects to follow |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', or 'stream') |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language KoboToolbox\\n\\nLanguage Pack for building expressions and operations to interact with the\\n[TEMPLATE] API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/kobotoolbox-configuration-schema/)\\ndefinition.\\n\\n#### Get the list of forms\\n\\n```js\\ngetForms({}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n### Get submissions for a specific form\\n\\nA query can be used to filter results.\\n\\n```js\\ngetSubmissions(\\n  { formId: 'aXecHjmbATuF6iGFmvBLBX', query: { end: { $gte: '2020-11-20' } } },\\n  state => {\\n    console.log(state.data);\\n    return state;\\n  }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-kobotoolbox\\n\\n## 4.1.0 - 06 June 2025\\n\\n### Minor Changes\\n\\n- 2123876: Add support for `sort` and `start` option in `getSubmissions`\\n  function\\n\\n## 4.0.0 - 30 May 2025\\n\\n### Major Changes\\n\\n- fe5b899: Add automatic pagination to `getSubmissions()`.\\n\\n  `getSubmissions()` will now download all submissions, up to the requested\\n  limit, over multiple requests. Note that by default, a maximum of 30,000 items\\n  will be downloaded (pass a higher number of `Infinity` to download more).\\n\\n  ### Changes\\n\\n  - Updated `getSubmission` pagination behavior:\\n\\n    - Removed `paginate` option\\n    - Added new pagination options:\\n      - `limit`: Controls number of results returned\\n      - `pageSize`: Number of items per page\\n\\n  - Remove export of `http` methods from `@openfn/language-common`\\n\\n  - Add support for `maxRedirections` option in `HTTPRequestOptions`\\n\\n  ### Migration Guide\\n\\n  1. Pagination Changes:\\n\\n     - Replace `paginate: true/false` with `limit` and `pageSize` options\\n     - Default limit is `30000` unless otherwise specified\\n\\n     ```js\\n     // Fetch submissions with default limit (30000)\\n     getSubmission('form-id');\\n\\n     // Fetch all submissions (no limit)\\n     getSubmission('form-id', { limit: Infinity });\\n\\n     // Fetch submissions with max results\\n     getSubmission('form-id', { limit: 500 }); // Returns up to 500 submissions\\n     ```\\n\\n  2. HTTP Changes:\\n\\n  - Support for `maxRedirections` option in `HTTPRequestOptions`\\n    ```js\\n    // Auto follow redirects\\n    http.get('assets/aXecHjmbATuF6iGFmvBLBX/data', { maxRedirections: 5 });\\n    ```\\n\\n## 3.0.5 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.0.4 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.0.3 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.0.2 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.0.1 - 16 February 2025\\n\\n### Patch Changes\\n\\n- a8b91d2: Fix results handling for getSubmissions\\n\\n## 3.0.0 - 13 February 2025\\n\\n### Major Changes\\n\\n- b01d4f0: Update all functions in the main API (remove callbacks and clean up\\n  signatures, see the Migration Guide)\\n- 882ce29: Rewrite onto common http helpers (using undici)\\n\\n### Minor Changes\\n\\n- 6d536b2: Renaming `baseURL` to `baseUrl` to match all other adaptors, and\\n  logging a warning if `baseURL` is used\\n- 311d3b2: Add http namespace with `get()`, `post()`, `put()`\\n\\n## Migration guide\\n\\n- callbacks have removed from all functions. You can use `.then()` or `fn()` to\\n  access the data returned by a function, ie, `getForms().then(state => state)`\\n- `getForms(params, callback)` is now `getForms()`, and will now only download\\n  assets of type survey. Use `http.get('assets/')` to retrieve other assets (and\\n  add query parameters)\\n- `getSubmissions(params, callback)` is now `getSubmissions(formId, { query })`.\\n- `getDeploymentInfo(params, callback)` is now `getDeploymentInfo(formId)`\\n\\n## 2.4.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 2.4.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n\\n## 2.4.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.4.0 - 19 June 2024\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.2.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.1.0 - 13 September 2023\\n\\n### Minor Changes\\n\\n- c85abf3: Removed the API version enum values in the credential configuration\\n  json schema and added a placeholder\\n\\n## 2.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.3.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.0 - 13 January 2023\\n\\n### Minor Changes\\n\\n- e48c30c: add getDeploymentInfo function\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.2.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 7b5ca3e: add fn and fix adaptors export\\n\\n### Patch Changes\\n\\n- 4067c28: build ast file\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 1.1.0 - 04 November 2022\\n\\n### Minor Changes\\n\\n- 7fc47d8: Migrate kobotoolbox\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["getDeploymentInfo","getForms","getSubmissions"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base Url","type":"string","default":"https://kf.kobotoolbox.org","description":"Kobotoolbox URL","format":"uri","minLength":1,"examples":["https://kf.kobotoolbox.org"]},"username":{"title":"Username","type":"string","description":"Kobotoolbox username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Kobotoolbox password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]},"apiVersion":{"title":"API Version","type":"string","placeholder":"v2","description":"Kobotoolbox API version to use","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["username","baseUrl","password","apiVersion"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to any KoboToolbox endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET assets resource</caption>\nhttp.get('assets')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 68,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 7,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getDeploymentInfo",
    "longname": "getDeploymentInfo",
    "name": "getDeploymentInfo",
    "kind": "function",
    "scope": "global",
    "description": "Get deployment information for a specific form. Calls `/api/v2/assets/<id>/deployment/`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Form Id to get the deployment information",
        "name": "formId"
      }
    ],
    "examples": [
      "getDeploymentInfo('aXecHjmbATuF6iGFmvBLBX');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 124,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": "data",
        "description": "an object containing deployment information",
        "type": null
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Make a request to fetch all survey forms accessible to the authorized user. Calls `/api/v2/assets/?asset_type=survey`.",
    "examples": [
      "getForms();"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": "data",
        "description": "an array of form objects",
        "type": null
      }
    ],
    "order": 1,
    "level": 0
  },
  {
    "id": "getSubmissions",
    "longname": "getSubmissions",
    "name": "getSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Get submissions for a specific form. Calls `/api/v2/assets/<formId>/data/`",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Form Id to get the specific submissions",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Options to control the request",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Field and direction to sort submissions by.",
        "name": "options.sort"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Query options to filter the submissions. See query operators {@link http://docs.mongodb.org/manual/reference/operator/query/.}",
        "name": "options.query"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "The index of the first submission to return.",
        "name": "options.start"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 30000,
        "description": "Maximum number of submissions to fetch. Pass Infinity to disable the limit and download all submissions",
        "name": "options.limit"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 10000,
        "description": "Limits the size of each page of submissions. Maximum value is 30000.",
        "name": "options.pageSize"
      }
    ],
    "examples": [
      "<caption>Get submissions for a specific form</caption>\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX');.",
      "<caption>Get all submissions for a specific form</caption>\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { limit: Infinity });",
      "<caption>Get form submissions with a query</caption>\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { query: { _submission_time:{ $gte: \"2025-03-12T21:54:20\" } } });",
      "<caption>Get form submissions with sorting</caption>\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { sort: { _submission_time: -1 } });",
      "<caption>Get form submissions with specific start index</caption>\ngetSubmissions('aXecHjmbATuF6iGFmvBLBX', { start: 10 });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 80,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": "data",
        "description": "an array of submission objects",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "HTTPRequestOptions",
    "longname": "HTTPRequestOptions",
    "name": "HTTPRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The request body (as JSON)",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The maximum number of redirects to follow",
        "name": "maxRedirections"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', or 'stream')",
        "name": "parseAs"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the KoboToolbox server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array containing all previous data objects",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "order": 4
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request to a KoboToolbox endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the body data in JSON format",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Create an asset resource</caption>\nhttp.post(\n '/assets/',\n {\n  name: 'Feedback Survey Test',\n  asset_type: 'survey',\n },\n );"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "http",
    "description": "Make a PUT request to a KoboToolbox endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the body data in JSON format",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Update an asset resource</caption>\nhttp.put(\n 'assets/a4jAWzoa8SZWzZGhx84sB5/deployment/',\n {\n  name: 'Feedback Survey Test',\n  asset_type: 'survey',\n },\n );"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 147,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a HTTP request to any KoboToolbox endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query, headers, and body for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Bulk updating of submissions</caption>\nhttp.request(\"PATCH\", `assets/${$.form_uid}/data/bulk/`, {\n  body: {\n    submission_ids: [$.data.submission_id],\n    data: {\n      Transaction_status: \"success\",\n    },\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 42,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/kobotoolbox/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"magpi","adaptor":"@openfn/language-magpi","version":"1.2.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#fetchsurveydata\\\">fetchSurveyData(params)</a></dt>\\n<dt>\\n    <a href=\\\"#submitrecord\\\">submitRecord(jsonData)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### fetchSurveyData\\n\\n<p><code>fetchSurveyData(params) ⇒ Operation</code></p>\\n\\nMake a POST request to fetch Magpi data and POST it somewhere else\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\nfetchSurveyData({\\n \\\"surveyId\\\": \\\"37479\\\",\\n \\\"afterDate\\\": \\\"2017-09-27\\\",\\n \\\"postUrl\\\": \\\"https://www.openfn.org/inbox/your-inbox-url\\\"\\n})\\n```\\n\\n* * *\\n\\n### submitRecord\\n\\n<p><code>submitRecord(jsonData) ⇒ Operation</code></p>\\n\\nSubmit a record for a form/survey which already exists in a Magpi user account\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| jsonData | <code>object</code> | Payload data for the record |\\n\\n**Example**\\n```js\\nsubmitRecord(jsonData)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Magpi\\n\\nLanguage Pack for building expressions and operations for working with the\\n[Magpi inbound API](http://support.magpi.com/support/solutions/articles/4839-magpi-inbound-api)\\nand the\\n[Magpi outbound API](http://support.magpi.com/support/solutions/articles/4865-magpi-outbound-api).\\n\\n_N.B.: The Magpi API is under development and this pack may change._\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/magpi-configuration-schema/)\\ndefinition.\\n\\n## Fetch data from Magpi\\n\\nAllows you to fetch data from Magpi and post it elsewhere.\\n\\n#### Using `fetchSurveyData`:\\n\\nhttps://www.magpi.com/api/surveydata/v2?username=taylordowns2000&accesstoken=blahblahblah&surveyid=921409679070\\n\\n```js\\nfetchSurveyData({\\n  surveyId: '37479',\\n  afterDate: '2016-01-01',\\n  beforeDate: '2100-01-01',\\n  postUrl: 'https://www.openfn.org/inbox/secret-5c25-inbox-ba2c-url',\\n});\\n```\\n\\n## Submit new records\\n\\n**wip:** This will allow you to push data to Magpi to create a new record for a\\nform which exists in a user account.\\n\\n#### Using `submitRecord`:\\n\\n```js\\nsubmitRecord(1, 2);\\n```\\n\\n#### Magpi Outbound API Parameters:\\n\\n- `username`: The account username.\\n- `accesstoken`: The accesstoken generated on the site. Each accesstoken is\\n  associated with the user who generated.\\n- `surveyid`: The surveyid is not the survey's name. The surveyid can be\\n  obtained from the list of forms generated in 1 above.\\n- `startdate`: Start date of the data to be returned. Filtering is done based on\\n  the DateStamp and is inclusive.(Optional). The date format should be the same\\n  one as the one on the data tab/ The date format should be the same one as the\\n  one on the data tab\\n- `enddate`: End date of the data to be returned. Filtering is done based on the\\n  DateStamp and is inclusive.(Optional)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-magpi\\n\\n## 1.2.4 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 1.2.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.2.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.1.2 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Fix variable reference in submitRecord\\n\\n## 1.1.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.0.5 - 20 April 2023\\n\\n### Patch Changes\\n\\n- 86fb813: dependencies update\\n\\n## 1.0.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.0.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.0.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.0.0 - 25 November 2022\\n\\n### Major Changes\\n\\n- e6c2b4a: Update xml2js parser\\n\\n### Minor Changes\\n\\n- df5dd2e: migrate magpi\\n\"","functions":["fetchSurveyData","submitRecord"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"username":{"title":"username","type":"string","description":"Magpi username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"Magpi access token","writeOnly":true,"minLength":1,"examples":["somEThINGkeyish"]}},"type":"object","additionalProperties":true,"required":["username","accessToken"]}},
[
  {
    "id": "fetchSurveyData",
    "longname": "fetchSurveyData",
    "name": "fetchSurveyData",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to fetch Magpi data and POST it somewhere else",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "fetchSurveyData({\n \"surveyId\": \"37479\",\n \"afterDate\": \"2017-09-27\",\n \"postUrl\": \"https://www.openfn.org/inbox/your-inbox-url\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 46,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/magpi/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "submitRecord",
    "longname": "submitRecord",
    "name": "submitRecord",
    "kind": "function",
    "scope": "global",
    "description": "Submit a record for a form/survey which already exists in a Magpi user account",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record",
        "name": "jsonData"
      }
    ],
    "examples": [
      "submitRecord(jsonData)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 165,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/magpi/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mailchimp","adaptor":"@openfn/language-mailchimp","version":"1.0.15","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addmember\\\">addMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#archivemember\\\">archiveMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#deletemember\\\">deleteMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listaudienceinfo\\\">listAudienceInfo(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listaudiences\\\">listAudiences(query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listbatches\\\">listBatches(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#listmembers\\\">listMembers(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, query, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#startbatch\\\">startBatch(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#tagmembers\\\">tagMembers(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#updatemember\\\">updateMember(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#updatemembertags\\\">updateMemberTags(params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmembers\\\">upsertMembers(params, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addMember\\n\\n<p><code>addMember(params, [callback]) ⇒ Operation</code></p>\\n\\naddMember to a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### archiveMember\\n\\n<p><code>archiveMember(params, [callback]) ⇒ Operation</code></p>\\n\\narchiveMember in a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### deleteMember\\n\\n<p><code>deleteMember(params, [callback]) ⇒ Operation</code></p>\\n\\nPermanently delete a member from a list\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, query, [callback]) ⇒ Operation</code></p>\\n\\nThe get function is used to make a GET request to the Mailchimp API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made |\\n| query | <code>object</code> | An object containing query parameters to be included in the request |\\n| [callback] | <code>function</code> | (Optional) callback to handle the response |\\n\\n**Example:** Get a list of account exports for a given account\\n```js\\nget('/account-exports');\\n```\\n\\n* * *\\n\\n### listAudienceInfo\\n\\n<p><code>listAudienceInfo(query, [callback]) ⇒ Operation</code></p>\\n\\nGet information about a specific list in your Mailchimp account.\\nResults include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | listId and query parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listAudiences\\n\\n<p><code>listAudiences(query, [callback]) ⇒ Operation</code></p>\\n\\nGet information about all lists in the account.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Query parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listBatches\\n\\n<p><code>listBatches(params, [callback]) ⇒ Operation</code></p>\\n\\nlistBatches\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### listMembers\\n\\n<p><code>listMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nlistMembers\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, query, [callback]) ⇒ Operation</code></p>\\n\\nThe post function is used to make a POST request to the Mailchimp API.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made. |\\n| body | <code>object</code> | The data to be sent in the body of the request |\\n| query | <code>object</code> | An object containing query parameters to be included in the request |\\n| [callback] | <code>function</code> | (Optional) callback to handle the response |\\n\\n**Example:** Create a new account export in your Mailchimp account\\n```js\\npost('/accounts-export', {include_stages:[]});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, options, [callback]) ⇒ Operation</code></p>\\n\\nMake an HTTP request to Mailchimp API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | The HTTP method for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE'). |\\n| path | <code>string</code> | The endpoint of the api to which the request should be made. |\\n| options | <code>Object</code> | Additional options for the request (query, body only). |\\n| [callback] | <code>function</code> | (Optional) callback function to handle the response. |\\n\\n**Example:** Get list to all other resources available in the API\\n```js\\nrequest('GET','/');\\n```\\n**Example:** Create a new account export in your Mailchimp account\\n```js\\nrequest('POST','/accounts-export', {include_stages:[]});\\n```\\n\\n* * *\\n\\n### startBatch\\n\\n<p><code>startBatch(params, [callback]) ⇒ Operation</code></p>\\n\\nStart a batch with a list of operations.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | operations batch job |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nstartBatch(params)\\n```\\n\\n* * *\\n\\n### tagMembers\\n\\n<p><code>tagMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nTag members with a particular tag\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a tagId, members, and a list |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\ntagMembers((state) => ({\\n  listId: \\\"someId\\\", // All Subscribers list\\n  tagId: \\\"someTag\\\", // User tag\\n  members: state.response.body.rows.map((u) => u.email),\\n}));\\n```\\n**Example**\\n```js\\ntagMembers((state) => ({\\n  listId: \\\"someId\\\",\\n  tagId: \\\"someTag\\\",\\n  members: state.response.body.rows\\n    .filter((u) => u.allow_other_emails)\\n    .map((u) => u.email),\\n}));\\n```\\n\\n* * *\\n\\n### updateMember\\n\\n<p><code>updateMember(params, [callback]) ⇒ Operation</code></p>\\n\\nupdateMember\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId,subscriberHash and member |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### updateMemberTags\\n\\n<p><code>updateMemberTags(params, [callback]) ⇒ Operation</code></p>\\n\\nupdateMemberTags\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n\\n* * *\\n\\n### upsertMembers\\n\\n<p><code>upsertMembers(params, [callback]) ⇒ Operation</code></p>\\n\\nAdd or update a list members\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | a listId, users, and options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example**\\n```js\\nupsertMembers((state) => ({\\n  listId: \\\"someId\\\",\\n  users: state.response.body.rows.map((u) => ({\\n    email: u.email,\\n    status: u.allow_other_emails ? \\\"subscribed\\\" : \\\"unsubscribed\\\",\\n    mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\\n  })),\\n}));\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mailchimp\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Mailchimp\\nmarketing API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailchimp-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailchimp\\n\\n## 1.0.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.0.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.0.9 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.0.8 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.7 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.0.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.0.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.0.0 - 25 June 2024\\n\\n### Major Changes\\n\\n- 60dec15: This update contains changes to the HTTP helpers (`get`, `post` etc):\\n\\n  - Properly handle 204 responses (ie, success with no body)\\n  - On error, throw the mailchimp JSON body, which is full of useful info\\n  - Slightly change the shape of the returned state\\n  - Better log output\\n\\n  This update contains one breaking change on the http helpers:\\n\\n  - state.response is now `{ headers, statusCode, body }` (it used to just be\\n    `body`)\\n\\n## 0.8.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.7.4 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.7.3 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Fix updateMember()\\n\\n## 0.7.2 - 16 December 2023\\n\\n### Patch Changes\\n\\n- 1131c34: Remove regex pattern for validation and changed minLength to 1\\n\\n## 0.7.1 - 13 September 2023\\n\\n### Patch Changes\\n\\n- 1f856c4: Update configuration schema\\n- 48394f5: - fix ast docs warnings\\n  - add status code log on request\\n\\n## 0.7.0 - 24 August 2023\\n\\n### Minor Changes\\n\\n- 58fcea9: - Add chunk from common\\n  - Improve error logs\\n  - Return `state` in request finalState\\n\\n## 0.6.0 - 18 August 2023\\n\\n### Minor Changes\\n\\n- 1582873: Add request, get and post functions\\n\\n## 0.5.0 - 01 August 2023\\n\\n### Minor Changes\\n\\n- 8e39ee1: Add new functions\\n\\n  - addMember()\\n  - listMembers()\\n  - deleteMember()\\n  - listAudiences()\\n  - archiveMember()\\n  - updateMemberTags()\\n  - listAudienceInfo()\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.2 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.1 - 25 November 2022\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n- e81561f: Updated ast and package.json\\n\\n## 0.3.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 88fa3b5: migrate mailchimp\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["addMember","archiveMember","deleteMember","get","listAudienceInfo","listAudiences","listBatches","listMembers","post","request","startBatch","tagMembers","updateMember","updateMemberTags","upsertMembers"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Data Center","type":"string","description":"Mailchimp Data Center for your account","minLength":1,"examples":["us11","uk8","in10"]},"apiKey":{"title":"API Key","type":"string","description":"Mailchimp API Key","minLength":1,"examples":["0eb22c7b4a1c5bcd789379bf8a92902d-us13"]}},"type":"object","additionalProperties":true,"required":["server","apiKey"]}},
[
  {
    "id": "addMember",
    "longname": "addMember",
    "name": "addMember",
    "kind": "function",
    "scope": "global",
    "description": "addMember to a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 201,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 6,
    "newscope": true,
    "level": 0
  },
  {
    "id": "archiveMember",
    "longname": "archiveMember",
    "name": "archiveMember",
    "kind": "function",
    "scope": "global",
    "description": "archiveMember in a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 260,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "deleteMember",
    "longname": "deleteMember",
    "name": "deleteMember",
    "kind": "function",
    "scope": "global",
    "description": "Permanently delete a member from a list",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 279,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "The get function is used to make a GET request to the Mailchimp API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object containing query parameters to be included in the request",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a list of account exports for a given account</caption>\nget('/account-exports');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 438,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "listAudienceInfo",
    "longname": "listAudienceInfo",
    "name": "listAudienceInfo",
    "kind": "function",
    "scope": "global",
    "description": "Get information about a specific list in your Mailchimp account.\nResults include list members who have signed up but haven't confirmed their subscription yet and unsubscribed or cleaned.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "listId and query parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 317,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "listAudiences",
    "longname": "listAudiences",
    "name": "listAudiences",
    "kind": "function",
    "scope": "global",
    "description": "Get information about all lists in the account.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 298,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "listBatches",
    "longname": "listBatches",
    "name": "listBatches",
    "kind": "function",
    "scope": "global",
    "description": "listBatches",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "listMembers",
    "longname": "listMembers",
    "name": "listMembers",
    "kind": "function",
    "scope": "global",
    "description": "listMembers",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 182,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "The post function is used to make a POST request to the Mailchimp API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to be sent in the body of the request",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object containing query parameters to be included in the request",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new account export in your Mailchimp account</caption>\npost('/accounts-export', {include_stages:[]});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 455,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make an HTTP request to Mailchimp API",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The HTTP method for the request (e.g., 'GET', 'POST', 'PUT', 'DELETE').",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The endpoint of the api to which the request should be made.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Additional options for the request (query, body only).",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "(Optional) callback function to handle the response.",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get list to all other resources available in the API</caption>\nrequest('GET','/');",
      "<caption>Create a new account export in your Mailchimp account</caption>\nrequest('POST','/accounts-export', {include_stages:[]});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 371,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "startBatch",
    "longname": "startBatch",
    "name": "startBatch",
    "kind": "function",
    "scope": "global",
    "description": "Start a batch with a list of operations.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "operations batch job",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "startBatch(params)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 145,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "tagMembers",
    "longname": "tagMembers",
    "name": "tagMembers",
    "kind": "function",
    "scope": "global",
    "description": "Tag members with a particular tag",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a tagId, members, and a list",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "tagMembers((state) => ({\n  listId: \"someId\", // All Subscribers list\n  tagId: \"someTag\", // User tag\n  members: state.response.body.rows.map((u) => u.email),\n}));",
      "tagMembers((state) => ({\n  listId: \"someId\",\n  tagId: \"someTag\",\n  members: state.response.body.rows\n    .filter((u) => u.allow_other_emails)\n    .map((u) => u.email),\n}));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 124,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "updateMember",
    "longname": "updateMember",
    "name": "updateMember",
    "kind": "function",
    "scope": "global",
    "description": "updateMember",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId,subscriberHash and member",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 220,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "updateMemberTags",
    "longname": "updateMemberTags",
    "name": "updateMemberTags",
    "kind": "function",
    "scope": "global",
    "description": "updateMemberTags",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 241,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "upsertMembers",
    "longname": "upsertMembers",
    "name": "upsertMembers",
    "kind": "function",
    "scope": "global",
    "description": "Add or update a list members",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "a listId, users, and options",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertMembers((state) => ({\n  listId: \"someId\",\n  users: state.response.body.rows.map((u) => ({\n    email: u.email,\n    status: u.allow_other_emails ? \"subscribed\" : \"unsubscribed\",\n    mergeFields: { FNAME: u.first_name, LNAME: u.last_name },\n  })),\n}));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 74,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailchimp/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mailgun","adaptor":"@openfn/language-mailgun","version":"0.5.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#send\\\">send(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### send\\n\\n<p><code>send(params)</code></p>\\n\\nCreate an event\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Params for sending an email |\\n\\n**Example**\\n```js\\nsend({\\n  from: 'from_email',\\n  to: 'to_email',\\n  subject: 'Your Subject',\\n  text: 'Your message goes here',\\n  attachment: {\\n    url: 'www.google.com/doodle.png',\\n    filename: 'forYou.png',\\n  },\\n})\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mailgun\\n\\nLanguage Pack for building expressions and operations for working with the\\nmailgun API.\\n\\n[mailgun-js on npm](https://www.npmjs.com/package/mailgun-js)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mailgun-configuration-schema/)\\ndefinition.\\n\\n## send\\n\\n```js\\nsend(\\n  fields(\\n    field('from', 'from_email'),\\n    field('to', 'to_email'),\\n    field('subject', 'Your Subject'),\\n    field('text', 'Your message goes here')\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mailgun\\n\\n## 0.5.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.5 - 24 April 2024\\n\\n### Patch Changes\\n\\n- 02ab7a89: Change `host` format from `hostname` to `string` in\\n  `configuration-schema.json`\\n\\n## 0.4.4 - 19 March 2024\\n\\n### Patch Changes\\n\\n- e7ff766: Update configuration-schema\\n\\n## 0.4.3 - 11 August 2023\\n\\n### Patch Changes\\n\\n- f86576d: Security update to mailgun.js\\n\\n## 0.4.2 - 03 August 2023\\n\\n### Patch Changes\\n\\n- 4620079: Bump opinionator version\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 9ded25e: Migrate Mailgun\\n\"","functions":["send"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"domain":{"title":"Domain Name","type":"string","description":"Mailgun API Domain Name","format":"string","minLength":1,"examples":["sandbox-123.mailgun.org"]},"apiKey":{"title":"API Key","type":"string","description":"Mailgun API Key","writeOnly":true,"minLength":1,"examples":["otherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["domain","apiKey"]}},
[
  {
    "id": "send",
    "longname": "send",
    "name": "send",
    "kind": "function",
    "scope": "global",
    "description": "Create an event",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Params for sending an email",
        "name": "params"
      }
    ],
    "examples": [
      "send({\n  from: 'from_email',\n  to: 'to_email',\n  subject: 'Your Subject',\n  text: 'Your message goes here',\n  attachment: {\n    url: 'www.google.com/doodle.png',\n    filename: 'forYou.png',\n  },\n})"
    ],
    "access": "public",
    "meta": {
      "lineno": 69,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mailgun/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"maximo","adaptor":"@openfn/language-maximo","version":"0.5.16","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#fetch\\\">fetch(params)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(params)</a></dt>\\n<dt>\\n    <a href=\\\"#update75\\\">update75(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### fetch\\n\\n<p><code>fetch(params) ⇒ Operation</code></p>\\n\\nMake a GET request and POST it somewhere else\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the fetch |\\n\\n**Example**\\n```js\\nfetch({\\n endpoint: 'maxrest/rest/os/mxinventory',\\n query: {\\n   ITEMNUM: '01226',\\n   _format: 'json',\\n },\\n postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(params) ⇒ Operation</code></p>\\n\\nMake an update in Maximo 7.6 and beyond\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example:** Update a workorder\\n```js\\nupdate({\\n  endpoint: \\\"maxrest/rest/mbo/workorder/1234\\\",\\n  body: state => state.data,\\n});\\n```\\n\\n* * *\\n\\n### update75\\n\\n<p><code>update75(params) ⇒ Operation</code></p>\\n\\nMake an upadte in Maximo 7.5\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to make the update |\\n\\n**Example:** Update an inventory balance\\n```js\\nupdate75({\\n  endpoint: \\\"maxrest/rest/mbo/invbalances\\\",\\n  body: state => state.inventoryBalances,\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Maximo\\n\\nLanguage Pack for building expressions and operations to access IBM Maximo EAM.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/maximo-configuration-schema/)\\ndefinition.\\n\\n### Fetch\\n\\n#### sample 'fetch' expression\\n\\n```js\\nfetch({\\n  endpoint: 'maxrest/rest/os/mxinventory',\\n  query: {\\n    ITEMNUM: '01226',\\n    _format: 'json',\\n  },\\n  postUrl: 'https://www.openfn.org/inbox/not-real',\\n});\\n```\\n\\n### sample 'create' expression\\n\\n```js\\ncreate({\\n  endpoint: 'maxrest/rest/os/mxinvbal/',\\n  body: function (state) {\\n    return {\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      ISSUEUNIT: 'FOO',\\n      PHYSCNT: dataValue('PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n### sample 'update75' expression\\n\\n```js\\nupdate75({\\n  endpoint: state => {\\n    return (\\n      'maxrest/rest/os/mxinvbal/' +\\n      dataValue('form.question1.INVBALANCESID')(state)\\n    );\\n  },\\n  body: state => {\\n    return {\\n      _action: 'AddChange', //this is required for the old Maximo API!\\n      ITEMNUM: dataValue('form.ITEMNUM')(state),\\n      ITEMSETID: dataValue('form.ITEMSETID')(state),\\n      SITEID: dataValue('form.SITEID')(state),\\n      LOCATION: dataValue('form.LOCATION')(state),\\n      PHYSCNT: dataValue('form.PHYSCNT')(state),\\n      BINNUM: dataValue('form.BINNUM')(state),\\n    };\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-maximo\\n\\n## 0.5.16 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.15 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.14 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.13 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.12 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.5.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.9 - 09 January 2025\\n\\n### Patch Changes\\n\\n- cb9b3c5: Security update\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.8 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.7 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.4 - 17 March 2023\\n\\n### Patch Changes\\n\\n- aed7e0b: fix required field in configuration schema\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 4d4be56: migrate maximo\\n\"","functions":["fetch","update","update75"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Maximo instance base URL","format":"uri","minLength":1,"examples":["https://maximo-demo76.mro.com"]},"username":{"title":"Username","type":"string","description":"Maximo instance username","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Maximo instance password","writeOnly":true,"minLength":1,"examples":["@some(!)passowrd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","username","password"]}},
[
  {
    "id": "fetch",
    "longname": "fetch",
    "name": "fetch",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request and POST it somewhere else",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the fetch",
        "name": "params"
      }
    ],
    "examples": [
      "fetch({\n endpoint: 'maxrest/rest/os/mxinventory',\n query: {\n   ITEMNUM: '01226',\n   _format: 'json',\n },\n postUrl: 'https://www.openfn.org/inbox/not-real',\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Make an update in Maximo 7.6 and beyond",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the update",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Update a workorder</caption>\nupdate({\n  endpoint: \"maxrest/rest/mbo/workorder/1234\",\n  body: state => state.data,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "update75",
    "longname": "update75",
    "name": "update75",
    "kind": "function",
    "scope": "global",
    "description": "Make an upadte in Maximo 7.5",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to make the update",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Update an inventory balance</caption>\nupdate75({\n  endpoint: \"maxrest/rest/mbo/invbalances\",\n  body: state => state.inventoryBalances,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 259,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/maximo/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"medicmobile","adaptor":"@openfn/language-medicmobile","version":"0.5.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#changesapi\\\">changesApi(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchsubmissions\\\">fetchSubmissions(formId, params, postUrl)</a></dt>\\n<dt>\\n    <a href=\\\"#pickformdata\\\">pickFormData(formId)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### changesApi\\n\\n<p><code>changesApi(params, callback) ⇒ Operation</code></p>\\n\\nAccess the CouchDB Changes API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nchangesApi(params, callback)\\n```\\n\\n* * *\\n\\n### fetchSubmissions\\n\\n<p><code>fetchSubmissions(formId, params, postUrl) ⇒ Operation</code></p>\\n\\nAccess form submissions and post them as JSON.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Query parameters |\\n| params | <code>object</code> | Starting sequence id |\\n| postUrl | <code>string</code> | Inbox to post form data |\\n\\n**Example**\\n```js\\nfetchSubmissions(\\n  \\\"pregnancy\\\", // formId\\n  { \\\"last-event-id\\\": 334 }, // params\\n  \\\"http://localhost:4000/inbox/abc-123-xyz\\\" // postUrl\\n);\\n```\\n\\n* * *\\n\\n### pickFormData\\n\\n<p><code>pickFormData(formId) ⇒ Operation</code></p>\\n\\nSelect submissions for a specific form\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | The form ID. |\\n\\n**Example**\\n```js\\npickFormData(formId)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Medic Mobile\\n\\nLanguage Pack for building expressions and operations to make calls to the Medic\\nMobile API.  \\n**For an overview of Medic's database, check out\\n[Medic's DB Schema v2](https://github.com/medic/medic-docs/blob/master/development/db-schema.md)**  \\nThe exported functions in this language package can be executed by\\n[OpenFn/core](https://github.com/OpenFn/core):\\n\\n```sh\\n../core/lib/cli.js execute -l ./lib/Adaptor -s ./tmp/state.json -e ./tmp/expression.js\\n```\\n\\nFor quick-start help, clone\\n[OpenFn/openfn-devtools](https://github.com/OpenFn/openfn-devtools) and follow\\nthe README.md\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/medicmobile-configuration-schema/)\\ndefinition.\\n\\n#### sample fetchSubmissions expression\\n\\n```js\\nfetchSubmissions(\\n  'pregnancy', // formId\\n  { 'last-event-id': 334 }, // params, last-event-id will be replaced by cursor\\n  'http://localhost:4000/inbox/abc-123-xyz' // postUrl\\n);\\n```\\n\\n#### sample changesApi and pickFormData usage\\n\\n```js\\n// get all the changes...\\nchangesApi({\\n  include_docs: true,\\n  // This only gets used the first time the job is run.\\n  // Subsequent runs take the lastSeq value as their cursor.\\n  // \\\"last-event-id\\\": 789,\\n});\\n\\n// Picks out the field data for a given formId.\\npickFormData('pregnancy');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-medicmobile\\n\\n## 0.5.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.2 - 03 August 2023\\n\\n### Patch Changes\\n\\n- 421fad3: Bump query-string\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 2cd3236: migrate medicmobile\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["changesApi","fetchSubmissions","pickFormData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","type":"string","description":"Medic's CouchDB api URL","format":"uri","minLength":1,"examples":["https://standard.app.medicmobile.org"]},"db":{"title":"Database","type":"string","description":"Database name","minLength":1,"examples":["medic"]},"username":{"title":"Username","type":"string","description":"Medic instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Medic instance password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["server","username","password","db"]}},
[
  {
    "id": "changesApi",
    "longname": "changesApi",
    "name": "changesApi",
    "kind": "function",
    "scope": "global",
    "description": "Access the CouchDB Changes API",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "changesApi(params, callback)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 89,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "fetchSubmissions",
    "longname": "fetchSubmissions",
    "name": "fetchSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Access form submissions and post them as JSON.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Query parameters",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Starting sequence id",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Inbox to post form data",
        "name": "postUrl"
      }
    ],
    "examples": [
      "fetchSubmissions(\n  \"pregnancy\", // formId\n  { \"last-event-id\": 334 }, // params\n  \"http://localhost:4000/inbox/abc-123-xyz\" // postUrl\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 49,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "pickFormData",
    "longname": "pickFormData",
    "name": "pickFormData",
    "kind": "function",
    "scope": "global",
    "description": "Select submissions for a specific form",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The form ID.",
        "name": "formId"
      }
    ],
    "examples": [
      "pickFormData(formId)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 171,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/medicmobile/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mogli","adaptor":"@openfn/language-mogli","version":"0.5.15","docs":"\"\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#sourceHelpers_lookup\\\">sourceHelpers.lookup(relationshipName, externalID, path)</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#sourceHelpers_relationship\\\">sourceHelpers.relationship(relationshipName, externalID, dataSource)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#index\\\">index()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#join\\\">join()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#map\\\">map()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#referencepath\\\">referencePath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#source\\\">source()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n\\n## sourceHelpers\\n\\nThese functions belong to the sourceHelpers namespace.\\n### sourceHelpers.lookup {#sourceHelpers_lookup}\\n\\n<p><code>lookup(relationshipName, externalID, path) ⇒ object</code></p>\\n\\nAdds a lookup or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| path | <code>string</code> | JSONPath to data source. |\\n\\n**Example:** Example\\n```js\\nlookup(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"$.path\\\")\\n```\\n\\n* * *\\n\\n\\n### sourceHelpers.relationship {#sourceHelpers_relationship}\\n\\n<p><code>relationship(relationshipName, externalID, dataSource) ⇒ object</code></p>\\n\\nAdds a lookup or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalID | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example:** Data Sourced Value\\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\n```\\n**Example:** Fixed Value\\n```js\\nrelationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Mogli\\n\\nLanguage Pack for building expressions and operations to interact with Mogli\\nSMS.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mogli-configuration-schema/)\\ndefinition.\\n\\n### Create inbound SMS\\n\\n```js\\ncreateSMS(\\n  fields(\\n    field('sender', dataValue('from_number')),\\n    field('receivedAt', dataValue('timestamp')),\\n    field('message', dataValue('message'))\\n  )\\n);\\n```\\n\\n<!-- TODO: determine update process -->\\n<!-- ### Update SMS status\\n```js\\nupdateSMS(\\n  fields(\\n    field(\\\"Id\\\", dataValue(\\\"externalId\\\")),\\n    field(\\\"status\\\", dataValue(\\\"status\\\"))\\n  )\\n);\\n``` -->\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"v0.1.6\\n\\n## 0.5.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.9 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.8 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.7 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4 - 20 April 2023\\n\\n### Patch Changes\\n\\n- 7cc8efc: remove FakeAdaptor references\\n\\n## 0.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- # c6056e8: migrate mogli\\n\\n* State gets cleaned up after the operations are finished. This means that the\\n  final state is serializable.\\n\\n  The JSForce connection object is provided by `createConnection`, and in turn\\n  `execute` ensures it is run before the user's operations.\\n\\n  The `cleanupState` reducer simply deletes the connection key from state.\\n\\n# v0.1.3\\n\\n- Bumped language-common dependency to v0.0.4.\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"Mogli instance login URL","format":"uri","minLength":1,"examples":[" https://www.orange-or-airtel-or-vodafone.com/api/"]},"username":{"title":"Username","type":"string","description":"Mogli instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Mogli instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]},"securityToken":{"title":"Security Token","type":"string","description":"Mogli instance security token","writeOnly":true,"minLength":1,"examples":["dGF5bG9yOnNlY3JldA=="]},"secret":{"title":"Secret","type":"string","description":"Mogli instance secret","writeOnly":true,"minLength":1,"examples":["someotherThiNGfSECret"]}},"type":"object","additionalProperties":true,"required":["loginUrl","username","password","securityToken","secret"]}},
[
  {
    "id": "lookup",
    "longname": "lookup",
    "name": "lookup",
    "kind": "function",
    "scope": "sourceHelpers",
    "description": "Adds a lookup or 'dome insert' to a record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "`__r` relationship field on the record.",
        "name": "relationshipName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Salesforce ExternalID field.",
        "name": "externalID"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "JSONPath to data source.",
        "name": "path"
      }
    ],
    "examples": [
      "<caption>Example</caption>\nlookup(\"relationship_name__r\", \"externalID on related object\", \"$.path\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "sourceHelpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "Operation",
    "longname": "Operation",
    "name": "Operation",
    "kind": "typedef",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "name": "state"
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "ignore": true,
    "meta": {
      "lineno": 15,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 1
  },
  {
    "id": "relationship",
    "longname": "relationship",
    "name": "relationship",
    "kind": "function",
    "scope": "sourceHelpers",
    "description": "Adds a lookup or 'dome insert' to a record.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "`__r` relationship field on the record.",
        "name": "relationshipName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Salesforce ExternalID field.",
        "name": "externalID"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "resolvable source.",
        "name": "dataSource"
      }
    ],
    "examples": [
      "<caption>Data Sourced Value</caption>\nrelationship(\"relationship_name__r\", \"externalID on related object\", dataSource(\"path\"))",
      "<caption>Fixed Value</caption>\nrelationship(\"relationship_name__r\", \"externalID on related object\", \"hello world\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "object"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 33,
      "filename": "sourceHelpers.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "State",
    "longname": "State",
    "name": "State",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON Data.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Array.<Reference>"
          ]
        },
        "description": "History of all previous operations.",
        "name": "references"
      }
    ],
    "ignore": true,
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mogli/src"
    },
    "order": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "index",
    "common": true,
    "name": "index",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "join",
    "common": true,
    "name": "join",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "map",
    "common": true,
    "name": "map",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "referencePath",
    "common": true,
    "name": "referencePath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "source",
    "common": true,
    "name": "source",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mojatax","adaptor":"@openfn/language-mojatax","version":"1.0.9","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, data, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### post\\n\\n<p><code>post(path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to any Mojatax endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the request body |\\n| options | [<code>MojataxRequestOptions</code>](#mojataxrequestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Mojatax server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Make a POST request to create an invoice\\n```js\\npost(\\\"CreateInvoice\\\", {\\ninvoice_id: 'PID092',\\ncustomerId: '102',\\nitems: [],\\n});\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, data, options, [callback]) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the Mojatax server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>MojataxRequestOptions</code>](#mojataxrequestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Mojatax server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Make a POST request to create an invoice\\n```js\\nrequest(\\\"POST\\\", \\\"/client/CreateInvoice\\\", {\\ninvoice_id: 'PID092',\\ncustomerId: '102',\\nitems: [],\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### MojataxRequestOptions\\n\\nOptions provided to Mojatax HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-mojatax <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the mojatax\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/mojatax-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mojatax-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('CreateInvoice', {\\n  customerId: '102',\\n  invoice_id: 'PID092',\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-mojatax\\n\\n## 1.0.9 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.8 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.7 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.6 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.5 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.0.4 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.0.3 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.0.2 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.1 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.0 - 16 October 2024\\n\\nImplement a post and a generic request function for mojatax adaptor\\n\"","functions":["post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Mojatax base URL","format":"uri","minLength":1,"examples":["https://vfd-staging.mojatax.com"]},"clientId":{"title":"Client Id","type":"string","description":"Your Mojatax client id","examples":["the-long-uuid-provided-by-mojatax"]},"password":{"title":"Password","type":"string","description":"Your Mojatax password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","password","clientId"]}},
[
  {
    "id": "MojataxHttpState",
    "longname": "MojataxHttpState",
    "name": "MojataxHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Mojatax server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "order": 0
  },
  {
    "id": "MojataxRequestOptions",
    "longname": "MojataxRequestOptions",
    "name": "MojataxRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to Mojatax HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 14,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to any Mojatax endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "MojataxRequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create an invoice</caption>\npost(\"CreateInvoice\", {\ninvoice_id: 'PID092',\ncustomerId: '102',\nitems: [],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "MojataxHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the Mojatax server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "MojataxRequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create an invoice</caption>\nrequest(\"POST\", \"/client/CreateInvoice\", {\ninvoice_id: 'PID092',\ncustomerId: '102',\nitems: [],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mojatax/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "MojataxHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mongodb","adaptor":"@openfn/language-mongodb","version":"2.1.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#finddocuments\\\">findDocuments(params)</a></dt>\\n<dt>\\n    <a href=\\\"#insertdocuments\\\">insertDocuments(params)</a></dt>\\n<dt>\\n    <a href=\\\"#updatedocument\\\">updateDocument(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### findDocuments\\n\\n<p><code>findDocuments(params) ⇒ State</code></p>\\n\\nFind documents in a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\nfindDocuments({\\n   database: 'str',\\n   collection: 'cases',\\n   query: {a:3}\\n  });\\n```\\n\\n* * *\\n\\n### insertDocuments\\n\\n<p><code>insertDocuments(params) ⇒ State</code></p>\\n\\nInserts documents into a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\ninsertDocuments({\\n   database: 'str',\\n   collection: 'kids',\\n   documents: [1,2,3]\\n  });\\n```\\n\\n* * *\\n\\n### updateDocument\\n\\n<p><code>updateDocument(params) ⇒ State</code></p>\\n\\nUpdates document (optionally upserting) into a mongoDb collection\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Configuration for mongo |\\n\\n**Example**\\n```js\\nupdateDocuments({\\n   database: 'str',\\n   collection: 'animals',\\n   filter: { type: 'fuzzy' },\\n   changes: { kind: 'soft' },\\n   options: { upsert: true }\\n  });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MongoDB\\n\\nLanguage Pack for building expressions and operations for use with MongoDB.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mongodb-configuration-schema/)\\ndefinition.\\n\\n### insertDocuments\\n\\n```js\\ninsertDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  documents: state => {\\n    return state.data.map(item => {\\n      return { name: item.name, age: item.age };\\n    });\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n### findDocuments\\n\\n```js\\nfindDocuments({\\n  database: 'yourDb',\\n  collection: 'yourCollection',\\n  query: state => {\\n    return { name: 'stu' };\\n  },\\n  // callback: (state) => state, // optional\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mongodb\\n\\n## 2.1.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.1.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.1.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.1.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.1.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.1.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.1.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.1.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.1.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.1.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.1.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.1.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.1.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.1.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.0.2 - 24 April 2024\\n\\n### Patch Changes\\n\\n- 38b3e8e0: Change `clusterHostname` format from `hostname` to `string` in\\n  `configuration-schema.json`\\n\\n## 2.0.1 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Fix findDocuments\\n\\n## 2.0.0 - 22 August 2023\\n\\n### Major Changes\\n\\n- Update configuration schema for MongoDB adaptor:\\n  - Rename `clusterUrl` to `clusterHostname`\\n  - Change `clusterHostname` format from `uri` to `hostname`\\n  - Update `Adaptor.js` and tests to use new name\\n\\n## 1.1.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.0.6 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.0.5 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\"","functions":["findDocuments","insertDocuments","updateDocument"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"clusterHostname":{"title":"Cluster Hostname","type":"string","description":"Your MongoDB cluster hostname","format":"string","minLength":1,"examples":["yourCluster-xxxyzzz.mongodb.net"]},"username":{"title":"Username","type":"string","description":"Your MongoDB instance username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your MongoDB instance password","writeOnly":true,"minLength":1,"examples":["@secret(!)Pass"]}},"type":"object","additionalProperties":true,"required":["clusterHostname","username","password"]}},
[
  {
    "id": "findDocuments",
    "longname": "findDocuments",
    "name": "findDocuments",
    "kind": "function",
    "scope": "global",
    "description": "Find documents in a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "findDocuments({\n   database: 'str',\n   collection: 'cases',\n   query: {a:3}\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 142,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "insertDocuments",
    "longname": "insertDocuments",
    "name": "insertDocuments",
    "kind": "function",
    "scope": "global",
    "description": "Inserts documents into a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "insertDocuments({\n   database: 'str',\n   collection: 'kids',\n   documents: [1,2,3]\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "updateDocument",
    "longname": "updateDocument",
    "name": "updateDocument",
    "kind": "function",
    "scope": "global",
    "description": "Updates document (optionally upserting) into a mongoDb collection",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Configuration for mongo",
        "name": "params"
      }
    ],
    "examples": [
      "updateDocuments({\n   database: 'str',\n   collection: 'animals',\n   filter: { type: 'fuzzy' },\n   changes: { kind: 'soft' },\n   options: { upsert: true }\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "State"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mongodb/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mpesa","adaptor":"@openfn/language-mpesa","version":"1.0.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#buygoods\\\">buyGoods(data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#checktransactionstatus\\\">checkTransactionStatus(data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#registerurl\\\">registerUrl(data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#remittax\\\">remitTax(data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#stkpush\\\">stkPush(data, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### buyGoods\\n\\n<p><code>buyGoods(data, options) ⇒ Operation</code></p>\\n\\nPay for goods and services directly from your business account to a till number, merchant store number or Merchant HO\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>BuyGoodsObject</code>](#buygoodsobject) | The object that will be attached to the POST request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request object. Includes headers, error mappings and query params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Pay for goods\\n```js\\nbuyGoods({\\n    \\\"Initiator\\\": \\\"testapi\\\",\\n    \\\"SecurityCredential\\\": \\\"sbMXpuhMX5LzieNiDrx9TgscfaBxxvie0WlBDdGli4MWu4s5gbhYVlBy+T89xHQdoYwcG202KNp403ln2dLFnytPqw==\\\",\\n    \\\"Amount\\\": 1,\\n    \\\"PartyA\\\": 600999,\\n    \\\"PartyB\\\": 600000,\\n    \\\"AccountReference\\\": 353353,\\n    \\\"Requester\\\": 254708374149,\\n    \\\"Remarks\\\": \\\"ok\\\",\\n    \\\"QueueTimeOutURL\\\": \\\"https://mydomain.com/b2b/queue/\\\",\\n    \\\"ResultURL\\\": \\\"https://mydomain.com/b2b/result/\\\"\\n});\\n```\\n\\n* * *\\n\\n### checkTransactionStatus\\n\\n<p><code>checkTransactionStatus(data, options) ⇒ Operation</code></p>\\n\\nCheck the status of the transaction\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>TransactionStatusObject</code>](#transactionstatusobject) | The object that will be attached to the POST request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request object. Includes headers, error mappings and query params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Check status of a transaction\\n```js\\ncheckTransactionStatus({\\n    \\\"Initiator\\\": \\\"testapi\\\",\\n    \\\"SecurityCredential\\\": \\\"ctHDk+dN14A22B5GyQQvISSTY3K1tVnCTuQGoG7PsTCadzTkl5wz44Rhpkb0BZDvfRA==\\\",\\n    \\\"TransactionID\\\": \\\"OEI2AK4Q16\\\",\\n    \\\"PartyA\\\": 600998,\\n    \\\"IdentifierType\\\": 4,\\n    \\\"ResultURL\\\": \\\"https://mydomain.com/TransactionStatus/result/\\\",\\n    \\\"QueueTimeOutURL\\\": \\\"https://mydomain.com/TransactionStatus/queue/\\\",\\n    \\\"Remarks\\\": \\\"fdfdfdfdf\\\",\\n    \\\"Occassion\\\": \\\"null\\\",\\n});\\n```\\n\\n* * *\\n\\n### registerUrl\\n\\n<p><code>registerUrl(data, options) ⇒ Operation</code></p>\\n\\nRegister a URL that allows receiving payment notifications to your paybill.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>RegisterUrlObject</code>](#registerurlobject) | The object that will be attached to the POST request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request object. Includes headers, error mappings and query params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Register a URL to receive payment notifications\\n```js\\nregisterUrl({\\n    \\\"ShortCode\\\": 600426,\\n    \\\"ResponseType\\\": \\\"Completed\\\",\\n    \\\"ConfirmationURL\\\": \\\"https://mydomain.com/confirmation\\\",\\n    \\\"ValidationURL\\\": \\\"https://mydomain.com/validation\\\"\\n});\\n```\\n\\n* * *\\n\\n### remitTax\\n\\n<p><code>remitTax(data, options) ⇒ Operation</code></p>\\n\\nRemit tax to the Kenya Revenue Authority (KRA).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>RemitTaxObject</code>](#remittaxobject) | The object that will be attached to the POST request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request object. Includes headers, error mappings and query params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Pay tax to KRA\\n```js\\nremitTax({\\n    \\\"Initiator\\\": \\\"testapi\\\",\\n    \\\"SecurityCredential\\\": \\\"Uq1qluCjSYfMF3XEvlpfuatnWwWerwq42fB+mMd8nsKdAVO04DGHhG/s3xO3g7POki9B8i7cSoEkBux4bQrlDLDWJhaTrt1TdbE+ZQ==\\\",\\n    \\\"Amount\\\": 1,\\n    \\\"PartyA\\\": 600995,\\n    \\\"AccountReference\\\": 353353,\\n    \\\"Remarks\\\": \\\"ok\\\",\\n    \\\"QueueTimeOutURL\\\": \\\"https://mydomain.com/b2b/queue/\\\",\\n    \\\"ResultURL\\\": \\\"https://mydomain.com/b2b/result/\\\"\\n})\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource. |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Register a URL to receive payment notifications\\n```js\\nrequest(\\\"POST\\\", \\\"/mpesa/c2b/v1/registerurl\\\", \\n {\\n   \\\"ShortCode\\\": 600426,\\n   \\\"ResponseType\\\": \\\"Completed\\\",\\n   \\\"ConfirmationURL\\\": \\\"https://mydomain.com/confirmation\\\",\\n   \\\"ValidationURL\\\": \\\"https://mydomain.com/validation\\\"\\n });\\n```\\n\\n* * *\\n\\n### stkPush\\n\\n<p><code>stkPush(data, options) ⇒ Operation</code></p>\\n\\nInitiate a STK pin prompt to a Safaricom mobile number.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>STKPushObject</code>](#stkpushobject) | The object that will be attached to the POST request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request object. Includes headers, error mappings and query params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the DARAJA API server (excluding the body) |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Initiate STK Push\\n```js\\nstkPush({\\n    \\\"Amount\\\": 1,\\n    \\\"PartyA\\\": 254708374149,\\n    \\\"PartyB\\\": 174379,\\n    \\\"PhoneNumber\\\": 254708374149,\\n    \\\"CallBackURL\\\": \\\"https://mydomain.com/path\\\",\\n    \\\"AccountReference\\\": \\\"CompanyXLTD\\\",\\n    \\\"TransactionDesc\\\": \\\"Payment of X\\\"\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### BuyGoodsObject\\n\\nBuy goods parameter definition\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| Initiator | <code>string</code> | The M-Pesa API operator username. This user needs Org Business Pay Bill API initiator role on M-Pesa |\\n| SecurityCredential | <code>string</code> | The encrypted password of the M-Pesa API operator. |\\n| Amount | <code>number</code> | The transaction amount. |\\n| PartyA | <code>number</code> | Your shortcode. The shortcode from which money will be deducted. |\\n| AccountReference | <code>string</code> | The account number to be associated with the payment. Up to 13 characters |\\n| Remarks | <code>string</code> | Any additional information to be associated with the transaction. |\\n| QueueTimeOutURL | <code>URL</code> | A URL that will be used to notify your system in case the request times out before processing. |\\n| ResultURL | <code>URL</code> | A URL that will be used to send transaction results after processing. |\\n\\n\\n* * *\\n\\n### RegisterUrlObject\\n\\nRegister URL parameter definition\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| ShortCode | <code>numeric</code> | Usually, a unique number is tagged to an M-PESA pay bill/till number of the organization. |\\n| ResponseType | <code>string</code> | This parameter specifies what is to happen if for any reason the validation URL is not reachable. Sample values: 'Canceled', 'Completed' |\\n| ConfirmationURL | <code>URL</code> | This is the URL that receives the confirmation request from API upon payment completion. |\\n| ValidationURL | <code>URL</code> | This is the URL that receives the validation request from the API upon payment submission. |\\n\\n\\n* * *\\n\\n### RemitTaxObject\\n\\nRemit tax parameter definition\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| Initiator | <code>string</code> | The M-Pesa API operator username. |\\n| SecurityCredential | <code>string</code> | The encrypted password of the M-Pesa API operator. |\\n| Amount | <code>number</code> | The transaction amount. |\\n| PartyA | <code>number</code> | This is your own shortcode from which the money will be deducted. |\\n| AccountReference | <code>string</code> | The payment registration number (PRN) issued by KRA. |\\n| Remarks | <code>string</code> | Any additional information to be associated with the transaction. |\\n| QueueTimeOutURL | <code>URL</code> | A URL that will be used to notify your system in case the request times out before processing. |\\n| ResultURL | <code>URL</code> | A URL that will be used to send transaction results after processing. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n### STKPushObject\\n\\nSTKPush request data object\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| Amount | <code>number</code> | Amount charged. |\\n| PartyA | <code>number</code> | The phone number that receives the STK push prompt. Expected to be a valid Safaricom Number that is M-pesa registered in the format 2547XXXXXXXX |\\n| PartyB | <code>number</code> | The organization that receives the funds |\\n| PhoneNumber | <code>number</code> | The mobile number to receive the STK pin prompt |\\n| CallBackURL | <code>URL</code> | A valid secure URL that is used to receive notifications from M-Pesa API. It is the endpoint to which the results will be sent by M-Pesa API |\\n| AccountReference | <code>string</code> | Along with the business name, this value is also displayed to the customer in the STK pin prompt message. Maximum of 12 characters |\\n| TransactionDesc | <code>string</code> | Any additional information/comment that can be sent along with the request from you system. |\\n\\n\\n* * *\\n\\n### TransactionStatusObject\\n\\nCheck transaction status data object.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| Initiator | <code>string</code> | The name of the initiator initiating the request. |\\n| SecurityCredential | <code>string</code> | Encrypted credential of the user getting transaction status. |\\n| TransactionID | <code>string</code> | Unique identifier to identify a transaction on Mpesa. |\\n| PartyA | <code>number</code> | Organization/MSISDN receiving the transaction. |\\n| IdentifierType | <code>number</code> | Type of organization receiving the transaction. Example: \\\"4\\\" Orgnaization shortcode. |\\n| ResultURL | <code>URL</code> | The path that stores information of a transaction. |\\n| QueueTimeOutURL | <code>URL</code> | The path that stores information of timeout transaction. |\\n| Remarks | <code>string</code> | Comments that are sent along with the transaction. |\\n| Occassion | <code>string</code> | Optional parameter. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-mpesa <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nmpesa API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/mpesa-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mpesa-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-mpesa\\n\\n## 1.0.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- d1f7851: Fixed the title for the consumer\\\\_secret on the configuration schema\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.0 - 02 April 2025\\n\\nNew Mpesa adaptor that allows to make `STK push prompts`,\\n`register listener URLS`, `remit taxes to KRA`, `buy goods and services` and\\nexposes a `generic http helper` for any other actions outside this scope.\\n\"","functions":["buyGoods","checkTransactionStatus","registerUrl","remitTax","request","stkPush"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","description":"The base URL (https://api.safaricom.co.ke)","format":"uri","minLength":1,"examples":["https://api.safaricom.co.ke"]},"short_code":{"title":"Short code","type":"string","description":"This is the organization's shortcode used to identify YOUR organization. Usually a 5 to 6-digit account number","examples":["654321"]},"pass_key":{"title":"Pass key","type":"string","description":"Your app's pass key sent to you via email once you go live","examples":["bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919"]},"consumer_key":{"title":"Consumer key","type":"string","description":"Your app's consumer key sent to you via email once you go live","examples":["GA2PNftcXvv2uC2VdgNjxXyvF8eZ4td6iBsL7N7N2ZFnXzf3"]},"consumer_secret":{"title":"Consumer secret","type":"string","description":"Your app's consumer secret sent to you via email once you go live","examples":["zKjr2j0jjihCtzIwzGtgnV0YgP82jZf1hY9RW6HygntWG6AGuf4tAUe3E5tPtiyA"]}},"type":"object","additionalProperties":true,"required":["short_code","pass_key","consumer_key","consumer_secret"]}},
[
  {
    "id": "buyGoods",
    "longname": "buyGoods",
    "name": "buyGoods",
    "kind": "function",
    "scope": "global",
    "description": "Pay for goods and services directly from your business account to a till number, merchant store number or Merchant HO",
    "params": [
      {
        "type": {
          "names": [
            "BuyGoodsObject"
          ]
        },
        "description": "The object that will be attached to the POST request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request object. Includes headers, error mappings and query params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Pay for goods</caption>\nbuyGoods({\n    \"Initiator\": \"testapi\",\n    \"SecurityCredential\": \"sbMXpuhMX5LzieNiDrx9TgscfaBxxvie0WlBDdGli4MWu4s5gbhYVlBy+T89xHQdoYwcG202KNp403ln2dLFnytPqw==\",\n    \"Amount\": 1,\n    \"PartyA\": 600999,\n    \"PartyB\": 600000,\n    \"AccountReference\": 353353,\n    \"Requester\": 254708374149,\n    \"Remarks\": \"ok\",\n    \"QueueTimeOutURL\": \"https://mydomain.com/b2b/queue/\",\n    \"ResultURL\": \"https://mydomain.com/b2b/result/\"\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 268,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 11,
    "newscope": true,
    "level": 0
  },
  {
    "id": "BuyGoodsObject",
    "longname": "BuyGoodsObject",
    "name": "BuyGoodsObject",
    "kind": "typedef",
    "scope": "global",
    "description": "Buy goods parameter definition",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The M-Pesa API operator username. This user needs Org Business Pay Bill API initiator role on M-Pesa",
        "name": "Initiator"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The encrypted password of the M-Pesa API operator.",
        "name": "SecurityCredential"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The transaction amount.",
        "name": "Amount"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Your shortcode. The shortcode from which money will be deducted.",
        "name": "PartyA"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The account number to be associated with the payment. Up to 13 characters",
        "name": "AccountReference"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Any additional information to be associated with the transaction.",
        "name": "Remarks"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "A URL that will be used to notify your system in case the request times out before processing.",
        "name": "QueueTimeOutURL"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "A URL that will be used to send transaction results after processing.",
        "name": "ResultURL"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 231,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "checkTransactionStatus",
    "longname": "checkTransactionStatus",
    "name": "checkTransactionStatus",
    "kind": "function",
    "scope": "global",
    "description": "Check the status of the transaction",
    "params": [
      {
        "type": {
          "names": [
            "TransactionStatusObject"
          ]
        },
        "description": "The object that will be attached to the POST request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request object. Includes headers, error mappings and query params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Check status of a transaction</caption>\ncheckTransactionStatus({\n    \"Initiator\": \"testapi\",\n    \"SecurityCredential\": \"ctHDk+dN14A22B5GyQQvISSTY3K1tVnCTuQGoG7PsTCadzTkl5wz44Rhpkb0BZDvfRA==\",\n    \"TransactionID\": \"OEI2AK4Q16\",\n    \"PartyA\": 600998,\n    \"IdentifierType\": 4,\n    \"ResultURL\": \"https://mydomain.com/TransactionStatus/result/\",\n    \"QueueTimeOutURL\": \"https://mydomain.com/TransactionStatus/queue/\",\n    \"Remarks\": \"fdfdfdfdf\",\n    \"Occassion\": \"null\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 118,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the DARAJA API server (excluding the body)",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 0
  },
  {
    "id": "registerUrl",
    "longname": "registerUrl",
    "name": "registerUrl",
    "kind": "function",
    "scope": "global",
    "description": "Register a URL that allows receiving payment notifications to your paybill.",
    "params": [
      {
        "type": {
          "names": [
            "RegisterUrlObject"
          ]
        },
        "description": "The object that will be attached to the POST request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request object. Includes headers, error mappings and query params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Register a URL to receive payment notifications</caption>\nregisterUrl({\n    \"ShortCode\": 600426,\n    \"ResponseType\": \"Completed\",\n    \"ConfirmationURL\": \"https://mydomain.com/confirmation\",\n    \"ValidationURL\": \"https://mydomain.com/validation\"\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 168,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "RegisterUrlObject",
    "longname": "RegisterUrlObject",
    "name": "RegisterUrlObject",
    "kind": "typedef",
    "scope": "global",
    "description": "Register URL parameter definition",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "numeric"
          ]
        },
        "description": "Usually, a unique number is tagged to an M-PESA pay bill/till number of the organization.",
        "name": "ShortCode"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "This parameter specifies what is to happen if for any reason the validation URL is not reachable. Sample values: 'Canceled', 'Completed'",
        "name": "ResponseType"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "This is the URL that receives the confirmation request from API upon payment completion.",
        "name": "ConfirmationURL"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "This is the URL that receives the validation request from the API upon payment submission.",
        "name": "ValidationURL"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 142,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "remitTax",
    "longname": "remitTax",
    "name": "remitTax",
    "kind": "function",
    "scope": "global",
    "description": "Remit tax to the Kenya Revenue Authority (KRA).",
    "params": [
      {
        "type": {
          "names": [
            "RemitTaxObject"
          ]
        },
        "description": "The object that will be attached to the POST request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request object. Includes headers, error mappings and query params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Pay tax to KRA</caption>\nremitTax({\n    \"Initiator\": \"testapi\",\n    \"SecurityCredential\": \"Uq1qluCjSYfMF3XEvlpfuatnWwWerwq42fB+mMd8nsKdAVO04DGHhG/s3xO3g7POki9B8i7cSoEkBux4bQrlDLDWJhaTrt1TdbE+ZQ==\",\n    \"Amount\": 1,\n    \"PartyA\": 600995,\n    \"AccountReference\": 353353,\n    \"Remarks\": \"ok\",\n    \"QueueTimeOutURL\": \"https://mydomain.com/b2b/queue/\",\n    \"ResultURL\": \"https://mydomain.com/b2b/result/\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 213,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "RemitTaxObject",
    "longname": "RemitTaxObject",
    "name": "RemitTaxObject",
    "kind": "typedef",
    "scope": "global",
    "description": "Remit tax parameter definition",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The M-Pesa API operator username.",
        "name": "Initiator"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The encrypted password of the M-Pesa API operator.",
        "name": "SecurityCredential"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The transaction amount.",
        "name": "Amount"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "This is your own shortcode from which the money will be deducted.",
        "name": "PartyA"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The payment registration number (PRN) issued by KRA.",
        "name": "AccountReference"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Any additional information to be associated with the transaction.",
        "name": "Remarks"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "A URL that will be used to notify your system in case the request times out before processing.",
        "name": "QueueTimeOutURL"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "A URL that will be used to send transaction results after processing.",
        "name": "ResultURL"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 179,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Register a URL to receive payment notifications</caption>\nrequest(\"POST\", \"/mpesa/c2b/v1/registerurl\", \n {\n   \"ShortCode\": 600426,\n   \"ResponseType\": \"Completed\",\n   \"ConfirmationURL\": \"https://mydomain.com/confirmation\",\n   \"ValidationURL\": \"https://mydomain.com/validation\"\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 304,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 12,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "stkPush",
    "longname": "stkPush",
    "name": "stkPush",
    "kind": "function",
    "scope": "global",
    "description": "Initiate a STK pin prompt to a Safaricom mobile number.",
    "params": [
      {
        "type": {
          "names": [
            "STKPushObject"
          ]
        },
        "description": "The object that will be attached to the POST request body",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request object. Includes headers, error mappings and query params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Initiate STK Push</caption>\nstkPush({\n    \"Amount\": 1,\n    \"PartyA\": 254708374149,\n    \"PartyB\": 174379,\n    \"PhoneNumber\": 254708374149,\n    \"CallBackURL\": \"https://mydomain.com/path\",\n    \"AccountReference\": \"CompanyXLTD\",\n    \"TransactionDesc\": \"Payment of X\"\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 56,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "STKPushObject",
    "longname": "STKPushObject",
    "name": "STKPushObject",
    "kind": "typedef",
    "scope": "global",
    "description": "STKPush request data object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Amount charged.",
        "name": "Amount"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The phone number that receives the STK push prompt. Expected to be a valid Safaricom Number that is M-pesa registered in the format 2547XXXXXXXX",
        "name": "PartyA"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The organization that receives the funds",
        "name": "PartyB"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The mobile number to receive the STK pin prompt",
        "name": "PhoneNumber"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "A valid secure URL that is used to receive notifications from M-Pesa API. It is the endpoint to which the results will be sent by M-Pesa API",
        "name": "CallBackURL"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Along with the business name, this value is also displayed to the customer in the STK pin prompt message. Maximum of 12 characters",
        "name": "AccountReference"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Any additional information/comment that can be sent along with the request from you system.",
        "name": "TransactionDesc"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 23,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "TransactionStatusObject",
    "longname": "TransactionStatusObject",
    "name": "TransactionStatusObject",
    "kind": "typedef",
    "scope": "global",
    "description": "Check transaction status data object.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the initiator initiating the request.",
        "name": "Initiator"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Encrypted credential of the user getting transaction status.",
        "name": "SecurityCredential"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Unique identifier to identify a transaction on Mpesa.",
        "name": "TransactionID"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Organization/MSISDN receiving the transaction.",
        "name": "PartyA"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Type of organization receiving the transaction. Example: \"4\" Orgnaization shortcode.",
        "name": "IdentifierType"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "The path that stores information of a transaction.",
        "name": "ResultURL"
      },
      {
        "type": {
          "names": [
            "URL"
          ]
        },
        "description": "The path that stores information of timeout transaction.",
        "name": "QueueTimeOutURL"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Comments that are sent along with the transaction.",
        "name": "Remarks"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Optional parameter.",
        "name": "Occassion"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 81,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mpesa/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"msgraph","adaptor":"@openfn/language-msgraph","version":"0.7.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(resource, data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getdrive\\\">getDrive(specifier, name, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getfile\\\">getFile(pathOrId, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#getfolder\\\">getFolder(pathOrId, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#uploadfile\\\">uploadFile(resource, data, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#Utils_sheetToBuffer\\\">Utils.sheetToBuffer(rows, options)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(resource, data, callback) ⇒ Operation</code></p>\\n\\nCreate some resource in msgraph\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource | <code>string</code> | The type of entity that will be created |\\n| data | <code>object</code> | The data to create the new resource |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreate(\\\"applications\\\", {\\\"displayName\\\": \\\"My App\\\"})\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, query, callback) ⇒ Operation</code></p>\\n\\nMake a GET request to msgraph resource\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nget('sites/root/lists')\\n```\\n\\n* * *\\n\\n### getDrive\\n\\n<p><code>getDrive(specifier, name, [callback]) ⇒ Operation</code></p>\\n\\nGet a Drive or SharePoint document library. The drive metadata will be written\\nto state.drives, where it can be used by other adaptor functions.\\nPass { id } to get a drive by id or { id, owner } to get default drive for\\nsome parent resource, like a group\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| specifier | <code>Object</code> |  | A definition of the drive to retrieve    - id {string} - The ID of the resource or owner.    - owner {string} - The type of drive owner (e.g. sites, groups). |\\n| name | <code>string</code> |  | The local name of the drive used to write to state.drives, ie, state.drives[name] |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a drive by ID\\n```js\\ngetDrive({ id: \\\"YXzpkoLwR06bxC8tNdg71m\\\" })\\n```\\n**Example:** Get the default drive for a site\\n```js\\ngetDrive({ id: \\\"openfn.sharepoint.com\\\", owner: \\\"sites\\\" })\\n```\\n\\n* * *\\n\\n### getFile\\n\\n<p><code>getFile(pathOrId, options, [callback]) ⇒ Operation</code></p>\\n\\nGet file metadata or file content.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| pathOrId | <code>string</code> |  | A path to a file or file id |\\n| options | <code>object</code> |  | (Optional) Query parameters |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a file by ID\\n```js\\ngetFile('01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW')\\n```\\n**Example:** Get a file for a named drive by id\\n```js\\ngetFile(\\\"01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW\\\",{ driveName: \\\"mydrive\\\"})\\n```\\n\\n* * *\\n\\n### getFolder\\n\\n<p><code>getFolder(pathOrId, options, [callback]) ⇒ Operation</code></p>\\n\\nGet the contents or metadata of a folder.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| pathOrId | <code>string</code> |  | A path to a folder or folder id |\\n| options | <code>object</code> |  | (Optional) Query parameters |\\n| [callback] | <code>function</code> | <code>s &#x3D;&gt; s</code> | (Optional) Callback function |\\n\\n**Example:** Get a folder by ID\\n```js\\ngetFolder('01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3')\\n```\\n**Example:** Get a folder for a named drive by id\\n```js\\ngetFolder(\\\"01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3\\\",{ driveName: \\\"mydrive\\\"})\\n```\\n\\n* * *\\n\\n### uploadFile\\n\\n<p><code>uploadFile(resource, data, callback) ⇒ Operation</code></p>\\n\\nUpload a file to a drive\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resource | <code>Object</code> | Resource Object |\\n| [resource.driveId] | <code>String</code> | Drive Id |\\n| [resource.driveId] | <code>String</code> | Site Id |\\n| [resource.folderId] | <code>String</code> | Parent folder id |\\n| [resource.contentType] | <code>String</code> | Resource content-type |\\n| [resource.onConflict] | <code>String</code> | Specify conflict behavior if file with the same name exists. Can be \\\"rename | fail | replace\\\" |\\n| data | <code>Object</code> | A buffer containing the file. |\\n| callback | <code>function</code> | Optional callback function |\\n\\n**Example:** Upload Excel file to a drive using `driveId` and `parantItemId`\\n```js\\nuploadFile(\\n  state => ({\\n    driveId: state.driveId,\\n    folderId: state.folderId,\\n    fileName: `Tracker.xlsx`,\\n  }),\\n  state => state.buffer\\n);\\n```\\n**Example:** Upload Excel file to a SharePoint drive using `siteId` and `parantItemId`\\n```js\\nuploadFile(\\n  state => ({\\n    siteId: state.siteId,\\n    folderId: state.folderId,\\n    fileName: `Report.xlsx`,\\n  }),\\n  state => state.buffer\\n);\\n```\\n\\n* * *\\n\\n\\n## Utils\\n\\nThese functions belong to the Utils namespace.\\n### Utils.sheetToBuffer {#Utils_sheetToBuffer}\\n\\n<p><code>sheetToBuffer(rows, options) ⇒</code></p>\\n\\nThe function `sheetToBuffer` takes in rows, options and optional callback, It creates a workbook\\nand worksheet using the rows, appends the worksheet to the workbook, and returns the workbook as a\\nbuffer.\\n\\n**Returns**: a buffer containing the Excel file in `state.buffer`.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| rows |  | The `rows` parameter is an array of objects representing the data to be written to the Excel sheet. Each object in the array represents a row in the sheet, and the keys of the object represent the column headers. The values of the object represent the data in each cell of the row. |\\n| options |  | The `options` parameter is an object that contains additional configuration options |\\n| [options.wsName] | <code>String</code> | Worksheet name i.e 32 Characters |\\n| [options.bookType] | <code>String</code> | File format of the exported file, Default is 'xlsx'. See [here](https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats) for the function. It can have the following properties: |\\n\\n**Example:** Create a buffer containing excel file with `xlsx` output format  \\n```js\\nsheetToBuffer('$.data[*]', {\\n wsName: 'Invalid Grant Codes',\\n bookType: 'xlsx',\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-msgraph <img src='assets/sq-256x256.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[Microsoft Graph API](https://learn.microsoft.com/en-us/graph/use-the-api).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/msgraph-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/msgraph-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-msgraph\\n\\n## 0.7.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.7.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.7.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.7.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.7.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.7.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.7.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.7.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.7.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.7.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.7.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.7.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.7.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.7.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.7.0 - 12 July 2024\\n\\n### Minor Changes\\n\\n- 1d2a641: Normalize configuration keys for oauth. `access_token` and\\n  `accessToken` are now both supported (`access_token` is preferred)\\n\\n## 0.6.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.6.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.5.5 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.5.4 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.5.3 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.5.2 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.5.1 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.5.0 - 12 April 2024\\n\\n### Minor Changes\\n\\n- bae5d3b6: Add the cursor() function from common. See the job writing guide for\\n  more information.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.0 - 20 September 2023\\n\\n### Minor Changes\\n\\n- 4cd6587: Add `uploadFile` and `sheetToBuffer` function\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.3.5 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.3.4 - 18 August 2023\\n\\n### Patch Changes\\n\\n- 1c183e9: Fix getFile unit tests\\n\\n## 0.3.3 - 14 August 2023\\n\\n### Patch Changes\\n\\n- b90e8a2: Add support for stream\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.3.2 - 28 July 2023\\n\\n### Patch Changes\\n\\n- 9cc4952: fix url in request util\\n\\n## 0.3.1 - 27 July 2023\\n\\n### Patch Changes\\n\\n- f45f477: Clean-up state before throwing an error\\n\\n## 0.3.0 - 26 July 2023\\n\\n### Minor Changes\\n\\n- 9366e53: - Switch from `nodejs` default `fetch` to `undici` `fetch`\\n  - Added the following `sharepoint` functions\\n    - `getDrive()`\\n    - `getFolder()`\\n    - `getFile()`\\n\\n## 0.2.0 - 14 July 2023\\n\\n### Minor Changes\\n\\n- d33c0ee: export parseCsv from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.1.1 - 30 June 2023\\n\\n### Patch Changes\\n\\n- aad9549: Ensure that standard OAuth2 credentials with snake-cased\\n  \\\"access\\\\_token\\\" keys can be used for OAuth2-reliant adaptors\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.1.0 - 23 June 2023\\n\\n### Minor Changes\\n\\n- 93d82a8: Add msgraph adaptor with get() and create() functions\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\"","functions":["create","get","getDrive","getFile","getFolder","uploadFile"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","$comment":"OAuth2","properties":{"apiVersion":{"title":"API Version","anyOf":[{"type":"string"},{"type":"null"}],"placeholder":"v1.0","description":"Microsoft Graph api version","minLength":1,"examples":["v1.0","beta"]},"access_token":{"title":"Access Token","type":"string","description":"Your Microsoft Graph access token","writeOnly":true,"minLength":1,"examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRl"]}},"type":"object","additionalProperties":true,"required":["access_token"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create some resource in msgraph",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of entity that will be created",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to create the new resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "create(\"applications\", {\"displayName\": \"My App\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 70,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to msgraph resource",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query, Headers and Authentication parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "get('sites/root/lists')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 105,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "getDrive",
    "longname": "getDrive",
    "name": "getDrive",
    "kind": "function",
    "scope": "global",
    "description": "Get a Drive or SharePoint document library. The drive metadata will be written\nto state.drives, where it can be used by other adaptor functions.\nPass { id } to get a drive by id or { id, owner } to get default drive for\nsome parent resource, like a group",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A definition of the drive to retrieve\n   - id {string} - The ID of the resource or owner.\n   - owner {string} - The type of drive owner (e.g. sites, groups).",
        "name": "specifier"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The local name of the drive used to write to state.drives, ie, state.drives[name]",
        "name": "name"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a drive by ID</caption>\ngetDrive({ id: \"YXzpkoLwR06bxC8tNdg71m\" })",
      "<caption>Get the default drive for a site</caption>\ngetDrive({ id: \"openfn.sharepoint.com\", owner: \"sites\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 135,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "getFile",
    "longname": "getFile",
    "name": "getFile",
    "kind": "function",
    "scope": "global",
    "description": "Get file metadata or file content.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A path to a file or file id",
        "name": "pathOrId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Query parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a file by ID</caption>\ngetFile('01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW')",
      "<caption>Get a file for a named drive by id</caption>\ngetFile(\"01LUM6XOGRONYNTZ26DBBJPTN5IFTQPBIW\",{ driveName: \"mydrive\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 228,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getFolder",
    "longname": "getFolder",
    "name": "getFolder",
    "kind": "function",
    "scope": "global",
    "description": "Get the contents or metadata of a folder.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A path to a folder or folder id",
        "name": "pathOrId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Query parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "s => s",
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a folder by ID</caption>\ngetFolder('01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3')",
      "<caption>Get a folder for a named drive by id</caption>\ngetFolder(\"01LUM6XOCKDTZKQC7AVZF2VMHE2I3O6OY3\",{ driveName: \"mydrive\"})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 174,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "sheetToBuffer",
    "longname": "sheetToBuffer",
    "name": "sheetToBuffer",
    "kind": "function",
    "scope": "Utils",
    "description": "The function `sheetToBuffer` takes in rows, options and optional callback, It creates a workbook\nand worksheet using the rows, appends the worksheet to the workbook, and returns the workbook as a\nbuffer.",
    "params": [
      {
        "description": "The `rows` parameter is an array of objects representing the data to be written to the\nExcel sheet. Each object in the array represents a row in the sheet, and the keys of the object\nrepresent the column headers. The values of the object represent the data in each cell of the row.",
        "name": "rows"
      },
      {
        "description": "The `options` parameter is an object that contains additional configuration options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Worksheet name i.e 32 Characters",
        "name": "options.wsName"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "File format of the exported file, Default is 'xlsx'. See {@link https://docs.sheetjs.com/docs/api/write-options/#supported-output-formats here}\nfor the function. It can have the following properties:",
        "name": "options.bookType"
      }
    ],
    "examples": [
      "<caption>Create a buffer containing excel file with `xlsx` output format  </caption>\nsheetToBuffer('$.data[*]', {\n wsName: 'Invalid Grant Codes',\n bookType: 'xlsx',\n});"
    ],
    "returns": [
      {
        "description": "a buffer containing the Excel file in `state.buffer`."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 164,
      "filename": "Utils.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "uploadFile",
    "longname": "uploadFile",
    "name": "uploadFile",
    "kind": "function",
    "scope": "global",
    "description": "Upload a file to a drive",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Resource Object",
        "name": "resource"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Drive Id",
        "name": "resource.driveId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Site Id",
        "name": "resource.driveId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Parent folder id",
        "name": "resource.folderId"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Resource content-type",
        "name": "resource.contentType"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "optional": true,
        "description": "Specify conflict behavior if file with the same name exists. Can be \"rename | fail | replace\"",
        "name": "resource.onConflict"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "A buffer containing the file.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "Optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Upload Excel file to a drive using `driveId` and `parantItemId`</caption>\nuploadFile(\n  state => ({\n    driveId: state.driveId,\n    folderId: state.folderId,\n    fileName: `Tracker.xlsx`,\n  }),\n  state => state.buffer\n);",
      "<caption>Upload Excel file to a SharePoint drive using `siteId` and `parantItemId`</caption>\nuploadFile(\n  state => ({\n    siteId: state.siteId,\n    folderId: state.folderId,\n    fileName: `Report.xlsx`,\n  }),\n  state => state.buffer\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 319,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msgraph/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"mssql","adaptor":"@openfn/language-mssql","version":"5.0.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#describetable\\\">describeTable(tableName, options)</a></dt>\\n<dt>\\n    <a href=\\\"#findvalue\\\">findValue(filter)</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#insertmany\\\">insertMany(table, records, options)</a></dt>\\n<dt>\\n    <a href=\\\"#inserttable\\\">insertTable(tableName, columns, options)</a></dt>\\n<dt>\\n    <a href=\\\"#modifytable\\\">modifyTable(tableName, columns, options)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(params)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, uuid, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertif\\\">upsertIf(logical, table, uuid, record, options)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, uuid, records, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### describeTable\\n\\n<p><code>describeTable(tableName, options) ⇒ Operation</code></p>\\n\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ndescribeTable('clinic_visits')\\n```\\n\\n* * *\\n\\n### findValue\\n\\n<p><code>findValue(filter) ⇒ Operation</code></p>\\n\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**\\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\\n   operator: { first_name: 'like', last_name: '='}\\n })\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(table, record, options) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsert(table, record, {setNull: [\\\"'undefined'\\\", \\\"''\\\"], logValues: false})\\n```\\n\\n* * *\\n\\n### insertMany\\n\\n<p><code>insertMany(table, records, options) ⇒ Operation</code></p>\\n\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsertMany(table, records, { setNull: false, writeSql: true, logValues: false })\\n```\\n\\n* * *\\n\\n### insertTable\\n\\n<p><code>insertTable(tableName, columns, options) ⇒ Operation</code></p>\\n\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### modifyTable\\n\\n<p><code>modifyTable(tableName, columns, options) ⇒ Operation</code></p>\\n\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(params) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Payload data for the message |\\n\\n**Example**\\n```js\\nsql({ query, options })\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, uuid, record, options) ⇒ Operation</code></p>\\n\\nInsert or update a record using SQL MERGE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsert(table, uuid, record, { setNull: \\\"'undefined'\\\", logValues: false})\\nupsert(table, [uuid1, uuid2], record, { setNull: \\\"'undefined'\\\", logValues: false})\\n```\\n\\n* * *\\n\\n### upsertIf\\n\\n<p><code>upsertIf(logical, table, uuid, record, options) ⇒ Operation</code></p>\\n\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'uuid', // a DB column with a unique constraint\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true, logValues: false }\\n)\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, uuid, records, options) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**\\n```js\\nupsertMany(\\n 'users', 'email', records, { logValues: false }\\n)\\nupsertMany(\\n 'users', ['email', 'phone'], records, { logValues: false }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MSSQL\\n\\nLanguage Pack for connecting to Azure SQL Server via OpenFn.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mssql-configuration-schema/)\\ndefinition.\\n\\n### Sample expression\\n\\n## sql query\\n\\n```js\\nsql({\\n  query: `\\n    SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES\\n    WHERE TABLE_TYPE = 'BASE TABLE'\\n    AND TABLE_CATALOG='my-demo'\\n  `,\\n});\\n\\nsql({\\n  query: `SELECT * FROM Household`,\\n  options: {\\n    writeSql: true, // Keep to true to log query (otherwise make it false).\\n    execute: true, // keep to false to not alter DB\\n  },\\n});\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nfn(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert one single record\\n\\n```js\\ninsert(\\n  'SomeDB.dbo.SupplierTest',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Nunya Bihz-Nash',\\n  },\\n  {\\n    // The optional `options` argument allows for global string replacement with\\n    // NULL. This is useful if you want to map an undefined value (e.g., x.name)\\n    // to NULL. It can be a single string or an array of strings.\\n    // It DEFAULTS to \\\"'undefined'\\\", and can be turned off w/ `false`.\\n    setNull: \\\"'undefined'\\\",\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nThis function insert or update depending on the existence of a record in the\\ndatabase.\\n\\n```js\\nupsert(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  {\\n    SupplierNumber: 1,\\n    Name: dataValue('name'),\\n    Address: 'Now I can tell!',\\n  },\\n  // Do NOT replace any instances of 'undefined' in the final SQL statement.\\n  { setNull: false, logValues: true }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users',\\n  'user_id',\\n  {\\n    name: 'Elodie',\\n    id: 7,\\n  },\\n  // Replace any occurence of '' and 'undefined' to NULL\\n  {\\n    setNull: [\\\"''\\\", \\\"'undefined'\\\"],\\n    writeSql: true,\\n    execute: false,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert Many records\\n\\nThis function allows the insert of a set of records inside a table all at once.\\nPass `logQuery` option to `true` to display the query.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\ninsertMany(\\n  'SomeDB.dbo.Supplier',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update Many records\\n\\nThis function inserts or updates many records all at once depending on their\\nexistence in the database.\\n\\n```js\\n// Note that insertMany takes a function which returns an array—this helps\\n// enforce that each item in the array has the same keys.\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  'SupplierNumber',\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\nIn case we need to check on multiple columns before upserting, we can have an\\narray of `uuids`.\\n\\n```js\\nupsertMany(\\n  'SomeDB.dbo.Supplier',\\n  ['SupplierNumber', 'SupplierCode'],\\n  state =>\\n    state.data.supplierArray.map(s => {\\n      return {\\n        SupplierNumber: s.id,\\n        Name: s.name,\\n        Address: s.address,\\n        SupplierCode: s.code,\\n      };\\n    }),\\n  { writeSql: true, execute: false, logValues: true }\\n);\\n```\\n\\n## Describe a table from mssql\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: false, execute: true });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mssql\\n\\n## 5.0.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 5.0.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 5.0.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 5.0.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 5.0.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 5.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 5.0.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- de03bea: Update tedious to 1.18.0. This should have no impact on the adaptor,\\n  but note this version will only run in node versions 18.x and 20+ (this should\\n  be fully compatible with all `@openfn/cli` and `@openfn/ws-worker` releases)\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 5.0.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 5.0.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 5.0.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- d8d84d3: improve logging error message\\n\\n## 5.0.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 5.0.4 - 26 September 2024\\n\\n### Patch Changes\\n\\n- d3ac969: use reject instead of throw\\n\\n## 5.0.3 - 26 September 2024\\n\\n### Patch Changes\\n\\n- 6d38a48: Removed process.exit(1) to prevent workflow crashes on errors\\n\\n## 5.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 5.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 5.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 4.3.4\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 4.3.3 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 4.3.2 - 05 July 2024\\n\\n### Patch Changes\\n\\n- bb5436c: Add title and description for `port` configuration\\n\\n## 4.3.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.2.4 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.2.3 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.2.2 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.2.1 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.2.0 - 16 April 2024\\n\\n### Minor Changes\\n\\n- 2964fc8d: - Add `cursor()` function\\n  - Update `configuration-schema.json`\\n\\n## 4.1.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.1.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.1.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.1.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.1.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.1.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.1.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.1.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.1.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.1.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.0.8 - 31 May 2023\\n\\n### Patch Changes\\n\\n- 57742d1: remove request dependency\\n\\n## 4.0.7 - 20 April 2023\\n\\n### Patch Changes\\n\\n- 04ed74f: update dependencies\\n\\n## 4.0.6 - 06 April 2023\\n\\n### Patch Changes\\n\\n- 43c3669: patch versions\\n\\n## 4.0.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 4.0.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 4.0.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 4.0.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 4.0.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 4.0.0 - 18 November 2022\\n\\n### Major Changes\\n\\n- 3878624: Modify composeNextState function, to flattern all rows into an array\\n  of rows with their corresponding column names\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.1.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.1.0 - 21 October 2022\\n\\n### Minor Changes\\n\\n- c9b7ed7: Add language-mssql in monorepo\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"],"configuration-schema":{"$schema":"https://json-schema.org/draft-07/schema#","properties":{"server":{"title":"Server URL","description":"The database instance server URL or IP address","type":"string","minLength":1,"examples":["something.database.windows.net","192.168.12.10"]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"userName":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Password"]},"port":{"title":"Port","description":"Database instance port","type":"integer","default":1433,"examples":[1432]},"encrypt":{"type":"boolean","default":true,"examples":[false]},"rowCollectionOnRequestCompletion":{"type":"boolean","default":true,"examples":[false]},"trustServerCertificate":{"type":"boolean","default":true,"examples":[false]}},"type":"object","additionalProperties":true,"required":["server","database","userName","password"]}},
[
  {
    "id": "describeTable",
    "longname": "describeTable",
    "name": "describeTable",
    "kind": "function",
    "scope": "global",
    "description": "List the columns of a table in a database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to describe",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "describeTable('clinic_visits')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 650,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 12,
    "newscope": true,
    "level": 0
  },
  {
    "id": "findValue",
    "longname": "findValue",
    "name": "findValue",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a uuid key given a condition",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A filter object with the lookup table, a uuid and the condition",
        "name": "filter"
      }
    ],
    "examples": [
      "findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\n   operator: { first_name: 'like', last_name: '='}\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 257,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insert(table, record, {setNull: [\"'undefined'\", \"''\"], logValues: false})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 317,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "insertMany",
    "longname": "insertMany",
    "name": "insertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert many records, using the keys of the first as the column template",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A function that takes state and returns an array of records",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insertMany(table, records, { setNull: false, writeSql: true, logValues: false })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 362,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "insertTable",
    "longname": "insertTable",
    "name": "insertTable",
    "kind": "function",
    "scope": "global",
    "description": "Create a table in database when given an array of columns and a table_name.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to create",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 688,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "modifyTable",
    "longname": "modifyTable",
    "name": "modifyTable",
    "kind": "function",
    "scope": "global",
    "description": "Alter an existing table in the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to alter",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 747,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "params"
      }
    ],
    "examples": [
      "sql({ query, options })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record using SQL MERGE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsert(table, uuid, record, { setNull: \"'undefined'\", logValues: false})\nupsert(table, [uuid1, uuid2], record, { setNull: \"'undefined'\", logValues: false})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 412,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "upsertIf",
    "longname": "upsertIf",
    "name": "upsertIf",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record based on a logical condition using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "a data to check existing value for.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'uuid', // a DB column with a unique constraint\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true, logValues: false }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 491,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON CONFLICT UPDATE and excluded",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "A function that takes state and returns an array of records",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional options argument",
        "name": "options"
      }
    ],
    "examples": [
      "upsertMany(\n 'users', 'email', records, { logValues: false }\n)\nupsertMany(\n 'users', ['email', 'phone'], records, { logValues: false }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 574,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mssql/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"msupply","adaptor":"@openfn/language-msupply","version":"1.0.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getitemswithstats\\\">getItemsWithStats(variables)</a></dt>\\n<dt>\\n    <a href=\\\"#insertoutboundshipment\\\">insertOutboundShipment(variables)</a></dt>\\n<dt>\\n    <a href=\\\"#query\\\">query(query, variables)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertoutboundshipment\\\">upsertOutboundShipment(variables)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### getItemsWithStats\\n\\n<p><code>getItemsWithStats(variables) ⇒ Operation</code></p>\\n\\nGet the list of items in the catalogue\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| variables | [<code>GetItemsVariables</code>](#getitemsvariables) | GraphQL query variables |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get items in the catalogue\\n```js\\ngetItemsWithStats({\\n       \\\"key\\\": \\\"name\\\",\\n       \\\"storeId\\\": \\\"DFE0F611AD84A0419D36F8FEFAD1894C\\\",\\n})\\n```\\n\\n* * *\\n\\n### insertOutboundShipment\\n\\n<p><code>insertOutboundShipment(variables) ⇒ Operation</code></p>\\n\\nCreate an outbound shipment.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| variables | [<code>InsertOutboundShipmentvariables</code>](#insertoutboundshipmentvariables) | GraphQL query variables |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Create an outbound shipment\\n```js\\ninsertOutboundShipment({\\n       \\\"otherPartyId\\\": \\\"861102F624354F15ABEB48DC207A4C2D\\\",\\n       \\\"storeId\\\": \\\"DFE0F611AD84A0419D36F8FEFAD1894C\\\"\\n})\\n```\\n\\n* * *\\n\\n### query\\n\\n<p><code>query(query, variables) ⇒ Operation</code></p>\\n\\nMake a generic GraphQL request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>string</code> | GraphQl query string |\\n| variables | <code>Object</code> | GraphQl query variables |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nquery(`\\n  query isCentralServer {\\n    isCentralServer\\n  }`\\n)\\n```\\n\\n* * *\\n\\n### upsertOutboundShipment\\n\\n<p><code>upsertOutboundShipment(variables) ⇒ Operation</code></p>\\n\\nUpdate an outbound shipment\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| variables | [<code>UpsertOutboundShipmentvariables</code>](#upsertoutboundshipmentvariables) | GraphQL query variables |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update outbound shipment status to 'PICKED'\\n```js\\nupsertOutboundShipment({\\n     \\\"storeId\\\": \\\"DFE0F611AD84A0419D36F8FEFAD1894C\\\",\\n     \\\"input\\\": {\\n       \\\"updateOutboundShipments\\\": [\\n         {\\n           \\\"id\\\": \\\"01961fce-9ef6-7198-93c1-866395094e48\\\",\\n           \\\"status\\\": \\\"PICKED\\\"\\n          }\\n        ]\\n     }\\n})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### GetItemsVariables\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The unique key of each item in the list |\\n| storeId | <code>string</code> | The msupply store id  the list is being fetched from |\\n\\n\\n* * *\\n\\n### InsertOutboundShipmentvariables\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| otherPartyId | <code>string</code> | The recieving party id |\\n| storeId | <code>string</code> | The id of the store the shipment is being made from |\\n\\n\\n* * *\\n\\n### RequestBody\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| query | <code>string</code> | The GraphQL query string |\\n| variables | <code>object</code> | The variables for that query string |\\n\\n\\n* * *\\n\\n### UpsertOutboundShipmentvariables\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| input | <code>Object</code> | The payload for the target shipment |\\n| storeId | <code>string</code> | The id of the store the shipment is being made from |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-msupply <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nmsupply API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/msupply-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/msupply-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-msupply\\n\\n## 1.0.2 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.1 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.0 - 11 April 2025\\n\\nInitial release.\\n\"","functions":["getItemsWithStats","insertOutboundShipment","query","upsertOutboundShipment"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl"]}},
[
  {
    "id": "GetItemsVariables",
    "longname": "GetItemsVariables",
    "name": "GetItemsVariables",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The unique key of each item in the list",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The msupply store id  the list is being fetched from",
        "name": "storeId"
      }
    ],
    "meta": {
      "lineno": 22,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getItemsWithStats",
    "longname": "getItemsWithStats",
    "name": "getItemsWithStats",
    "kind": "function",
    "scope": "global",
    "description": "Get the list of items in the catalogue",
    "params": [
      {
        "type": {
          "names": [
            "GetItemsVariables"
          ]
        },
        "description": "GraphQL query variables",
        "name": "variables"
      }
    ],
    "examples": [
      "<caption>Get items in the catalogue</caption>\ngetItemsWithStats({\n       \"key\": \"name\",\n       \"storeId\": \"DFE0F611AD84A0419D36F8FEFAD1894C\",\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 55,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 6,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "order": 0
  },
  {
    "id": "insertOutboundShipment",
    "longname": "insertOutboundShipment",
    "name": "insertOutboundShipment",
    "kind": "function",
    "scope": "global",
    "description": "Create an outbound shipment.",
    "params": [
      {
        "type": {
          "names": [
            "InsertOutboundShipmentvariables"
          ]
        },
        "description": "GraphQL query variables",
        "name": "variables"
      }
    ],
    "examples": [
      "<caption>Create an outbound shipment</caption>\ninsertOutboundShipment({\n       \"otherPartyId\": \"861102F624354F15ABEB48DC207A4C2D\",\n       \"storeId\": \"DFE0F611AD84A0419D36F8FEFAD1894C\"\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 84,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "InsertOutboundShipmentvariables",
    "longname": "InsertOutboundShipmentvariables",
    "name": "InsertOutboundShipmentvariables",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The recieving party id",
        "name": "otherPartyId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the store the shipment is being made from",
        "name": "storeId"
      }
    ],
    "meta": {
      "lineno": 29,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Make a generic GraphQL request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "GraphQl query string",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "GraphQl query variables",
        "name": "variables"
      }
    ],
    "examples": [
      "query(`\n  query isCentralServer {\n    isCentralServer\n  }`\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 154,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "RequestBody",
    "longname": "RequestBody",
    "name": "RequestBody",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The GraphQL query string",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The variables for that query string",
        "name": "variables"
      }
    ],
    "meta": {
      "lineno": 16,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "upsertOutboundShipment",
    "longname": "upsertOutboundShipment",
    "name": "upsertOutboundShipment",
    "kind": "function",
    "scope": "global",
    "description": "Update an outbound shipment",
    "params": [
      {
        "type": {
          "names": [
            "UpsertOutboundShipmentvariables"
          ]
        },
        "description": "GraphQL query variables",
        "name": "variables"
      }
    ],
    "examples": [
      "<caption>Update outbound shipment status to 'PICKED'</caption>\nupsertOutboundShipment({\n     \"storeId\": \"DFE0F611AD84A0419D36F8FEFAD1894C\",\n     \"input\": {\n       \"updateOutboundShipments\": [\n         {\n           \"id\": \"01961fce-9ef6-7198-93c1-866395094e48\",\n           \"status\": \"PICKED\"\n          }\n        ]\n     }\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 122,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "UpsertOutboundShipmentvariables",
    "longname": "UpsertOutboundShipmentvariables",
    "name": "UpsertOutboundShipmentvariables",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The payload for the target shipment",
        "name": "input"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the store the shipment is being made from",
        "name": "storeId"
      }
    ],
    "meta": {
      "lineno": 35,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/msupply/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"mtn-momo","adaptor":"@openfn/language-mtn-momo","version":"1.0.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a HTTP request to the [MTN MoMo API ](https://momodeveloper.mtn.com/API-collections#api=collection&operation=bc-authorize)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the HTTP request body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get basic user information\\n```js\\nrequest(\\\"GET\\\", \\\"/collection/v1_0/accountholder/MSISDN/46733123451/basicuserinfo\\\", {}, { headers: { \\\"X-Target-Environment\\\": \\\"sandbox\\\" } });\\n```\\n**Example:** Create an invoice\\n```js\\nrequest(\\\"POST\\\", \\\"/collection/v2_0/invoice\\\", \\n {\\n   \\\"externalId\\\": \\\"996b82e6-d498-4c7c-87ee-7b0654350a2c\\\",\\n   \\\"amount\\\": \\\"100\\\",\\n   \\\"currency\\\": \\\"EUR\\\",\\n   \\\"validityDuration\\\": \\\"3600\\\",\\n   \\\"intendedPayer\\\": {\\n     \\\"partyIdType\\\": \\\"MSISDN\\\",\\n     \\\"partyId\\\": \\\"46733123450\\\"\\n   },\\n   \\\"payee\\\": {\\n     \\\"partyIdType\\\": \\\"MSISDN\\\",\\n     \\\"partyId\\\": \\\"46733123452\\\"\\n   }\\n  \\\"description\\\": \\\"\\\"\\n },\\n {\\n   \\\"headers\\\": {\\n     \\\"X-Target-Environment\\\": \\\"sandbox\\\",\\n     \\\"X-Reference-Id\\\": \\\"ceb46c4f-1523-405b-9d16-dd9ad45e202c\\\"\\n     }\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### HttpState\\n\\nState object\\n\\n**Properties**\\n\\n| Name | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-mtn-momo <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nmtn-momo API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/mtn-momo-docs) for\\nfull technical documentation.\\n\\nVisit the \\n[official MTN MoMo docs site](https://momodeveloper.mtn.com/api-documentation) for more information.\\n\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mtn-momo-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-mtn-momo\\n\\n## 1.0.0 - 12 May 2025\\n\\nInitial release.\\n\"","functions":["request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"","format":"uri","minLength":1,"examples":["https://sandbox.momodeveloper.mtn.com/"]},"subscription_key":{"title":"subscription Key","type":"string","description":"The subscription key is part of the header of all requests sent to the API Manager","examples":["630ee209443d787927b08b3c57902"]},"api_key":{"title":"API Key","type":"string","description":"","writeOnly":true,"examples":["630ee209443d787927b08b3c57902"]},"api_user":{"title":"API User","type":"string","description":"","writeOnly":true,"examples":["630ee209443d787927b08b3c57902"]}},"type":"object","additionalProperties":true,"required":["api_key","api_user","subscription_key","baseUrl"]}},
[
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mtn-momo/src"
    },
    "order": 0,
    "newscope": true,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a HTTP request to the [MTN MoMo API ](https://momodeveloper.mtn.com/API-collections#api=collection&operation=bc-authorize)",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the HTTP request body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get basic user information</caption>\nrequest(\"GET\", \"/collection/v1_0/accountholder/MSISDN/46733123451/basicuserinfo\", {}, { headers: { \"X-Target-Environment\": \"sandbox\" } });",
      "<caption>Create an invoice</caption>\nrequest(\"POST\", \"/collection/v2_0/invoice\", \n {\n   \"externalId\": \"996b82e6-d498-4c7c-87ee-7b0654350a2c\",\n   \"amount\": \"100\",\n   \"currency\": \"EUR\",\n   \"validityDuration\": \"3600\",\n   \"intendedPayer\": {\n     \"partyIdType\": \"MSISDN\",\n     \"partyId\": \"46733123450\"\n   },\n   \"payee\": {\n     \"partyIdType\": \"MSISDN\",\n     \"partyId\": \"46733123452\"\n   }\n  \"description\": \"\"\n },\n {\n   \"headers\": {\n     \"X-Target-Environment\": \"sandbox\",\n     \"X-Reference-Id\": \"ceb46c4f-1523-405b-9d16-dd9ad45e202c\"\n     }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 62,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mtn-momo/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 12,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mtn-momo/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"mysql","adaptor":"@openfn/language-mysql","version":"2.1.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#query\\\">query(options)</a></dt>\\n<dt>\\n    <a href=\\\"#sqlstring\\\">sqlString(queryString)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### insert\\n\\n<p><code>insert(table, fields) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example:** Insert a record into the `users` table\\n```js\\ninsert(\\\"users\\\", { name: (state) => state.data.name });\\n```\\n\\n* * *\\n\\n### query\\n\\n<p><code>query(options) ⇒ Operation</code></p>\\n\\nExecute a SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Payload data for the message |\\n\\n**Example:** Execute a SQL statement\\n```js\\nquery({ sql: 'select * from users;' })\\n```\\n\\n* * *\\n\\n### sqlString\\n\\n<p><code>sqlString(queryString) ⇒ Operation</code></p>\\n\\nExecute a SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| queryString | <code>String</code> | A query string (or function which takes state and returns a string) |\\n\\n**Example:** Execute a SQL statement\\n```js\\nsqlString(state => \\\"select * from items;\\\")\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, fields) ⇒ Operation</code></p>\\n\\nInsert or Update a record if matched\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| fields | <code>object</code> | A fields object |\\n\\n**Example:** Upsert a record\\n```js\\nupsert(\\\"table\\\", { name: (state) => state.data.name });\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, data) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON DUPLICATE KEY\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n\\n**Example:** Upsert multiple records\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language MySQL\\n\\nLanguage Pack for building expressions and operations to run MySQL queries.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/mysql-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/mysql-configuration-schema/)\\ndefinition.\\n\\n## Execute a query\\n\\nExecute an sql query with the node mysql package.\\n\\n```js\\nquery({\\n  sql: state => {\\n    return `select * from ${state.data.table} where id = ?;`;\\n  },\\n  timeout: 4000,\\n  values: ['007'],\\n});\\n```\\n\\n## Execute a sql query\\n\\nThis function takes either a `string` or a `function` that takes states and\\nreturns a string.\\n\\n```js\\nsqlString(state => {\\n  return (\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    state.data.version +\\n    `', ` +\\n    dataValue('form.Choix_tache')(state) +\\n    `)`\\n  );\\n});\\n```\\n\\n## Insert a single record\\n\\nThis function is used to insert a single record in a MySQL database.\\n\\n```js\\ninsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Insert or update a single record\\n\\nThis function is used to insert a single record in a MySQL database or update it\\nif there is a match.\\n\\n```js\\nupsert(\\n  'some_table',\\n  fields(\\n    field('firstname', dataValue('form.patient_firstname')),\\n    field('lastname', dataValue('form.patient_lastname'))\\n  )\\n);\\n```\\n\\n## Upsert many records\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n);\\n```\\n\\nor\\n\\n```js\\nupsertMany('users', state =>\\n  state.data.users.map(user => {\\n    name: user['name'],\\n    email: user['email']\\n  })\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-mysql\\n\\n## 2.1.4 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.1.3 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.1.2 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.1.1 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.1.0 - 10 March 2025\\n\\n### Minor Changes\\n\\n- e87110f: - add `cursor` and `dateFns` from `@openfn/language-common`\\n  - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n  - remove unused import of url\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.5.3\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.5.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.5.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.4.15 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.4.14 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.4.13 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.4.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.4.11 - 24 April 2024\\n\\n### Patch Changes\\n\\n- e9d0dac9: - Change `host` format from `uri` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `user` and `password`\\n\\n## 1.4.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.4.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.4.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.4.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.4.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.4.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.4.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.4.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.4.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.3.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.3.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.3.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.3.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.3.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 9d674c5: Migrate MySQL\\n\"","functions":["insert","query","sqlString","upsert","upsertMany"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The database instance host URL","format":"string","minLength":1,"examples":["some-host-url.compute-1.amazonaws.com"]},"port":{"title":"Port","type":"integer","default":3306,"description":"Database instance port","minLength":1,"examples":[3306]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"Username","type":"string","description":"The username to log in the database","minLength":1,"examples":["admin-demo"]},"password":{"title":"Password","type":"string","description":"The password to log in the database","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","database","user","password"]}},
[
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A fields object",
        "name": "fields"
      }
    ],
    "examples": [
      "<caption>Insert a record into the `users` table</caption>\ninsert(\"users\", { name: (state) => state.data.name });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 67,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Execute a SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the message",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Execute a SQL statement</caption>\nquery({ sql: 'select * from users;' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 253,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "sqlString",
    "longname": "sqlString",
    "name": "sqlString",
    "kind": "function",
    "scope": "global",
    "description": "Execute a SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "A query string (or function which takes state and returns a string)",
        "name": "queryString"
      }
    ],
    "examples": [
      "<caption>Execute a SQL statement</caption>\nsqlString(state => \"select * from items;\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 293,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or Update a record if matched",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A fields object",
        "name": "fields"
      }
    ],
    "examples": [
      "<caption>Upsert a record</caption>\nupsert(\"table\", { name: (state) => state.data.name });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 124,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON DUPLICATE KEY",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of objects or a function that returns an array",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Upsert multiple records</caption>\nupsertMany(\n  'users', // the DB table\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 203,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/mysql/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"nexmo","adaptor":"@openfn/language-nexmo","version":"0.5.16","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSMS(from, toNumber, message)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### sendSMS\\n\\n<p><code>sendSMS(from, toNumber, message) ⇒ Operation</code></p>\\n\\nSends an SMS message to a specific phone number\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| from | <code>String</code> | Name or number the message should be sent from. |\\n| toNumber | <code>String</code> | Destination phone number. |\\n| message | <code>String</code> | Text message |\\n\\n**Example**\\n```js\\nsendSMS(\\\"OpenFn\\\", \\\"phoneNumber\\\", \\\"Hello World!\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language Nexmo\\n\\nLanguage Pack for building expressions and operations to interact with the Nexmo\\nAPI.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/nexmo-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression\\n\\n```js\\nsendSMS('OpenFn', '0123456789', 'HelloWorld!');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-nexmo\\n\\n## 0.5.16 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.5.15 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.5.14 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.5.13 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.5.12 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.5.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.5.10 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.5.9 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.5.8 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.5.7 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.5.6 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.5.5 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.5.4 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.3 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.5.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 0.5.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.9 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 0.4.8 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 0.4.7 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 0.4.6 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 0.4.5 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 0.4.4 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 0.4.3 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.4.2 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.4.1 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.4.0 - 03 August 2023\\n\\n### Minor Changes\\n\\n- 8591b67: - update nexmo to \\\\`v2.9.1\\\\`\\\\`\\n  - expandReferences on sendSMS\\n\\n## 0.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- f0f2495: migrate nexmo\\n\"","functions":["sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiKey":{"title":"API Key","type":"string","description":"Your Nexmo API Key","minLength":1,"examples":["mYaP1K3y"]},"apiSecret":{"title":"API Secret","type":"string","description":"Your Nexmo API Secret key","writeOnly":true,"minLength":1,"examples":["supersecret"]}},"type":"object","additionalProperties":true,"required":["apiKey","apiSecret"]}},
[
  {
    "id": "sendSMS",
    "longname": "sendSMS",
    "name": "sendSMS",
    "kind": "function",
    "scope": "global",
    "description": "Sends an SMS message to a specific phone number",
    "params": [
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Name or number the message should be sent from.",
        "name": "from"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Destination phone number.",
        "name": "toNumber"
      },
      {
        "type": {
          "names": [
            "String"
          ]
        },
        "description": "Text message",
        "name": "message"
      }
    ],
    "examples": [
      "sendSMS(\"OpenFn\", \"phoneNumber\", \"Hello World!\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 45,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/nexmo/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"ocl","adaptor":"@openfn/language-ocl","version":"1.2.15","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getmappings\\\">getMappings(ownerId, repositoryId, [options], callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, query, callback) ⇒ Operation</code></p>\\n\\nGet a resource in OCL\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | <code>object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nget(\\n  \\\"orgs/MSFOCG/collections/lime-demo/HEAD/mappings\\\",\\n  {\\n    page: 1,\\n    exact_match: \\\"off\\\",\\n    limit: 200,\\n    verbose: false,\\n    sortDesc: \\\"_score\\\",\\n  },\\n  (state) => {\\n    // Add state oclMappings\\n    const oclMappings = state.data;\\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\\n  }\\n);\\n```\\n\\n* * *\\n\\n### getMappings\\n\\n<p><code>getMappings(ownerId, repositoryId, [options], callback) ⇒ Operation</code></p>\\n\\nGet a source repository in OCL\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| ownerId | <code>string</code> | An OCL user or organization |\\n| repositoryId | <code>string</code> | An OCL collection id or source id |\\n| [options] | <code>Object</code> | Optional. `options`  which can be passed to  See more [on OCL swagger docs](https://api.openconceptlab.org/swagger/) |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetMappings(\\n  \\\"MSFOCG\\\",\\n  \\\"lime-demo\\\",\\n  { page: 1, exact_match: \\\"off\\\", verbose: false },\\n  (state) => {\\n    // Add state oclMappings\\n    const oclMappings = state.data;\\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\\n  }\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language OCL\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OCL API](http://ocl.github.io/ocl-docs/master/en/developer/html/ocl_developer_manual.html).\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/ocl-configuration-schema/)\\ndefinition.\\n\\n## Mapping source concepts to destination API\\n\\n#### Recieve form data from source application and convert data element keys to destination application.\\n\\n```js\\nmap(  \\\"data\\\": {\\n    \\\"a\\\": 1,\\n    \\\"b\\\": 2},\\n  {users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" }\\n  );\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-ocl\\n\\n## 1.2.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.2.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.2.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.2.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.2.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.2.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.2.9 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.2.8 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.7 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.2.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.2.5 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.2.4 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.2.3 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.2.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.2.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.1.13 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.1.12 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.1.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.1.10 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.1.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.1.8 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.1.7 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.1.6 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.1.5 - 31 August 2023\\n\\n### Patch Changes\\n\\n- 67a09fb: Add `fn` in OCL adaptor\\n\\n## 1.1.4 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.1.3 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.1.2 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.1.1 - 30 June 2023\\n\\n### Patch Changes\\n\\n- 3f3c0c5: update tests\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.1.0 - 26 June 2023\\n\\n### Minor Changes\\n\\n- 29e335d: remove body in get request\\n\\n## 1.0.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.0 - 15 June 2023\\n\\n### Minor Changes\\n\\n- 63232eb: Add `get()` and `getMappings()` function\\n\\n## 0.2.6 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.2.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.2 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.2.1 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.2.0 - 04 November 2022\\n\\n### Minor Changes\\n\\n- 5a06d7f: Migrate OCL, update package export\\n\\n### Patch Changes\\n\\n- cb5d0ed: Updated to @openfn/simple-ast v0.4.1\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\"","functions":["get","getMappings"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"The OCL API URL","default":"https://api.openconceptlab.org/","format":"uri","minLength":1,"examples":["https://api.openconceptlab.org/"]},"username":{"title":"Username","type":"string","description":"The username to log in to OCL","minLength":1,"examples":["usernmame"]},"password":{"title":"Password","type":"string","description":"The password to log in to OCL","writeOnly":true,"minLength":1,"examples":["supersecretpassword"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","password"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get a resource in OCL",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A query object that will limit what resources are retrieved when converted into request params.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "get(\n  \"orgs/MSFOCG/collections/lime-demo/HEAD/mappings\",\n  {\n    page: 1,\n    exact_match: \"off\",\n    limit: 200,\n    verbose: false,\n    sortDesc: \"_score\",\n  },\n  (state) => {\n    // Add state oclMappings\n    const oclMappings = state.data;\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 108,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ocl/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getMappings",
    "longname": "getMappings",
    "name": "getMappings",
    "kind": "function",
    "scope": "global",
    "description": "Get a source repository in OCL",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "An OCL user or organization",
        "name": "ownerId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "An OCL collection id or source id",
        "name": "repositoryId"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. `options`  which can be passed to  See more {@link https://api.openconceptlab.org/swagger/ on OCL swagger docs}",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getMappings(\n  \"MSFOCG\",\n  \"lime-demo\",\n  { page: 1, exact_match: \"off\", verbose: false },\n  (state) => {\n    // Add state oclMappings\n    const oclMappings = state.data;\n    return { ...state, data: {}, references: [], response: {}, oclMappings };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/ocl/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"odk","adaptor":"@openfn/language-odk","version":"3.0.15","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(projectId)</a></dt>\\n<dt>\\n    <a href=\\\"#getsubmissions\\\">getSubmissions(projectId, xmlFormId, query)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get a list of available projects\\n```js\\nget(\\\"v1/projects\\\");\\n```\\n**Example:** Get projects with query parameters\\n```js\\nget(\\\"v1/projects\\\", {\\n query: { datasets: true }\\n});\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(projectId) ⇒ Operation</code></p>\\n\\nFetch all forms for a project.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectId | <code>number</code> | Id of the project |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | array of form data objects |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Fetch all forms for project with id 22\\n```js\\ngetForms(22);\\n```\\n\\n* * *\\n\\n### getSubmissions\\n\\n<p><code>getSubmissions(projectId, xmlFormId, query) ⇒ Operation</code></p>\\n\\nFetch all submissions to a given form.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| projectId | <code>number</code> | Id of the project the form belongs to |\\n| xmlFormId | <code>string</code> | Id of the form to fetch submissions for |\\n| query | <code>string</code> | Query parameters to append to the request, see [https://docs.getodk.org/central-api-odata-endpoints/#data-document](https://docs.getodk.org/central-api-odata-endpoints/#data-document) |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | array of form submission objects |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Get all submissions to a form called 'patient-follow-up'\\n```js\\ngetSubmissions(22, 'patient-follow-up');\\n```\\n**Example:** Filter submissions since a given date\\n```js\\ngetSubmissions(22, 'patient-follow-up', { $filter: \\\"$root/Submissions/__system/submissionDate gt 2020-01-31T23:59:59.999Z\\\" });\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options) ⇒ Operation</code></p>\\n\\nMake a POST request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Options to configure the HTTP request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Create a new project\\n```js\\npost('v1/projects', { name: 'Project Name' });\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request against the ODK server.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request params |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the ODK HTTP server (with the body removed) |\\n| references | an array of all the previous data values |\\n**Example:** Make a POST request to create a new project\\n```js\\nrequest(\\\"POST\\\", 'v1/projects', { name: 'Project Name' });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-odk <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the odk API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/odk-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/odk-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('v1/projects', { name: 'Project Name' });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-odk\\n\\n## 3.0.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.0.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.0.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.0.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.0.11 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 3.0.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 3.0.9 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 3.0.8 - 04 January 2025\\n\\n### Patch Changes\\n\\n- 6c9affd: Fix typo in error message\\n\\n## 3.0.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.0.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 3.0.0 - 02 July 2024\\n\\n### Major Changes\\n\\n- 0b81f06: - `getSubmissions()` now returns submission data (not metadata)\\n  - `getSubmissions()` arguments can be references (functions)\\n  - `getSubmissions()` supports query parameters\\n  - HTTP helper APIs have been slightly streamlined and fixed\\n  - Documentation overhaul\\n  - All callback functions have been removed (use an fn() block instead)\\n\\n## 2.0.0 - 25 June 2024\\n\\n### Major Changes\\n\\n- 9234f83: - configuration-schema: rename `username` to `email`\\n  - Improve logging when authentication fails\\n  - Improve error reporting when requests fail\\n\\n## 1.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.0 - 06 June 2024\\n\\nInitial release for odk adaptor with `get`, `post`, `getForms` and\\n`getSubmissions`\\n\"","functions":["get","getForms","getSubmissions","post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"ODK base URL","format":"uri","minLength":1,"examples":["https://sandbox.getodk.cloud/"]},"email":{"title":"Email","type":"string","description":"Email","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your ODK access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"type":"object","additionalProperties":true,"required":["password","email","baseUrl"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get a list of available projects</caption>\nget(\"v1/projects\");",
      "<caption>Get projects with query parameters</caption>\nget(\"v1/projects\", {\n query: { datasets: true }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 106,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all forms for a project.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Id of the project",
        "name": "projectId"
      }
    ],
    "examples": [
      "<caption>Fetch all forms for project with id 22</caption>\ngetForms(22);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 79,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      },
      {
        "name": "data",
        "description": "array of form data objects",
        "type": null
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "getSubmissions",
    "longname": "getSubmissions",
    "name": "getSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Fetch all submissions to a given form.",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Id of the project the form belongs to",
        "name": "projectId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Id of the form to fetch submissions for",
        "name": "xmlFormId"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Query parameters to append to the request, see {@link https://docs.getodk.org/central-api-odata-endpoints/#data-document}",
        "name": "query"
      }
    ],
    "examples": [
      "<caption>Get all submissions to a form called 'patient-follow-up'</caption>\ngetSubmissions(22, 'patient-follow-up');",
      "<caption>Filter submissions since a given date</caption>\ngetSubmissions(22, 'patient-follow-up', { $filter: \"$root/Submissions/__system/submissionDate gt 2020-01-31T23:59:59.999Z\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 42,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      },
      {
        "name": "data",
        "description": "array of form submission objects",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "ODKHttpState",
    "longname": "ODKHttpState",
    "name": "ODKHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the ODK HTTP server (with the body removed)",
        "name": "response"
      },
      {
        "description": "an array of all the previous data values",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Options to configure the HTTP request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Create a new project</caption>\npost('v1/projects', { name: 'Project Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 122,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request against the ODK server.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request params",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Make a POST request to create a new project</caption>\nrequest(\"POST\", 'v1/projects', { name: 'Project Name' });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 139,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "ODKHttpState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 17,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odk/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"odoo","adaptor":"@openfn/language-odoo","version":"1.0.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(model, data, options)</a></dt>\\n<dt>\\n    <a href=\\\"#deleterecord\\\">deleteRecord(model, recordId)</a></dt>\\n<dt>\\n    <a href=\\\"#read\\\">read(model, recordId, fields)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(model, recordId, data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(model, data, options) ⇒ Operation</code></p>\\n\\nCreate a record in Odoo.\\nYou can pass an external ID to the options object to create a record with a specific ID.\\nYou can also pass a downloadNewRecord option to download the whole created resource in the response.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | The specific record model i.e. \\\"res.partner\\\" |\\n| data | <code>object</code> | The data to be created in JSON. |\\n| options | [<code>CreateOptions</code>](#createoptions) | Options to send to the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Odoo server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:**  Create a partner record with an external Id \\n```js\\ncreate('res.partner', { name: 'Kool Keith' }, { externalId: 23 });\\n```\\n**Example:**  Create a partner record and download the whole record in the response \\n```js\\ncreate('res.partner', { name: 'Kool Keith' }, { downloadNewRecord: true });\\n```\\n\\n* * *\\n\\n### deleteRecord\\n\\n<p><code>deleteRecord(model, recordId) ⇒ Operation</code></p>\\n\\nDelete a record from Odoo\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | The specific record model i.e. \\\"res.partner\\\" |\\n| recordId | <code>number</code> | The specific recordId to be deleted. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Odoo server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example**\\n```js\\ndeleteRecord(\\\"res.partner\\\", 54 );\\n```\\n\\n* * *\\n\\n### read\\n\\n<p><code>read(model, recordId, fields) ⇒ Operation</code></p>\\n\\nGet a record from Odoo. Returns all fields unless a field list is provided as a third argument\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | The specific record model from i.e. \\\"res.partner\\\" |\\n| recordId | <code>number</code> | An array of record IDs to read. |\\n| fields | <code>Array.&lt;string&gt;</code> | An optional array of field strings to read from the record. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Odoo server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Download records with select fields\\n```js\\nread(\\\"res.partner\\\", [1] , ['name']);\\n```\\n**Example:** Download a single record with all fields\\n```js\\nread(\\\"res.partner\\\", $.recordIds);\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(model, recordId, data) ⇒ Operation</code></p>\\n\\nUpdate a record in Odoo\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| model | <code>string</code> | The specific record model i.e. \\\"res.partner\\\" |\\n| recordId | <code>number</code> | The specific recordId to be updated. |\\n| data | <code>object</code> | The data to be updated in JSON. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Odoo server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example**\\n```js\\nupdate(\\\"res.partner\\\", 54 , {name: 'Jane Doe'});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### CreateOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| externalId | <code>number</code> | An optional id to be used in the request |\\n| downloadNewRecord | <code>boolean</code> | An option defaulted to `false` incase a user intends to receive the whole created resource in the response. The collective response will be written in `state.data`. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-odoo <img src='assets/sq-256x256.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the odoo \\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/odoo-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/odoo-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `create` function\\n\\n```js\\ncreate(\\\"res.partner\\\", { name: \\\"James Kelvin\\\" }, '123');\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-odoo\\n\\n## 1.0.6 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.5 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.4 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.3 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.2 - 12 March 2025\\n\\n### Patch Changes\\n\\n- cde1ead: Add a `downloadNewRecord: true` option to `create` to enable\\n  downloading of the whole record in the response.\\n\\n  ```js\\n  create('res.partner', { name: 'Kool Keith' }, { downloadNewRecord: true });\\n  fn(state => {\\n    const record = state.data; // whole record is here\\n    return state;\\n  });\\n  ```\\n\\n## 1.0.1 - 24 February 2025\\n\\n### Patch Changes\\n\\n- 2f58a71: Default `create()` options to `{}` to ensure that the options\\n  argument is optional.\\n- e26fbd5: Simplified logging across the adaptor without displaying user data\\n- 2db9f8d: Update the third argument in `read()` examples and documentation to\\n  explicitly indicate that it accepts an array of strings.\\n\\n## 1.0.0 - 18 February 2025\\n\\nInitial release.\\n\"","functions":["create","deleteRecord","read","update"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"default":"http://localhost","examples":["https://dev.newlogic-demo.com"]},"username":{"title":"Username","type":"string","description":"Username","default":"admin","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","default":"admin","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"database":{"title":"Database Name","type":"string","default":"devel","description":"Database Name","examples":["devel"]}},"type":"object","additionalProperties":true,"required":["password","username","database","baseUrl"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a record in Odoo.\nYou can pass an external ID to the options object to create a record with a specific ID.\nYou can also pass a downloadNewRecord option to download the whole created resource in the response.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The specific record model i.e. \"res.partner\"",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to be created in JSON.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "CreateOptions"
          ]
        },
        "description": "Options to send to the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption> Create a partner record with an external Id </caption>\ncreate('res.partner', { name: 'Kool Keith' }, { externalId: 23 });",
      "<caption> Create a partner record and download the whole record in the response </caption>\ncreate('res.partner', { name: 'Kool Keith' }, { downloadNewRecord: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 94,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OdooState"
      }
    ],
    "order": 4,
    "newscope": true,
    "level": 0
  },
  {
    "id": "CreateOptions",
    "longname": "CreateOptions",
    "name": "CreateOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "An optional id to be used in the request",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "An option defaulted to `false` incase a user intends to receive the whole created resource in the response. The collective response will be written in `state.data`.",
        "name": "downloadNewRecord"
      }
    ],
    "meta": {
      "lineno": 20,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "deleteRecord",
    "longname": "deleteRecord",
    "name": "deleteRecord",
    "kind": "function",
    "scope": "global",
    "description": "Delete a record from Odoo",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The specific record model i.e. \"res.partner\"",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The specific recordId to be deleted.",
        "name": "recordId"
      }
    ],
    "examples": [
      "deleteRecord(\"res.partner\", 54 );"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 203,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OdooState"
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "OdooState",
    "longname": "OdooState",
    "name": "OdooState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Odoo server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 11,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "order": 0
  },
  {
    "id": "read",
    "longname": "read",
    "name": "read",
    "kind": "function",
    "scope": "global",
    "description": "Get a record from Odoo. Returns all fields unless a field list is provided as a third argument",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The specific record model from i.e. \"res.partner\"",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "An array of record IDs to read.",
        "name": "recordId"
      },
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "An optional array of field strings to read from the record.",
        "name": "fields"
      }
    ],
    "examples": [
      "<caption>Download records with select fields</caption>\nread(\"res.partner\", [1] , ['name']);",
      "<caption>Download a single record with all fields</caption>\nread(\"res.partner\", $.recordIds);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 143,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OdooState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update a record in Odoo",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The specific record model i.e. \"res.partner\"",
        "name": "model"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The specific recordId to be updated.",
        "name": "recordId"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The data to be updated in JSON.",
        "name": "data"
      }
    ],
    "examples": [
      "update(\"res.partner\", 54 , {name: 'Jane Doe'});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 173,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/odoo/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OdooState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openboxes","adaptor":"@openfn/language-openboxes","version":"1.0.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get products\\n```js\\nget(\\\"products\\\", { query: { max: 10 }});\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options) ⇒ Operation</code></p>\\n\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\npost(\\\"products\\\", \\n   {\\n      \\\"id\\\": \\\"ff80818163e2de8d0163eba1b1e90002\\\",\\n      \\\"productCode\\\": null,\\n      \\\"name\\\": \\\"New product\\\",\\n      \\\"category\\\": {\\n          \\\"id\\\": \\\"ff80818163e2de8d0163eb93c5a00001\\\",\\n          \\\"name\\\": \\\"New category\\\"\\n        },\\n      \\\"description\\\": null,\\n      \\\"dateCreated\\\": \\\"2018-06-10T21:37:12Z\\\",\\n      \\\"lastUpdated\\\": \\\"2018-06-10T21:37:12Z\\\"\\n  });\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update stock movement\\n```js\\nrequest(\\\"POST\\\", \\\"/stockMovements/ff808181642fc9c101642fcccc420004\\\", \\n {\\n     body: {\\n        \\\"name\\\": \\\"new stock movement\\\",\\n        \\\"description\\\": \\\"new stock movement\\\",\\n        \\\"origin.id\\\": \\\"1\\\",\\n        \\\"destination.id\\\": \\\"2\\\",\\n        \\\"requestedBy.id\\\": \\\"1\\\",\\n        \\\"dateRequested\\\": \\\"06/23/2018\\\"\\n      }\\n  });\\n  \\n```\\n**Example:** Update a product\\n```js\\nrequest('POST', '/products/ff808181812576850182aee36930040b', { body: { name: 'Coffee', description: 'Arabica coffee from the highlands of Ethiopia' } });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-openboxes <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nopenboxes API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/openboxes-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openboxes-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-openboxes\\n\\n## 1.0.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.0 - 24 March 2025\\n\\nA new OpenBoxes adaptor. Has `get` and `post` functionality and a generic http\\nfunction for anything outside that scope.\\n\"","functions":["get","post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://demo.openboxes.com/openboxes/api"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get products</caption>\nget(\"products\", { query: { max: 10 }});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 34,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openboxes/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openboxes/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "post(\"products\", \n   {\n      \"id\": \"ff80818163e2de8d0163eba1b1e90002\",\n      \"productCode\": null,\n      \"name\": \"New product\",\n      \"category\": {\n          \"id\": \"ff80818163e2de8d0163eb93c5a00001\",\n          \"name\": \"New category\"\n        },\n      \"description\": null,\n      \"dateCreated\": \"2018-06-10T21:37:12Z\",\n      \"lastUpdated\": \"2018-06-10T21:37:12Z\"\n  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 65,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openboxes/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Update stock movement</caption>\nrequest(\"POST\", \"/stockMovements/ff808181642fc9c101642fcccc420004\", \n {\n     body: {\n        \"name\": \"new stock movement\",\n        \"description\": \"new stock movement\",\n        \"origin.id\": \"1\",\n        \"destination.id\": \"2\",\n        \"requestedBy.id\": \"1\",\n        \"dateRequested\": \"06/23/2018\"\n      }\n  });\n  ",
      "<caption>Update a product</caption>\nrequest('POST', '/products/ff808181812576850182aee36930040b', { body: { name: 'Coffee', description: 'Arabica coffee from the highlands of Ethiopia' } });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openboxes/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openboxes/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openfn","adaptor":"@openfn/language-openfn","version":"2.0.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#request\\\">request(options, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### request\\n\\n<p><code>request(options, callback) ⇒ Operation</code></p>\\n\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nrequest({method: 'get', path: '/jobs/});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language OpenFn\\n\\nAdaptor for building expressions and operations to interact with the OpenFn v1\\nAPI.\\n\\n## Documentation\\n\\n## request\\n\\n```js\\nrequest({\\n  method: 'get',\\n  path: 'jobs',\\n  params: {\\n    project_id: 490,\\n  },\\n});\\nrequest(\\n  {\\n    method: 'post',\\n    path: 'jobs',\\n    data: {\\n      trigger_id: 1,\\n      expression: 'steps()',\\n    },\\n  },\\n  state => {\\n    console.log('cool callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openfn-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openfn\\n\\n## 2.0.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.4.3\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.4.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.4.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.4.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.3.14 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.3.13 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.3.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.3.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.3.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.3.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.3.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.3.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.3.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.3.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.3.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.3.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.3.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.2.6 - 10 June 2023\\n\\n### Patch Changes\\n\\n- 779596f: Use native fetch (undici) in template and add icons in openfn\\n\\n## 1.2.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.2.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.2.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- be9d3c6: Migrate OpenFn\\n\"","functions":["request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","description":"The OpenFn host url","format":"uri","default":"https://www.openfn.org","minLength":1,"examples":["https://www.openfn.org"]},"projectId":{"title":"Project ID","type":"string","description":"Your OpenFn project ID","minLength":1,"examples":["some-id"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenFn","minLength":1,"examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenFn","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["host","username","password"]}},
[
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Body, Query, Headers and Authentication parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "request({method: 'get', path: '/jobs/});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openfn/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openhim","adaptor":"@openfn/language-openhim","version":"0.3.13","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language OpenHIM\\n\\nLanguage Pack for building expressions and operations for working with the\\nopenhim API.\\n\\n## [HL7 FHIR Standard](https://www.hl7.org/fhir/patient-example.json.html)\\n\\n```json\\n{\\n  \\\"resourceType\\\": \\\"Patient\\\",\\n  \\\"id\\\": \\\"example\\\",\\n  \\\"text\\\": {\\n    \\\"status\\\": \\\"generated\\\",\\n    \\\"div\\\": \\\"<div>\\\\n      \\\\n      <table>\\\\n        \\\\n        <tbody>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Name</td>\\\\n            \\\\n            <td>Peter James \\\\n              <b>Chalmers</b> (&quot;Jim&quot;)\\\\n            </td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Address</td>\\\\n            \\\\n            <td>534 Erewhon, Pleasantville, Vic, 3999</td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Contacts</td>\\\\n            \\\\n            <td>Home: unknown. Work: (03) 5555 6473</td>\\\\n          \\\\n          </tr>\\\\n          \\\\n          <tr>\\\\n            \\\\n            <td>Id</td>\\\\n            \\\\n            <td>MRN: 12345 (Acme Healthcare)</td>\\\\n          \\\\n          </tr>\\\\n        \\\\n        </tbody>\\\\n      \\\\n      </table>    \\\\n    \\\\n    </div>\\\"\\n  },\\n  \\\"identifier\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   MRN assigned by ACME healthcare on 6-May 2001   \\\"],\\n      \\\"use\\\": \\\"usual\\\",\\n      \\\"type\\\": {\\n        \\\"coding\\\": [\\n          {\\n            \\\"system\\\": \\\"http://hl7.org/fhir/v2/0203\\\",\\n            \\\"code\\\": \\\"MR\\\"\\n          }\\n        ]\\n      },\\n      \\\"system\\\": \\\"urn:oid:1.2.36.146.595.217.0.1\\\",\\n      \\\"value\\\": \\\"12345\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"2001-05-06\\\"\\n      },\\n      \\\"assigner\\\": {\\n        \\\"display\\\": \\\"Acme Healthcare\\\"\\n      }\\n    }\\n  ],\\n  \\\"active\\\": true,\\n  \\\"name\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   Peter James Chalmers, but called \\\\\\\"Jim\\\\\\\"   \\\"],\\n      \\\"use\\\": \\\"official\\\",\\n      \\\"family\\\": [\\\"Chalmers\\\"],\\n      \\\"given\\\": [\\\"Peter\\\", \\\"James\\\"]\\n    },\\n    {\\n      \\\"use\\\": \\\"usual\\\",\\n      \\\"given\\\": [\\\"Jim\\\"]\\n    }\\n  ],\\n  \\\"telecom\\\": [\\n    {\\n      \\\"fhir_comments\\\": [\\\"   home communication details aren't known   \\\"],\\n      \\\"use\\\": \\\"home\\\"\\n    },\\n    {\\n      \\\"system\\\": \\\"phone\\\",\\n      \\\"value\\\": \\\"(03) 5555 6473\\\",\\n      \\\"use\\\": \\\"work\\\"\\n    }\\n  ],\\n  \\\"gender\\\": \\\"male\\\",\\n  \\\"_gender\\\": {\\n    \\\"fhir_comments\\\": [\\\"   use FHIR code system for male / female   \\\"]\\n  },\\n  \\\"birthDate\\\": \\\"1974-12-25\\\",\\n  \\\"_birthDate\\\": {\\n    \\\"extension\\\": [\\n      {\\n        \\\"url\\\": \\\"http://hl7.org/fhir/StructureDefinition/patient-birthTime\\\",\\n        \\\"valueDateTime\\\": \\\"1974-12-25T14:35:45-05:00\\\"\\n      }\\n    ]\\n  },\\n  \\\"deceasedBoolean\\\": false,\\n  \\\"address\\\": [\\n    {\\n      \\\"use\\\": \\\"home\\\",\\n      \\\"type\\\": \\\"both\\\",\\n      \\\"line\\\": [\\\"534 Erewhon St\\\"],\\n      \\\"city\\\": \\\"PleasantVille\\\",\\n      \\\"district\\\": \\\"Rainbow\\\",\\n      \\\"state\\\": \\\"Vic\\\",\\n      \\\"postalCode\\\": \\\"3999\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"1974-12-25\\\"\\n      }\\n    }\\n  ],\\n  \\\"contact\\\": [\\n    {\\n      \\\"relationship\\\": [\\n        {\\n          \\\"coding\\\": [\\n            {\\n              \\\"system\\\": \\\"http://hl7.org/fhir/patient-contact-relationship\\\",\\n              \\\"code\\\": \\\"partner\\\"\\n            }\\n          ]\\n        }\\n      ],\\n      \\\"name\\\": {\\n        \\\"family\\\": [\\\"du\\\", \\\"MarchÃ©\\\"],\\n        \\\"_family\\\": [\\n          {\\n            \\\"extension\\\": [\\n              {\\n                \\\"fhir_comments\\\": [\\n                  \\\"   the \\\\\\\"du\\\\\\\" part is a family name prefix (VV in iso 21090)   \\\"\\n                ],\\n                \\\"url\\\": \\\"http://hl7.org/fhir/StructureDefinition/iso21090-EN-qualifier\\\",\\n                \\\"valueCode\\\": \\\"VV\\\"\\n              }\\n            ]\\n          },\\n          null\\n        ],\\n        \\\"given\\\": [\\\"BÃ©nÃ©dicte\\\"]\\n      },\\n      \\\"telecom\\\": [\\n        {\\n          \\\"system\\\": \\\"phone\\\",\\n          \\\"value\\\": \\\"+33 (237) 998327\\\"\\n        }\\n      ],\\n      \\\"gender\\\": \\\"female\\\",\\n      \\\"period\\\": {\\n        \\\"start\\\": \\\"2012\\\",\\n        \\\"_start\\\": {\\n          \\\"fhir_comments\\\": [\\\"   The contact relationship started in 2012   \\\"]\\n        }\\n      }\\n    }\\n  ],\\n  \\\"managingOrganization\\\": {\\n    \\\"reference\\\": \\\"Organization/1\\\"\\n  }\\n}\\n```\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openhim-configuration-schema/)\\ndefinition.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openhim\\n\\n## 0.3.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.3.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.3.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.3.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.3.9 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.3.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.3.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.3.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- cb9b3c5: Security update\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.3.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.1.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 1fd9b3b: Migrate OpenHIM\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n- e81561f: Updated ast and package.json\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"apiUrl":{"title":"API URL","type":"string","description":"The OpenHIM API url","format":"uri","minLength":1,"examples":["http://openhim.com/api"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenHIM","minLength":1,"examples":["admin@openhim.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenHIM","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]}},"type":"object","additionalProperties":true,"required":["apiUrl"]}},
[
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openimis","adaptor":"@openfn/language-openimis","version":"2.0.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getfhir\\\">getFHIR(path, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getFHIR\\n\\n<p><code>getFHIR(path, params, callback) ⇒ Operation</code></p>\\n\\nGet FHIR resources from OpenIMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ngetFHIR(\\\"Patient\\\")\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-template\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the \\\\_\\\\_\\\\_\\\\_\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/template-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/template-configuration-schema/)\\ndefinition.\\n\\n#### sample expression using operation\\n\\n```js\\npost({\\n  \\\"url\\\": \\\"api/v1/forms/data/wide/json/formId\\\",\\n  \\\"body\\\": {\\\"a\\\":1}\\n  \\\"headers\\\": {}\\n})\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openimis\\n\\n## 2.0.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.9 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.3 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.2 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.1 - 17 May 2024\\n\\n### Patch Changes\\n\\n- 6c588212: Fix configuration-schema and add baseUrl in required\\n\\n## 1.0.0 - 09 May 2024\\n\\nInitial release.\\n\\nIncludes a `getFHIR()` function and authorisation.\\n\"","functions":["getFHIR"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://demo.openimis.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["baseUrl","username","password"]}},
[
  {
    "id": "getFHIR",
    "longname": "getFHIR",
    "name": "getFHIR",
    "kind": "function",
    "scope": "global",
    "description": "Get FHIR resources from OpenIMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getFHIR(\"Patient\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 84,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openimis/src"
    },
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openlmis","adaptor":"@openfn/language-openlmis","version":"1.0.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, body, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options, [callback]) ⇒ Operation</code></p>\\n\\nSend a GET request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all supplyLines\\n```js\\nget(\\\"/supplyLines\\\");\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, [callback]) ⇒ Operation</code></p>\\n\\nSend a POST request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Creates new program\\n```js\\npost(\\\"/programs\\\", { name: \\\"Bukayo\\\", code: \\\"abc\\\" });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, body, [callback]) ⇒ Operation</code></p>\\n\\nSend a PUT request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the PUT body |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Update existing program\\n```js\\nput(\\\"/programs/123\\\", { name: \\\"DigTalent\\\", code: \\\"123\\\" });\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options, [callback]) ⇒ Operation</code></p>\\n\\nSend a HTTP request to OpenLMIS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource (relative to the base URL defined in configuration) |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"POST\\\", \\\"/programs\\\", { name: \\\"WSH\\\", code: \\\"123\\\" });\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> | body data to append to the request. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-openlmis <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[openLMIS](https://github.com/OpenLMISf) API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/openlmis-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openlmis-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-openlmis\\n\\n## 1.0.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.0.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.0.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.0.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.0.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.0.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.0.4 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.0.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.0.2 - 01 August 2024\\n\\n### Patch Changes\\n\\n- 940996b: Use common helper code to handle invalid absolute URLs\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.0.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.0.0 - 18 July 2024\\n\\nAdd generic helpers. `request()`, `post()`, `get()` and `put()`\\n\"","functions":["get","post","put","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (https://test.openlmis.org)","format":"uri","minLength":1,"examples":["https://test.openlmis.org"]},"username":{"title":"Username","type":"string","description":"Username","examples":["administrator"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"access_token":{"title":"Access Token","type":"string","description":"Your OpenLMIS API access token","writeOnly":true,"minLength":1,"examples":["4739f6c9-3b81-4176-98a1-bf001c8416ea"]},"clientId":{"title":"Client ID","type":"string","description":"Your user based client id","writeOnly":true,"minLength":1,"default":"user-client"},"clientSecret":{"title":"Client Secret Token","type":"string","description":"Your user based client secret","writeOnly":true,"minLength":1,"default":"changeme"}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl","clientId","clientSecret"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Send a GET request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get all supplyLines</caption>\nget(\"/supplyLines\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 50,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "OpenLMISState",
    "longname": "OpenLMISState",
    "name": "OpenLMISState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Send a POST request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Creates new program</caption>\npost(\"/programs\", { name: \"Bukayo\", code: \"abc\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 66,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Send a PUT request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the PUT body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update existing program</caption>\nput(\"/programs/123\", { name: \"DigTalent\", code: \"123\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 82,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Send a HTTP request to OpenLMIS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (relative to the base URL defined in configuration)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"POST\", \"/programs\", { name: \"WSH\", code: \"123\" });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 100,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "OpenLMISState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 15,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openlmis/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"openmrs","adaptor":"@openfn/language-openmrs","version":"5.0.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#create\\\">create(path, data)</a></dt>\\n<dt>\\n    <a href=\\\"#destroy\\\">destroy(path, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(path, data)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(path, data, params)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_delete\\\">http.delete(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(method, path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#fhir_get\\\">fhir.get(path, query, [callback])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### create\\n\\n<p><code>create(path, data) ⇒ Operation</code></p>\\n\\nCreate a resource. For a list of valid resources, see [OpenMRS Docs](https://rest.openmrs.org/)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (excluding `/ws/rest/v1/`) |\\n| data | <code>object</code> | Resource definition |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The newly created resource, as returned by OpenMRS |\\n**Example:** Create a person (<a href=\\\"https://rest.openmrs.org/#create-a-person\\\">see OpenMRS API</a>)\\n```js\\ncreate(\\\"person\\\", {\\n  names: [\\n    {\\n      givenName: \\\"Mohit\\\",\\n      familyName: \\\"Kumar\\\",\\n    },\\n  ],\\n  gender: \\\"M\\\",\\n  birthdate: \\\"1997-09-02\\\",\\n  addresses: [\\n    {\\n      address1: \\\"30, Vivekananda Layout, Munnekolal,Marathahalli\\\",\\n      cityVillage: \\\"Bengaluru\\\",\\n      country: \\\"India\\\",\\n      postalCode: \\\"560037\\\",\\n    },\\n  ],\\n});\\n```\\n**Example:** Create an encounter (<a href=\\\"https://rest.openmrs.org/#create-an-encounter\\\">see OpenMRS API</a>)\\n```js\\ncreate(\\\"encounter\\\", {\\n  encounterDatetime: '2023-05-25T06:08:25.000+0000',\\n  patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\\n  encounterType: 'dd528487-82a5-4082-9c72-ed246bd49591',\\n  location: 'ba685651-ed3b-4e63-9b35-78893060758a',\\n  encounterProviders: [],\\n  visit: {\\n    patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\\n    visitType: '7b0f5697-27e3-40c4-8bae-f4049abfb4ed',\\n    startDatetime: '2023-05-25T06:08:25.000+0000',\\n    stopDatetime: '2023-05-25T06:09:25.000+0000',\\n  },\\n})\\n```\\n**Example:** Create a patient (<a href=\\\"https://rest.openmrs.org/#create-a-patient\\\">see OpenMRS API</a>)\\n```js\\ncreate(\\\"patient\\\", {\\n  identifiers: [\\n    {\\n      identifier: '4023287',\\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\\n      preferred: true,\\n    },\\n  ],\\n  person: {\\n    gender: 'M',\\n    age: 42,\\n    birthdate: '1970-01-01T00:00:00.000+0100',\\n    birthdateEstimated: false,\\n    names: [\\n      {\\n        givenName: 'Doe',\\n        familyName: 'John',\\n      },\\n    ],\\n  },\\n})\\n  \\n```\\n**Example:** Create a patientIdentifier subresource (<a href=\\\"https://rest.openmrs.org/#create-a-patientidentifier-sub-resource-with-properties\\\">see OpenMRS API</a>)\\n```js\\ncreate(\\\"patient/b52ec6f9-0e26-424c-a4a1-c64f9d571eb3/identifier\\\", { \\n \\\"identifier\\\" : \\\"111:CLINIC1\\\",\\n \\\"identifierType\\\" : \\\"a5d38e09-efcb-4d91-a526-50ce1ba5011a\\\",\\n \\\"location\\\" : \\\"8d6c993e-c2cc-11de-8d13-0010c6dffd0f\\\",\\n \\\"preferred\\\" : true\\n})\\n}\\n```\\n\\n* * *\\n\\n### destroy\\n\\n<p><code>destroy(path, [options]) ⇒ Operation</code></p>\\n\\nDelete a resource. Must include a UUID in the path.\\nThrows an error if the resource does not exist.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to resource (excluding `/ws/rest/v1/`) |\\n| [options] | <code>object</code> | <code>{}</code> |  |\\n| [options.purge] | <code>object</code> | <code>false</code> | The resource will be voided/retired unless true |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response from OpenMRS |\\n**Example:** Void a patient\\n```js\\ndestroy(\\\"patient/12346\\\");\\n```\\n**Example:** Purge a patient\\n```js\\ndestroy(\\\"patient/12346\\\", {\\n  purge: true\\n});\\n```\\n\\n* * *\\n\\n### get\\n\\n<p><code>get(path, [options]) ⇒ Operation</code></p>\\n\\nFetch resources from OpenMRS. Use this to fetch a single resource,\\nor to search a list.\\n\\nOptions will be appended as query parameters to the request URL,\\nrefer to [OpenMRS Docs](https://rest.openmrs.org/) for details.\\n\\nPagination is handled automatically by default (maximum 10k items). Set `max`\\nto paginate with a higher limit, or pass `limit` to force a single request, as\\nper the OpenMRS Rest API.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to resource (excluding `/ws/rest/v1/`) |\\n| [options] | [<code>GetOptions</code>](#getoptions) | <code>{}</code> | Query parameters and other options for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | An array of result objects |\\n**Example:** List all concepts (up to a maximum of 10k items, with pagination)\\n```js\\nget(\\\"concept\\\")\\n```\\n**Example:** List all concepts (with pagination)\\n```js\\nget(\\\"concept\\\", { query: \\\"brian\\\", max: Infinity })\\n```\\n**Example:** Search up to 100 patients by name (allowing pagination) (<a href=\\\"https://rest.openmrs.org/#search-patients\\\">see OpenMRS API</a>)\\n```js\\nget(\\\"patient\\\", { query: \\\"brian\\\", max: 100 })\\n```\\n**Example:** Fetch patient by UUID (returns an array of 1 item)\\n```js\\nget(\\\"patient/abc\\\")\\n```\\n**Example:** Fetch patient by UUID (returns an object of patient data)\\n```js\\nget(\\\"patient/abc\\\", { singleton: true })\\n```\\n**Example:** Search up to 10 patients by name (in a single request without pagination) (<a href=\\\"https://rest.openmrs.org/#search-patients\\\">see OpenMRS API</a>)\\n```js\\nget(\\\"patient\\\", { query: \\\"brian\\\", limit: 10 })\\n```\\n**Example:** List allergy subresources\\n```js\\nget(\\\"patient/abc/allergy\\\")\\n```\\n**Example:** Get allergy subresource by its UUID and parent patient UUID\\n```js\\nget(\\\"patient/abc/allergy/xyz\\\")\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(path, data) ⇒ Operation</code></p>\\n\\nUpdate a resource. Only properties included in the data will be affected.\\nFor a list of valid resources and for update rules, see the Update sections\\nof the [OpenMRS Docs](https://rest.openmrs.org/)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (excluding `/ws/rest/v1/`) |\\n| data | <code>Object</code> | Resource properties to update |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The full updated resource, as returned by OpenMRS |\\n**Example:** Update a person (<a href=\\\"https://rest.openmrs.org/#create-a-person\\\">see OpenMRS API</a>)\\n```js\\nupdate('person/3cad37ad-984d-4c65-a019-3eb120c9c373', {\\n  'gender': 'M',\\n  'birthdate':'1997-01-13'\\n})\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(path, data, params) ⇒ Operation</code></p>\\n\\nUpdate a resource if it already exists, or otherwise create a new one.\\n\\nUpsert will first make a request for the target item (using the `path` and `params`) to see if it exists, and then issue a second create or update request.\\nIf the query request returns multiple items, the upsert will throw an error.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource (excluding `/ws/rest/v1/`) |\\n| data | <code>Object</code> | The resource data |\\n| params | <code>Object</code> | Query parameters to append to the initial query |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The created/updated resource, as returned by OpenMRS |\\n**Example:** Upsert a patient (<a href=\\\"https://rest.openmrs.org/#patients-overview\\\">see OpenMRS API</a>)\\n```js\\nupsert(\\\"patient/a5d38e09-efcb-4d91-a526-50ce1ba5011a\\\", {\\n  identifiers: [\\n    {\\n      identifier: '4023287',\\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\\n      preferred: true,\\n    },\\n  ],\\n  person: {\\n    gender: 'M',\\n    age: 42,\\n    birthdate: '1970-01-01T00:00:00.000+0100',\\n    birthdateEstimated: false,\\n    names: [\\n      {\\n        givenName: 'Doe',\\n        familyName: 'John',\\n      },\\n    ],\\n  },\\n})\\n```\\n**Example:** Upsert a patient using a query to identify the record\\n```js\\nupsert(\\\"patient\\\", $.data, { q: \\\"Lamine Yamal\\\" })\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.delete {#http_delete}\\n\\n<p><code>delete(path, [options]) ⇒ operation</code></p>\\n\\nMake a DELETE request to an OpenMRS endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the OpenMRS server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Delete a resource\\n```js\\nhttp.delete(\\n \\\"/ws/rest/v1/patient/abc/\\\"\\n)\\n```\\n\\n* * *\\n\\n\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ operation</code></p>\\n\\nMake a GET request to any OpenMRS endpoint.\\nUnlike the main `get()`, this does not append anything to the path you provide.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the OpenMRS server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** GET a resource with a query\\n```js\\nhttp.get(\\n \\\"/ws/rest/v1/patient\\\",\\n {\\n   query: {\\n     limit: 1\\n   }\\n }\\n)\\n```\\n**Example:** Don't throw if OpenMRS returns a 404 error code\\n```js\\nhttp.get(\\n \\\"/ws/rest/v1/patient\\\",\\n {\\n   errors: { 404: false }\\n }\\n)\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, data, [options]) ⇒ operation</code></p>\\n\\nMake a POST request to an OpenMRS endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | path to resource |\\n| data | <code>any</code> |  | the payload |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the OpenMRS server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Post with a JSON payload\\n```js\\nhttp.post(\\n \\\"/ws/rest/v1/patient\\\",\\n {\\n     \\\"person\\\": {\\n     \\\"gender\\\":\\\"M\\\",\\n     \\\"age\\\":47,\\n     \\\"birthdate\\\":\\\"1970-01-01T00:00:00.000+0100\\\",\\n     \\\"names\\\":[\\n       {\\n         \\\"givenName\\\":\\\"Jon\\\",\\n         \\\"familyName\\\":\\\"Snow\\\"\\n       }\\n     ],\\n   }\\n   }\\n)\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(method, path, [options]) ⇒ Operation</code></p>\\n\\nMake a HTTP request to any OpenMRS endpoint\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| method | <code>string</code> |  | HTTP method to use |\\n| path | <code>string</code> |  | Path to resource |\\n| [options] | [<code>HTTPRequestOptions</code>](#httprequestoptions) | <code>{}</code> | An object containing query, headers, and body for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the OpenMRS server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** GET request with a query parameters\\n```js\\nhttp.request(\\\"GET\\\",\\n  \\\"/ws/rest/v1/patient/d3f7e1a8-0114-4de6-914b-41a11fc8a1a8\\\", {\\n   query:{\\n      limit: 1,\\n      startIndex: 20\\n   },\\n});\\n```\\n\\n* * *\\n\\n\\n## fhir\\n\\nThese functions belong to the fhir namespace.\\n### fhir.get {#fhir_get}\\n\\n<p><code>get(path, query, [callback]) ⇒ Operation</code></p>\\n\\nMake a get request to any FHIR endpoint in OpenMRS\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| query | [<code>FhirParameters</code>](#fhirparameters) | Request parameters |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the OpenMRS server (excluding the body) |\\n| references | An array containing all previous data objects |\\n**Example:** Get encounters based on lastUpdated field\\n```js\\nfhir.get('Encounter', { count: 100, lastUpdated: 'ge2024-01-01T00:00:00Z' })\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### FhirParameters\\n\\nOpenMRS FHIR requests parameters options.\\nThis combines [ FHIR search parameters](https://fhir.openmrs.org/artifacts.html), [resource-specific parameters](https://www.hl7.org/fhir/R4/search.html), and pagination options.\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| count | <code>string</code> | Number of results to return (_count in FHIR) |\\n| include | <code>string</code> | Resources to include in the response (_include in FHIR) |\\n| revinclude | <code>string</code> | Reverse includes to include in the response (_revinclude in FHIR) |\\n| summary | <code>string</code> | Summary mode for the response (_summary in FHIR) |\\n| total | <code>string</code> | Whether to include a total count of matching resources (_total in FHIR) |\\n| elements | <code>string</code> | List of elements to include in the response (_elements in FHIR) |\\n| contained | <code>string</code> | Whether to include contained resources (_contained in FHIR) |\\n| containedType | <code>string</code> | Type of contained resources (_containedType in FHIR) |\\n| id | <code>string</code> | Logical ID of the resource to filter on (_id in FHIR) |\\n| lastUpdated | <code>string</code> | Timestamp to filter resources last updated after this date (_lastUpdated in FHIR) |\\n| tag | <code>string</code> | Tag to filter resources by (_tag in FHIR) |\\n| profile | <code>string</code> | Profile URL to filter resources by (_profile in FHIR) |\\n| security | <code>string</code> | Security labels to filter resources by (_security in FHIR) |\\n| text | <code>string</code> | Text search on narrative content (_text in FHIR) |\\n| content | <code>string</code> | Full-text search on resource content (_content in FHIR) |\\n| list | <code>string</code> | Search resources included in a particular list (_list in FHIR) |\\n| has | <code>string</code> | Perform search based on reference chains (_has in FHIR) |\\n| getPagesOffset | <code>string</code> | Offset for pagination, used to skip a number of results (_getpagesoffset in OpenMRS) |\\n| getPages | <code>string</code> | Get specific pages of resources (_getpages in OpenMRS) |\\n| bundleType | <code>string</code> | Type of bundle to return (e.g., searchset, batch, history) (_bundleType in FHIR) |\\n\\n\\n* * *\\n\\n### GetOptions\\n\\nOptions to append to the request. Unless otherwise specified, options are appended to the URL as query parameters - see the [OpenMRS Docs](https://rest.openmrs.org/) for all supported parameters.\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [query] | <code>string</code> |  | (OpenFn only) Query string. Maps to `q` in OpenMRS. |\\n| [max] | <code>number</code> | <code>10000</code> | (OpenFn only) Restrict the maximum number of retrieved records. May be fetched in several pages. Not used if `limit` is set. |\\n| [pageSize] | <code>number</code> | <code>1000</code> | (OpenFn only) Limits the size of each page of data. Not used if limit is set. |\\n| [singleton] | <code>boolean</code> |  | (OpenFn only) If set to true, only the first result will be returned. Useful for \\\"get by id\\\" APIs. |\\n\\n\\n* * *\\n\\n### HTTPRequestOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| body | <code>object</code> |  | The request body (as JSON) |\\n| errors | <code>object</code> \\\\| <code>boolean</code> |  | Pass `false` to not throw on errors. Pass a map of errorCodes: error messages, ie, `{ 404: 'Resource not found' }`, or `false` to suppress errors for a specific code. |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', or 'stream') |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language OpenMRS\\n\\nLanguage Pack for building expressions and operations for working with the\\n[OpenMRS Rest API](https://rest.openmrs.org/?javascript#openmrs-rest-api)\\n\\n[OpenMRS Data Model Explorer](http://burkeware.com/openmrs-data-model/openmrs-data-model-1.11.html#)\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openmrs-configuration-schema/)\\ndefinition.\\n\\n### Get a patient by some criteria\\n\\n```js\\n// getPatient({ uuid: '516af9aa-0402-4e11-ad79-e394fdec0c91' });\\n// getPatient({ uuid: dataValue('patientId')(state) });\\ngetPatient({\\n  uuid: state => state.data[0].uuid,\\n});\\n```\\n\\n#### Example of searching for patients based on their `EMR Id`\\n\\n```js\\ngetPatients(\\n  {\\n    identifier: state => state.data.emrId,\\n    v: 'full',\\n  },\\n  {\\n    exactlyOne: true,\\n  }\\n);\\n```\\n\\n### Create an Encounter\\n\\n```js\\ncreateEncounter({\\n  encounterDatetime: dataValue('visit_date'), //dynamically fill with source app data\\n  patient: dataValue('uuid'),\\n  encounterType: dataValue('visit_type'),\\n  location: dataValue('location.uuid'),\\n  encounterProviders: [\\n    {\\n      provider: dataValue('provider_name'),\\n      encounterRole: '240b26f9-dd88-4172-823d-4a8bfeb7841f', //hardcoded value\\n    },\\n  ],\\n});\\n```\\n\\n### Make a request to any OpenMRS endpoint\\n\\n```js\\nget('/ws/rest/v1/patient', { q: 'mohammed' }, state => {\\n  console.log(JSON.stringify(state, null, 2));\\n  return state;\\n});\\n```\\n\\n## Create new patient\\n\\n```js\\ncreatePatient(\\n  fields(\\n    field('gender', 'M'),\\n    field('names', function (state) {\\n      return [\\n        {\\n          patient_id: dataValue('form.patientId')(state),\\n          creator: dataValue('form.user')(state),\\n        },\\n      ];\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-openmrs\\n\\n## 5.0.2 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 5.0.1 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 5.0.0 - 11 April 2025\\n\\nMajor re-write of the OpenMRS API. Cleaned up the main namespace with a shorter,\\ncleaner API and automatic pagination on `get()`.\\n\\n### Major Changes\\n\\n- Signatures changed for `get()`, `update()`, `upsert()`, and `create()`\\n- Removed `getEncounter()`, `getEncounters()`, `getPatient()`, `searchPatient()`\\n  and `post()` and `searchPerson()`\\n- Added automatic pagination to `get()`\\n- Removed `response` (and http semantics generally) from `get()`,\\n- Remove all callbacks\\n\\n### Minor Changes\\n\\n- Added new `destroy()` function (for delete)\\n- Documentation improvements\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n### Migration Guide\\n\\nSignatures have all changed for the main OpenMRS rest functions `get()`,\\n`update()`, `upsert()`, and `create()`. Generally they take the form\\n`verb(path, [data], [options])`.\\n\\nAll removed getters (ie, `getPatient()`) are replaced by the\\n`get(path, options)` function introduced in `4.10.0`. Just pass a path to the\\nresource you need, and add a `{ query }` options object to search.\\n\\nFor example:\\n\\n- Instead of `getEncounters()` , do `get('encounters')`\\n- Instead of `getEncounter('1234')`, do `get('encounters/1234')`\\n- Instead of `searchPatient({ query: 'sarah' })`, do\\n  `get('patient', { query: 'sarah' })`\\n- Instead of callback arguments, you can either use `.then()`:\\n\\n```js\\nget('encounter/1234', state => {\\n  // the fetched resource is on state.data\\n  return state;\\n});\\n```\\n\\nOr use an fn block:\\n\\n```js\\nget('encounter/1234');\\nfn(state => {\\n  // the fetched resource is on state.data\\n  return state;\\n});\\n```\\n\\n## 4.4.0 - 14 March 2025\\n\\n### Minor Changes\\n\\n- 23ccb01: Allow errors to be passed to the http helpers. This overrides the\\n  behaviour to throw if an error code is returned\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 4.3.0 - 28 January 2025\\n\\n### Minor Changes\\n\\n- 909d81f: Added `http.post()`, `http.delete()` and `http.get()`.\\n\\n  removed the undocumented callback in `http.request()`.\\n\\n## 4.2.0 - 20 January 2025\\n\\n### Minor Changes\\n\\n- 5d6839e: Implement namespaced http.request() function. The function makes a\\n  call against the `instanceUrl` and the path provided, while allowing\\n  manipulation to the API call as needed.\\n\\n## 4.1.6 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 4.1.5 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 4.1.4 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 4.1.3 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 4.1.2 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 4.1.1 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 4.1.0 - 09 October 2024\\n\\n### Minor Changes\\n\\n- 1227829: Add `fhir.get()` function\\n\\n## 4.0.2 - 03 October 2024\\n\\n### Patch Changes\\n\\n- b1c48c7: improve upsert operation\\n\\n## 4.0.1 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 4.0.0 - 12 September 2024\\n\\n### Major Changes\\n\\n- Remove `createEncounter` and `createPatient` functions\\n- Add pagination support on request helper function\\n\\n### Minor Changes\\n\\n- c8dbd21: Add cursor and dateFns helper functions\\n\\n### Migration Guide\\n\\nThe `createEncounter` and `createPatient` functions have been removed from the\\nOpenMRS adaptor. Use the `create` function with the appropriate resource type.\\n\\nTo create a new encounter, you can use the following code:\\n\\n```js\\ncreate('encounter', $.encounter);\\n```\\n\\nTo create a new patient, you can use the following code:\\n\\n```js\\ncreate('patient', $.patient);\\n```\\n\\n## 3.1.4 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.1.3 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 3.1.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 3.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 3.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 3.0.6 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 3.0.5 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 3.0.4 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 3.0.3 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 3.0.2 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 3.0.1 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 3.0.0 - 03 April 2024\\n\\n### Major Changes\\n\\n- cadff13b: - Remove superagent dependency.\\n  - Rebase on new common http request helper.\\n  - Remove login function as no longer needed.\\n  - Update log output\\n\\n## 2.0.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.0.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.0.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.0.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.0.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 2.0.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.0.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 2.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.1 - 15 June 2023\\n\\n### Patch Changes\\n\\n- 2390129: - replace throw new Error with console.log\\n  - improve Log function\\n\\n## 1.1.0 - 10 June 2023\\n\\n### Minor Changes\\n\\n- d124f67: - Add create, update and upsert function\\n  - Add callback support and improve examples for\\n    - get()\\n    - post()\\n    - getPatient()\\n    - searchPerson()\\n    - getEncounter()\\n    - searchPatient()\\n    - createPatient()\\n    - getEncounters()\\n    - createEncounter()\\n\\n## 1.0.1 - 31 May 2023\\n\\n### Patch Changes\\n\\n- 97cc7ce: - Fix checking for empty response\\n  - Style logs output\\n\\n## 1.0.0 - 30 May 2023\\n\\n### Major Changes\\n\\n- b6478c0: - Removed `request` in favour of `superagent`\\n  - Improve error handling\\n  - Moved `login` to execute function\\n  - Added\\n    - `createPatient`\\n    - `searchPatient`\\n    - `searchPerson`\\n    - `getEncounters`\\n    - `getEncounter`\\n    - `get`\\n    - `post`\\n\\n## 0.10.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.10.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.10.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.10.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.10.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.10.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 6786949: Migrate OpenMRS\\n\"","functions":["create","destroy","get","update","upsert"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"instanceUrl":{"title":"Instance URL","type":"string","description":"The OpenMRS host url","format":"uri","minLength":1,"examples":["http://openmrs.com/instance/url"]},"username":{"title":"Username","type":"string","description":"The username to log in to OpenMRS","minLength":1,"examples":["admin@openmrs.org"]},"password":{"title":"Password","type":"string","description":"The password to log in to OpenMRS","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]},"fhirVersion":{"title":"FHIR Release Version","type":"string","placeholder":"R4","default":"R4","description":"FHIR Release Version","minLength":1,"examples":["R5","R4B","R4","R3","R2"]}},"type":"object","additionalProperties":true,"required":["instanceUrl"]}},
[
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create a resource. For a list of valid resources, see {@link https://rest.openmrs.org/ OpenMRS Docs}",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding `/ws/rest/v1/`)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Resource definition",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Create a person (<a href=\"https://rest.openmrs.org/#create-a-person\">see OpenMRS API</a>)</caption>\ncreate(\"person\", {\n  names: [\n    {\n      givenName: \"Mohit\",\n      familyName: \"Kumar\",\n    },\n  ],\n  gender: \"M\",\n  birthdate: \"1997-09-02\",\n  addresses: [\n    {\n      address1: \"30, Vivekananda Layout, Munnekolal,Marathahalli\",\n      cityVillage: \"Bengaluru\",\n      country: \"India\",\n      postalCode: \"560037\",\n    },\n  ],\n});",
      "<caption>Create an encounter (<a href=\"https://rest.openmrs.org/#create-an-encounter\">see OpenMRS API</a>)</caption>\ncreate(\"encounter\", {\n  encounterDatetime: '2023-05-25T06:08:25.000+0000',\n  patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n  encounterType: 'dd528487-82a5-4082-9c72-ed246bd49591',\n  location: 'ba685651-ed3b-4e63-9b35-78893060758a',\n  encounterProviders: [],\n  visit: {\n    patient: '1fdaa696-e759-4a7d-a066-f1ae557c151b',\n    visitType: '7b0f5697-27e3-40c4-8bae-f4049abfb4ed',\n    startDatetime: '2023-05-25T06:08:25.000+0000',\n    stopDatetime: '2023-05-25T06:09:25.000+0000',\n  },\n})",
      "<caption>Create a patient (<a href=\"https://rest.openmrs.org/#create-a-patient\">see OpenMRS API</a>)</caption>\ncreate(\"patient\", {\n  identifiers: [\n    {\n      identifier: '4023287',\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n      preferred: true,\n    },\n  ],\n  person: {\n    gender: 'M',\n    age: 42,\n    birthdate: '1970-01-01T00:00:00.000+0100',\n    birthdateEstimated: false,\n    names: [\n      {\n        givenName: 'Doe',\n        familyName: 'John',\n      },\n    ],\n  },\n})\n  ",
      "<caption>Create a patientIdentifier subresource (<a href=\"https://rest.openmrs.org/#create-a-patientidentifier-sub-resource-with-properties\">see OpenMRS API</a>)</caption>\ncreate(\"patient/b52ec6f9-0e26-424c-a4a1-c64f9d571eb3/identifier\", { \n \"identifier\" : \"111:CLINIC1\",\n \"identifierType\" : \"a5d38e09-efcb-4d91-a526-50ce1ba5011a\",\n \"location\" : \"8d6c993e-c2cc-11de-8d13-0010c6dffd0f\",\n \"preferred\" : true\n})\n}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 211,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The newly created resource, as returned by OpenMRS",
        "type": null
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "delete",
    "longname": "delete",
    "name": "delete",
    "kind": "function",
    "scope": "http",
    "description": "Make a DELETE request to an OpenMRS endpoint",
    "alias": "delete",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Delete a resource</caption>\nhttp.delete(\n \"/ws/rest/v1/patient/abc/\"\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 14,
    "newscope": true,
    "level": 0
  },
  {
    "id": "destroy",
    "longname": "destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "global",
    "description": "Delete a resource. Must include a UUID in the path.\nThrows an error if the resource does not exist.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding `/ws/rest/v1/`)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "The resource will be voided/retired unless true",
        "name": "options.purge"
      }
    ],
    "examples": [
      "<caption>Void a patient</caption>\ndestroy(\"patient/12346\");",
      "<caption>Purge a patient</caption>\ndestroy(\"patient/12346\", {\n  purge: true\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 374,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The response from OpenMRS",
        "type": null
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "FhirParameters",
    "longname": "FhirParameters",
    "name": "FhirParameters",
    "kind": "typedef",
    "scope": "global",
    "description": "OpenMRS FHIR requests parameters options.\nThis combines {@link https://fhir.openmrs.org/artifacts.html | FHIR search parameters}, {@link https://www.hl7.org/fhir/R4/search.html resource-specific parameters}, and pagination options.",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Number of results to return (_count in FHIR)",
        "name": "count"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Resources to include in the response (_include in FHIR)",
        "name": "include"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Reverse includes to include in the response (_revinclude in FHIR)",
        "name": "revinclude"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Summary mode for the response (_summary in FHIR)",
        "name": "summary"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Whether to include a total count of matching resources (_total in FHIR)",
        "name": "total"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "List of elements to include in the response (_elements in FHIR)",
        "name": "elements"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Whether to include contained resources (_contained in FHIR)",
        "name": "contained"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of contained resources (_containedType in FHIR)",
        "name": "containedType"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Logical ID of the resource to filter on (_id in FHIR)",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Timestamp to filter resources last updated after this date (_lastUpdated in FHIR)",
        "name": "lastUpdated"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Tag to filter resources by (_tag in FHIR)",
        "name": "tag"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Profile URL to filter resources by (_profile in FHIR)",
        "name": "profile"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Security labels to filter resources by (_security in FHIR)",
        "name": "security"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Text search on narrative content (_text in FHIR)",
        "name": "text"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Full-text search on resource content (_content in FHIR)",
        "name": "content"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Search resources included in a particular list (_list in FHIR)",
        "name": "list"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Perform search based on reference chains (_has in FHIR)",
        "name": "has"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Offset for pagination, used to skip a number of results (_getpagesoffset in OpenMRS)",
        "name": "getPagesOffset"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Get specific pages of resources (_getpages in OpenMRS)",
        "name": "getPages"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Type of bundle to return (e.g., searchset, batch, history) (_bundleType in FHIR)",
        "name": "bundleType"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5,
      "filename": "fhir.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Fetch resources from OpenMRS. Use this to fetch a single resource,\nor to search a list.\n\nOptions will be appended as query parameters to the request URL,\nrefer to {@link https://rest.openmrs.org/ OpenMRS Docs} for details.\n\nPagination is handled automatically by default (maximum 10k items). Set `max`\nto paginate with a higher limit, or pass `limit` to force a single request, as\nper the OpenMRS Rest API.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding `/ws/rest/v1/`)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "GetOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Query parameters and other options for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>List all concepts (up to a maximum of 10k items, with pagination)</caption>\nget(\"concept\")",
      "<caption>List all concepts (with pagination)</caption>\nget(\"concept\", { query: \"brian\", max: Infinity })",
      "<caption>Search up to 100 patients by name (allowing pagination) (<a href=\"https://rest.openmrs.org/#search-patients\">see OpenMRS API</a>)</caption>\nget(\"patient\", { query: \"brian\", max: 100 })",
      "<caption>Fetch patient by UUID (returns an array of 1 item)</caption>\nget(\"patient/abc\")",
      "<caption>Fetch patient by UUID (returns an object of patient data)</caption>\nget(\"patient/abc\", { singleton: true })",
      "<caption>Search up to 10 patients by name (in a single request without pagination) (<a href=\"https://rest.openmrs.org/#search-patients\">see OpenMRS API</a>)</caption>\nget(\"patient\", { query: \"brian\", limit: 10 })",
      "<caption>List allergy subresources</caption>\nget(\"patient/abc/allergy\")",
      "<caption>Get allergy subresource by its UUID and parent patient UUID</caption>\nget(\"patient/abc/allergy/xyz\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": "data",
        "description": "An array of result objects",
        "type": null
      }
    ],
    "order": 2,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "fhir",
    "description": "Make a get request to any FHIR endpoint in OpenMRS",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "FhirParameters"
          ]
        },
        "description": "Request parameters",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get encounters based on lastUpdated field</caption>\nfhir.get('Encounter', { count: 100, lastUpdated: 'ge2024-01-01T00:00:00Z' })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 44,
      "filename": "fhir.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to any OpenMRS endpoint.\nUnlike the main `get()`, this does not append anything to the path you provide.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET a resource with a query</caption>\nhttp.get(\n \"/ws/rest/v1/patient\",\n {\n   query: {\n     limit: 1\n   }\n }\n)",
      "<caption>Don't throw if OpenMRS returns a 404 error code</caption>\nhttp.get(\n \"/ws/rest/v1/patient\",\n {\n   errors: { 404: false }\n }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 83,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 12,
    "level": 0
  },
  {
    "id": "GetOptions",
    "longname": "GetOptions",
    "name": "GetOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options to append to the request. Unless otherwise specified, options are appended to the URL as query parameters - see the [OpenMRS Docs](https://rest.openmrs.org/) for all supported parameters.",
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "(OpenFn only) Query string. Maps to `q` in OpenMRS.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 10000,
        "description": "(OpenFn only) Restrict the maximum number of retrieved records. May be fetched in several pages. Not used if `limit` is set.",
        "name": "max"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 1000,
        "description": "(OpenFn only) Limits the size of each page of data. Not used if limit is set.",
        "name": "pageSize"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "(OpenFn only) If set to true, only the first result will be returned. Useful for \"get by id\" APIs.",
        "name": "singleton"
      }
    ],
    "meta": {
      "lineno": 8,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "HTTPRequestOptions",
    "longname": "HTTPRequestOptions",
    "name": "HTTPRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The request body (as JSON)",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object",
            "boolean"
          ]
        },
        "description": "Pass `false` to not throw on errors. Pass a map of errorCodes: error messages, ie, `{ 404: 'Resource not found' }`, or `false` to suppress errors for a specific code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', or 'stream')",
        "name": "parseAs"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the OpenMRS server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array containing all previous data objects",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 3,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "order": 9
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request to an OpenMRS endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the payload",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Post with a JSON payload</caption>\nhttp.post(\n \"/ws/rest/v1/patient\",\n {\n     \"person\": {\n     \"gender\":\"M\",\n     \"age\":47,\n     \"birthdate\":\"1970-01-01T00:00:00.000+0100\",\n     \"names\":[\n       {\n         \"givenName\":\"Jon\",\n         \"familyName\":\"Snow\"\n       }\n     ],\n   }\n   }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 129,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 13,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Make a HTTP request to any OpenMRS endpoint",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "HTTPRequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query, headers, and body for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET request with a query parameters</caption>\nhttp.request(\"GET\",\n  \"/ws/rest/v1/patient/d3f7e1a8-0114-4de6-914b-41a11fc8a1a8\", {\n   query:{\n      limit: 1,\n      startIndex: 20\n   },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 41,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 11,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update a resource. Only properties included in the data will be affected.\nFor a list of valid resources and for update rules, see the Update sections\nof the {@link https://rest.openmrs.org/ OpenMRS Docs}",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding `/ws/rest/v1/`)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Resource properties to update",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Update a person (<a href=\"https://rest.openmrs.org/#create-a-person\">see OpenMRS API</a>)</caption>\nupdate('person/3cad37ad-984d-4c65-a019-3eb120c9c373', {\n  'gender': 'M',\n  'birthdate':'1997-01-13'\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 249,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The full updated resource, as returned by OpenMRS",
        "type": null
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Update a resource if it already exists, or otherwise create a new one.\n\nUpsert will first make a request for the target item (using the `path` and `params`) to see if it exists, and then issue a second create or update request.\nIf the query request returns multiple items, the upsert will throw an error.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource (excluding `/ws/rest/v1/`)",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "The resource data",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Query parameters to append to the initial query",
        "name": "params"
      }
    ],
    "examples": [
      "<caption>Upsert a patient (<a href=\"https://rest.openmrs.org/#patients-overview\">see OpenMRS API</a>)</caption>\nupsert(\"patient/a5d38e09-efcb-4d91-a526-50ce1ba5011a\", {\n  identifiers: [\n    {\n      identifier: '4023287',\n      identifierType: '05a29f94-c0ed-11e2-94be-8c13b969e334',\n      preferred: true,\n    },\n  ],\n  person: {\n    gender: 'M',\n    age: 42,\n    birthdate: '1970-01-01T00:00:00.000+0100',\n    birthdateEstimated: false,\n    names: [\n      {\n        givenName: 'Doe',\n        familyName: 'John',\n      },\n    ],\n  },\n})",
      "<caption>Upsert a patient using a query to identify the record</caption>\nupsert(\"patient\", $.data, { q: \"Lamine Yamal\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 309,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openmrs/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The created/updated resource, as returned by OpenMRS",
        "type": null
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"openspp","adaptor":"@openfn/language-openspp","version":"2.0.12","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addtogroup\\\">addToGroup(group_id, individual_id, role)</a></dt>\\n<dt>\\n    <a href=\\\"#creategroup\\\">createGroup(data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createindividual\\\">createIndividual(data, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#enroll\\\">enroll(spp_id, program_id)</a></dt>\\n<dt>\\n    <a href=\\\"#getarea\\\">getArea(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getenrolledprograms\\\">getEnrolledPrograms(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getgroup\\\">getGroup(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getgroupmembers\\\">getGroupMembers(spp_id, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getindividual\\\">getIndividual(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getprogram\\\">getProgram(program_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getprograms\\\">getPrograms([options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getservicepoint\\\">getServicePoint(spp_id, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#removefromgroup\\\">removeFromGroup(group_id, individual_id)</a></dt>\\n<dt>\\n    <a href=\\\"#searcharea\\\">searchArea(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchgroup\\\">searchGroup(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchindividual\\\">searchIndividual(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#searchservicepoint\\\">searchServicePoint(domain, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#unenroll\\\">unenroll(spp_id, program_id)</a></dt>\\n<dt>\\n    <a href=\\\"#updategroup\\\">updateGroup(group_id, data)</a></dt>\\n<dt>\\n    <a href=\\\"#updateindividual\\\">updateIndividual(individual_id, data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addToGroup\\n\\n<p><code>addToGroup(group_id, individual_id, role) ⇒ Operation</code></p>\\n\\nadd individual to group in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| individual_id | <code>string</code> | individual registrant id |\\n| role | <code>string</code> | individual role in group |\\n\\n**Example:** create a new head for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\", \\\"Head\\\")\\n```\\n**Example:** create a new ordinary member for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\")\\n```\\n**Example:** create a new member with new role for group\\n```js\\naddToGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\", \\\"new-role-name\\\")\\n```\\n\\n* * *\\n\\n### createGroup\\n\\n<p><code>createGroup(data, callback) ⇒ Operation</code></p>\\n\\ncreate new group for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | registrant create data |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateGroup({ name: \\\"Group 1\\\" })\\n```\\n\\n* * *\\n\\n### createIndividual\\n\\n<p><code>createIndividual(data, callback) ⇒ Operation</code></p>\\n\\ncreate new individual for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | registrant create data |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ncreateIndividual({ name: \\\"Individual 1\\\" })\\n```\\n\\n* * *\\n\\n### enroll\\n\\n<p><code>enroll(spp_id, program_id)</code></p>\\n\\nenroll registrant to program in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to enroll |\\n| program_id | <code>string</code> | program_id of program |\\n\\n**Example**\\n```js\\nenroll(\\\"IND_Q4VGGZPF\\\", \\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### getArea\\n\\n<p><code>getArea(spp_id, callback) ⇒ Operation</code></p>\\n\\nget area by id in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of area |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetArea(\\\"LOC_7M92NLDH\\\")\\n```\\n\\n* * *\\n\\n### getEnrolledPrograms\\n\\n<p><code>getEnrolledPrograms(spp_id, callback) ⇒ Operation</code></p>\\n\\nget programs list for specific registrant from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to search |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetEnrolledPrograms(\\\"IND_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getGroup\\n\\n<p><code>getGroup(spp_id, callback) ⇒ Operation</code></p>\\n\\nget group information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the group |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetGroup(\\\"GRP_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getGroupMembers\\n\\n<p><code>getGroupMembers(spp_id, [options], callback) ⇒ Operation</code></p>\\n\\nget group members information from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| spp_id | <code>string</code> |  | The name of the group |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example**\\n```js\\ngetGroupMembers(\\\"GRP_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getIndividual\\n\\n<p><code>getIndividual(spp_id, callback) ⇒ Operation</code></p>\\n\\nget individual information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the individual |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetIndividual(\\\"IND_Q4VGGZPF\\\")\\n```\\n\\n* * *\\n\\n### getProgram\\n\\n<p><code>getProgram(program_id, callback) ⇒ Operation</code></p>\\n\\nget program information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| program_id | <code>string</code> | searching domain |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetProgram(\\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### getPrograms\\n\\n<p><code>getPrograms([options], callback) ⇒ Operation</code></p>\\n\\nget programs list from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [options] | <code>number</code> | <code>{}</code> | offset from start |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example**\\n```js\\ngetPrograms(100)\\n```\\n\\n* * *\\n\\n### getServicePoint\\n\\n<p><code>getServicePoint(spp_id, callback) ⇒ Operation</code></p>\\n\\nget service points information from OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | The spp_id of the agent |\\n| callback | <code>function</code> | An optional callback function |\\n\\n**Example**\\n```js\\ngetServicePoint(\\\"SVP_8P4KP4RT\\\")\\n```\\n\\n* * *\\n\\n### removeFromGroup\\n\\n<p><code>removeFromGroup(group_id, individual_id) ⇒ Operation</code></p>\\n\\nremove individual from group in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| individual_id | <code>string</code> | individual registrant id |\\n\\n**Example**\\n```js\\nremoveFromGroup(\\\"GRP_B2BRHJN2\\\", \\\"IND_8DUQL4M4\\\")\\n```\\n\\n* * *\\n\\n### searchArea\\n\\n<p><code>searchArea(domain, [options], callback) ⇒ Operation</code></p>\\n\\nsearching for service point in OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search without offset\\n```js\\nsearchArea([[\\\"code\\\", \\\"=\\\", \\\"10732\\\"]])\\n```\\n**Example:** search with offset\\n```js\\nsearchArea([[\\\"kind\\\", \\\"=\\\", 1]], { offset: 10 }})\\n```\\n\\n* * *\\n\\n### searchGroup\\n\\n<p><code>searchGroup(domain, [options], callback) ⇒ Operation</code></p>\\n\\nget groups from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for ordering search, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search group by domain\\n```js\\nsearchGroup([[\\\"spp_id\\\", \\\"=\\\", \\\"GRP_Q4VGGZPF\\\"]])\\n```\\n**Example:** search group by domain with offset\\n```js\\nsearchGroup([[\\\"spp_id\\\", \\\"ilike\\\", \\\"GRP\\\"]], { offset: 100 }})\\n```\\n**Example:** search group by complex domain for more accuracy\\n```js\\nsearchGroup([[\\\"address\\\", \\\"!=\\\", false], [\\\"phone\\\", \\\"!=\\\", false]])\\n```\\n\\n* * *\\n\\n### searchIndividual\\n\\n<p><code>searchIndividual(domain, [options], callback) ⇒ Operation</code></p>\\n\\nget individuals from OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search individual by domain\\n```js\\nsearchIndividual([[\\\"spp_id\\\", \\\"=\\\", \\\"IND_Q4VGGZPF\\\"]])\\n```\\n**Example:** search individual by domain with offset\\n```js\\nsearchIndividual([[\\\"spp_id\\\", \\\"ilike\\\", \\\"IND\\\"]], { offset: 100 })\\n```\\n**Example:** search individual by complex domain for more accuracy\\n```js\\nsearchIndividual([[\\\"address\\\", \\\"!=\\\", false], [\\\"birthdate\\\", \\\"=\\\", false]])\\n```\\n\\n* * *\\n\\n### searchServicePoint\\n\\n<p><code>searchServicePoint(domain, [options], callback) ⇒ Operation</code></p>\\n\\nsearching for service point in OpenSPP\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| domain | <code>Array</code> |  | searching domain |\\n| [options] | <code>object</code> | <code>{}</code> | Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records |\\n| callback | <code>function</code> |  | An optional callback function |\\n\\n**Example:** search without offset\\n```js\\nsearchServicePoint([[\\\"name\\\", \\\"ilike\\\", \\\"agent 1\\\"]])\\n```\\n**Example:** search with offset\\n```js\\nsearchServicePoint([[\\\"name\\\", \\\"ilike\\\", \\\"agent 1\\\"]], { offset: 100 })\\n```\\n\\n* * *\\n\\n### unenroll\\n\\n<p><code>unenroll(spp_id, program_id)</code></p>\\n\\nunenroll registrant from program in OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| spp_id | <code>string</code> | spp_id of group / individual wanted to unenroll |\\n| program_id | <code>string</code> | program_id of program |\\n\\n**Example**\\n```js\\nunenroll(\\\"IND_Q4VGGZPF\\\", \\\"PROG_2023_00000001\\\")\\n```\\n\\n* * *\\n\\n### updateGroup\\n\\n<p><code>updateGroup(group_id, data) ⇒ Operation</code></p>\\n\\nupdate group for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| group_id | <code>string</code> | group registrant id |\\n| data | <code>object</code> | registrant update data |\\n\\n**Example**\\n```js\\nupdateGroup(\\\"GRP_B2BRHJN2\\\", { name: \\\"Group 1\\\" })\\n```\\n\\n* * *\\n\\n### updateIndividual\\n\\n<p><code>updateIndividual(individual_id, data) ⇒ Operation</code></p>\\n\\nupdate individual for OpenSPP\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| individual_id | <code>string</code> | individual registrant id |\\n| data | <code>object</code> | registrant update data |\\n\\n**Example**\\n```js\\nupdateIndividual(\\\"IND_8DUQL4M4\\\", { name: \\\"Individual 1\\\" })\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-openspp <img src='assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with OpenSPP\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/openspp-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/openspp-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `getServicePoint` function\\n\\n```js\\ngetServicePoint(\\\"newagentflour\\\");\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-openspp\\n\\n## 2.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.3.1\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.2.1 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.2.0 - 30 November 2023\\n\\n### Changes\\n\\n- 05defd2: add new functions, correcting docstring and add more examples\\n  - correcting docstring input parameters type\\n  - changing getServicePoint() from get by name into get by unique id\\n  - add more examples in docstring\\n  - getArea(): get existing area by id\\n  - searchArea(): search existing area by domain\\n  - searchServicePoint(): search existing service point by domain\\n\\n## 1.1.1 - 17 November 2023\\n\\n### Patch Changes\\n\\n- 48b4e97: update `spp date time now string` format\\n\\n## 1.1.0 - 17 November 2023\\n\\n- Create OpenSPP adaptor with these functions:\\n  - getGroup(): get existing group information\\n  - getIndividual(): get existing individual information\\n  - searchGroup(): search existing group by domain\\n  - searchIndividual(): search existing individual by domain\\n  - getGroupMembers(): get members from group\\n  - getServicePoint(): get service points by name\\n  - getPrograms(): get single program\\n  - getPrograms(): get program list\\n  - getEnrolledPrograms(): get list of enrolled program for each beneficiary\\n  - enroll(): enroll beneficiary to a program\\n  - unenroll(): unenroll beneficiary from program\\n  - createIndividual(): create new individual\\n  - updateIndividual(): update existing individual\\n  - createGroup(): create new group\\n  - updateGroup(): update existing group\\n  - addToGroup(): add individual to group with(out) role\\n  - removeFromGroup(): end membership of individual to group\\n\"","functions":["addToGroup","createGroup","createIndividual","enroll","getArea","getEnrolledPrograms","getGroup","getGroupMembers","getIndividual","getProgram","getPrograms","getServicePoint","removeFromGroup","searchArea","searchGroup","searchIndividual","searchServicePoint","unenroll","updateGroup","updateIndividual"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"default":"http://localhost","examples":["https://dev.newlogic-demo.com"]},"username":{"title":"Username","type":"string","description":"Username","default":"admin","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","default":"admin","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"database":{"title":"Database Name","type":"string","default":"devel","description":"Database Name","examples":["devel"]}},"type":"object","additionalProperties":true,"required":["password","username","database","baseUrl"]}},
[
  {
    "id": "addToGroup",
    "longname": "addToGroup",
    "name": "addToGroup",
    "kind": "function",
    "scope": "global",
    "description": "add individual to group in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual role in group",
        "name": "role"
      }
    ],
    "examples": [
      "<caption>create a new head for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\", \"Head\")",
      "<caption>create a new ordinary member for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\")",
      "<caption>create a new member with new role for group</caption>\naddToGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\", \"new-role-name\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 790,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 19,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createGroup",
    "longname": "createGroup",
    "name": "createGroup",
    "kind": "function",
    "scope": "global",
    "description": "create new group for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant create data",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createGroup({ name: \"Group 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 668,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "createIndividual",
    "longname": "createIndividual",
    "name": "createIndividual",
    "kind": "function",
    "scope": "global",
    "description": "create new individual for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant create data",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "createIndividual({ name: \"Individual 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 630,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 15,
    "level": 0
  },
  {
    "id": "enroll",
    "longname": "enroll",
    "name": "enroll",
    "kind": "function",
    "scope": "global",
    "description": "enroll registrant to program in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to enroll",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "program_id of program",
        "name": "program_id"
      }
    ],
    "examples": [
      "enroll(\"IND_Q4VGGZPF\", \"PROG_2023_00000001\")"
    ],
    "access": "public",
    "meta": {
      "lineno": 545,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "getArea",
    "longname": "getArea",
    "name": "getArea",
    "kind": "function",
    "scope": "global",
    "description": "get area by id in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of area",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getArea(\"LOC_7M92NLDH\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 970,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 22,
    "level": 0
  },
  {
    "id": "getEnrolledPrograms",
    "longname": "getEnrolledPrograms",
    "name": "getEnrolledPrograms",
    "kind": "function",
    "scope": "global",
    "description": "get programs list for specific registrant from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to search",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getEnrolledPrograms(\"IND_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 505,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "getGroup",
    "longname": "getGroup",
    "name": "getGroup",
    "kind": "function",
    "scope": "global",
    "description": "get group information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the group",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getGroup(\"GRP_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 143,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "getGroupMembers",
    "longname": "getGroupMembers",
    "name": "getGroupMembers",
    "kind": "function",
    "scope": "global",
    "description": "get group members information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the group",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getGroupMembers(\"GRP_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 238,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "getIndividual",
    "longname": "getIndividual",
    "name": "getIndividual",
    "kind": "function",
    "scope": "global",
    "description": "get individual information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the individual",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getIndividual(\"IND_Q4VGGZPF\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 189,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getProgram",
    "longname": "getProgram",
    "name": "getProgram",
    "kind": "function",
    "scope": "global",
    "description": "get program information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "searching domain",
        "name": "program_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getProgram(\"PROG_2023_00000001\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 426,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "getPrograms",
    "longname": "getPrograms",
    "name": "getPrograms",
    "kind": "function",
    "scope": "global",
    "description": "get programs list from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "offset from start",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getPrograms(100)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 469,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "getServicePoint",
    "longname": "getServicePoint",
    "name": "getServicePoint",
    "kind": "function",
    "scope": "global",
    "description": "get service points information from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The spp_id of the agent",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "getServicePoint(\"SVP_8P4KP4RT\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 293,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "removeFromGroup",
    "longname": "removeFromGroup",
    "name": "removeFromGroup",
    "kind": "function",
    "scope": "global",
    "description": "remove individual from group in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      }
    ],
    "examples": [
      "removeFromGroup(\"GRP_B2BRHJN2\", \"IND_8DUQL4M4\")"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 878,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 20,
    "level": 0
  },
  {
    "id": "searchArea",
    "longname": "searchArea",
    "name": "searchArea",
    "kind": "function",
    "scope": "global",
    "description": "searching for service point in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search without offset</caption>\nsearchArea([[\"code\", \"=\", \"10732\"]])",
      "<caption>search with offset</caption>\nsearchArea([[\"kind\", \"=\", 1]], { offset: 10 }})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 1005,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 23,
    "level": 0
  },
  {
    "id": "searchGroup",
    "longname": "searchGroup",
    "name": "searchGroup",
    "kind": "function",
    "scope": "global",
    "description": "get groups from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for ordering search, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search group by domain</caption>\nsearchGroup([[\"spp_id\", \"=\", \"GRP_Q4VGGZPF\"]])",
      "<caption>search group by domain with offset</caption>\nsearchGroup([[\"spp_id\", \"ilike\", \"GRP\"]], { offset: 100 }})",
      "<caption>search group by complex domain for more accuracy</caption>\nsearchGroup([[\"address\", \"!=\", false], [\"phone\", \"!=\", false]])"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 339,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "searchIndividual",
    "longname": "searchIndividual",
    "name": "searchIndividual",
    "kind": "function",
    "scope": "global",
    "description": "get individuals from OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search individual by domain</caption>\nsearchIndividual([[\"spp_id\", \"=\", \"IND_Q4VGGZPF\"]])",
      "<caption>search individual by domain with offset</caption>\nsearchIndividual([[\"spp_id\", \"ilike\", \"IND\"]], { offset: 100 })",
      "<caption>search individual by complex domain for more accuracy</caption>\nsearchIndividual([[\"address\", \"!=\", false], [\"birthdate\", \"=\", false]])"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 385,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "searchServicePoint",
    "longname": "searchServicePoint",
    "name": "searchServicePoint",
    "kind": "function",
    "scope": "global",
    "description": "searching for service point in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "searching domain",
        "name": "domain"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "Searching options, eg: limit for limiting number of records returning, order for searching order, offset for skipping records",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>search without offset</caption>\nsearchServicePoint([[\"name\", \"ilike\", \"agent 1\"]])",
      "<caption>search with offset</caption>\nsearchServicePoint([[\"name\", \"ilike\", \"agent 1\"]], { offset: 100 })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 922,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 21,
    "level": 0
  },
  {
    "id": "unenroll",
    "longname": "unenroll",
    "name": "unenroll",
    "kind": "function",
    "scope": "global",
    "description": "unenroll registrant from program in OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "spp_id of group / individual wanted to unenroll",
        "name": "spp_id"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "program_id of program",
        "name": "program_id"
      }
    ],
    "examples": [
      "unenroll(\"IND_Q4VGGZPF\", \"PROG_2023_00000001\")"
    ],
    "access": "public",
    "meta": {
      "lineno": 589,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "updateGroup",
    "longname": "updateGroup",
    "name": "updateGroup",
    "kind": "function",
    "scope": "global",
    "description": "update group for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "group registrant id",
        "name": "group_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant update data",
        "name": "data"
      }
    ],
    "examples": [
      "updateGroup(\"GRP_B2BRHJN2\", { name: \"Group 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 704,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 17,
    "level": 0
  },
  {
    "id": "updateIndividual",
    "longname": "updateIndividual",
    "name": "updateIndividual",
    "kind": "function",
    "scope": "global",
    "description": "update individual for OpenSPP",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "individual registrant id",
        "name": "individual_id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "registrant update data",
        "name": "data"
      }
    ],
    "examples": [
      "updateIndividual(\"IND_8DUQL4M4\", { name: \"Individual 1\" })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 743,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/openspp/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"pesapal","adaptor":"@openfn/language-pesapal","version":"1.0.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, options)</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, body, options)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, body, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, options) ⇒ Operation</code></p>\\n\\nMake a GET request to Pesapal\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the Pesapal server, including headers, statusCode, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get all registered IPN URLs for a merchant\\n```js\\nget('URLSetup/GetIpnList')\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, body, options) ⇒ Operation</code></p>\\n\\nMake a POST request to Pesapal\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the Pesapal server, including headers, statusCode, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Send an order request \\n```js\\npost('Transactions/SubmitOrderRequest', \\n    {\\n        \\\"id\\\": \\\"TEST-05\\\",\\n        \\\"currency\\\": \\\"KES\\\",\\n        \\\"amount\\\": \\\"1\\\",\\n        \\\"description\\\": \\\"Testing\\\",\\n        \\\"callback_url\\\": \\\"https://www.myapplication.com/response-page\\\",\\n        \\\"notification_id\\\": \\\"fe078e53-78da-4a83-aa89-e7ded5c456e6\\\",\\n        \\\"billing_address\\\": {\\n            \\\"email_address\\\": \\\"john.doe@example.com\\\",\\n            \\\"phone_number\\\": \\\"0712xxxxxx\\\",\\n            \\\"country_code\\\": \\\"\\\",\\n            \\\"first_name\\\": \\\"Doe\\\",\\n            \\\"middle_name\\\": \\\"\\\",\\n            \\\"last_name\\\": \\\"John\\\",\\n            \\\"line_1\\\": \\\"\\\",\\n            \\\"line_2\\\": \\\"\\\",\\n            \\\"city\\\": \\\"\\\",\\n            \\\"state\\\": \\\"\\\",\\n            \\\"postal_code\\\": \\\"\\\",\\n            \\\"zip_code\\\": \\\"\\\"\\n        }\\n})\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(method, path, body, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request to Pesapal\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| body | <code>object</code> | Object which will be attached to the POST body |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the Pesapal server, including headers, statusCode, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Register IPN URL\\n```js\\nrequest(\\\"POST\\\", \\\"URLSetup/RegisterIPN\\\", {\\n  \\\"url\\\": \\\"https://www.myapplication.com/ipn\\\",\\n  \\\"ipn_notification_type\\\": \\\"GET\\\"\\n });\\n```\\n**Example:** Get transaction status\\n```js\\nrequest('GET', 'GetTransactionStatus', {}, {query:{\\n  orderTrackingId: '123456'\\n}})\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the Pesapal request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string. |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-pesapal <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\npesapal API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/pesapal-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/pesapal-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-pesapal\\n\\n## 1.0.2 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.1 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.0 - 10 April 2025\\n\\nImplement `get`, `post` and `request` for the pesapal adaptor\\n\"","functions":["get","post","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","description":"The base URL (https://pay.pesapal.com)","format":"uri","minLength":1,"examples":["https://pay.pesapal.com"]},"consumer_key":{"title":"Consumer key","type":"string","description":"Your app's consumer key sent to you via email once you go live","examples":["GA2PNftcXvv2uC2VdgNjxXyvF8eZ4td6iBsL7N7N2ZFnXzf3"]},"consumer_secret":{"title":"Consumer key","type":"string","description":"Your app's consumer secret sent to you via email once you go live","examples":["zKjr2j0jjihCtzIwzGtgnV0YgP82jZf1hY9RW6HygntWG6AGuf4tAUe3E5tPtiyA"]},"apiVersion":{"title":"Api Version","type":"string","placeholder":"pesapalv3","description":"Pesapal api version","examples":["pesapalv3"]},"access_token":{"title":"Access Token","type":"string","description":"Your Pesapal access token","examples":["eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjlGWERwYmZNRlQyU3ZRdVhoODQ2WVR3RUlCdyIsI"]}},"type":"object","additionalProperties":true,"required":[]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to Pesapal",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Get all registered IPN URLs for a merchant</caption>\nget('URLSetup/GetIpnList')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 34,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/pesapal/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the Pesapal server, including headers, statusCode, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/pesapal/src"
    },
    "order": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to Pesapal",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Send an order request </caption>\npost('Transactions/SubmitOrderRequest', \n    {\n        \"id\": \"TEST-05\",\n        \"currency\": \"KES\",\n        \"amount\": \"1\",\n        \"description\": \"Testing\",\n        \"callback_url\": \"https://www.myapplication.com/response-page\",\n        \"notification_id\": \"fe078e53-78da-4a83-aa89-e7ded5c456e6\",\n        \"billing_address\": {\n            \"email_address\": \"john.doe@example.com\",\n            \"phone_number\": \"0712xxxxxx\",\n            \"country_code\": \"\",\n            \"first_name\": \"Doe\",\n            \"middle_name\": \"\",\n            \"last_name\": \"John\",\n            \"line_1\": \"\",\n            \"line_2\": \"\",\n            \"city\": \"\",\n            \"state\": \"\",\n            \"postal_code\": \"\",\n            \"zip_code\": \"\"\n        }\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 72,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/pesapal/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request to Pesapal",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object which will be attached to the POST body",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Register IPN URL</caption>\nrequest(\"POST\", \"URLSetup/RegisterIPN\", {\n  \"url\": \"https://www.myapplication.com/ipn\",\n  \"ipn_notification_type\": \"GET\"\n });",
      "<caption>Get transaction status</caption>\nrequest('GET', 'GetTransactionStatus', {}, {query:{\n  orderTrackingId: '123456'\n}})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/pesapal/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Pesapal request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/pesapal/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"postgresql","adaptor":"@openfn/language-postgresql","version":"6.0.12","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#describetable\\\">describeTable(tableName, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#findvalue\\\">findValue([filter])</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(table, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#insertmany\\\">insertMany(table, records, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#inserttable\\\">insertTable(tableName, columns, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#modifytable\\\">modifyTable(tableName, columns, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#sql\\\">sql(sqlQuery, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(table, uuid, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertif\\\">upsertIf(logical, table, uuid, record, [options], callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertmany\\\">upsertMany(table, uuid, data, [options], callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### describeTable\\n\\n<p><code>describeTable(tableName, [options], callback) ⇒ Operation</code></p>\\n\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ndescribeTable('clinic_visits')\\n```\\n\\n* * *\\n\\n### findValue\\n\\n<p><code>findValue([filter]) ⇒ value</code></p>\\n\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| [filter] | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n| [filter.uuid] | <code>string</code> | The uuid value to search for in the specified relation. |\\n| [filter.relation] | <code>string</code> | The name of the relation to search for the uuid value. |\\n| [filter.where] | <code>object</code> | An object that contains key-value pairs to filter the search results. |\\n| [filter.operator] | <code>object</code> | An object that contains key-value pairs to specify the type of comparison to perform on the where clause. |\\n\\n**Example**\\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mamadou' },\\n   operator: { first_name: 'like' }\\n })\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(table, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsert('users', { name: 'Elodie', id: 7 }, { setNull: \\\"'NaN'\\\", logValues: true });\\n```\\n\\n* * *\\n\\n### insertMany\\n\\n<p><code>insertMany(table, records, [options], callback) ⇒ Operation</code></p>\\n\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>array</code> | An array or a function that takes state and returns an array |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsertMany('users', state => state.data.recordArray, { setNull: \\\"'undefined'\\\", logValues: true });\\n```\\n\\n* * *\\n\\n### insertTable\\n\\n<p><code>insertTable(tableName, columns, [options], callback) ⇒ Operation</code></p>\\n\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### modifyTable\\n\\n<p><code>modifyTable(tableName, columns, [options], callback) ⇒ Operation</code></p>\\n\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\\n* * *\\n\\n### sql\\n\\n<p><code>sql(sqlQuery, [options], callback) ⇒ Operation</code></p>\\n\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>string</code> | The SQL query as a string. |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nsql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(table, uuid, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update a record using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsert(\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql:true, execute: true, logValues: true }\\n)\\n```\\n\\n* * *\\n\\n### upsertIf\\n\\n<p><code>upsertIf(logical, table, uuid, record, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true }\\n)\\n```\\n\\n* * *\\n\\n### upsertMany\\n\\n<p><code>upsertMany(table, uuid, data, [options], callback) ⇒ Operation</code></p>\\n\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n| [options] | <code>object</code> | Optional options argument |\\n| [options.setNull] | <code>string</code> | A string value that specifies the behavior for inserting null values. |\\n| [options.writeSql] | <code>boolean</code> | A boolean value that specifies whether to log the generated SQL statement. Defaults to false. |\\n| [options.execute] | <code>boolean</code> | A boolean value that specifies whether to execute the generated SQL statement. Defaults to false. |\\n| [options.logValues] | <code>boolean</code> | A boolean value that specifies whether to log the inserted values to the console. Defaults to false. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertMany(\\n  'users', // the DB table\\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  [\\n    { name: 'one', email: 'one@openfn.org' },\\n    { name: 'two', email: 'two@openfn.org' },\\n  ]\\n { logValues: true }\\n)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language PostgreSQL\\n\\nLanguage Pack for building expressions and operations to run PostgreSQL queries.\\n\\n## Documentation\\n\\n## required configuration for Heroku postgres\\n\\n```json\\n{\\n  \\\"host\\\": \\\"some-host-url.compute-1.amazonaws.com\\\",\\n  \\\"port\\\": \\\"5432\\\",\\n  \\\"database\\\": \\\"wouldntyouliketoknow\\\",\\n  \\\"user\\\": \\\"me\\\",\\n  \\\"password\\\": \\\"noway\\\",\\n  \\\"ssl\\\": true,\\n  \\\"allowSelfSignedCert\\\": true\\n}\\n```\\n\\n## `sql(query)`\\n\\nExecute an sql query. An option can be added to either log the query or not and\\neither execute the query or no. The options can be omitted as well.\\n\\n#### sample usage\\n\\n```js\\nsql(\\n  state =>\\n    `INSERT INTO untitled_table (name, the_geom) VALUES ('` +\\n    dataValue('form.first_name')(state) +\\n    `', ST_SetSRID(ST_Point(` +\\n    dataValue('lat')(state) +\\n    `, ` +\\n    dataValue('long')(state) +\\n    `),4326))`,\\n  { writeSql: true, execute: true }\\n);\\n```\\n\\n## Find a single value for a table\\n\\nThis helper function allows to build a specific query where `sql` would not be\\nbest suited. It returns a single value and not a promise. An example of usage\\nwould be in building a mapping object with a value from a lookup table.\\n\\n```js\\nalterState(async state => {\\n  const user = {\\n    id: 1,\\n    name: 'Mamadou',\\n    user_id: await findValue({\\n      uuid: 'id',\\n      relation: 'users',\\n      where: { first_name: 'Mama%' },\\n      operator: { first_name: 'like' }, // operator is optional. \\\"=\\\" is used by default.\\n    })(state),\\n  };\\n\\n  return upsert(...)(state);\\n});\\n```\\n\\n## Insert a single record\\n\\nThis functions is used to insert a single record in postgres database. An option\\n`writeSql` allows to log the generated sql query. The `setNull` option allows to\\nreplace the specified elements with `NULL`.\\n\\n```js\\ninsert(\\n  'users',\\n  {\\n    email: 'antony@gmail.com',\\n    first_name: 'Antony',\\n    inserted_at: '2020-08-27 00:00:00',\\n    updated_at: '2020-08-27 00:00:00',\\n  },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql: true, logValues: true }\\n);\\n```\\n\\n## Insert or Update using a unique column as a key\\n\\nInsert or Update if matched. An option, `execute`, allows to either run the\\ngenerated query or no.\\n\\n```js\\nupsert(\\n  'users',\\n  'email',\\n  {\\n    email: 'luca@openfn.org',\\n    first_name: 'Luca',\\n    inserted_at: '2010-01-01 00:00:00',\\n    updated_at: '2010-01-01 00:00:00',\\n  },\\n  {\\n    setNull: [\\\"'NaN'\\\", \\\"'undefined'\\\"],\\n    writeSql: false,\\n    execute: true,\\n    logValues: true,\\n  }\\n);\\n```\\n\\n## Insert or Update if a value exist in the record\\n\\nThis function will upsert a record only if the logical given is true. In this\\ncase we check if `dataValue('name')` exists.\\n\\n```js\\nupsertIf(dataValue('name'), 'users', 'ON CONSTRAINT users_pkey', {\\n  name: 'Elodie',\\n  id: 7,\\n});\\n```\\n\\n## Insert many records in postgresql\\n\\nThis function allows the insert of a set of records inside a table all at once.\\n\\n```js\\ninsertMany(\\n  'users',\\n  state =>\\n    state.data.people.map(s => {\\n      return {\\n        first_name: ['Luca', 'Mohamed', 'Elodie'],\\n        inserted_at: '2020-01-01 00:00:00',\\n        updated_at: '2020-01-01 00:00:00',\\n      };\\n    }),\\n  { logValues: true }\\n);\\n```\\n\\n## Upsert many records in postgresql\\n\\nThis function allows the upsert of a set of records inside a table all at once.\\n\\n```js\\nupsertMany('users', 'ON CONSTRAINT users_pkey', state =>\\n  state.data.people.map(s => {\\n    return {\\n      first_name: ['Luca', 'Mohamed', 'Elodie'],\\n      inserted_at: '2020-01-01 00:00:00',\\n      updated_at: '2020-01-01 00:00:00',\\n    };\\n  })\\n);\\n```\\n\\n## Describe a table from postgres\\n\\nThis function is used to fetch the list of columns of a given table in the\\ndatabase.\\n\\n```js\\ndescribeTable('users', { writeSql: true, execute: false });\\n```\\n\\n## Create a table in the database\\n\\nThis function allows to create a table in a database from a given array of\\ncolumns. The key `identity` can be use for a column to auto-generate a value.\\n\\n```js\\ninsertTable('users', state =>\\n  state.data.map(column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - set to true for unique constraint\\n  }))\\n);\\n```\\n\\n## Alter a table in the database\\n\\nThis function allows to add new columns to a table. Beware of the fact that you\\ncannot add new columns with names that already exist in the table.\\n\\n```js\\nmodifyTable(\\n  'users',\\n  state =>\\n    state.data.map(newColumn => ({\\n      name: newColumn.name,\\n      type: newColumn.type,\\n      required: true, // optional\\n      unique: false, // optional - set to true for unique constraint\\n    })),\\n  { writeSql: false, execute: true }\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-postgresql\\n\\n## 6.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 6.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 6.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 6.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 6.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 6.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 6.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 6.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 6.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 6.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 6.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 6.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 6.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 5.0.2\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 5.0.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 5.0.0 - 19 June 2024\\n\\n### Major Changes\\n\\n- 6a4081b8: - Update all operations to use util `expandReferences`\\n  - Add `findValue` result to state\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.1.15 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.1.14 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.1.13 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.1.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.1.11 - 24 April 2024\\n\\n### Patch Changes\\n\\n- 02ab7a89: - Change `host` format from `uri or ipv4` to `string` in\\n  `configuration-schema.json`\\n  - Update required list to include `user`, `password` and `database`\\n\\n## 4.1.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.1.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.1.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.1.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.1.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.1.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.1.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.1.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.1.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.1.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.1.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 4.0.0 - 20 April 2023\\n\\n### Major Changes\\n\\n- ecd0b53: add optional callback in sql and update response structure\\n\\n## 3.4.6 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.4.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.4.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 3.4.3 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 3.4.2 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 3.4.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 3.4.0 - 21 October 2022\\n\\n### Minor Changes\\n\\n- 44ae341: Migrate postgresql\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\"","functions":["describeTable","findValue","insert","insertMany","insertTable","modifyTable","sql","upsert","upsertIf","upsertMany"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","description":"Postgres instance host URL or IP address","minLength":1,"examples":["some-host.compute-1.amazonaws.com","201.220.61.246"]},"port":{"title":"Port","type":"integer","default":5432,"description":"Database instance port","minLength":1,"examples":[5432]},"database":{"title":"Database","type":"string","description":"The database name","minLength":1,"examples":["demo-db"]},"user":{"title":"User","type":"string","description":"User name","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Secretpass"]},"ssl":{"title":"Use SSL","type":"boolean","examples":[true]},"allowSelfSignedCert":{"title":"Allow self-signed certificate","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["host","user","database","password"]}},
[
  {
    "id": "describeTable",
    "longname": "describeTable",
    "name": "describeTable",
    "kind": "function",
    "scope": "global",
    "description": "List the columns of a table in a database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to describe",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "describeTable('clinic_visits')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 607,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "findValue",
    "longname": "findValue",
    "name": "findValue",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a uuid key given a condition",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "A filter object with the lookup table, a uuid and the condition",
        "name": "filter"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The uuid value to search for in the specified relation.",
        "name": "filter.uuid"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The name of the relation to search for the uuid value.",
        "name": "filter.relation"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object that contains key-value pairs to filter the search results.",
        "name": "filter.where"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object that contains key-value pairs to specify the type of comparison to perform on the where clause.",
        "name": "filter.operator"
      }
    ],
    "examples": [
      "findValue({\n   uuid: 'id',\n   relation: 'users',\n   where: { first_name: 'Mamadou' },\n   operator: { first_name: 'like' }\n })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "value"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 204,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Insert a record",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insert('users', { name: 'Elodie', id: 7 }, { setNull: \"'NaN'\", logValues: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 273,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "insertMany",
    "longname": "insertMany",
    "name": "insertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert many records, using the keys of the first as the column template",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array or a function that takes state and returns an array",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insertMany('users', state => state.data.recordArray, { setNull: \"'undefined'\", logValues: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 323,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "insertTable",
    "longname": "insertTable",
    "name": "insertTable",
    "kind": "function",
    "scope": "global",
    "description": "Create a table in database when given an array of columns and a table_name.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to create",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "insertTable('table_name', state => state.data.map(\n  column => ({\n    name: column.name,\n    type: column.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 651,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "modifyTable",
    "longname": "modifyTable",
    "name": "modifyTable",
    "kind": "function",
    "scope": "global",
    "description": "Alter an existing table in the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the table to alter",
        "name": "tableName"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of form columns",
        "name": "columns"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "modifyTable('table_name', state => state.data.map(\n  newColumn => ({\n    name: newColumn.name,\n    type: newColumn.type,\n    required: true, // optional\n    unique: false, // optional - to be set to true for unique constraint\n  })\n));"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 715,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "sql",
    "longname": "sql",
    "name": "sql",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SQL statement",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The SQL query as a string.",
        "name": "sqlQuery"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "sql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 167,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsert(\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { setNull: [\"''\", \"'undefined'\"], writeSql:true, execute: true, logValues: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 386,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "upsertIf",
    "longname": "upsertIf",
    "name": "upsertIf",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update a record based on a logical condition using ON CONFLICT UPDATE",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "a data to check existing value for.",
        "name": "logical"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Payload data for the record as a JS object or function",
        "name": "record"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertIf(\n  dataValue('name'),\n  'users', // the DB table\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  { name: 'Elodie', id: 7 },\n  { writeSql:true, execute: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 455,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 6,
    "level": 0
  },
  {
    "id": "upsertMany",
    "longname": "upsertMany",
    "name": "upsertMany",
    "kind": "function",
    "scope": "global",
    "description": "Insert or update multiple records using ON CONFLICT UPDATE and excluded",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The target table",
        "name": "table"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The uuid column to determine a matching/existing record",
        "name": "uuid"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of objects or a function that returns an array",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Optional options argument",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "A string value that specifies the behavior for inserting null values.",
        "name": "options.setNull"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the generated SQL statement. Defaults to false.",
        "name": "options.writeSql"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to execute the generated SQL statement. Defaults to false.",
        "name": "options.execute"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "description": "A boolean value that specifies whether to log the inserted values to the console. Defaults to false.",
        "name": "options.logValues"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertMany(\n  'users', // the DB table\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\n  [\n    { name: 'one', email: 'one@openfn.org' },\n    { name: 'two', email: 'two@openfn.org' },\n  ]\n { logValues: true }\n)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 540,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/postgresql/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"primero","adaptor":"@openfn/language-primero","version":"3.1.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#createcase\\\">createCase(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#createreferrals\\\">createReferrals(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getcases\\\">getCases(query, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getforms\\\">getForms(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlocations\\\">getLocations(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getlookups\\\">getLookups(query, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#getreferrals\\\">getReferrals(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatecase\\\">updateCase(id, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#updatereferral\\\">updateReferral(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcase\\\">upsertCase(params, callback)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_patch\\\">http.patch(path, data, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, data, [options])</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#beta\\\">beta</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### createCase\\n\\n<p><code>createCase(params, callback) ⇒ Operation</code></p>\\n\\nCreate a new case in Primero\\n\\nUse this function to create a new case in Primero based on a set of Data.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Create a new case in Primero based on a set of Data\\n```js\\ncreateCase({\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Edwine Edgemont\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### createReferrals\\n\\n<p><code>createReferrals(params, callback) ⇒ Operation</code></p>\\n\\nCreate referrals in Primero\\n\\nUse this function to bulk refer to one or multiple cases from Primero to a single user\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with referral data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Create referrals for multiple cases in Primero\\n```js\\ncreateReferrals({\\n  data: {\\n    ids: [\\n      \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n      \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n    ],\\n    transitioned_to: \\\"primero_cp\\\",\\n    notes: \\\"This is a bulk referral\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### getCases\\n\\n<p><code>getCases(query, options, callback) ⇒ Operation</code></p>\\n\\nUse this function to get cases from Primero based on a set of query parameters.\\nNote that in many implementations, the `remote` attribute should be set to `true` to ensure that only cases marked for remote access will be retrieved.\\nSet `case_id` on the query object to fetch a specific case.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | Query parameters to send to primero, which will be built into URL parameters. See [Primero Docs](https://github.com/primeroIMS/primero/blob/master/doc/api/cases/get.md) for a list of valid parameters. |\\n| options | <code>object</code> | (Optional) Additional options |\\n| options.withReferrals | <code>boolean</code> | Set to true to include referrals with each case. This will generate an extra request for each case and may take some time to process. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Fetch all cases\\n```js\\ngetCases();\\n```\\n**Example:** Fetch all cases which match query criteria\\n```js\\ngetCases({\\n  remote: true,\\n  sex: \\\"male\\\",\\n  age: \\\"10..15\\\",\\n  protection_concerns :\\\"unaccompanied,separated\\\",\\n});\\n```\\n**Example:** Fetch a specific case by id\\n```js\\ngetCases({\\n  case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n**Example:** Get all remote cases and their referrals\\n```js\\ngetCases(\\n { remote: true },\\n { withReferrals: true }\\n);\\n```\\n\\n* * *\\n\\n### getForms\\n\\n<p><code>getForms(query, callback) ⇒ Operation</code></p>\\n\\nGet forms from Primero\\n\\nUse this function to get forms from Primero that are accessible to this user based on a set of query parameters.\\nThe user can filter the form list by record type and module.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get the list of all forms\\n```js\\ngetForms();\\n```\\n**Example:** Get the list of all forms for a specific module\\n```js\\ngetForms({\\n  module_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n\\n* * *\\n\\n### getLocations\\n\\n<p><code>getLocations(query, callback) ⇒ Operation</code></p>\\n\\nGet locations from Primero\\n\\nUse this function to get a paginated list of all locations that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1).\\nAnother parameter is `hierarchy: true` (Defaults to false)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get loocations from Primero with query parameters\\n```js\\ngetLocations({\\n  page: 1,\\n  per: 20\\n})\\n```\\n\\n* * *\\n\\n### getLookups\\n\\n<p><code>getLookups(query, callback) ⇒ Operation</code></p>\\n\\nGet lookups from Primero\\n\\nUse this function to get a paginated list of all lookups that are accessible to this user from Primero.\\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\\nAlso you can specify `page` value to fetch pagination (Defaults to 1)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get lookups from Primero with query parameters\\n```js\\ngetLookups({\\n  per: 10000,\\n  page: 5\\n});\\n```\\n\\n* * *\\n\\n### getReferrals\\n\\n<p><code>getReferrals(params, callback) ⇒ Operation</code></p>\\n\\nGet referrals for a specific case in Primero\\n\\nUse this function to get the list of referrals of one case from Primero.\\nThe search can be done using either `record id` or `case id`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Get referrals for a case in Primero by record id\\n```js\\ngetReferrals({\\n  externalId: \\\"record_id\\\",\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n**Example:** Get referrals for a case in Primero by case id\\n```js\\n getReferrals({\\n  id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n});\\n```\\n\\n* * *\\n\\n### updateCase\\n\\n<p><code>updateCase(id, params, callback) ⇒ Operation</code></p>\\n\\nUpdate an existing case in Primero\\n\\nUse this function to update an existing case from Primero.\\nIn this implementation, the function uses a case ID to check for the case to update,\\nThen merge the values submitted in this call into an existing case.\\nFields not specified in this request will not be modified.\\nFor nested subform fields, the subform arrays will be recursively merged,\\nkeeping both the existing values and appending the new\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | A case ID to use for the update. |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Update case for a specific case id\\n```js\\nupdateCase(\\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\", {\\n  data: {\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Fiona Edgemont\\\",\\n  },\\n});\\n```\\n\\n* * *\\n\\n### updateReferral\\n\\n<p><code>updateReferral(params, callback) ⇒ Operation</code></p>\\n\\nUpdate a single referral for a specific case in Primero\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an caseExternalId value to use, the id and the referral id to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Update referral by record id\\n```js\\nupdateReferral({\\n  caseExternalId: \\\"record_id\\\",\\n  id: \\\"749e9c6e-60db-45ec-8f5a-69da7c223a79\\\",\\n  caseId: \\\"dcea6052-07d9-4cfa-9abf-9a36987cdd25\\\",\\n  data: (state) => state.data,\\n});\\n```\\n\\n* * *\\n\\n### upsertCase\\n\\n<p><code>upsertCase(params, callback) ⇒ Operation</code></p>\\n\\nUpsert case to Primero\\n\\nUse this function to update an existing case from Primero or to create it otherwise.\\nIn this implementation, we first fetch the list of cases,\\nthen we check if the case exist before choosing the right operation to do.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalIds and some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Upsert case for a specific case id\\n```js\\nupsertCase({\\n  externalIds: [\\\"case_id\\\"],\\n  data: state => ({\\n    age: 20,\\n    sex: \\\"male\\\",\\n    name: \\\"Alex\\\",\\n    status: \\\"open\\\",\\n    case_id: \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  }),\\n});\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ Operation</code></p>\\n\\nMake a GET request to any Primero endpoint.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to the resource. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Primero server (excluding the body). Responses will be returned in JSON format |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** GET all cases\\n```js\\nhttp.get('/cases');\\n```\\n\\n* * *\\n\\n\\n### http.patch {#http_patch}\\n\\n<p><code>patch(path, data, [options]) ⇒ Operation</code></p>\\n\\nMake a PATCH request to Primero\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to the resource. |\\n| data | <code>object</code> |  | the body data in JSON format. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Primero server (excluding the body). Responses will be returned in JSON format |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a single case resource \\n```js\\nhttp.patch('cases/344f3c08-affc-4d8a-b4d3-925b9f4d2867', {\\n  age: 17,\\n  sex: \\\"female\\\",\\n  name: \\\"Edwine Edgemont\\\",\\n });\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, data, [options]) ⇒ Operation</code></p>\\n\\nMake a POST request to any Primero endpoint.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| path | <code>string</code> |  | Path to the resource. |\\n| data | <code>object</code> |  | the body data in JSON format. |\\n| [options] | [<code>RequestOptions</code>](#requestoptions) | <code>{}</code> | An object containing query params and headers for the request |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Primero server (excluding the body). Responses will be returned in JSON format |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** POST a case to Primero\\n```js\\nhttp.post('cases',{\\n    age: 16,\\n    sex: \\\"female\\\",\\n    name: \\\"Edwine Edgemont\\\",\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions object\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>object</code> |  | An object of query parameters to be encoded into the URL |\\n| headers | <code>object</code> |  | An object of all request headers |\\n| [parseAs] | <code>string</code> | <code>&quot;&#x27;json&#x27;&quot;</code> | The response format to parse (e.g., 'json', 'text', or 'stream') |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-primero\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with UNICEF's\\nPrimero API.\\n\\n**See Update Docs Site: https://docs.openfn.org/adaptors/packages/primero-docs**\\n\\n## Primero API Versions\\n\\n### Adaptor for Primero v2.0\\n\\nThis documentation outlines the functions available for Primero `v2.0` in the\\nmain branch. The API documentation is available at:\\nhttps://github.com/primeroIMS/primero/tree/development_v2/app/controllers/api\\n\\n### Adaptor for Primero v1.0 still available on the `v1` branch.\\n\\n`v1.0.7` of this adaptor was built for the Primero `v1.1` API:\\nhttps://github.com/OpenFn/language-primero/blob/v1/README.md\\n\\n[Primero API v1.1 Documentation](https://docs.google.com/document/d/1jpaT2_UBBnc3PxPYlLMBEzNUkyfuxRZiksywG5MKM0Q/edit)\\n\\n#### Primero Authentication Strategies\\n\\nThe Primero team is considering a shift to Microsoft Azure Active Directory B2C\\nfor auth. We can likely accommodate this with a similar pattern as has been used\\nin our Microsoft Dynamics, Github, or Google Sheets adaptors, but we'll need to\\nawait final doucmentation for Primero's `v2` API before making changes.\\n\\n[Azure Active Directory B2C](https://docs.microsoft.com/en-us/azure/active-directory-b2c/)\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-primero\\n\\n## 3.1.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 3.1.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 3.1.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 3.1.0 - 31 March 2025\\n\\n### Minor Changes\\n\\n- 7fecd5b: - Added a new http namespace, containing HTTP helpers for `get()`,\\n  `post()` and `patch()`.\\n\\n  - These functions will allow the users to make any requests with the `POST`,\\n    `PATCH`, and `GET` methods to `primero`.\\n  - With these new updates, you can now do this:\\n\\n  ```\\n\\n  http.get('cases', {\\n      query:{ remote: true }\\n  })\\n\\n  ```\\n\\n## 3.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 3.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 3.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 3.0.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 3.0.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 3.0.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 3.0.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 3.0.3 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 3.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 3.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 3.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 2.12.4\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.12.3 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 2.12.2 - 18 July 2024\\n\\n### Patch Changes\\n\\n- 3ad9122: - Improve `getCases()` withReferrals docs\\n  - Add logs when fetching case referrals\\n\\n## 2.12.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 2.12.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.11.14 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 2.11.13 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 2.11.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.11.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 2.11.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 2.11.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 2.11.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 2.11.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 2.11.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 2.11.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 2.11.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 2.11.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 2.11.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 2.11.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 2.11.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 2.10.6 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 2.10.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 2.10.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.10.3 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n- 059c956: added examples in docstring\\n\\n## 2.10.2 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.10.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.10.0 - 25 October 2022\\n\\n### Minor Changes\\n\\n- 33742bf: Modify `composeNextState` so that `getCases` can pass it a third\\n  argument: the metadata from Primero's response.\\n\\n  `getCases` will now not only return an array of `cases` in `state.data`, but\\n  metadata related to pagination in `state.metadata`.\\n\\n### Patch Changes\\n\\n- 2014694: remove travis url in readme\\n- bb764db: Conditionally check for 'withReferrals' in case no options are\\n  provided\\\"\\n\\n## 2.9.2 - 21 October 2022\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 2.9.1 - 19 October 2022\\n\\n### Patch Changes\\n\\n- d4ac748: Skipped failing test until we have a new strat (it's working)\\n\\n## 2.9.0 - 19 October 2022\\n\\n### Minor Changes\\n\\n- b37a4ad: add language primero into monorepo\\n\\n### Patch Changes\\n\\n- adb97a0: Fixed issue where upsertCase always took state.data for main params\\n\"","functions":["createCase","createReferrals","getCases","getForms","getLocations","getLookups","getReferrals","updateCase","updateReferral","upsertCase"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Primero host url","format":"uri","minLength":1,"examples":["https://primero.org/some-org"]},"user":{"title":"User","type":"string","description":"The username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@super(!)Superpass"]},"basicAuth":{"title":"Use Basic Auth","type":"boolean","examples":[true]}},"type":"object","additionalProperties":true,"required":["url"]}},
[
  {
    "id": "createCase",
    "longname": "createCase",
    "name": "createCase",
    "kind": "function",
    "scope": "global",
    "description": "Create a new case in Primero\n\nUse this function to create a new case in Primero based on a set of Data.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create a new case in Primero based on a set of Data</caption>\ncreateCase({\n  data: {\n    age: 16,\n    sex: \"female\",\n    name: \"Edwine Edgemont\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 282,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 6,
    "newscope": true,
    "level": 0
  },
  {
    "id": "createReferrals",
    "longname": "createReferrals",
    "name": "createReferrals",
    "kind": "function",
    "scope": "global",
    "description": "Create referrals in Primero\n\nUse this function to bulk refer to one or multiple cases from Primero to a single user",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with referral data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create referrals for multiple cases in Primero</caption>\ncreateReferrals({\n  data: {\n    ids: [\n      \"749e9c6e-60db-45ec-8f5a-69da7c223a79\",\n      \"dcea6052-07d9-4cfa-9abf-9a36987cdd25\",\n    ],\n    transitioned_to: \"primero_cp\",\n    notes: \"This is a bulk referral\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 571,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 10,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Make a GET request to any Primero endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>GET all cases</caption>\nhttp.get('/cases');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 32,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "PrimeroHttpState"
      }
    ],
    "order": 17,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getCases",
    "longname": "getCases",
    "name": "getCases",
    "kind": "function",
    "scope": "global",
    "description": "Use this function to get cases from Primero based on a set of query parameters.\nNote that in many implementations, the `remote` attribute should be set to `true` to ensure that only cases marked for remote access will be retrieved.\nSet `case_id` on the query object to fetch a specific case.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Query parameters to send to primero, which will be built into URL parameters. See {@link https://github.com/primeroIMS/primero/blob/master/doc/api/cases/get.md Primero Docs} for a list of valid parameters.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "(Optional) Additional options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "description": "Set to true to include referrals with each case. This will generate an extra request for each case and may take some time to process.",
        "name": "options.withReferrals"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Fetch all cases</caption>\ngetCases();",
      "<caption>Fetch all cases which match query criteria</caption>\ngetCases({\n  remote: true,\n  sex: \"male\",\n  age: \"10..15\",\n  protection_concerns :\"unaccompanied,separated\",\n});",
      "<caption>Fetch a specific case by id</caption>\ngetCases({\n  case_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});",
      "<caption>Get all remote cases and their referrals</caption>\ngetCases(\n { remote: true },\n { withReferrals: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "getForms",
    "longname": "getForms",
    "name": "getForms",
    "kind": "function",
    "scope": "global",
    "description": "Get forms from Primero\n\nUse this function to get forms from Primero that are accessible to this user based on a set of query parameters.\nThe user can filter the form list by record type and module.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get the list of all forms</caption>\ngetForms();",
      "<caption>Get the list of all forms for a specific module</caption>\ngetForms({\n  module_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 729,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 12,
    "level": 0
  },
  {
    "id": "getLocations",
    "longname": "getLocations",
    "name": "getLocations",
    "kind": "function",
    "scope": "global",
    "description": "Get locations from Primero\n\nUse this function to get a paginated list of all locations that are accessible to this user from Primero.\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\nAlso you can specify `page` value to fetch pagination (Defaults to 1).\nAnother parameter is `hierarchy: true` (Defaults to false)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get loocations from Primero with query parameters</caption>\ngetLocations({\n  page: 1,\n  per: 20\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 856,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 14,
    "level": 0
  },
  {
    "id": "getLookups",
    "longname": "getLookups",
    "name": "getLookups",
    "kind": "function",
    "scope": "global",
    "description": "Get lookups from Primero\n\nUse this function to get a paginated list of all lookups that are accessible to this user from Primero.\nNote: You can specify a `per` value to fetch records per page(Defaults to 20).\nAlso you can specify `page` value to fetch pagination (Defaults to 1)",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with a query param at minimum",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get lookups from Primero with query parameters</caption>\ngetLookups({\n  per: 10000,\n  page: 5\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 792,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 13,
    "level": 0
  },
  {
    "id": "getReferrals",
    "longname": "getReferrals",
    "name": "getReferrals",
    "kind": "function",
    "scope": "global",
    "description": "Get referrals for a specific case in Primero\n\nUse this function to get the list of referrals of one case from Primero.\nThe search can be done using either `record id` or `case id`.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get referrals for a case in Primero by record id</caption>\ngetReferrals({\n  externalId: \"record_id\",\n  id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});",
      "<caption>Get referrals for a case in Primero by case id</caption>\n getReferrals({\n  id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 481,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 9,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "http",
    "description": "Make a PATCH request to Primero",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the body data in JSON format.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Update a single case resource </caption>\nhttp.patch('cases/344f3c08-affc-4d8a-b4d3-925b9f4d2867', {\n  age: 17,\n  sex: \"female\",\n  name: \"Edwine Edgemont\",\n });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "PrimeroHttpState"
      }
    ],
    "order": 19,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Make a POST request to any Primero endpoint.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the resource.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "the body data in JSON format.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "An object containing query params and headers for the request",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>POST a case to Primero</caption>\nhttp.post('cases',{\n    age: 16,\n    sex: \"female\",\n    name: \"Edwine Edgemont\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 62,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "PrimeroHttpState"
      }
    ],
    "order": 18,
    "level": 0
  },
  {
    "id": "PrimeroHttpState",
    "longname": "PrimeroHttpState",
    "name": "PrimeroHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Primero server (excluding the body). Responses will be returned in JSON format",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 15
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of all request headers",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'json'",
        "description": "The response format to parse (e.g., 'json', 'text', or 'stream')",
        "name": "parseAs"
      }
    ],
    "meta": {
      "lineno": 13,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 16,
    "level": 0
  },
  {
    "id": "updateCase",
    "longname": "updateCase",
    "name": "updateCase",
    "kind": "function",
    "scope": "global",
    "description": "Update an existing case in Primero\n\nUse this function to update an existing case from Primero.\nIn this implementation, the function uses a case ID to check for the case to update,\nThen merge the values submitted in this call into an existing case.\nFields not specified in this request will not be modified.\nFor nested subform fields, the subform arrays will be recursively merged,\nkeeping both the existing values and appending the new",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A case ID to use for the update.",
        "name": "id"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update case for a specific case id</caption>\nupdateCase(\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\", {\n  data: {\n    age: 16,\n    sex: \"female\",\n    name: \"Fiona Edgemont\",\n  },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 346,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 7,
    "level": 0
  },
  {
    "id": "updateReferral",
    "longname": "updateReferral",
    "name": "updateReferral",
    "kind": "function",
    "scope": "global",
    "description": "Update a single referral for a specific case in Primero",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an caseExternalId value to use, the id and the referral id to update.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update referral by record id</caption>\nupdateReferral({\n  caseExternalId: \"record_id\",\n  id: \"749e9c6e-60db-45ec-8f5a-69da7c223a79\",\n  caseId: \"dcea6052-07d9-4cfa-9abf-9a36987cdd25\",\n  data: (state) => state.data,\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 636,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 11,
    "level": 0
  },
  {
    "id": "upsertCase",
    "longname": "upsertCase",
    "name": "upsertCase",
    "kind": "function",
    "scope": "global",
    "description": "Upsert case to Primero\n\nUse this function to update an existing case from Primero or to create it otherwise.\nIn this implementation, we first fetch the list of cases,\nthen we check if the case exist before choosing the right operation to do.",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "an object with an externalIds and some case data.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Upsert case for a specific case id</caption>\nupsertCase({\n  externalIds: [\"case_id\"],\n  data: state => ({\n    age: 20,\n    sex: \"male\",\n    name: \"Alex\",\n    status: \"open\",\n    case_id: \"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\",\n  }),\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 405,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/primero/src"
    },
    "order": 8,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "beta",
    "common": true,
    "name": "beta",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"progres","adaptor":"@openfn/language-progres","version":"1.4.6","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#postdata\\\">postData(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### postData\\n\\n<p><code>postData(params, callback) ⇒ Operation</code></p>\\n\\nMake a POST request with a certificate\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Url, Headers and Body parameters |\\n| callback | <code>function</code> | (Optional) A callback function |\\n\\n**Example**\\n```js\\npostData({\\n url: urlDTP,\\n body: obj,\\n headers: {\\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\\n },\\n agentOptions: {\\n   key,\\n   cert,\\n },\\n}, callback)(state)\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-progres\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the UNHCR\\nProGres v4 API.\\n\\n## Design notes\\n\\n- Integration must run through UNHCR's DTP, a middleware layer that provides a\\n  public API for UNHCR internal software.\\n- An API token _and_ a self-signed certificate must be provided for\\n  communication with UNHCR's DTP.\\n- Two-way sync must be possible between Primero and ProGres\\n- Teams still in discussion about whether the most common use-case will be a\\n  timed sync or real-time/event-based sync.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/progres-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/progres-configuration-schema/)\\ndefinition.\\n\\n### Posting data to an endpoint with SSL cert authentication\\n\\n```js\\npostData({\\n  url: urlDTP,\\n  body: { a: 1 },\\n  headers: {\\n    'Subscription-Key': configuration['token'],\\n  },\\n  agentOptions: {\\n    key,\\n    cert,\\n  },\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-progres\\n\\n## 1.4.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 1.4.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.4.4 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.4.3 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.4.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.4.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.4.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 3d9d564c: Add `fn` and `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.3.14 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.3.13 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.3.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.3.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.3.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.3.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.3.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.3.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.3.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.3.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.3.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.3.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.3.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.2.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 1.2.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.2.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.2.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.2.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 039ca0b: Migrate Progres\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["postData"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"url":{"title":"URL","type":"string","description":"The Progres URL","format":"uri","minLength":1,"examples":["https://endpoint/To/DTP"]},"key":{"title":"Private Key","type":"string","description":"Your Progres private key","minLength":1,"examples":["-----BEGIN PRIVATE KEY-----SOMETYPEOFPRIVATEVALUE-----END PRIVATE KEY-----"]},"cert":{"title":"Certificate","type":"string","description":"Your Progres certificate","minLength":1,"examples":["-----BEGIN CERTIFICATE-----SOMETYPEOFVALUE-----END CERTIFICATE-----"]},"token":{"title":"Token","type":"string","description":"Your Progres token","writeOnly":true,"minLength":1,"examples":["[REDACTED]"]}},"type":"object","additionalProperties":true,"required":["url","key","cert","token"]}},
[
  {
    "id": "postData",
    "longname": "postData",
    "name": "postData",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request with a certificate",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Url, Headers and Body parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) A callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "postData({\n url: urlDTP,\n body: obj,\n headers: {\n   'Ocp-Apim-Subscription-Key': configuration['Ocp-Apim-Subscription-Key'],\n },\n agentOptions: {\n   key,\n   cert,\n },\n}, callback)(state)"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/progres/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"rapidpro","adaptor":"@openfn/language-rapidpro","version":"1.1.5","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#addcontact\\\">addContact(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#sendbroadcast\\\">sendBroadcast(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#startflow\\\">startFlow(params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#upsertcontact\\\">upsertContact(params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### addContact\\n\\n<p><code>addContact(params, callback) ⇒ Operation</code></p>\\n\\nAdds a new contact to RapidPro\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\naddContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n* * *\\n\\n### sendBroadcast\\n\\n<p><code>sendBroadcast(params, callback) ⇒ Operation</code></p>\\n\\nSends a message to a list of contacts and/or URNs\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nsendBroadcast({\\n  text: \\\"Hello world\\\",\\n  urns: [\\\"twitter:sirmixalot\\\"],\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\\n* * *\\n\\n### startFlow\\n\\n<p><code>startFlow(params, callback) ⇒ Operation</code></p>\\n\\nStart a RapidPro flow for a number of contacts\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nstartFlow({\\n  flow: \\\"f5901b62-ba76-4003-9c62-72fdacc1b7b7\\\",\\n  restart_participants: false,\\n  contacts: [\\\"a052b00c-15b3-48e6-9771-edbaa277a353\\\"]\\n});\\n```\\n\\n* * *\\n\\n### upsertContact\\n\\n<p><code>upsertContact(params, callback) ⇒ Operation</code></p>\\n\\nUpserts a contact to RapidPro by URN\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to upsert a contact |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**\\n```js\\nupsertContact({\\n  name: \\\"Mamadou\\\",\\n  language: \\\"ENG\\\",\\n  urns: [\\\"tel:+250788123123\\\"]\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-rapidpro\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\n[RapidPro API](https://rapidpro.io/api/v2/).\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/rapidpro-docs)\\nfor full technical documentation.\\n\\n## Usage\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/rapidpro-configuration-schema/)\\ndefinition.\\n\\n#### sample job expression using operation\\n\\n```js\\nsendBroadcast({\\n  \\\"text\\\": \\\"Hello friends.\\\",\\n  \\\"urns\\\": [],\\n  \\\"contacts\\\": [],\\n  \\\"groups\\\", [],\\n});\\n```\\n\\n### Key helper functions\\n\\n**sendBroadcast(...) to send broadcast message to multiple contacts**\\n\\n```js\\nsendBroadcast({\\n  text: 'Hello world',\\n  urns: ['twitter:sirmixalot'],\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**startFlow(...) to trigger an automation flow in RapidPro**\\n\\n```js\\nstartFlow({\\n  flow: 'f5901b62-ba76-4003-9c62-72fdacc1b7b7',\\n  restart_participants: false,\\n  contacts: ['a052b00c-15b3-48e6-9771-edbaa277a353'],\\n});\\n```\\n\\n**upsertContact(...) to update/insert a Contact (and check if exists using\\nexternal identifiers)**\\n\\n```js\\nupsertContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n**addContact(...) to insert a Contact**\\n\\n```js\\naddContact({\\n  name: 'Mamadou',\\n  language: 'ENG',\\n  urns: ['tel:+250788123123'],\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-rapidpro\\n\\n## 1.1.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 1.1.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 1.1.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.14 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.13 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.12 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.0.11 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.10 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.0.9 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.0.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 1.0.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 1.0.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 1.0.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 1.0.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 1.0.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 1.0.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 1.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.5.6 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.5.5 - 30 March 2023\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.5.4 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.5.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.5.2 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.5.1 - 25 November 2022\\n\\n### Patch Changes\\n\\n- cbb8968: Fix axios Inefficient Regular Expression Complexity vulnerability\\n\\n## 0.5.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 11f83ff: Migrate RapidPro\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["addContact","sendBroadcast","startFlow","upsertContact"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","default":"https://app.rapidpro.io/","description":"instance host URL","format":"uri","minLength":1,"examples":["https://app.rapidpro.io/"]},"token":{"title":"Token","type":"string","description":"instance access token","writeOnly":true,"minLength":1,"examples":["#Super-sSCrecrete-token"]},"apiVersion":{"title":"API Version","type":"string","description":"API version to use. Leave this empty to use the default v2","minLength":1,"examples":["v2"]}},"type":"object","additionalProperties":true,"required":["host","token"]}},
[
  {
    "id": "addContact",
    "longname": "addContact",
    "name": "addContact",
    "kind": "function",
    "scope": "global",
    "description": "Adds a new contact to RapidPro",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "addContact({\n  name: \"Mamadou\",\n  language: \"ENG\",\n  urns: [\"tel:+250788123123\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 51,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "sendBroadcast",
    "longname": "sendBroadcast",
    "name": "sendBroadcast",
    "kind": "function",
    "scope": "global",
    "description": "Sends a message to a list of contacts and/or URNs",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "sendBroadcast({\n  text: \"Hello world\",\n  urns: [\"twitter:sirmixalot\"],\n  contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 212,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "startFlow",
    "longname": "startFlow",
    "name": "startFlow",
    "kind": "function",
    "scope": "global",
    "description": "Start a RapidPro flow for a number of contacts",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to create the new resource",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "startFlow({\n  flow: \"f5901b62-ba76-4003-9c62-72fdacc1b7b7\",\n  restart_participants: false,\n  contacts: [\"a052b00c-15b3-48e6-9771-edbaa277a353\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 163,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "upsertContact",
    "longname": "upsertContact",
    "name": "upsertContact",
    "kind": "function",
    "scope": "global",
    "description": "Upserts a contact to RapidPro by URN",
    "params": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "data to upsert a contact",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "upsertContact({\n  name: \"Mamadou\",\n  language: \"ENG\",\n  urns: [\"tel:+250788123123\"]\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 93,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/rapidpro/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Get the string value of a key.\nIf the key does not exist, null is returned.\nAn error is thrown if the value stored at key is not a string, because `get()` only handles string values.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get the value of the patient key</caption>\nget(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "hget",
    "longname": "hget",
    "name": "hget",
    "kind": "function",
    "scope": "global",
    "description": "Get the value associated with a specific field in a hash stored at a specified key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Field",
        "name": "field"
      }
    ],
    "examples": [
      "<caption>Get the value of the name field under the patient key</caption>\nhget(\"patient\", \"name\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 106,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "hGetAll",
    "longname": "hGetAll",
    "name": "hGetAll",
    "kind": "function",
    "scope": "global",
    "description": "Get all fields and values of a hash, as an object, for a specified key.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get the hash obejct at the noderedis:animals:1 key</caption>\nhGetAll(\"noderedis:animals:1\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 169,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      },
      {
        "name": "data",
        "description": "The hash as an object",
        "type": null
      }
    ],
    "order": 7,
    "level": 0
  },
  {
    "id": "hset",
    "longname": "hset",
    "name": "hset",
    "kind": "function",
    "scope": "global",
    "description": "Sets the specified fields to their respective values in the hash stored at key.\nThis function overwrites the values of specified fields that exist in the hash.\nIf key doesn't exist, a new key holding a hash is created.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "The values to set",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set a field and value for the `patient` key</caption>\nhset('patient', { name: 'mtuchi' });",
      "<caption>Set multiple field values for the `patient` key</caption>\nhset('patient', { name: 'victor', ihs_number: 12345  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 220,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "jGet",
    "longname": "jGet",
    "name": "jGet",
    "kind": "function",
    "scope": "global",
    "description": "Get the value at a specified path in a JSON document stored in a key",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key at which the JSON document is stored.",
        "name": "key"
      }
    ],
    "examples": [
      "<caption>Get JSON document value of the patient key</caption>\njGet(\"patient\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 127,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "jSet",
    "longname": "jSet",
    "name": "jSet",
    "kind": "function",
    "scope": "global",
    "description": "Creates a JSON object at the specified key. If the key already exists, the\nexisting value will be replaced by the new value.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key to modify.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string",
            "object"
          ]
        },
        "description": "The JSON object or string value to set.",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set a JSON object for the key `patient`</caption>\njSet('patient', { name: 'victor', ihs_number: 12345  });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 245,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 10,
    "level": 0
  },
  {
    "id": "mGet",
    "longname": "mGet",
    "name": "mGet",
    "kind": "function",
    "scope": "global",
    "description": "Get the values at specified paths in JSON documents stored at multiple keys.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "The keys at which the JSON documents are stored.",
        "name": "keys"
      }
    ],
    "examples": [
      "<caption>Get JSON document values of the patient and doctor keys</caption>\nmGet([\"patient\", \"doctor\"]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 148,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      }
    ],
    "order": 6,
    "level": 0
  },
  {
    "id": "mSet",
    "longname": "mSet",
    "name": "mSet",
    "kind": "function",
    "scope": "global",
    "description": "Set values at the root path ('$') in JSON documents stored at multiple keys.\nThis function allows setting multiple key-value pairs in Redis JSON documents in a single operation.\nIf a key already exists, its value will be replaced. If it does not exist, a new key-value pair will be created.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<{key: string, value: (string|object)}>"
          ]
        },
        "description": "An array of key-value pairs to set in the JSON store.",
        "name": "entries"
      }
    ],
    "examples": [
      "<caption>Set multiple JSON objects</caption>\nmSet([{ key: 'patient', value: { name: 'victor', ihs_number: 12345 } },\n      { key: 'doctor', value: { name: 'Alice', specialization: 'cardiology' } }]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 271,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 11,
    "level": 0
  },
  {
    "id": "RedisState",
    "longname": "RedisState",
    "name": "RedisState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the result returned from Redis",
        "name": "data"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 54,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "order": 1
  },
  {
    "id": "scan",
    "longname": "scan",
    "name": "scan",
    "kind": "function",
    "scope": "global",
    "description": "Returns all keys which match the provided pattern.\nscan iterates the whole database to find the matching keys",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A glob-style pattern",
        "name": "pattern"
      },
      {
        "type": {
          "names": [
            "ScanOptions"
          ]
        },
        "description": "Scan options",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Scan for matching keys</caption>\nscan('*:20240524T172736Z*');",
      "<caption>Scan for keys and fetch the string values inside</caption>\nscan('*:20240524T172736Z*');\neach($.data, get($.data).then((state) => {\n   state.results ??= [];\n   state.results.push(state.data)\n   return state;\n})"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 312,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "RedisState"
      },
      {
        "name": "data",
        "description": "an array of keys which match the pattern",
        "type": null
      }
    ],
    "order": 12,
    "level": 0
  },
  {
    "id": "ScanOptions",
    "longname": "ScanOptions",
    "name": "ScanOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the scan function",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream).",
        "name": "type"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "description": "A hint to the server about how many elements to return in the call (default is 10).",
        "name": "count"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 46,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "set",
    "longname": "set",
    "name": "set",
    "kind": "function",
    "scope": "global",
    "description": "Set the string value of a key.\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The name of the key",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The value to set",
        "name": "value"
      }
    ],
    "examples": [
      "<caption>Set the \"patient\" key to value \"mtuchi\"</caption>\nset(\"patient\", \"mtuchi\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/redis/src"
    },
    "state": [
      {
        "name": "references",
        "description": "an array of all previous data objects used in the Job",
        "type": null
      }
    ],
    "order": 8,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"redis","adaptor":"@openfn/language-redis","version":"1.3.3","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(key)</a></dt>\\n<dt>\\n    <a href=\\\"#hget\\\">hget(key, field)</a></dt>\\n<dt>\\n    <a href=\\\"#hgetall\\\">hGetAll(key)</a></dt>\\n<dt>\\n    <a href=\\\"#hset\\\">hset(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#jget\\\">jGet(key)</a></dt>\\n<dt>\\n    <a href=\\\"#jset\\\">jSet(key, value)</a></dt>\\n<dt>\\n    <a href=\\\"#mget\\\">mGet(keys)</a></dt>\\n<dt>\\n    <a href=\\\"#mset\\\">mSet(entries)</a></dt>\\n<dt>\\n    <a href=\\\"#scan\\\">scan(pattern, options)</a></dt>\\n<dt>\\n    <a href=\\\"#set\\\">set(key, value)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(key) ⇒ Operation</code></p>\\n\\nGet the string value of a key.\\nIf the key does not exist, null is returned.\\nAn error is thrown if the value stored at key is not a string, because `get()` only handles string values.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the value of the patient key\\n```js\\nget(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### hget\\n\\n<p><code>hget(key, field) ⇒ Operation</code></p>\\n\\nGet the value associated with a specific field in a hash stored at a specified key.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| field | <code>string</code> | Field |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the value of the name field under the patient key\\n```js\\nhget(\\\"patient\\\", \\\"name\\\");\\n```\\n\\n* * *\\n\\n### hGetAll\\n\\n<p><code>hGetAll(key) ⇒ Operation</code></p>\\n\\nGet all fields and values of a hash, as an object, for a specified key.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The hash as an object |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get the hash obejct at the noderedis:animals:1 key\\n```js\\nhGetAll(\\\"noderedis:animals:1\\\");\\n```\\n\\n* * *\\n\\n### hset\\n\\n<p><code>hset(key, value) ⇒ Operation</code></p>\\n\\nSets the specified fields to their respective values in the hash stored at key.\\nThis function overwrites the values of specified fields that exist in the hash.\\nIf key doesn't exist, a new key holding a hash is created.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| value | <code>object</code> | The values to set |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set a field and value for the `patient` key\\n```js\\nhset('patient', { name: 'mtuchi' });\\n```\\n**Example:** Set multiple field values for the `patient` key\\n```js\\nhset('patient', { name: 'victor', ihs_number: 12345  });\\n```\\n\\n* * *\\n\\n### jGet\\n\\n<p><code>jGet(key) ⇒ Operation</code></p>\\n\\nGet the value at a specified path in a JSON document stored in a key\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The key at which the JSON document is stored. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get JSON document value of the patient key\\n```js\\njGet(\\\"patient\\\");\\n```\\n\\n* * *\\n\\n### jSet\\n\\n<p><code>jSet(key, value) ⇒ Operation</code></p>\\n\\nCreates a JSON object at the specified key. If the key already exists, the\\nexisting value will be replaced by the new value.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The key to modify. |\\n| value | <code>string</code> \\\\| <code>object</code> | The JSON object or string value to set. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set a JSON object for the key `patient`\\n```js\\njSet('patient', { name: 'victor', ihs_number: 12345  });\\n```\\n\\n* * *\\n\\n### mGet\\n\\n<p><code>mGet(keys) ⇒ Operation</code></p>\\n\\nGet the values at specified paths in JSON documents stored at multiple keys.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| keys | <code>Array.&lt;string&gt;</code> | The keys at which the JSON documents are stored. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the result returned from Redis |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Get JSON document values of the patient and doctor keys\\n```js\\nmGet([\\\"patient\\\", \\\"doctor\\\"]);\\n```\\n\\n* * *\\n\\n### mSet\\n\\n<p><code>mSet(entries) ⇒ Operation</code></p>\\n\\nSet values at the root path ('$') in JSON documents stored at multiple keys.\\nThis function allows setting multiple key-value pairs in Redis JSON documents in a single operation.\\nIf a key already exists, its value will be replaced. If it does not exist, a new key-value pair will be created.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| entries | <code>Array.&lt;{key: string, value: (string\\\\|object)}&gt;</code> | An array of key-value pairs to set in the JSON store. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set multiple JSON objects\\n```js\\nmSet([{ key: 'patient', value: { name: 'victor', ihs_number: 12345 } },\\n      { key: 'doctor', value: { name: 'Alice', specialization: 'cardiology' } }]);\\n```\\n\\n* * *\\n\\n### scan\\n\\n<p><code>scan(pattern, options) ⇒ Operation</code></p>\\n\\nReturns all keys which match the provided pattern.\\nscan iterates the whole database to find the matching keys\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| pattern | <code>string</code> | A glob-style pattern |\\n| options | [<code>ScanOptions</code>](#scanoptions) | Scan options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | an array of keys which match the pattern |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Scan for matching keys\\n```js\\nscan('*:20240524T172736Z*');\\n```\\n**Example:** Scan for keys and fetch the string values inside\\n```js\\nscan('*:20240524T172736Z*');\\neach($.data, get($.data).then((state) => {\\n   state.results ??= [];\\n   state.results.push(state.data)\\n   return state;\\n})\\n```\\n\\n* * *\\n\\n### set\\n\\n<p><code>set(key, value) ⇒ Operation</code></p>\\n\\nSet the string value of a key.\\nIf the key already exists, its value is updated. Otherwise, a new key-value pair is created.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | The name of the key |\\n| value | <code>string</code> | The value to set |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Set the \\\"patient\\\" key to value \\\"mtuchi\\\"\\n```js\\nset(\\\"patient\\\", \\\"mtuchi\\\");\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### ScanOptions\\n\\nOptions provided to the scan function\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| type | <code>string</code> | Limits the keys returned to those of a specified type (e.g., string, list, set, hash, json, zset or stream). |\\n| count | <code>integer</code> | A hint to the server about how many elements to return in the call (default is 10). |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-redis <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the redis\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/redis-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/redis-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `hset` function\\n\\n```js\\nhset('patient', { name: 'Bukayo' });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-redis\\n\\n## 1.3.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.3.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.3.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.3.0 - 20 March 2025\\n\\n### Minor Changes\\n\\n- f713bc5: add mSet() function on redis adaptor\\n\\n### Patch Changes\\n\\n- f713bc5: use `util.throwError` for throwing errors\\n\\n## 1.2.8 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.2.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.2.6 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.2.5 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.2.4 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.2.3 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.2.2 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.2.1 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.2.0 - 28 August 2024\\n\\n### Minor Changes\\n\\n- c1e3221: - Add `mGet()` function\\n  - Remove console.log in `hget()`\\n  - Add logging to `scan()`\\n\\n## 1.1.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.1.1 - 15 August 2024\\n\\n### Patch Changes\\n\\n- 2b8ec34: - Update host type configuration-schema\\n\\n## 1.1.0 - 09 August 2024\\n\\n### Minor Changes\\n\\n- Add `jGet()` function\\n- Add `jSet()` function\\n- `scan()` now iterates the whole database\\n  - Removed `cursor` option from `scan`\\n  - Removed default value for `type` option\\n  - Mapped `json` data type to the redis internal type\\n\\n## 1.0.0 - 06 August 2024\\n\\nFirst release. Designed as a low-level wrapper around npm redis client.\\n\\n- get(key)\\n- hget(key, field)\\n- hGetAll(key)\\n- hset(key, value)\\n- scan(pattern,options)\\n- set(key, field)\\n\"","functions":["get","hGetAll","hget","hset","jGet","jSet","mGet","mSet","scan","set"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host","type":"string","minLength":1,"description":"Redis server hostname","format":"uri","examples":["redis.example.com"]},"database":{"title":"Database Number","type":"integer","description":"Redis database number. New connections always use the database 0.","examples":[0]},"username":{"title":"Username","type":"string","description":"Redis Access Control username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Redis Access Control password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]},"port":{"title":"Port","type":"string","description":"Redis server port","writeOnly":true,"default":"6379","examples":["16652"]}},"type":"object","additionalProperties":true,"required":["host","password","username"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"resourcemap","adaptor":"@openfn/language-resourcemap","version":"0.4.15","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language ResourceMap\\n\\nLanguage Pack for building expressions and operations for working with the\\n[resourcemap API](https://github.com/instedd/resourcemap/wiki/REST_API).\\n\\n## Documentation\\n\\nWe are working towards this to start:\\nhttps://github.com/instedd/resourcemap/wiki/REST_API#create-site\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/resourcemap-configuration-schema/)\\ndefinition.\\n\\n## Expressions\\n\\n## `submitSite(collectionId, fields)`\\n\\n```js\\nsubmitSite(\\n  303,\\n  fields(\\n    field('name', dataValue('sampleText')),\\n    field('lat', 48.86),\\n    field('lon', 2.35),\\n    field('properties', function (state) {\\n      return {\\n        Comment: state.data.sampleText,\\n        phone: '85512345678',\\n      };\\n    })\\n  )\\n);\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-resourcemap\\n\\n## 0.4.15 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.4.14 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.4.13 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.4.12 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.4.11 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.4.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.4.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.4.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.4.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 0.4.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.2 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Fix submitSite\\n\\n## 0.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- 664dc7f: migrate resourcemap\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","default":"http://some-site-of-yours.com:8080","description":"ResourceMap base URL","format":"uri","minLength":1,"examples":["http://some-site-of-yours.com:8080"]},"username":{"title":"Username","type":"string","description":"Your ResourceMap username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Your ResourceMap password","writeOnly":true,"minLength":1,"examples":["@super(!)Secret"]}},"type":"object","additionalProperties":true,"required":["baseUrl"]}},
[
  {
    "id": "bulk",
    "longname": "bulk",
    "name": "bulk",
    "kind": "function",
    "scope": "global",
    "description": "Create and execute a bulk job. Nested relationships will be flattened to dot notation automatically.\nThis function uses {@link https://sforce.co/4fDLJnk Bulk API},\nwhich is subject to {@link https://sforce.co/4b6kn6z rate limits}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The bulk operation to be performed.Eg `insert`, `update` or `upsert`",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "an array of records, or a function which returns an array.",
        "name": "records"
      },
      {
        "type": {
          "names": [
            "BulkOptions"
          ]
        },
        "optional": true,
        "description": "Options to configure the request. In addition to these, you can pass any of the options supported by the {@link https://bit.ly/41tyvVU jsforce API}.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Bulk insert</caption>\nbulk(\n  \"Patient__c\",\n  \"insert\",\n  (state) => state.patients.map((x) => ({ Age__c: x.age, Name: x.name })),\n  { failOnError: true }\n);",
      "<caption>Bulk upsert</caption>\nbulk(\n  \"vera__Beneficiary__c\",\n  \"upsert\",\n  [\n    {\n      vera__Reporting_Period__c: 2023,\n      vera__Geographic_Area__c: \"Uganda\",\n      \"vera__Indicator__r.vera__ExtId__c\": 1001,\n      vera__Result_UID__c: \"1001_2023_Uganda\",\n    },\n  ],\n  { extIdField: \"vera__Result_UID__c\" }\n);",
      "<caption>Bulk upsert with a nested relationship</caption>\nbulk(\n  \"vera__Beneficiary__c\",\n  \"upsert\",\n  [\n    {\n      vera__Reporting_Period__c: 2023,\n      \"vera_Project\": {\n        \"Metrics_ID__c\": \"jfh5LAnxu1i4na\"\n      }\n    },\n  ],\n  { extIdField: \"vera__Result_UID__c\" }\n);",
      "<caption>Bulk update Account records using a lazy state reference</caption>\nfn((state) => {\n  state.accounts = state.data.map((a) => ({ Id: a.id, Name: a.name }));\n  return state;\n});\nbulk(\"Account\", \"update\", $.accounts, { failOnError: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 196,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceResultState"
      }
    ],
    "order": 8,
    "newscope": true,
    "level": 0
  },
  {
    "id": "BulkOptions",
    "longname": "BulkOptions",
    "name": "BulkOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Salesforce bulk API request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "External id field. Required for upsert.",
        "name": "extIdField"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Skipping bulk operation if no records.",
        "name": "allowNoOp"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "Fail the operation on error.",
        "name": "failOnError"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 240000,
        "description": "Polling timeout in milliseconds.",
        "name": "pollTimeout"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 6000,
        "description": "Polling interval in milliseconds.",
        "name": "pollInterval"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 41,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "bulkQuery",
    "longname": "bulkQuery",
    "name": "bulkQuery",
    "kind": "function",
    "scope": "global",
    "description": "Execute an SOQL Bulk Query.\nThis function query large data sets and reduce the number of API requests.\n`bulkQuery()` uses {@link https://sforce.co/4azgczz Bulk API v2.0 Query} which is available in API version 47.0 and later.\nThis API is subject to {@link https://sforce.co/4b6kn6z rate limits}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A query string.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "BulkQueryOptions"
          ]
        },
        "optional": true,
        "description": "Options passed to the bulk api.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Bulk query patient records where \"Health_ID__c\" is equal to the value in \"state.data.healthId\"</caption>\nbulkQuery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${$.data.healthId}'`);",
      "<caption>Bulk query with custom polling options</caption>\nbulkQuery(\n  (state) =>\n    `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`,\n  { pollTimeout: 10000, pollInterval: 6000 }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 309,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 9,
    "level": 0
  },
  {
    "id": "BulkQueryOptions",
    "longname": "BulkQueryOptions",
    "name": "BulkQueryOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Salesforce bulk query API request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 90000,
        "description": "Polling timeout in milliseconds.",
        "name": "pollTimeout"
      },
      {
        "type": {
          "names": [
            "integer"
          ]
        },
        "optional": true,
        "defaultvalue": 3000,
        "description": "Polling interval in milliseconds.",
        "name": "pollInterval"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 52,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "create",
    "longname": "create",
    "name": "create",
    "kind": "function",
    "scope": "global",
    "description": "Create one or more new sObject records. Relationships in the record should be nested and not use dot-notation syntax",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "Field attributes for the new record, or an array of field attributes.",
        "name": "records"
      }
    ],
    "examples": [
      "<caption> Single record creation</caption>\ncreate(\"Account\", { Name: \"My Account #1\" });",
      "<caption> Multiple records creation</caption>\ncreate(\"Account\",[{ Name: \"My Account #1\" }, { Name: \"My Account #2\" }]);",
      "<caption> Create records from data on state</caption>\ncreate(\"Account\",\n  $.data.map((account) => ({\n    Name: account.label\n  })\n));",
      "<caption>Update a record with a relationship</caption>\ncreate(\"Account\", {\n  Name: \"My Account #1\" ,\n  \"Project__r\": {\n    \"Metrics_ID__c\": \"jfh5LAnxu1i4na\"\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 373,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceResultState"
      }
    ],
    "order": 10,
    "level": 0
  },
  {
    "id": "describe",
    "longname": "describe",
    "name": "describe",
    "kind": "function",
    "scope": "global",
    "description": "Fetches and logs metadata for an sObject and pushes the result to `state.data`.\nIf `sObjectName` is not specified, it will print the total number of all available sObjects and push the result to `state.data`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The API name of the sObject. If omitted, fetches metadata for all sObjects.",
        "name": "sObjectName"
      }
    ],
    "examples": [
      "<caption>Fetch metadata for all available sObjects</caption>\ndescribe()",
      "<caption>Fetch metadata for Account sObject</caption>\ndescribe('Account')"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 410,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 11,
    "level": 0
  },
  {
    "id": "destroy",
    "longname": "destroy",
    "name": "destroy",
    "kind": "function",
    "scope": "global",
    "description": "Delete records of an sObject.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "description": "ID or array of IDs of records to delete",
        "name": "ids"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Options for the destroy delete operation.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "boolean"
          ]
        },
        "optional": true,
        "defaultvalue": false,
        "description": "If true, the operation will fail if any record fails to delete.",
        "name": "options.failOnError"
      }
    ],
    "examples": [
      "<caption>Delete a single record</caption>\ndestroy(\"Account\", \"001XXXXXXXXXXXXXXX\");",
      "<caption>Allow operation to fail if any record fails to delete</caption>\ndestroy(\"Account\", [\"001XXXXXXXXXXXXXXX\", \"001YYYYYYYYYYYYYYY\"], {\n  failOnError: true,\n});",
      "<caption> Using a state variable</caption>\n fn((state) => {\n  state.data = [\"001XXXXXXXXXXXXXXX\", \"001YYYYYYYYYYYYYYY\"];\n  return state;\n});\ndestroy(\"Account\", $.data);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 455,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceResultState"
      }
    ],
    "order": 12,
    "level": 0
  },
  {
    "id": "FullRequestOptions",
    "longname": "FullRequestOptions",
    "name": "FullRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the Salesforce HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "GET",
        "description": "HTTP method to use.",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of request headers.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object request query.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object request body.",
        "name": "body"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 15,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 19,
    "level": 0
  },
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "http",
    "description": "Send a GET request on salesforce server configured in `state.configuration`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Salesforce API endpoint.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "SimpleRequestOptions"
          ]
        },
        "optional": true,
        "description": "Configure headers and query parameters for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Make a GET request to a custom Salesforce flow</caption>\nhttp.get('/actions/custom/flow/POC_OpenFN_Test_Flow');",
      "<caption>Make a GET request to a custom Salesforce flow with query parameters</caption>\nhttp.get('/actions/custom/flow/POC_OpenFN_Test_Flow', { query: { Status: 'Active' } });",
      "<caption>Make a GET request then map the response</caption>\nhttp.get(\"/jobs/query/v1/jobs/001XXXXXXXXXXXXXXX/results\").then((state) => {\n  state.mapping = state.data.map((d) => ({ name: d.name, id: d.extId }));\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 88,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 21,
    "newscope": true,
    "level": 0
  },
  {
    "id": "insert",
    "longname": "insert",
    "name": "insert",
    "kind": "function",
    "scope": "global",
    "description": "Alias for \"create(sObjectName, records)\".",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "Field attributes for the new record, or an array of field attributes.",
        "name": "records"
      }
    ],
    "examples": [
      "<caption> Single record creation</caption>\ninsert(\"Account\", { Name: \"My Account #1\" });",
      "<caption> Multiple records creation</caption>\ninsert(\"Account\",[{ Name: \"My Account #1\" }, { Name: \"My Account #2\" }]);",
      "<caption> Using a state variable</caption>\nfn((state) => {\n  state.data = [{ Name: \"My Account #1\" }, { Name: \"My Account #2\" }];\n  return state;\n});\ninsert(\"Account\", $.data);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 507,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 13,
    "level": 0
  },
  {
    "id": "Operation",
    "longname": "Operation",
    "name": "Operation",
    "kind": "typedef",
    "scope": "global",
    "params": [
      {
        "type": {
          "names": [
            "State"
          ]
        },
        "name": "state"
      }
    ],
    "type": {
      "names": [
        "function"
      ]
    },
    "ignore": true,
    "meta": {
      "lineno": 17,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 1
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "http",
    "description": "Send a POST request to salesforce server configured in `state.configuration`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Salesforce API endpoint.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "A JSON Object request body.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "SimpleRequestOptions"
          ]
        },
        "optional": true,
        "description": "Configure headers and query parameters for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>POST request to Salesforce</caption>\nhttp.post(\"/jobs/query\", {\n  operation: \"query\",\n  query: \"SELECT Id, Name FROM Account LIMIT 1000\",\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 107,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 22,
    "level": 0
  },
  {
    "id": "query",
    "longname": "query",
    "name": "query",
    "kind": "function",
    "scope": "global",
    "description": "Executes an SOQL (Salesforce Object Query Language) query to retrieve records from Salesforce.\nNote that in an event of a query error, error logs will be printed but the operation will not throw the error.\n\nThe Salesforce query API is subject to rate limits, {@link https://sforce.co/3W9zyaQ learn more here}.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A SOQL query string. Must be less than 4000 characters in WHERE clause",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Query options",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 10000,
        "description": "Maximum number of records to fetch. If `limit: Infinity` is passed, all records will be fetched.",
        "name": "options.limit"
      }
    ],
    "examples": [
      "<caption>Run a query and download all matching records</caption>\nquery('SELECT Id FROM Patient__c', { limit: Infinity });",
      "<caption>Run a query and limit records</caption>\nquery('SELECT Id From Account Limit 10');",
      "<caption>Query patients by Health ID</caption>\nquery(state => `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.healthId}'`);",
      "<caption>Query patients by Health ID using a lazy state reference</caption>\nquery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${$.data.healthId}'`);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 537,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      },
      {
        "name": "data",
        "description": "Array of result objects",
        "type": "Array"
      },
      {
        "name": "response",
        "description": "An object of result metadata.\n                    <code>{ done, totalSize, nextRecordsUrl?: string }</code>\n                    where nextRecordsUrl is only present when done is false",
        "type": "Object"
      }
    ],
    "order": 14,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "http",
    "description": "Send a request to salesforce server configured in `state.configuration`.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The Salesforce API endpoint.",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "FullRequestOptions"
          ]
        },
        "optional": true,
        "description": "Configure headers, query and body parameters for the request.",
        "name": "options"
      }
    ],
    "examples": [
      "<caption>Make a POST request to a custom Salesforce flow</caption>\nhttp.request(\"/actions/custom/flow/POC_OpenFN_Test_Flow\", {\n  method: \"POST\",\n  body: { inputs: [{}] },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 39,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 20,
    "level": 0
  },
  {
    "id": "retrieve",
    "longname": "retrieve",
    "name": "retrieve",
    "kind": "function",
    "scope": "global",
    "description": "Retrieves a Salesforce sObject(s).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The sObject to retrieve",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The id of the record",
        "name": "id"
      }
    ],
    "examples": [
      "<caption>Retrieve a specific ContentVersion record</caption>\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 683,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "order": 17,
    "level": 0
  },
  {
    "id": "SalesforceResultState",
    "longname": "SalesforceResultState",
    "name": "SalesforceResultState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "Summary of the response from Salesforce",
        "name": "data"
      },
      {
        "description": "`true` if Salesforce reports no errors from the operation",
        "name": "data.success"
      },
      {
        "description": "Array of ids for every successful completion",
        "name": "data.completed"
      },
      {
        "description": "Array of errors reported by Salesforce",
        "name": "data.errors"
      },
      {
        "description": "History of all previous states",
        "name": "references"
      }
    ],
    "meta": {
      "lineno": 31,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "SalesforceState",
    "longname": "SalesforceState",
    "name": "SalesforceState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "API response data. Can be either an object or array of objects",
        "name": "data"
      },
      {
        "description": "History of all previous states",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 23,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 2
  },
  {
    "id": "SimpleRequestOptions",
    "longname": "SimpleRequestOptions",
    "name": "SimpleRequestOptions",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of request headers.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Object of request query.",
        "name": "query"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 8,
      "filename": "http.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 18,
    "level": 0
  },
  {
    "id": "State",
    "longname": "State",
    "name": "State",
    "kind": "typedef",
    "scope": "global",
    "type": {
      "names": [
        "object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON Data.",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Array.<Reference>"
          ]
        },
        "description": "History of all previous operations.",
        "name": "references"
      }
    ],
    "ignore": true,
    "meta": {
      "lineno": 10,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 0
  },
  {
    "id": "toUTF8",
    "longname": "toUTF8",
    "name": "toUTF8",
    "kind": "function",
    "scope": "util",
    "description": "Transliterates unicode characters to their best ASCII representation",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "A string with unicode characters",
        "name": "input"
      }
    ],
    "examples": [
      "<caption>Transliterate `άνθρωποι` to `anthropoi`</caption>\nfn((state) => {\n  const s = util.toUTF8(\"άνθρωποι\");\n  console.log(s); // anthropoi\n  return state;\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "- ASCII representation of input string"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 25,
      "filename": "util.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "order": 23,
    "newscope": true,
    "level": 0
  },
  {
    "id": "update",
    "longname": "update",
    "name": "update",
    "kind": "function",
    "scope": "global",
    "description": "Update an sObject record or records. Relationships in the record should be nested and not use dot-notation syntax",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "object",
            "Array.<object>"
          ]
        },
        "description": "Field attributes for the new object.",
        "name": "records"
      }
    ],
    "examples": [
      "<caption> Single record update</caption>\nupdate(\"Account\", {\n  Id: \"0010500000fxbcuAAA\",\n  Name: \"Updated Account #1\",\n});",
      "<caption> Multiple records update</caption>\nupdate(\"Account\", [\n  { Id: \"0010500000fxbcuAAA\", Name: \"Updated Account #1\" },\n  { Id: \"0010500000fxbcvAAA\", Name: \"Updated Account #2\" },\n]);",
      "<caption>Update a record with a relationship</caption>\nupdate(\"Account\", {\n  Id: \"0010500000fxbcuAAA\",\n  \"Project__r\": {\n    \"Metrics_ID__c\": \"jfh5LAnxu1i4na\"\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 647,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceResultState"
      }
    ],
    "order": 16,
    "level": 0
  },
  {
    "id": "upsert",
    "longname": "upsert",
    "name": "upsert",
    "kind": "function",
    "scope": "global",
    "description": "Create a new sObject record, or updates it if it already exists. Relationships in the record should be nested and not use dot-notation syntax",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "API name of the sObject.",
        "name": "sObjectName"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The external ID of the sObject.",
        "name": "externalId"
      },
      {
        "type": {
          "names": [
            "Object",
            "Array.<Object>"
          ]
        },
        "description": "Field attributes for the records to upsert, or an array of field attributes.",
        "name": "records"
      }
    ],
    "examples": [
      "<caption> Single record upsert </caption>\nupsert(\"UpsertTable__c\", \"ExtId__c\", { Name: \"Record #1\", ExtId__c : 'ID-0000001' });",
      "<caption> Multiple record upsert </caption>\nupsert(\"UpsertTable__c\", \"ExtId__c\", [\n  { Name: \"Record #1\", ExtId__c : 'ID-0000001' },\n  { Name: \"Record #2\", ExtId__c : 'ID-0000002' },\n]);",
      "<caption>Update a record with a relationship</caption>\nupsert(\"UpsertTable__c\", {\n  Name: \"Record #1\",\n  \"Project__r\": {\n    \"Metrics_ID__c\": \"jfh5LAnxu1i4na\"\n  }\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 598,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/salesforce/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SalesforceState"
      }
    ],
    "customTags": [
      {
        "tag": "magic",
        "value": "sObjectName - $.children[?(!@.meta.system)].name"
      },
      {
        "tag": "magic",
        "value": "externalId - $.children[?(@.name==\"{{args.sObject}}\")].children[?(@.meta.externalId)].name"
      },
      {
        "tag": "magic",
        "value": "records - $.children[?(@.name==\"{{args.sObject}}\")].children[?(!@.meta.externalId)]"
      }
    ],
    "order": 15,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "expandReferences",
    "common": true,
    "name": "expandReferences",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "humanProper",
    "common": true,
    "name": "humanProper",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "index",
    "common": true,
    "name": "index",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "join",
    "common": true,
    "name": "join",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "jsonValue",
    "common": true,
    "name": "jsonValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "referencePath",
    "common": true,
    "name": "referencePath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "source",
    "common": true,
    "name": "source",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "toArray",
    "common": true,
    "name": "toArray",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"salesforce","adaptor":"@openfn/language-salesforce","version":"7.0.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#bulk\\\">bulk(sObjectName, operation, records, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#bulkquery\\\">bulkQuery(query, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#create\\\">create(sObjectName, records)</a></dt>\\n<dt>\\n    <a href=\\\"#describe\\\">describe(sObjectName)</a></dt>\\n<dt>\\n    <a href=\\\"#destroy\\\">destroy(sObjectName, ids, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#insert\\\">insert(sObjectName, records)</a></dt>\\n<dt>\\n    <a href=\\\"#query\\\">query(query, [options])</a></dt>\\n<dt>\\n    <a href=\\\"#retrieve\\\">retrieve(sObjectName, id)</a></dt>\\n<dt>\\n    <a href=\\\"#update\\\">update(sObjectName, records)</a></dt>\\n<dt>\\n    <a href=\\\"#upsert\\\">upsert(sObjectName, externalId, records)</a></dt>\\n</dl>\\n\\nThis adaptor exports the following namespaced functions:\\n\\n<dl>\\n<dt>\\n    <a href=\\\"#http_get\\\">http.get(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_post\\\">http.post(path, body, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#http_request\\\">http.request(path, [options])</a>\\n</dt>\\n\\n<dt>\\n    <a href=\\\"#util_toUTF8\\\">util.toUTF8(input)</a>\\n</dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#expandreferences\\\">expandReferences()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#humanproper\\\">humanProper()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#index\\\">index()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#join\\\">join()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#jsonvalue\\\">jsonValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#referencepath\\\">referencePath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#source\\\">source()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#toarray\\\">toArray()</a>\\n</dt></dl>\\n\\n## Functions\\n### bulk\\n\\n<p><code>bulk(sObjectName, operation, records, [options]) ⇒ Operation</code></p>\\n\\nCreate and execute a bulk job. Nested relationships will be flattened to dot notation automatically.\\nThis function uses [Bulk API](https://sforce.co/4fDLJnk),\\nwhich is subject to [rate limits](https://sforce.co/4b6kn6z).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | API name of the sObject. |\\n| operation | <code>string</code> | The bulk operation to be performed.Eg `insert`, `update` or `upsert` |\\n| records | <code>array</code> | an array of records, or a function which returns an array. |\\n| [options] | [<code>BulkOptions</code>](#bulkoptions) | Options to configure the request. In addition to these, you can pass any of the options supported by the [jsforce API](https://bit.ly/41tyvVU). |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | Summary of the response from Salesforce |\\n| data.success | `true` if Salesforce reports no errors from the operation |\\n| data.completed | Array of ids for every successful completion |\\n| data.errors | Array of errors reported by Salesforce |\\n| references | History of all previous states |\\n**Example:** Bulk insert\\n```js\\nbulk(\\n  \\\"Patient__c\\\",\\n  \\\"insert\\\",\\n  (state) => state.patients.map((x) => ({ Age__c: x.age, Name: x.name })),\\n  { failOnError: true }\\n);\\n```\\n**Example:** Bulk upsert\\n```js\\nbulk(\\n  \\\"vera__Beneficiary__c\\\",\\n  \\\"upsert\\\",\\n  [\\n    {\\n      vera__Reporting_Period__c: 2023,\\n      vera__Geographic_Area__c: \\\"Uganda\\\",\\n      \\\"vera__Indicator__r.vera__ExtId__c\\\": 1001,\\n      vera__Result_UID__c: \\\"1001_2023_Uganda\\\",\\n    },\\n  ],\\n  { extIdField: \\\"vera__Result_UID__c\\\" }\\n);\\n```\\n**Example:** Bulk upsert with a nested relationship\\n```js\\nbulk(\\n  \\\"vera__Beneficiary__c\\\",\\n  \\\"upsert\\\",\\n  [\\n    {\\n      vera__Reporting_Period__c: 2023,\\n      \\\"vera_Project\\\": {\\n        \\\"Metrics_ID__c\\\": \\\"jfh5LAnxu1i4na\\\"\\n      }\\n    },\\n  ],\\n  { extIdField: \\\"vera__Result_UID__c\\\" }\\n);\\n```\\n**Example:** Bulk update Account records using a lazy state reference\\n```js\\nfn((state) => {\\n  state.accounts = state.data.map((a) => ({ Id: a.id, Name: a.name }));\\n  return state;\\n});\\nbulk(\\\"Account\\\", \\\"update\\\", $.accounts, { failOnError: true });\\n```\\n\\n* * *\\n\\n### bulkQuery\\n\\n<p><code>bulkQuery(query, [options]) ⇒ Operation</code></p>\\n\\nExecute an SOQL Bulk Query.\\nThis function query large data sets and reduce the number of API requests.\\n`bulkQuery()` uses [Bulk API v2.0 Query](https://sforce.co/4azgczz) which is available in API version 47.0 and later.\\nThis API is subject to [rate limits](https://sforce.co/4b6kn6z).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>string</code> | A query string. |\\n| [options] | [<code>BulkQueryOptions</code>](#bulkqueryoptions) | Options passed to the bulk api. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** Bulk query patient records where \\\"Health_ID__c\\\" is equal to the value in \\\"state.data.healthId\\\"\\n```js\\nbulkQuery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${$.data.healthId}'`);\\n```\\n**Example:** Bulk query with custom polling options\\n```js\\nbulkQuery(\\n  (state) =>\\n    `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`,\\n  { pollTimeout: 10000, pollInterval: 6000 }\\n);\\n```\\n\\n* * *\\n\\n### create\\n\\n<p><code>create(sObjectName, records) ⇒ Operation</code></p>\\n\\nCreate one or more new sObject records. Relationships in the record should be nested and not use dot-notation syntax\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | API name of the sObject. |\\n| records | <code>Object</code> \\\\| <code>Array.&lt;Object&gt;</code> | Field attributes for the new record, or an array of field attributes. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | Summary of the response from Salesforce |\\n| data.success | `true` if Salesforce reports no errors from the operation |\\n| data.completed | Array of ids for every successful completion |\\n| data.errors | Array of errors reported by Salesforce |\\n| references | History of all previous states |\\n**Example:**  Single record creation\\n```js\\ncreate(\\\"Account\\\", { Name: \\\"My Account #1\\\" });\\n```\\n**Example:**  Multiple records creation\\n```js\\ncreate(\\\"Account\\\",[{ Name: \\\"My Account #1\\\" }, { Name: \\\"My Account #2\\\" }]);\\n```\\n**Example:**  Create records from data on state\\n```js\\ncreate(\\\"Account\\\",\\n  $.data.map((account) => ({\\n    Name: account.label\\n  })\\n));\\n```\\n**Example:** Update a record with a relationship\\n```js\\ncreate(\\\"Account\\\", {\\n  Name: \\\"My Account #1\\\" ,\\n  \\\"Project__r\\\": {\\n    \\\"Metrics_ID__c\\\": \\\"jfh5LAnxu1i4na\\\"\\n  }\\n});\\n```\\n\\n* * *\\n\\n### describe\\n\\n<p><code>describe(sObjectName) ⇒ Operation</code></p>\\n\\nFetches and logs metadata for an sObject and pushes the result to `state.data`.\\nIf `sObjectName` is not specified, it will print the total number of all available sObjects and push the result to `state.data`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | The API name of the sObject. If omitted, fetches metadata for all sObjects. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** Fetch metadata for all available sObjects\\n```js\\ndescribe()\\n```\\n**Example:** Fetch metadata for Account sObject\\n```js\\ndescribe('Account')\\n```\\n\\n* * *\\n\\n### destroy\\n\\n<p><code>destroy(sObjectName, ids, [options]) ⇒ Operation</code></p>\\n\\nDelete records of an sObject.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| sObjectName | <code>string</code> |  | API name of the sObject. |\\n| ids | <code>string</code> \\\\| <code>Array.&lt;string&gt;</code> |  | ID or array of IDs of records to delete |\\n| [options] | <code>object</code> |  | Options for the destroy delete operation. |\\n| [options.failOnError] | <code>boolean</code> | <code>false</code> | If true, the operation will fail if any record fails to delete. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | Summary of the response from Salesforce |\\n| data.success | `true` if Salesforce reports no errors from the operation |\\n| data.completed | Array of ids for every successful completion |\\n| data.errors | Array of errors reported by Salesforce |\\n| references | History of all previous states |\\n**Example:** Delete a single record\\n```js\\ndestroy(\\\"Account\\\", \\\"001XXXXXXXXXXXXXXX\\\");\\n```\\n**Example:** Allow operation to fail if any record fails to delete\\n```js\\ndestroy(\\\"Account\\\", [\\\"001XXXXXXXXXXXXXXX\\\", \\\"001YYYYYYYYYYYYYYY\\\"], {\\n  failOnError: true,\\n});\\n```\\n**Example:**  Using a state variable\\n```js\\n fn((state) => {\\n  state.data = [\\\"001XXXXXXXXXXXXXXX\\\", \\\"001YYYYYYYYYYYYYYY\\\"];\\n  return state;\\n});\\ndestroy(\\\"Account\\\", $.data);\\n```\\n\\n* * *\\n\\n### insert\\n\\n<p><code>insert(sObjectName, records) ⇒ Operation</code></p>\\n\\nAlias for \\\"create(sObjectName, records)\\\".\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | API name of the sObject. |\\n| records | <code>Object</code> \\\\| <code>Array.&lt;Object&gt;</code> | Field attributes for the new record, or an array of field attributes. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:**  Single record creation\\n```js\\ninsert(\\\"Account\\\", { Name: \\\"My Account #1\\\" });\\n```\\n**Example:**  Multiple records creation\\n```js\\ninsert(\\\"Account\\\",[{ Name: \\\"My Account #1\\\" }, { Name: \\\"My Account #2\\\" }]);\\n```\\n**Example:**  Using a state variable\\n```js\\nfn((state) => {\\n  state.data = [{ Name: \\\"My Account #1\\\" }, { Name: \\\"My Account #2\\\" }];\\n  return state;\\n});\\ninsert(\\\"Account\\\", $.data);\\n```\\n\\n* * *\\n\\n### query\\n\\n<p><code>query(query, [options]) ⇒ Operation</code></p>\\n\\nExecutes an SOQL (Salesforce Object Query Language) query to retrieve records from Salesforce.\\nNote that in an event of a query error, error logs will be printed but the operation will not throw the error.\\n\\nThe Salesforce query API is subject to rate limits, [learn more here](https://sforce.co/3W9zyaQ).\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| query | <code>string</code> |  | A SOQL query string. Must be less than 4000 characters in WHERE clause |\\n| [options] | <code>object</code> |  | Query options |\\n| [options.limit] | <code>number</code> | <code>10000</code> | Maximum number of records to fetch. If `limit: Infinity` is passed, all records will be fetched. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | Array of result objects |\\n| references | History of all previous states |\\n| response | An object of result metadata.                     <code>{ done, totalSize, nextRecordsUrl?: string }</code>                     where nextRecordsUrl is only present when done is false |\\n**Example:** Run a query and download all matching records\\n```js\\nquery('SELECT Id FROM Patient__c', { limit: Infinity });\\n```\\n**Example:** Run a query and limit records\\n```js\\nquery('SELECT Id From Account Limit 10');\\n```\\n**Example:** Query patients by Health ID\\n```js\\nquery(state => `SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.healthId}'`);\\n```\\n**Example:** Query patients by Health ID using a lazy state reference\\n```js\\nquery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${$.data.healthId}'`);\\n```\\n\\n* * *\\n\\n### retrieve\\n\\n<p><code>retrieve(sObjectName, id) ⇒ Operation</code></p>\\n\\nRetrieves a Salesforce sObject(s).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | The sObject to retrieve |\\n| id | <code>string</code> | The id of the record |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** Retrieve a specific ContentVersion record\\n```js\\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');\\n```\\n\\n* * *\\n\\n### update\\n\\n<p><code>update(sObjectName, records) ⇒ Operation</code></p>\\n\\nUpdate an sObject record or records. Relationships in the record should be nested and not use dot-notation syntax\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | API name of the sObject. |\\n| records | <code>object</code> \\\\| <code>Array.&lt;object&gt;</code> | Field attributes for the new object. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | Summary of the response from Salesforce |\\n| data.success | `true` if Salesforce reports no errors from the operation |\\n| data.completed | Array of ids for every successful completion |\\n| data.errors | Array of errors reported by Salesforce |\\n| references | History of all previous states |\\n**Example:**  Single record update\\n```js\\nupdate(\\\"Account\\\", {\\n  Id: \\\"0010500000fxbcuAAA\\\",\\n  Name: \\\"Updated Account #1\\\",\\n});\\n```\\n**Example:**  Multiple records update\\n```js\\nupdate(\\\"Account\\\", [\\n  { Id: \\\"0010500000fxbcuAAA\\\", Name: \\\"Updated Account #1\\\" },\\n  { Id: \\\"0010500000fxbcvAAA\\\", Name: \\\"Updated Account #2\\\" },\\n]);\\n```\\n**Example:** Update a record with a relationship\\n```js\\nupdate(\\\"Account\\\", {\\n  Id: \\\"0010500000fxbcuAAA\\\",\\n  \\\"Project__r\\\": {\\n    \\\"Metrics_ID__c\\\": \\\"jfh5LAnxu1i4na\\\"\\n  }\\n});\\n```\\n\\n* * *\\n\\n### upsert\\n\\n<p><code>upsert(sObjectName, externalId, records) ⇒ Operation</code></p>\\n\\nCreate a new sObject record, or updates it if it already exists. Relationships in the record should be nested and not use dot-notation syntax\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObjectName | <code>string</code> | API name of the sObject. |\\n| externalId | <code>string</code> | The external ID of the sObject. |\\n| records | <code>Object</code> \\\\| <code>Array.&lt;Object&gt;</code> | Field attributes for the records to upsert, or an array of field attributes. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:**  Single record upsert \\n```js\\nupsert(\\\"UpsertTable__c\\\", \\\"ExtId__c\\\", { Name: \\\"Record #1\\\", ExtId__c : 'ID-0000001' });\\n```\\n**Example:**  Multiple record upsert \\n```js\\nupsert(\\\"UpsertTable__c\\\", \\\"ExtId__c\\\", [\\n  { Name: \\\"Record #1\\\", ExtId__c : 'ID-0000001' },\\n  { Name: \\\"Record #2\\\", ExtId__c : 'ID-0000002' },\\n]);\\n```\\n**Example:** Update a record with a relationship\\n```js\\nupsert(\\\"UpsertTable__c\\\", {\\n  Name: \\\"Record #1\\\",\\n  \\\"Project__r\\\": {\\n    \\\"Metrics_ID__c\\\": \\\"jfh5LAnxu1i4na\\\"\\n  }\\n});\\n```\\n\\n* * *\\n\\n\\n## http\\n\\nThese functions belong to the http namespace.\\n### http.get {#http_get}\\n\\n<p><code>get(path, [options]) ⇒ Operation</code></p>\\n\\nSend a GET request on salesforce server configured in `state.configuration`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The Salesforce API endpoint. |\\n| [options] | [<code>SimpleRequestOptions</code>](#simplerequestoptions) | Configure headers and query parameters for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** Make a GET request to a custom Salesforce flow\\n```js\\nhttp.get('/actions/custom/flow/POC_OpenFN_Test_Flow');\\n```\\n**Example:** Make a GET request to a custom Salesforce flow with query parameters\\n```js\\nhttp.get('/actions/custom/flow/POC_OpenFN_Test_Flow', { query: { Status: 'Active' } });\\n```\\n**Example:** Make a GET request then map the response\\n```js\\nhttp.get(\\\"/jobs/query/v1/jobs/001XXXXXXXXXXXXXXX/results\\\").then((state) => {\\n  state.mapping = state.data.map((d) => ({ name: d.name, id: d.extId }));\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n\\n### http.post {#http_post}\\n\\n<p><code>post(path, body, [options]) ⇒ Operation</code></p>\\n\\nSend a POST request to salesforce server configured in `state.configuration`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The Salesforce API endpoint. |\\n| body | <code>object</code> | A JSON Object request body. |\\n| [options] | [<code>SimpleRequestOptions</code>](#simplerequestoptions) | Configure headers and query parameters for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** POST request to Salesforce\\n```js\\nhttp.post(\\\"/jobs/query\\\", {\\n  operation: \\\"query\\\",\\n  query: \\\"SELECT Id, Name FROM Account LIMIT 1000\\\",\\n});\\n```\\n\\n* * *\\n\\n\\n### http.request {#http_request}\\n\\n<p><code>request(path, [options]) ⇒ Operation</code></p>\\n\\nSend a request to salesforce server configured in `state.configuration`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | The Salesforce API endpoint. |\\n| [options] | [<code>FullRequestOptions</code>](#fullrequestoptions) | Configure headers, query and body parameters for the request. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | API response data. Can be either an object or array of objects |\\n| references | History of all previous states |\\n**Example:** Make a POST request to a custom Salesforce flow\\n```js\\nhttp.request(\\\"/actions/custom/flow/POC_OpenFN_Test_Flow\\\", {\\n  method: \\\"POST\\\",\\n  body: { inputs: [{}] },\\n});\\n```\\n\\n* * *\\n\\n\\n## util\\n\\nThese functions belong to the util namespace.\\n### util.toUTF8 {#util_toUTF8}\\n\\n<p><code>toUTF8(input) ⇒ string</code></p>\\n\\nTransliterates unicode characters to their best ASCII representation\\n\\n**Returns**: <code>string</code> - - ASCII representation of input string  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| input | <code>string</code> | A string with unicode characters |\\n\\n**Example:** Transliterate `άνθρωποι` to `anthropoi`\\n```js\\nfn((state) => {\\n  const s = util.toUTF8(\\\"άνθρωποι\\\");\\n  console.log(s); // anthropoi\\n  return state;\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### BulkOptions\\n\\nOptions provided to the Salesforce bulk API request\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| extIdField | <code>string</code> |  | External id field. Required for upsert. |\\n| [allowNoOp] | <code>boolean</code> | <code>false</code> | Skipping bulk operation if no records. |\\n| [failOnError] | <code>boolean</code> | <code>false</code> | Fail the operation on error. |\\n| [pollTimeout] | <code>integer</code> | <code>240000</code> | Polling timeout in milliseconds. |\\n| [pollInterval] | <code>integer</code> | <code>6000</code> | Polling interval in milliseconds. |\\n\\n\\n* * *\\n\\n### BulkQueryOptions\\n\\nOptions provided to the Salesforce bulk query API request\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [pollTimeout] | <code>integer</code> | <code>90000</code> | Polling timeout in milliseconds. |\\n| [pollInterval] | <code>integer</code> | <code>3000</code> | Polling interval in milliseconds. |\\n\\n\\n* * *\\n\\n### FullRequestOptions\\n\\nOptions provided to the Salesforce HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [method] | <code>string</code> | <code>&quot;GET&quot;</code> | HTTP method to use. |\\n| headers | <code>object</code> |  | Object of request headers. |\\n| query | <code>object</code> |  | Object request query. |\\n| body | <code>object</code> |  | Object request body. |\\n\\n\\n* * *\\n\\n### SalesforceResultState\\n\\nState object\\n\\n**Properties**\\n\\n| Name | Description |\\n| --- | --- |\\n| data | Summary of the response from Salesforce |\\n| data.success | `true` if Salesforce reports no errors from the operation |\\n| data.completed | Array of ids for every successful completion |\\n| data.errors | Array of errors reported by Salesforce |\\n| references | History of all previous states |\\n\\n\\n* * *\\n\\n### SimpleRequestOptions\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| headers | <code>object</code> | Object of request headers. |\\n| query | <code>object</code> | Object of request query. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language Salesforce\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nSalesforce API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/salesforce-docs)\\nfor full technical documentation.\\n\\n## Release notes and deprecated CHANGELOG.md\\n\\nSee [releases](https://docs.openfn.org/adaptors/packages/salesforce-changelog)\\nfor all changes.\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/saleforce-configuration-schema/)\\ndefinition.\\n\\n## Intent\\n\\n---\\n\\nAllow communication with Salesforce using a set of Lisp compatible expressions.\\n\\nUsing simple functions we can create a simplified API, simple enough to generate\\ncode from data.\\n\\n## Expressions\\n\\n---\\n\\nExpressions are a simplified set of function calls. Outlining the operations\\nneeded to be performed.\\n\\nAn uncompiled expression has no knowledge of the internals of the adaptor,\\ncredentials or runtime environment.\\n\\nIt's the responsibility of the build process to provide a wrapper that will\\ninject the functions in.\\n\\nFor example:\\n\\n```javascript\\ndescribe('vera__Test_Event__c'),\\n  create('vera__Test_Event__c', {\\n    vera__Test_Event_Name_Unique__c: 'hello from jsforce',\\n  }),\\n  create('vera__Boat__c', {\\n    Name: 'Catatafish redux!',\\n    vera__Test_Event__c: reference(0),\\n  });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\\n## Other\\n\\nCreate SOAP session\\n\\n```sh\\ncurl https://test.salesforce.com/services/Soap/u/47.0 -H \\\"Content-Type: text/xml; charset=UTF-8\\\" -H \\\"SOAPAction: login\\\" -d @tmp/login.txt | xmllint --format -\\n```\\n\\nClose jobs\\n\\n```sh\\ncurl\\nhttps://openfn.my.salesforce.com/services/async/47.0/job/some_id -H 'X-SFDC-Session: abc123sessionID456xyz' -H \\\"Content-Type: application/xml; charset=UTF-8\\\" -d @tmp/close_job.txt | xmllint --format -\\n```\\n\"","changelog":"\"# @openfn/language-salesforce\\n\\n## 7.0.0 - 01 May 2025\\n\\n### Major Changes\\n\\n- 8dd65a1: - Modernize `query()` implementation using jsforce v3\\n\\n  - Remove `autoFetch` option from `query()` function\\n  - Add `limit` option to `query()` function\\n  - Change query result structure:\\n    - `state.data` now contains only the array of records\\n    - Query metadata (`done`, `totalSize`, `nextRecordsUrl`) moved to\\n      `state.response`\\n\\n- 3686988: remove map() function\\n\\n### Migration Guide\\n\\nThe `autoFetch` option has been removed from the `query()` function. Previously,\\nthis option would automatically fetch all records when set to `true`.\\n\\nThe query result structure has been updated:\\n\\n- Previously: `state.data` contained\\n  `{ done, totalSize, records: [], nextRecordsUrl }`\\n- Now:\\n  - `state.data` contains only the array of records\\n  - `state.response` contains `{ done, totalSize }` and `nextRecordsUrl` when\\n    there are more records to fetch (`done: false`)\\n\\n**Before**\\n\\n```js\\n// Old way - using autoFetch\\nquery('select name from account', { autoFetch: true });\\n// Result: state.data = { done, totalSize, records: [] }\\n```\\n\\n**After**\\n\\nTo fetch all records now, use the `limit: Infinity` option:\\n\\n```js\\n// New way - using limit: Infinity\\nquery('select name from account', { limit: Infinity });\\n// Result:\\n// state.data = [] // Array of records\\n// state.response = { done, totalSize }\\n```\\n\\n## 6.0.3 - 24 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 6.0.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 6.0.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 6.0.0 - 02 April 2025\\n\\n### Major Changes\\n\\n- 8ce97838: Add `http` function in salesforce (#1070)\\n- 1fbfdc18: Update salesforce to use `connection` client (#1063)\\n- 38de07ed: update jsforce to v3 (#1060)\\n\\n### Migration Guide\\n\\n#### Removed general-purpose HTTP functions\\n\\nPreviously, `http.get()`, `http.post()`, etc. could be used to make HTTP\\nrequests to any external system. These functions have been removed and replaced\\nwith Salesforce API endpoints only.\\n\\n##### Before:\\n\\nThis used to work for any external API\\n\\n```js\\nhttp.get('https://external-api.com/data');\\nhttp.post('https://another-service.com/endpoint', data);\\n```\\n\\n##### Now:\\n\\nOnly Salesforce API operations are supported\\n\\n```js\\nhttp.get('Account', { query: { start: '2025-03-03' } });\\nhttp.post('Contact', { Name: 'test' });\\n```\\n\\n##### For non-Salesforce HTTP requests:\\n\\n- Move these operations to a different adaptor (like `@openfn/language-http`)\\n- Or use `@openfn/language-common` for generic HTTP operations\\n\\n## 5.0.5 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 5.0.4 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 5.0.3 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 5.0.2 - 14 January 2025\\n\\nMajor modernization of the Salesforce adaptor, focusing on standardized state\\nhandling (ie,`state.data` over on `state.references`) and a cleaner API.\\n\\nThis version introduces multiple breaking changes and workflows WILL require\\nchanges to be compatible - see the Migration Guide.\\n\\n### Migration Guide\\n\\n- Operations now \\\"return\\\" their results to `state.data`. Use `state.data`\\n  instead of `state.references`. For example:\\n\\n```js\\n❌  retrieve('Patient__c', $.patientId);\\n    fn((state) => {\\n      state.patients = state.references.at(-1)\\n      return state\\n    });\\n\\n✅  retrieve('Patient__c', $.patientId);\\n    fn((state) => {\\n      state.patients = state.data;\\n      return state\\n    });\\n```\\n\\n- All callback functions have been removed. Use `fn()` blocks or `.then()`\\n  functions instead. For example:\\n\\n```js\\n❌  query($.query, {}, (state) => {\\n      state.patients = state.references.at(-1)\\n      return state\\n    });\\n\\n✅  query($.query).then((state) => {\\n      state.patients = state.data;\\n      return state\\n    });\\n\\n✅  query($.query)\\n    fn((state) => {\\n     state.patients = state.data\\n     return state\\n    });\\n```\\n\\n- The `axios` object has been removed. For HTTP requests outside salesforce, use\\n  a different step with the http adaptor\\n- Replace `describeAll()` with `describe()`.\\n- Replace `upsertIf(...)` with `fnIf(true, upsert(...))`\\n- Replace `createIf(...)` with `fnIf(true, create(...))`\\n- Replace `toUTF8(...)` with `util.UTF8(...)`\\n- The `bulk()` signature has been re-ordered: replace\\n  `bulk(operation, sObject, options, records)` with\\n  `bulk(operation, sObjectName, records, options)`\\n\\n### Major Changes\\n\\n- 59721be: New API design for salesforce, including use of `composeNextState`\\n  and removing old code.\\n- Remove `axios` dependency\\n- Remove old/unused functions. `relationship`, `upsertIf`, `createIf`,\\n  `reference`, `steps`, `beta`, `describeAll()`\\n- Standardize state mutation in all operations\\n- Change `bulk` signature to `bulk(operation, sObjectName, records, options)`\\n- Remove callback support\\n- a2cf9c7: Move `toUTF8()` to `util.UTF8()`. `toUTF8` is not an operation and\\n  cannot be called at the top level. Moving into the utils namespace should help\\n  make the usage of the function a little clearer\\n- ca09ade: - Restructured response format for `bulk`, `create`,`update` and\\n  `destroy` functions into standardized result structure:\\n  ```\\n  {\\n    success: boolean,\\n    completed: [id],\\n    errors: [{ id message }],\\n  }\\n  ```\\n- b1227a2: - add `query` option in `request` function\\n\\n### Minor Changes\\n\\n- b4a9c42: - Create `get()` and `post()` functions for all http requests against\\n  Salesforce\\n- Update `describe()` to fetch all available sObjects metadata\\n- update function examples and improve options documentation\\n- Enforce that `upsert`, `create` and `update` do not accept dot-notated\\n  relationships. Relationships should be nested instead. Eg, do this:\\n  ```\\n  create('Project', {\\n   \\\"Project__r\\\": {\\n     \\\"Metrics_ID__c\\\": \\\"value\\\"\\n   }\\n  })\\n  ```\\n  Not this:\\n  ```\\n  create('Project', {\\n   \\\"Project__r.Metrics_ID__c\\\": \\\"value\\\"\\n  })\\n  ```\\n- Add support for nested relationships in `bulk` (the adaptor will flatten them\\n  to dot-notation for you)\\n\\n### Patch Changes\\n\\n- b4a9c42: - Change internal `cleanupState` to `removeConnection` and tagged it\\n  as private function\\n  - Rename `attrs` to `records` in docs\\n- Update `@openfn/language-common` to `workspace:*`\\n- Add integration tests\\n\\nNote: due to a conflict in the npm registry this 5.0.0 build has been released\\nwith version number 5.0.2.\\n\\n## 4.8.6 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 4.8.5 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 3fd13c2: Update axios to 1.7.7\\n\\n## 4.8.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 4.8.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 4.8.2 - 31 July 2024\\n\\n### Patch Changes\\n\\n- ce08e7f: Fix `autoFetch` behaviour in `query()` function. All records are\\n  merged into a single `records` array, and pushed to `[0]` in\\n  `state.references`.\\n\\n  For jobs which use `references[0][0]` to read query results, this is a\\n  breaking fix.\\n\\n## 4.8.1 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 4.8.0 - 19 June 2024\\n\\n### Minor Changes\\n\\n- 5fb82f07: Export `group` operation from common\\n- b5e0c266: ### Added\\n\\n  - `insert()` function as an alias for `create()`.\\n\\n  ### Improved\\n\\n  - JSDocs for `query`, `bulk`, `describe`, `create`, and `upsert`.\\n\\n  ### Deprecated\\n\\n  - `upsertIf()` and `createIf()` functions are now deprecated. Use\\n    `fnIf(condition, upsert())` instead.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 4.7.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 4.6.11 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 4.6.10 - 03 June 2024\\n\\n### Patch Changes\\n\\n- 90f44c62: Include the Salesforce query response in the result, even if no\\n  records are found.\\n\\n## 4.6.9 - 28 May 2024\\n\\n### Patch Changes\\n\\n- Fix any-ascii load and add more tests\\n\\n## 4.6.8 - 27 May 2024\\n\\n### Patch Changes\\n\\n- Properly ensure any-ascii is loaded before executing, resolving a critical\\n  race that we are losing in production\\n\\n## 4.6.7 - 23 May 2024\\n\\n### Patch Changes\\n\\n- 332225ec: - Set default API version to `47.0`\\n  - In `bulkQuery` throw errors if API version is less than `47.0`\\n  - Update `bulkQuery` jsdocs with a link to `Bulk API 2.0 Query`\\n\\n## 4.6.6 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 4.6.5 - 08 May 2024\\n\\n### Patch Changes\\n\\n- b1c915b0: Add documentation about Salesforce API limits to query and bulkQuery\\n\\n## 4.6.4 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 4.6.3 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 4.6.2 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 4.6.1 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 4.6.0 - 19 March 2024\\n\\n### Minor Changes\\n\\n- cfe1ccb: Add options and callback params in query function\\n\\n## 4.5.2 - 19 March 2024\\n\\n### Patch Changes\\n\\n- 2006e88: fix an issue with bulk jobs not closing\\n\\n## 4.5.1 - 05 March 2024\\n\\n### Patch Changes\\n\\n- fa3e28fe: refactor bulk() to use newExpandReferences\\n\\n## 4.5.0 - 02 February 2024\\n\\n### Minor Changes\\n\\n- 0d2b478: Remove `instance_url` under `other_params` and put it at the root\\n  level of the configuration schema\\n\\n## 4.4.0 - 31 January 2024\\n\\nDeprecated because it does not work with Lightning\\n\\n### Minor Changes\\n\\n- 632b585: Add `OAuth` support\\n- a12f434: Add `request(path, opts, cb)` function\\n\\n## 4.3.1 - 16 December 2023\\n\\n### Patch Changes\\n\\n- 1131c34: Remove regex pattern for validation and changed minLength to 1\\n\\n## 4.3.0 - 01 December 2023\\n\\n### Minor Changes\\n\\n- 1d5b62f: Add `toUTF8` function\\n\\n## 4.2.2 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 4.2.1 - 18 September 2023\\n\\n### Patch Changes\\n\\n- 07debe9: Update bulkQuery to use bulkv2\\n\\n## 4.2.0 - 14 September 2023\\n\\n### Minor Changes\\n\\n- fc58f1c: add options in bulkQuery\\n\\n## 4.1.0 - 13 September 2023\\n\\n### Minor Changes\\n\\n- 1e3a083: add bulkQuery function\\n\\n## 4.0.8 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 4.0.7 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 4.0.6 - 03 August 2023\\n\\n### Patch Changes\\n\\n- aceedd2: update jsforce and remove unused packages\\n\\n## 4.0.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 4.0.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 4.0.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 4.0.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 4.0.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 4.0.0\\n\\n### Major Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 3.0.7 - 20 April 2023\\n\\n### Patch Changes\\n\\n- 7cc8efc: remove FakeAdaptor references\\n\\n## 3.0.6 - 31 March 2023\\n\\n### Patch Changes\\n\\n- 705caab: Remove tools as devdependencies\\n\\n## 3.0.5 - 31 March 2023\\n\\n### Patch Changes\\n\\n- 929bca6: Use metadata helper function from common\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 3.0.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- ef828e7: update old urls in readme\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 3.0.3 - 21 March 2023\\n\\n### Patch Changes\\n\\n- 06aced8: Fix dependencies\\n\\n## 3.0.2 - 17 March 2023\\n\\n### Patch Changes\\n\\n- aed7e0b: fix required field in configuration schema\\n\\n## 3.0.1 - 10 March 2023\\n\\n### Patch Changes\\n\\n- c09b821: Add @magic annotations\\n\\n## 3.0.0 - 03 March 2023\\n\\n### Major Changes\\n\\n- 190f667: Remove curry from salesforce\\n\\n## 2.12.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 2.12.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 2.12.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 2.12.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 5c883c6: Allow expansion for describe(), add describeAll()\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 2.11.1 - 04 November 2022\\n\\n### Patch Changes\\n\\n- e7bf865: chore(deps): update dependency sinon to v14\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 2.11.0 - 25 October 2022\\n\\n### Minor Changes\\n\\n- edff578: Migrate salesforce\\n\"","functions":["bulk","bulkQuery","create","describe","destroy","insert","query","retrieve","update","upsert"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"loginUrl":{"title":"Login URL","type":"string","description":"The Salesforce instance login URL","format":"uri","minLength":1,"default":"https://login.salesforce.com","examples":["https://login.salesforce.com","https://test.salesforce.com"]},"username":{"title":"Username","type":"string","description":"The username to log in the Salesforce instance","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"The password to log in the Salesforce instance","writeOnly":true,"minLength":1,"examples":["@super(!)SecretPass"]},"securityToken":{"title":"Security Token","type":"string","description":"The security token to access the Salesforce instance","minLength":1,"examples":["salesforcesecuritytoken"]},"apiVersion":{"title":"API Version","type":"string","placeholder":"52.0","description":"Salesforce API Version","minLength":1,"default":"50.0","examples":["59.0"]}},"type":"object","additionalProperties":true,"required":["username","password"]}},
[
  {
    "id": "get",
    "longname": "get",
    "name": "get",
    "kind": "function",
    "scope": "global",
    "description": "Make a GET request to Satusehat. Use this to fetch resources directly from the Satusehat REST API.\nYou can pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Get a resource by Id. Equivalent to GET `<baseUrl>/Organization/abcde`</caption>\nget(\"Organization/abcde\")",
      "<caption>Get resources with a query. Equivalent to GET `<baseUrl>/Patient?identifier=https://fhir.kemkes.go.id/id/nik|9271060312000001`</caption>\nget('/Patient', {\n  identifier:'https://fhir.kemkes.go.id/id/nik|9271060312000001'\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 61,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "patch",
    "longname": "patch",
    "name": "patch",
    "kind": "function",
    "scope": "global",
    "description": "Make a PATCH request to Satusehat. Use this to directly update resources on Satusehat REST API.\nYou can pass Satusehat an array of objects which contains `op`, `path`, and `value` as the body. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource and exact item to be partially updated",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "An array of objects which defines data that will be used to partially update a given instance of resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request.",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update a property of a resource. Equivalent to PATCH `<baseurl>/Organization/abcde`</caption>\npatch('Organization/abcde', [\n{\n op: 'replace',\n path: '/language', // Name of property/element of resource to be replaced\n value: 'id', // Value to be replaced\n},\n]);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 178,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 5,
    "level": 0
  },
  {
    "id": "post",
    "longname": "post",
    "name": "post",
    "kind": "function",
    "scope": "global",
    "description": "Make a POST request to Satusehat. Use this to send resources directly to Satusehat REST API.\nYou can pass Satusehat body data as a JSON FHIR object.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON FHIR object to create a resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Create an encounter resource. Equivalent to POST `<baseUrl>/Encounter`</caption>\npost('Encounter', { resourceType: 'Encounter', ...state.data });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 96,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 3,
    "level": 0
  },
  {
    "id": "put",
    "longname": "put",
    "name": "put",
    "kind": "function",
    "scope": "global",
    "description": "Make a PUT request to Satusehat. Use this to directly update resources on Satusehat REST API.\nYou can pass Satusehat body data as a JSON FHIR object. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\nin the URL.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource and exact item to be updated",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "JSON FHIR object to update the resource",
        "name": "data"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "Optional object of query parameters to include in the request",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Update a resource. Equivalent to PUT `<baseurl>/Organization/abcde`</caption>\nput('Organization/abcde', { resourceType: 'Organization', active: false });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 134,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SatusehatHttpState"
      }
    ],
    "order": 4,
    "level": 0
  },
  {
    "id": "SatusehatHttpState",
    "longname": "SatusehatHttpState",
    "name": "SatusehatHttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "The response body (as JSON)",
        "name": "data"
      },
      {
        "description": "The HTTP response from the Satusehat server (excluding the body)",
        "name": "response"
      },
      {
        "description": "An array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/satusehat/src"
    },
    "order": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "arrayToString",
    "common": true,
    "name": "arrayToString",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"satusehat","adaptor":"@openfn/language-satusehat","version":"2.0.14","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#get\\\">get(path, params, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#patch\\\">patch(path, data, params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#post\\\">post(path, data, params, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#put\\\">put(path, data, params, [callback])</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#arraytostring\\\">arrayToString()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### get\\n\\n<p><code>get(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a GET request to Satusehat. Use this to fetch resources directly from the Satusehat REST API.\\nYou can pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Optional object of query parameters to include in the request |\\n| callback | <code>function</code> | An optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Get a resource by Id. Equivalent to GET `<baseUrl>/Organization/abcde`\\n```js\\nget(\\\"Organization/abcde\\\")\\n```\\n**Example:** Get resources with a query. Equivalent to GET `<baseUrl>/Patient?identifier=https://fhir.kemkes.go.id/id/nik|9271060312000001`\\n```js\\nget('/Patient', {\\n  identifier:'https://fhir.kemkes.go.id/id/nik|9271060312000001'\\n});\\n```\\n\\n* * *\\n\\n### patch\\n\\n<p><code>patch(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a PATCH request to Satusehat. Use this to directly update resources on Satusehat REST API.\\nYou can pass Satusehat an array of objects which contains `op`, `path`, and `value` as the body. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource and exact item to be partially updated |\\n| data | <code>Array</code> | An array of objects which defines data that will be used to partially update a given instance of resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a property of a resource. Equivalent to PATCH `<baseurl>/Organization/abcde`\\n```js\\npatch('Organization/abcde', [\\n{\\n op: 'replace',\\n path: '/language', // Name of property/element of resource to be replaced\\n value: 'id', // Value to be replaced\\n},\\n]);\\n```\\n\\n* * *\\n\\n### post\\n\\n<p><code>post(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a POST request to Satusehat. Use this to send resources directly to Satusehat REST API.\\nYou can pass Satusehat body data as a JSON FHIR object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| data | <code>object</code> | JSON FHIR object to create a resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Create an encounter resource. Equivalent to POST `<baseUrl>/Encounter`\\n```js\\npost('Encounter', { resourceType: 'Encounter', ...state.data });\\n```\\n\\n* * *\\n\\n### put\\n\\n<p><code>put(path, data, params, [callback]) ⇒ Operation</code></p>\\n\\nMake a PUT request to Satusehat. Use this to directly update resources on Satusehat REST API.\\nYou can pass Satusehat body data as a JSON FHIR object. You can also pass Satusehat query parameters as an object of key value pairs, which will map to parameters\\nin the URL.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource and exact item to be updated |\\n| data | <code>object</code> | JSON FHIR object to update the resource |\\n| params | <code>Object</code> | Optional object of query parameters to include in the request |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The response body (as JSON) |\\n| response | The HTTP response from the Satusehat server (excluding the body) |\\n| references | An array of all previous data objects used in the Job |\\n**Example:** Update a resource. Equivalent to PUT `<baseurl>/Organization/abcde`\\n```js\\nput('Organization/abcde', { resourceType: 'Organization', active: false });\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-satusehat <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the satusehat API.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/satusehat-docs)\\nfor full technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/satusehat-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n### A example expression using the `post` function\\n\\n```js\\npost('Organization', {  \\\"resourceType\\\": \\\"Organization\\\" });\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-satusehat\\n\\n## 2.0.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.11 - 04 April 2025\\n\\n### Patch Changes\\n\\n- cfaba6d: Export `util.uuid` from `common`\\n\\n## 2.0.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.6 - 04 November 2024\\n\\n### Patch Changes\\n\\n- 7c528d3: Update docs with examples\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.4\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.3 - 25 July 2024\\n\\n### Patch Changes\\n\\n- 73d0a02: Make documentation public\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.2 - 01 July 2024\\n\\n### Patch Changes\\n\\n- 218a582: Added extra logging around errors\\n\\n## 1.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.1 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.0 - 29 May 2024\\n\\nInitial release.\\n\"","functions":["get","patch","post","put"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","type":"string","description":"Satusehat base URL","format":"uri","minLength":1,"examples":["https://www.satusehat.com"]},"clientId":{"title":"Client Id","type":"string","minLength":1,"description":"Your Satusehat client id","examples":["the-long-uuid-provided-by-satusehat-for-your-organization"]},"clientSecret":{"title":"Client Secret","type":"string","description":"Client Secret","minLength":1,"examples":["the-long-secret-key-provided-by-satusehat"]},"access_token":{"title":"Access Token","type":"string","description":"Your Satusehat access token","writeOnly":true,"minLength":1,"examples":["the-long-access-token-from-your-auth"]}},"type":"object","additionalProperties":true,"required":["baseUrl","clientId","clientSecret"]}},
[
  {
    "id": "HttpState",
    "longname": "HttpState",
    "name": "HttpState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body",
        "name": "data"
      },
      {
        "description": "the response from the HTTP server, including headers, statusCode, body, etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 4,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/senaite/src"
    },
    "order": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a general HTTP request",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "HTTP method to use",
        "name": "method"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Optional request options",
        "name": "options"
      }
    ],
    "examples": [
      "request(\"GET\", \"catalogs\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 40,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/senaite/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "HttpState"
      }
    ],
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to the HTTP request",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object",
            "string"
          ]
        },
        "description": "body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request).",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code.",
        "name": "errors"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body.",
        "name": "form"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "An object of headers to append to the request.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Parse the response body as json, text or stream. By default will use the response headers.",
        "name": "parseAs"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "Request timeout in ms. Default: 300 seconds.",
        "name": "timeout"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions",
        "name": "tls"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 13,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/senaite/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "group",
    "common": true,
    "name": "group",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "scrubEmojis",
    "common": true,
    "name": "scrubEmojis",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "util",
    "common": true,
    "name": "util",
    "scope": "global",
    "kind": "external"
  }
],
{"name":"senaite","adaptor":"@openfn/language-senaite","version":"1.0.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#request\\\">request(method, path, options)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#group\\\">group()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#scrubemojis\\\">scrubEmojis()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#util\\\">util</a>\\n</dt></dl>\\n\\n## Functions\\n### request\\n\\n<p><code>request(method, path, options) ⇒ Operation</code></p>\\n\\nMake a general HTTP request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| method | <code>string</code> | HTTP method to use |\\n| path | <code>string</code> | Path to resource |\\n| options | [<code>RequestOptions</code>](#requestoptions) | Optional request options |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body |\\n| response | the response from the HTTP server, including headers, statusCode, body, etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example**\\n```js\\nrequest(\\\"GET\\\", \\\"catalogs\\\");\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### RequestOptions\\n\\nOptions provided to the HTTP request\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| body | <code>object</code> \\\\| <code>string</code> | body data to append to the request. JSON will be converted to a string (but a content-type header will not be attached to the request). |\\n| errors | <code>object</code> | Map of errorCodes -> error messages, ie, `{ 404: 'Resource not found;' }`. Pass `false` to suppress errors for this code. |\\n| form | <code>object</code> | Pass a JSON object to be serialised into a multipart HTML form (as FormData) in the body. |\\n| query | <code>object</code> | An object of query parameters to be encoded into the URL. |\\n| headers | <code>object</code> | An object of headers to append to the request. |\\n| parseAs | <code>string</code> | Parse the response body as json, text or stream. By default will use the response headers. |\\n| timeout | <code>number</code> | Request timeout in ms. Default: 300 seconds. |\\n| tls | <code>object</code> | TLS/SSL authentication options. See https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-senaite <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the\\nsenaite API.\\n\\n## Documentation\\n\\nView the\\n[docs site](https://docs.openfn.org/adaptors/packages/senaite-docs) for\\nfull technical documentation.\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/senaite-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\"","changelog":"\"# @openfn/language-senaite\\n\\n## 1.0.2 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.1 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.0\\n\\nInitial release.\\n\"","functions":["request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","description":"The base URL (http://www.example.com)","format":"uri","minLength":1,"examples":["https://example.com"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"examples":["@some(!)Str0ngp4ss0w0rd"]}},"type":"object","additionalProperties":true,"required":["password","username","baseUrl"]}},
[
  {
    "id": "getCSV",
    "longname": "getCSV",
    "name": "getCSV",
    "kind": "function",
    "scope": "global",
    "description": "Get a CSV and return a JSON array of strings for each item separated by the delimiter",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "Optional. `parsingOptions` Parsing options which can be passed to convert csv to json See more {@link https://github.com/Keyang/node-csvtojson#parameters on csvtojson docs}",
        "name": "parsingOptions"
      }
    ],
    "examples": [
      "getCSV(\n  '/some/path/to_file.csv',\n  {delimiter: \";\", flatKeys: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 106,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 2,
    "newscope": true,
    "level": 0
  },
  {
    "id": "getJSON",
    "longname": "getJSON",
    "name": "getJSON",
    "kind": "function",
    "scope": "global",
    "description": "Fetch a json file from an FTP server",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "filePath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Character encoding for the json",
        "name": "encoding"
      }
    ],
    "examples": [
      "getJSON(\n  '/path/To/File',\n  'utf8',\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 192,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "list",
    "longname": "list",
    "name": "list",
    "kind": "function",
    "scope": "global",
    "description": "List files present in a directory",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to remote directory",
        "name": "dirPath"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "a filter function used to select return entries",
        "name": "filter"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "description": "Optional callback to handle the response",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>basic files listing</caption>\nlist('/some/path/')",
      "<caption>list files with filters</caption>\nlist('/some/path/', file=> {\n return /foo.\\.txt/.test(file.name);\n})",
      "<caption>list files with filters and use callback</caption>\nlist(\n  \"/some/path/\",\n  (file) => /foo.\\.txt/.test(file.name),\n  (state) => {\n    const latestFile = state.data.filter(\n      (file) => file.modifyTime <= new Date()\n    );\n    return { ...state, latestFile };\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 85,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "normalizeCSVarray",
    "longname": "normalizeCSVarray",
    "name": "normalizeCSVarray",
    "kind": "function",
    "scope": "global",
    "description": "Convert JSON array of strings into a normalized object",
    "params": [
      {
        "type": {
          "names": [
            "options"
          ]
        },
        "description": "Options passed to csvtojson parser",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "callback"
          ]
        },
        "description": "Options passed to csvtojson parser",
        "name": "callback"
      }
    ],
    "examples": [
      "normalizeCSVarray({ delimiter: ';', noheader: true });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 230,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 5,
    "level": 0
  },
  {
    "id": "putCSV",
    "longname": "putCSV",
    "name": "putCSV",
    "kind": "function",
    "scope": "global",
    "description": "Convert JSON to CSV and upload to an FTP server",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Data source for data to copy to the remote server.",
        "name": "localFilePath"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to the remote file to be created on the server.",
        "name": "remoteFilePath"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "Options which can be passed to adjust the read and write stream used in sending the data to the remote server",
        "name": "parsingOptions"
      }
    ],
    "examples": [
      "putCSV(\n  '/some/path/to_local_file.csv',\n  '/some/path/to_remove_file.csv',\n  { delimiter: ';', noheader: true }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 166,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/sftp/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"sftp","adaptor":"@openfn/language-sftp","version":"2.0.13","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#getcsv\\\">getCSV(filePath, [parsingOptions])</a></dt>\\n<dt>\\n    <a href=\\\"#getjson\\\">getJSON(filePath, encoding)</a></dt>\\n<dt>\\n    <a href=\\\"#list\\\">list(dirPath, filter, [callback])</a></dt>\\n<dt>\\n    <a href=\\\"#normalizecsvarray\\\">normalizeCSVarray(options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#putcsv\\\">putCSV(localFilePath, remoteFilePath, parsingOptions)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### getCSV\\n\\n<p><code>getCSV(filePath, [parsingOptions]) ⇒ Operation</code></p>\\n\\nGet a CSV and return a JSON array of strings for each item separated by the delimiter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| [parsingOptions] | <code>Object</code> | Optional. `parsingOptions` Parsing options which can be passed to convert csv to json See more [on csvtojson docs](https://github.com/Keyang/node-csvtojson#parameters) |\\n\\n**Example**\\n```js\\ngetCSV(\\n  '/some/path/to_file.csv',\\n  {delimiter: \\\";\\\", flatKeys: true }\\n);\\n```\\n\\n* * *\\n\\n### getJSON\\n\\n<p><code>getJSON(filePath, encoding) ⇒ Operation</code></p>\\n\\nFetch a json file from an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| encoding | <code>string</code> | Character encoding for the json |\\n\\n**Example**\\n```js\\ngetJSON(\\n  '/path/To/File',\\n  'utf8',\\n);\\n```\\n\\n* * *\\n\\n### list\\n\\n<p><code>list(dirPath, filter, [callback]) ⇒ Operation</code></p>\\n\\nList files present in a directory\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | Path to remote directory |\\n| filter | <code>function</code> | a filter function used to select return entries |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example:** basic files listing\\n```js\\nlist('/some/path/')\\n```\\n**Example:** list files with filters\\n```js\\nlist('/some/path/', file=> {\\n return /foo.\\\\.txt/.test(file.name);\\n})\\n```\\n**Example:** list files with filters and use callback\\n```js\\nlist(\\n  \\\"/some/path/\\\",\\n  (file) => /foo.\\\\.txt/.test(file.name),\\n  (state) => {\\n    const latestFile = state.data.filter(\\n      (file) => file.modifyTime <= new Date()\\n    );\\n    return { ...state, latestFile };\\n  }\\n);\\n```\\n\\n* * *\\n\\n### normalizeCSVarray\\n\\n<p><code>normalizeCSVarray(options, callback) ⇒ Operation</code></p>\\n\\nConvert JSON array of strings into a normalized object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>options</code> | Options passed to csvtojson parser |\\n| callback | <code>callback</code> | Options passed to csvtojson parser |\\n\\n**Example**\\n```js\\nnormalizeCSVarray({ delimiter: ';', noheader: true });\\n```\\n\\n* * *\\n\\n### putCSV\\n\\n<p><code>putCSV(localFilePath, remoteFilePath, parsingOptions) ⇒ Operation</code></p>\\n\\nConvert JSON to CSV and upload to an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| localFilePath | <code>string</code> | Data source for data to copy to the remote server. |\\n| remoteFilePath | <code>string</code> | Path to the remote file to be created on the server. |\\n| parsingOptions | <code>object</code> | Options which can be passed to adjust the read and write stream used in sending the data to the remote server |\\n\\n**Example**\\n```js\\nputCSV(\\n  '/some/path/to_local_file.csv',\\n  '/some/path/to_remove_file.csv',\\n  { delimiter: ';', noheader: true }\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language SFTP\\n\\nLanguage Pack for building expressions and operations to work with SFTP servers.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/sftp-configuration-schema/)\\ndefinition.\\n\\n## List the content of a directory\\n\\n```js\\nalterState(state => {\\n  return list('/path/To/Directory')(state).then(response => {\\n    console.log(`There are ${response.data.length} files.`);\\n    return response;\\n  });\\n});\\n```\\n\\n## sample getCSV expression\\n\\n```js\\ngetCSV('path/to/file.csv', 'utf8', {\\n  quote: 'off',\\n  delimiter: ';',\\n  noheader: true,\\n  filter: {\\n    type: 'startsWith',\\n    key: 'field1',\\n    value: 'JO',\\n  },\\n});\\n```\\n\\nA more complex example that breaks up the CSV file into multiple payloads for\\nquicker processing.\\n\\n```js\\nfn(state => {\\n  return list('/')(state).then(state => {\\n    const targetNames = [\\n      'exportContacts', //example fileName\\n    ];\\n    console.log(`Fetching files: ${targetNames}`);\\n    const files = state.data\\n      .filter(file => file.name.split('.')[1] === 'csv')\\n      .filter(file =>\\n        targetNames.some(targetName =>\\n          file.name.toLowerCase().includes(targetName)\\n        )\\n      );\\n\\n    if (files.length === 0) console.log('No new CSV files found.');\\n    return { ...state, data: {}, files };\\n  });\\n});\\n\\neach(\\n  '$.files[*]',\\n  fn(state => {\\n    const { configuration, data } = state;\\n\\n    return getCSV(`/${data.name}`)(state).then(async state => {\\n      const headers = state.data\\n        .shift()\\n        .split(';')\\n        .map(h => (h = h.replace(/\\\"/g, '')));\\n\\n      function toObject(item) {\\n        const values = item.split(';');\\n\\n        return Object.fromEntries(\\n          headers.map((k, i) => {\\n            return values[i]\\n              ? [k, values[i].replace(/\\\"/g, '')]\\n              : [k, values[i]];\\n          })\\n        );\\n      }\\n\\n      let countInbox = 0;\\n\\n      //to post CSV data as individual Messages to OpenFn Inbox\\n      const postToInbox = async data => {\\n        countInbox++;\\n\\n        console.log(`Sending request ${countInbox} to inbox`);\\n\\n        await new Promise(resolve => setTimeout(resolve, 200));\\n\\n        await http.post({\\n          url: configuration.openfnInboxUrl,\\n          data: data,\\n          maxContentLength: Infinity,\\n          maxBodyLength: Infinity,\\n        })(state);\\n      };\\n\\n      //To split up into multiple, smaller payloads before send to OpenFn Inbox\\n      const chunkSize = 500;\\n\\n      console.log(\\n        state.data.length,\\n        'rows will be sent in',\\n        Math.ceil(state.data.length / chunkSize),\\n        'requests of',\\n        chunkSize,\\n        'rows each.'\\n      );\\n\\n      while (state.data.length > 0) {\\n        console.log('data.length', state.data.length);\\n        await postToInbox({\\n          fileName: data.name,\\n          fileType: data.name.split('-')[0],\\n          uploadDate: new Date(data.modifyTime).toISOString(),\\n          json: state.data.splice(0, chunkSize).map(toObject),\\n        });\\n      }\\n\\n      return { configuration, references: [], data: {} };\\n    });\\n  })\\n);\\n```\\n\\n## sample putCSV expression\\n\\nThis function converts JSON to CSV and post to a server\\n\\n```js\\nputCSV('/some/path/to_file.csv', 'utf8', { delimiter: ';', noheader: true });\\n```\\n\\n### Get JSON from FTP server\\n\\n```js\\ngetJSON('path/to/file.json', 'utf8');\\n```\\n\\n### Custom request to an http endpoint\\n\\nThis adaptor exports `http` from `language-common`. Here, we outline the usage\\nin order to make custom requests to an endpoint. It returns a promise\\n\\n```js\\nalterState(state => {\\n  return http\\n    .post({ url: 'yourURL', data: { name: 'Mamadou' } })(state)\\n    .then(response => {\\n      // do something with response;\\n      return response;\\n    });\\n});\\n```\\n\\n## Development\\n\\nClone the repo, run `pnpm install`.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build the docs for this repo, `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-sftp\\n\\n## 2.0.13 - 03 June 2025\\n\\n### Patch Changes\\n\\n- remove `format:uri` from configuration-schema\\n\\n## 2.0.12 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.0.11 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 2.0.10 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 2.0.9 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 2.0.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 2.0.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 2.0.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 2.0.5 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 2.0.4 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 2.0.3 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 2.0.2 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 2.0.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.0.0 - 01 August 2024\\n\\n### Major Changes\\n\\n- Export new common http helpers (http namespace)\\n\\n## 1.1.3\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.1.2 - 25 July 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4c08444]\\n- Updated dependencies \\\\[73d0a02]\\n  - @openfn/language-common@1.15.1\\n\\n## 1.1.1 - 19 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[5fb82f07]\\n  - @openfn/language-common@1.15.0\\n\\n## 1.1.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.0.8 - 11 June 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.5\\n\\n## 1.0.7 - 21 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[12f02ed5]\\n  - @openfn/language-common@1.13.4\\n\\n## 1.0.6 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 1.0.5 - 08 May 2024\\n\\n### Patch Changes\\n\\n- Security updates (lodash,undici)\\n- Updated dependencies\\n  - @openfn/language-common@1.13.2\\n\\n## 1.0.4 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies\\n  - @openfn/language-common@1.13.1\\n\\n## 1.0.3 - 12 April 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[1ad86651]\\n  - @openfn/language-common@1.13.0\\n\\n## 1.0.2 - 27 October 2023\\n\\n### Patch Changes\\n\\n- a666a63: On error disconnect then throw\\n\\n## 1.0.1 - 24 October 2023\\n\\n### Patch Changes\\n\\n- 771c814: - Properly disconnect on error\\n  - Improve operation logs\\n\\n## 1.0.0 - 02 October 2023\\n\\n### Major Changes\\n\\n- e52ba66: add `filter` option in `list()` function\\n\\n## 0.8.8 - 20 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[c19efbe]\\n  - @openfn/language-common@1.11.1\\n\\n## 0.8.7 - 08 September 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[85c35b8]\\n  - @openfn/language-common@1.11.0\\n\\n## 0.8.6 - 14 August 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[df09270]\\n  - @openfn/language-common@1.10.3\\n\\n## 0.8.5 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[26a303e]\\n  - @openfn/language-common@1.10.2\\n\\n## 0.8.4 - 14 July 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[8c32eb3]\\n  - @openfn/language-common@1.10.1\\n\\n## 0.8.3 - 30 June 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[aad9549]\\n  - @openfn/language-common@1.10.0\\n\\n## 0.8.2 - 23 June 2023\\n\\n### Patch Changes\\n\\n- d2c980e: Use `parseCsv` from language-common\\n- c5d3ce1: improve connection handling\\n- Updated dependencies \\\\[111807f]\\n  - @openfn/language-common@1.9.0\\n\\n## 0.8.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.8.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.7.3 - 24 May 2023\\n\\n### Patch Changes\\n\\n- 432dd0a: fix sftp connection wqautoclose\\n\\n## 0.7.2 - 23 May 2023\\n\\n### Patch Changes\\n\\n- 205b806: remove asObjects key before parsing\\n\\n## 0.7.1 - 23 May 2023\\n\\n### Patch Changes\\n\\n- 827c627: error handling\\n\\n## 0.7.0 - 22 May 2023\\n\\n### Minor Changes\\n\\n- fa58216: Add csvtojson convertion option\\n\\n## 0.6.9 - 31 March 2023\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[929bca6]\\n  - @openfn/language-common@1.7.7\\n\\n## 0.6.8 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.6.7 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.6.6 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.6.5 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 0.6.4 - 11 November 2022\\n\\n### Patch Changes\\n\\n- f2a91a4: Update package exports\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\\n## 0.6.3 - 04 November 2022\\n\\n### Patch Changes\\n\\n- 8566b26: Fix typings\\n- b3d45ff: Fix CJS export of npm package.\\n- 4126a62: Fix built bundle\\n- ecf5d30: remove sinon since it was not being used\\n- Updated dependencies \\\\[8566b26]\\n- Updated dependencies \\\\[b3d45ff]\\n- Updated dependencies \\\\[b5eb665]\\n- Updated dependencies \\\\[ecf5d30]\\n  - @openfn/language-common@1.7.4\\n\\n## 0.6.2 - 21 October 2022\\n\\n### Patch Changes\\n\\n- e04aa28: Rename credential-schema to configuration-schema, update descriptions\\n\\n## 0.6.1 - 19 October 2022\\n\\n### Patch Changes\\n\\n- 28dfbfa: add todo, fix build pack\\n\\n## 0.6.0 - 19 October 2022\\n\\n### Minor Changes\\n\\n- f294a62: Added credential-schema.json for new ui\\n\\n## 0.5.0 - 18 October 2022\\n\\n### Minor Changes\\n\\n- 2c04894: added sftp package\\n\"","functions":["getCSV","getJSON","list","normalizeCSVarray","putCSV"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"host":{"title":"Host URL","type":"string","description":"The SFTP server host url or ip address","minLength":1,"examples":["191.173.128.88","sftp.example.com"]},"port":{"title":"Port","type":"integer","default":21,"description":"The SFTP server port","minLength":1,"examples":[22]},"username":{"title":"Username","type":"string","description":"Username","minLength":1,"examples":["admin"]},"password":{"title":"Password","type":"string","description":"Password","writeOnly":true,"minLength":1,"examples":["@some(!)Strongpassword"]}},"type":"object","additionalProperties":true,"required":["host"]}},
[
  {
    "id": "cursor",
    "longname": "cursor",
    "name": "cursor",
    "kind": "function",
    "scope": "global",
    "description": "Sets `state.cursor` to a SurveyCTO timestamp string (`MMM dd, yyy h:mm:ss a`).\nThis supports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\nwhich will be converted into timestamp strings.\nSee the usage guide at {@link https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors}",
    "params": [
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the cursor value. Usually an ISO date, natural language date, or page number",
        "name": "value"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "description": "options to control the cursor.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "set the cursor key. Will persist through the whole run.",
        "name": "options.key"
      },
      {
        "type": {
          "names": [
            "any"
          ]
        },
        "description": "the value to use if value is falsy",
        "name": "options.defaultValue"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "custom formatter for the final cursor value",
        "name": "options.format"
      }
    ],
    "examples": [
      "<caption>Use a cursor from state if present, or else use the default value</caption>\ncursor('today')\nfetchSubmissions('test', { date: $.cursor });"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 169,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 5,
    "newscope": true,
    "level": 0
  },
  {
    "id": "FetchSubmissionOptions",
    "longname": "FetchSubmissionOptions",
    "name": "FetchSubmissionOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to `fetchSubmissions()`",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": 0,
        "description": "Fetch only submissions from this timestamp. Acccepts SuvreyCTO date strings, unix and epoch timestamps, and ISO dates. By default, all submissions will be retrieved.",
        "name": "date"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "json",
        "description": "Format the submission data type as  `csv` or `json`.",
        "name": "format"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "Review status. Can be either, `approved`, `rejected`, `pending` or combine eg `approved|rejected`.",
        "name": "status"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 31,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 1,
    "level": 0
  },
  {
    "id": "fetchSubmissions",
    "longname": "fetchSubmissions",
    "name": "fetchSubmissions",
    "kind": "function",
    "scope": "global",
    "description": "Fetch form submissions.\n\nIf a date filter is provided, it will be  converted internally to the surveyCTO `MMM dd, yyy h:mm:ss` format (in UTC time).",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Form id",
        "name": "formId"
      },
      {
        "type": {
          "names": [
            "FetchSubmissionOptions"
          ]
        },
        "description": "Form submission date, format, status parameters",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "<caption>Fetch all form submissions</caption>\nfetchSubmissions('test');",
      "<caption> With SurveyCTO date format (UTC)</caption>\nfetchSubmissions('test', { date: 'Apr 18, 2024 6:26:21 AM' });",
      "<caption>Using a rolling cursor </caption>\ncursor((state) => state.cursor, { defaultValue: 'today' });\nfetchSubmissions('test', { date: (state) => state.cursor, format: 'csv' });\ncursor('now');",
      "<caption> Formatting the results to CSV String</caption>\nfetchSubmissions('test', { format: 'csv' });",
      "<caption> With reviewStatus filter</caption>\nfetchSubmissions('test', { status: 'approved|rejected' });",
      "<caption> With a callback function</caption>\nfetchSubmissions(\n  'test',\n  {\n    date: 'Apr 18, 2024 6:26:21 AM',\n  },\n  state => {\n    console.log('Hello from the callback!');\n    return state;\n  }\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 74,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "request",
    "longname": "request",
    "name": "request",
    "kind": "function",
    "scope": "global",
    "description": "Make a request in SurveyCTO API",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "Path to resource",
        "name": "path"
      },
      {
        "type": {
          "names": [
            "RequestOptions"
          ]
        },
        "description": "Query, body and method parameters",
        "name": "params"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "(Optional) Callback function",
        "name": "callback"
      }
    ],
    "examples": [
      "request(\"/anEndpoint\", {\n  method: \"POST\",\n  query: { foo: \"bar\", a: 1 },\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 140,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 4,
    "level": 0
  },
  {
    "id": "RequestOptions",
    "longname": "RequestOptions",
    "name": "RequestOptions",
    "kind": "typedef",
    "scope": "global",
    "description": "Options provided to request()",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object of headers parameters.",
        "name": "headers"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "Body data to append to the request.",
        "name": "body"
      },
      {
        "type": {
          "names": [
            "object"
          ]
        },
        "optional": true,
        "description": "An object of query parameters to be encoded into the URL.",
        "name": "query"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "GET",
        "description": "The HTTP method to use.",
        "name": "method"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 116,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/surveycto/src"
    },
    "order": 3,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "chunk",
    "common": true,
    "name": "chunk",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "parseCsv",
    "common": true,
    "name": "parseCsv",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"surveycto","adaptor":"@openfn/language-surveycto","version":"2.2.4","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#cursor\\\">cursor(value, options)</a></dt>\\n<dt>\\n    <a href=\\\"#fetchsubmissions\\\">fetchSubmissions(formId, options, callback)</a></dt>\\n<dt>\\n    <a href=\\\"#request\\\">request(path, params, callback)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#chunk\\\">chunk()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#parsecsv\\\">parseCsv()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### cursor\\n\\n<p><code>cursor(value, options) ⇒ Operation</code></p>\\n\\nSets `state.cursor` to a SurveyCTO timestamp string (`MMM dd, yyy h:mm:ss a`).\\nThis supports natural language dates like `now`, `today`, `yesterday`, `n hours ago`, `n days ago`, and `start`,\\nwhich will be converted into timestamp strings.\\nSee the usage guide at [https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors](https://docs.openfn.org/documentation/jobs/job-writing-guide#using-cursors)\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>any</code> | the cursor value. Usually an ISO date, natural language date, or page number |\\n| options | <code>object</code> | options to control the cursor. |\\n| options.key | <code>string</code> | set the cursor key. Will persist through the whole run. |\\n| options.defaultValue | <code>any</code> | the value to use if value is falsy |\\n| options.format | <code>function</code> | custom formatter for the final cursor value |\\n\\n**Example:** Use a cursor from state if present, or else use the default value\\n```js\\ncursor('today')\\nfetchSubmissions('test', { date: $.cursor });\\n```\\n\\n* * *\\n\\n### fetchSubmissions\\n\\n<p><code>fetchSubmissions(formId, options, callback) ⇒ Operation</code></p>\\n\\nFetch form submissions.\\n\\nIf a date filter is provided, it will be  converted internally to the surveyCTO `MMM dd, yyy h:mm:ss` format (in UTC time).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formId | <code>string</code> | Form id |\\n| options | [<code>FetchSubmissionOptions</code>](#fetchsubmissionoptions) | Form submission date, format, status parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example:** Fetch all form submissions\\n```js\\nfetchSubmissions('test');\\n```\\n**Example:**  With SurveyCTO date format (UTC)\\n```js\\nfetchSubmissions('test', { date: 'Apr 18, 2024 6:26:21 AM' });\\n```\\n**Example:** Using a rolling cursor \\n```js\\ncursor((state) => state.cursor, { defaultValue: 'today' });\\nfetchSubmissions('test', { date: (state) => state.cursor, format: 'csv' });\\ncursor('now');\\n```\\n**Example:**  Formatting the results to CSV String\\n```js\\nfetchSubmissions('test', { format: 'csv' });\\n```\\n**Example:**  With reviewStatus filter\\n```js\\nfetchSubmissions('test', { status: 'approved|rejected' });\\n```\\n**Example:**  With a callback function\\n```js\\nfetchSubmissions(\\n  'test',\\n  {\\n    date: 'Apr 18, 2024 6:26:21 AM',\\n  },\\n  state => {\\n    console.log('Hello from the callback!');\\n    return state;\\n  }\\n);\\n```\\n\\n* * *\\n\\n### request\\n\\n<p><code>request(path, params, callback) ⇒ Operation</code></p>\\n\\nMake a request in SurveyCTO API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | [<code>RequestOptions</code>](#requestoptions) | Query, body and method parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**\\n```js\\nrequest(\\\"/anEndpoint\\\", {\\n  method: \\\"POST\\\",\\n  query: { foo: \\\"bar\\\", a: 1 },\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### FetchSubmissionOptions\\n\\nOptions provided to `fetchSubmissions()`\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [date] | <code>string</code> | <code>0</code> | Fetch only submissions from this timestamp. Acccepts SuvreyCTO date strings, unix and epoch timestamps, and ISO dates. By default, all submissions will be retrieved. |\\n| [format] | <code>string</code> | <code>&quot;json&quot;</code> | Format the submission data type as  `csv` or `json`. |\\n| [status] | <code>string</code> |  | Review status. Can be either, `approved`, `rejected`, `pending` or combine eg `approved|rejected`. |\\n\\n\\n* * *\\n\\n### RequestOptions\\n\\nOptions provided to request()\\n\\n**Properties**\\n\\n| Name | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| [headers] | <code>object</code> |  | An object of headers parameters. |\\n| [body] | <code>object</code> |  | Body data to append to the request. |\\n| [query] | <code>object</code> |  | An object of query parameters to be encoded into the URL. |\\n| [method] | <code>string</code> | <code>&quot;GET&quot;</code> | The HTTP method to use. |\\n\\n\\n* * *\\n\\n\"","readme":"\"# Language SurveyCTO\\n\\nLanguage Pack for building expressions and operations to make HTTP calls to\\nSurveyCTO.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/surveycto-configuration-schema/)\\ndefinition.\\n\\n## fetchSubmissions\\n\\n`fetchSubmissions(1,2,3)` takes three arguments:\\n\\n1. the `formId` of the form on SurveyCTO\\n\\n2. the `initialAfterDate`, a date string or UNIX timestamp which instructs the\\n   job to only fetch submissions after a certain date. After the first run of\\n   the job, subsequent runs will only fetch _NEW_ submissions.\\n\\n3. the `postUrl` is where the wide-format JSON representation of each form\\n   submission should be sent. Note that a `formId` key will be added to each\\n   form submission for later filtering/routing.\\n\\n### sample `fetchSubmissions` expression\\n\\n```js\\nfetchSubmissions(\\n  // formId on SurveyCTO server\\n  'household_survey',\\n  // initialAfterDate: this will only be accessed if \\\"lastSubmissionDate\\\" is empty in your job_state\\\".\\n  // After the initial run of the job, OpenFn will only pull new submissions from SurveyCTO.\\n  'Aug 29, 2016 4:44:26 PM',\\n  // postUrl is where you want to send the JSON submissions, appended with a new \\\"formId\\\" key\\n  'https://www.openfn.org/inbox/secret-inbox-uuid'\\n);\\n```\\n\\n## Development\\n\\nClone the repo, run `npm install`.\\n\\nRun tests using `npm run test` or `npm run test:watch`\\n\\nBuild the project using `make`.\\n\"","changelog":"\"# @openfn/language-surveycto\\n\\n## 2.2.4 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 2.2.3 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 2.2.2 - 06 August 2024\\n\\n### Patch Changes\\n\\n- d54ab59: Fix an issue assembling surveyCTO urls (which manifested as\\n  `TypeError: Cannot read properties of undefined (reading 'toString'`)\\n\\n## 2.2.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- f51c5d0: Enforce that absolute urls must not be passed to HTTP functions\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 2.2.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 2.1.1 - 17 May 2024\\n\\n### Patch Changes\\n\\n- 6c588212: Fix `servername` typo in the `configuration-schema`\\n\\n## 2.1.0 - 08 May 2024\\n\\n### Minor Changes\\n\\n- b67f81be: Add a `cursor()` function which adds support for the surveyCTO\\n  string format dates.\\n\\n  The date option in `fetchSubmissions` can now accept a surveyCTO date, an\\n  epoch or unix timestamp, or basically anything you can pass into new Date().\\n\\n  Internally, any date you pass into `cursor` will be converted into a\\n  human-readable surveyCTO format in UTC time.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[88f99a8f]\\n  - @openfn/language-common@1.13.3\\n\\n## 2.0.0 - 23 April 2024\\n\\n### Major Changes\\n\\n- 59ae7b50: - Refactor `fetchSubmissions()` function\\n  - Update `instanceName` to `servername` in `configuration-schema.json`\\n  - Add `apiVersion` in `configuration-schema.json`. Defaults to `v1`\\n  - Add `request()` function for surveyCTO API requests\\n\\n## 1.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.1 - 13 January 2023\\n\\n### Patch Changes\\n\\n- 6d8de03: change @constructor to @function and remove /\\\\*\\\\_ @module Adaptor \\\\_/\\n\\n## 1.1.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 776bb13: migrate surveycto\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["cursor","fetchSubmissions","request"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"servername":{"title":"Server Name","type":"string","description":"Your Surveycto server name also known as instance name","minLength":1,"examples":["openfn_test"]},"username":{"title":"Username","type":"string","description":"Your Surveycto server username","minLength":1,"examples":["someusername"]},"password":{"title":"Password","type":"string","description":"Your Surveycto server password","writeOnly":true,"minLength":1,"examples":["@some(%)!Password"]},"apiVersion":{"title":"API Version","type":"string","description":"The API version","default":"v1","examples":["v1","v2"]}},"type":"object","additionalProperties":true,"required":["servername","username","password"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"telerivet","adaptor":"@openfn/language-telerivet","version":"0.3.13","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Telerivet\\n\\nLanguage Pack for sending messages using the\\n[telerivet API](https://telerivet.com/api/rest/curl).\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/telerivet-configuration-schema/)\\ndefinition.\\n\\n## Send message\\n\\n#### Current `send` expression:\\n\\n```js\\nsend(\\n  fields(\\n    field('to_number', dataValue('recipient_number')),\\n    field('content', dataValue('recipient_text')),\\n    // Lots of optional parameters...\\n    field('message_type', 'sms'),\\n    field('route_id', dataValue('some_route'))\\n  )\\n);\\n```\\n\\n## sendBulk messages - WIP\\n\\n#### Current `sendBulk` expression:\\n\\n```js\\nsend(fields(\\n  field(\\\"content\\\", dataValue(\\\"recipient_text\\\")),\\n  field(\\\"to_numbers\\\", [\\n        \\\"+14155550123\\\",\\n        \\\"+14255550234\\\",\\n        \\\"+16505550345\\\"\\n    ]\\n  // Lots of optional parameters...\\n  field(\\\"message_type\\\", \\\"sms\\\"),\\n  field(\\\"route_id\\\", dataValue(\\\"some_route\\\"))\\n))\\n```\\n\\nNote that \\\"recipient_text\\\" may be a concatenation like this:\\n\\n```js\\nfield('content', function (state) {\\n  return dataValue('salutation')(state).concat(\\n    '. ',\\n    dataValue('last_name')(state),\\n    ', )'\\n  );\\n});\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-telerivet\\n\\n## 0.3.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.3.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.3.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.3.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.3.9 - 10 March 2025\\n\\n### Patch Changes\\n\\n- 8a8c28d: - cleanup examples wrapped with `execute()` function\\n  - Add example caption and add sample payload\\n\\n## 0.3.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.3.7 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.3.6 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.3.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.3.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.3.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.3.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.3.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.1.4 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.1.3 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.1.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.1.1 - 25 November 2022\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\\n## 0.1.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- 83ede44: migrate telerivet\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"projectId":{"title":"Project ID","type":"string","description":"Your Telerivet project id","minLength":1,"examples":["telerivet_project_id"]},"apiKey":{"title":"API Key","type":"string","description":"Your Telerivet API Key","writeOnly":true,"minLength":1,"examples":["telerivet_api_key"]}},"type":"object","additionalProperties":true,"required":["projectId","apiKey"]}},
[
  {
    "id": "sendSMS",
    "longname": "sendSMS",
    "name": "sendSMS",
    "kind": "function",
    "scope": "global",
    "description": "Sends an SMS message to a specific phone number",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "an object containing 'body', 'from', and 'to' keys.",
        "name": "params"
      }
    ],
    "examples": [
      "sendSMS({\n body: dataValue('sampleText'),\n from: dataValue('myFromNumber'),\n to: dataValue('ukMobile'),\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 45,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/twilio/src"
    },
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"twilio","adaptor":"@openfn/language-twilio","version":"0.5.2","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSMS(params)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### sendSMS\\n\\n<p><code>sendSMS(params) ⇒ Operation</code></p>\\n\\nSends an SMS message to a specific phone number\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | an object containing 'body', 'from', and 'to' keys. |\\n\\n**Example**\\n```js\\nsendSMS({\\n body: dataValue('sampleText'),\\n from: dataValue('myFromNumber'),\\n to: dataValue('ukMobile'),\\n});\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# Language twilio\\n\\nLanguage Pack for building expressions and operations to interact with the\\ntwilio API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/twilio-configuration-schema/)\\ndefinition.\\n\\n### sendSMS\\n\\n#### sample expression, sending an sms\\n\\n```js\\nsendSMS({\\n  body: dataValue('text'),\\n  from: '+15005550006',\\n  to: dataValue('recipient'),\\n});\\n```\\n\\n## local usage\\n\\n```sh\\n~/devtools/core/bin/core execute \\\\\\n  -l ~/devtools/adaptors/language-twilio \\\\\\n  -s ./tmp/state.json \\\\\\n  -o ./tmp/output.json \\\\\\n  -e ./tmp/expression.js\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-twilio\\n\\n## 0.5.2 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Security fix: update jsonpath-plus version\\n\\n## 0.5.1 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.5.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.4.2 - 24 January 2024\\n\\n### Patch Changes\\n\\n- 6afba70: Fix sendSMS\\n\\n## 0.4.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.4.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.3.4 - 06 April 2023\\n\\n### Patch Changes\\n\\n- a22daa6: rename credential-schema to configuration-schemawq\\n\\n## 0.3.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.3.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.3.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.3.0 - 18 November 2022\\n\\n### Minor Changes\\n\\n- a36a072: ymigrated twilio to monorepo\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[f2a91a4]\\n  - @openfn/language-common@1.7.5\\n\"","functions":["sendSMS"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"accountSid":{"title":"Account ID","type":"string","description":"Your Twilio account id","writeOnly":true,"minLength":1,"examples":["account_id"]},"authToken":{"title":"Auth Token","type":"string","description":"Your Twilio auth token","writeOnly":true,"minLength":1,"examples":["evenMoreSecret"]}},"type":"object","additionalProperties":true,"required":["accountSid","authToken"]}},
[
  {
    "id": "convertItemsToReports",
    "longname": "convertItemsToReports",
    "name": "convertItemsToReports",
    "kind": "function",
    "scope": "global",
    "description": "Read a collection of EMS-like data records and convert them to a standard EMS report/record format.\nSystematically separates report properties from record properties.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Array of EMS-like JSON objects.",
        "name": "items"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'unknown'",
        "description": "Optional. Source of the report, e.g., \"ems\" or \"rtmd\".",
        "name": "reportType"
      }
    ],
    "examples": [
      "<caption>Convert data to EMS-compliant data.</caption>\nconvertItemsToReport(\n  [\n    { \"ASER\": \"BJBC 08 30\", \"ABST\": \"20241205T004440Z\", \"TVC\": 5.0 },\n    { \"ASER\": \"BJBC 08 30\", \"ABST\": \"20241205T005440Z\", \"TVC\": 5.2 },\n  ]\n);\n\nstate.data becomes:\n{\n  \"ASER\": \"BJBC 08 30\",\n  records: [\n    { \"ABST\": \"20241205T004440Z\", \"TVC\": 5.0 },\n    { \"ABST\": \"20241205T005440Z\", \"TVC\": 5.2 },\n  ],\n}"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 95,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/varo/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The converted, EMS-compliant report with records.",
        "type": "Array"
      }
    ],
    "order": 1,
    "newscope": true,
    "level": 0
  },
  {
    "id": "convertReportsToMessageContents",
    "longname": "convertReportsToMessageContents",
    "name": "convertReportsToMessageContents",
    "kind": "function",
    "scope": "global",
    "description": "Converts an EMS-compliant report into Varo-compatible message components.",
    "params": [
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "description": "EMS-compliant report objects.",
        "name": "reports"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "'unknown'",
        "description": "Optional. Source of the report, e.g., \"ems\" or \"rtmd\".",
        "name": "reportType"
      }
    ],
    "examples": [
      "// Convert EMS-compliant reports to Varo message components.\nconvertReportsToMessageContents(emsReports, \"ems\");"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "An operation function that receives `state` and returns updated message content."
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 136,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/varo/src"
    },
    "order": 2,
    "level": 0
  },
  {
    "id": "convertToEms",
    "longname": "convertToEms",
    "name": "convertToEms",
    "kind": "function",
    "scope": "global",
    "description": "Processes EMS data from the provided list of message contents.",
    "params": [
      {
        "type": {
          "names": [
            "Array"
          ]
        },
        "description": "Array of message content objects.",
        "name": "messageContents"
      }
    ],
    "examples": [
      "<caption>Convert data to EMS-compliant data.</caption>\nconvertToEms(\n  [\n    {\n      metadata: { content: '', filename: '' },\n      data: { content: '', filename: '' }\n    }\n  ]\n);"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 29,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/varo/src"
    },
    "state": [
      {
        "name": "data",
        "description": "The converted, EMS-compliant version of each message contents.",
        "type": "Array"
      }
    ],
    "order": 0,
    "level": 0
  },
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "combine",
    "common": true,
    "name": "combine",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "http",
    "common": true,
    "name": "http",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"varo","adaptor":"@openfn/language-varo","version":"1.1.0","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#convertitemstoreports\\\">convertItemsToReports(items, [reportType])</a></dt>\\n<dt>\\n    <a href=\\\"#convertreportstomessagecontents\\\">convertReportsToMessageContents(reports, [reportType])</a></dt>\\n<dt>\\n    <a href=\\\"#converttoems\\\">convertToEms(messageContents)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#combine\\\">combine()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#http\\\">http</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### convertItemsToReports\\n\\n<p><code>convertItemsToReports(items, [reportType]) ⇒ Operation</code></p>\\n\\nRead a collection of EMS-like data records and convert them to a standard EMS report/record format.\\nSystematically separates report properties from record properties.\\n\\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| items | <code>Array</code> |  | Array of EMS-like JSON objects. |\\n| [reportType] | <code>string</code> | <code>&quot;&#x27;unknown&#x27;&quot;</code> | Optional. Source of the report, e.g., \\\"ems\\\" or \\\"rtmd\\\". |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The converted, EMS-compliant report with records. |\\n**Example:** Convert data to EMS-compliant data.\\n```js\\nconvertItemsToReport(\\n  [\\n    { \\\"ASER\\\": \\\"BJBC 08 30\\\", \\\"ABST\\\": \\\"20241205T004440Z\\\", \\\"TVC\\\": 5.0 },\\n    { \\\"ASER\\\": \\\"BJBC 08 30\\\", \\\"ABST\\\": \\\"20241205T005440Z\\\", \\\"TVC\\\": 5.2 },\\n  ]\\n);\\n\\nstate.data becomes:\\n{\\n  \\\"ASER\\\": \\\"BJBC 08 30\\\",\\n  records: [\\n    { \\\"ABST\\\": \\\"20241205T004440Z\\\", \\\"TVC\\\": 5.0 },\\n    { \\\"ABST\\\": \\\"20241205T005440Z\\\", \\\"TVC\\\": 5.2 },\\n  ],\\n}\\n```\\n\\n* * *\\n\\n### convertReportsToMessageContents\\n\\n<p><code>convertReportsToMessageContents(reports, [reportType]) ⇒ function</code></p>\\n\\nConverts an EMS-compliant report into Varo-compatible message components.\\n\\n**Returns**: <code>function</code> - An operation function that receives `state` and returns updated message content.  \\n\\n| Param | Type | Default | Description |\\n| --- | --- | --- | --- |\\n| reports | <code>Object</code> |  | EMS-compliant report objects. |\\n| [reportType] | <code>string</code> | <code>&quot;&#x27;unknown&#x27;&quot;</code> | Optional. Source of the report, e.g., \\\"ems\\\" or \\\"rtmd\\\". |\\n\\n**Example**\\n```js\\n// Convert EMS-compliant reports to Varo message components.\\nconvertReportsToMessageContents(emsReports, \\\"ems\\\");\\n```\\n\\n* * *\\n\\n### convertToEms\\n\\n<p><code>convertToEms(messageContents) ⇒ Operation</code></p>\\n\\nProcesses EMS data from the provided list of message contents.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| messageContents | <code>Array</code> | Array of message content objects. |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | The converted, EMS-compliant version of each message contents. |\\n**Example:** Convert data to EMS-compliant data.\\n```js\\nconvertToEms(\\n  [\\n    {\\n      metadata: { content: '', filename: '' },\\n      data: { content: '', filename: '' }\\n    }\\n  ]\\n);\\n```\\n\\n* * *\\n\\n\\n\"","readme":"\"# language-varo <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nThe Varo adaptor is designed to work in conjunction with the Gmail adaptor.\\n\\nThe following workflows have been illustrated:\\n- Gmail -> EMS report\\n  Take proprietary data formats found in Gmail messages and convert them to EMS-compliant format.\\n- CCDX data collection -> Gmail\\n  Retrieve data found in an OpenFn collection, convert it to a EMS report, assemble it as a Varo package and send it to a Varo inbox to be processed by Pogo LT.\\n\\n# Gmail -> EMS report\\n\\nThis will demonstrate how to pull messages from a Gmail account and pass them to the Varo adaptor which will convert them into EMS format to be used for downstream consumers in the workflow.\\n\\nThe workflow requires some pre-configuration, namely the Gmail `access_token` and the OpenFn `collection_token`.\\n\\n## Example workflow\\n\\nPlace these files in the openfn/adaptors/workflows/readVaroPackages folder.\\n\\n### workflow.json\\n\\n```js\\n{\\n  \\\"options\\\": {\\n    \\\"start\\\": \\\"getContentsFromMessages\\\"\\n  },\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [\\n      {\\n        \\\"id\\\": \\\"getContentsFromMessages\\\",\\n        \\\"adaptors\\\": [\\n          \\\"gmail\\\",\\n          \\\"collections\\\"\\n        ],\\n        \\\"expression\\\": \\\"jobGmail.js\\\",\\n        \\\"configuration\\\": {\\n          \\\"access_token\\\": \\\"[redacted]\\\"\\n        },\\n        \\\"next\\\": {\\n          \\\"convertToEms\\\": \\\"Array.isArray(state.data) && state.data.length > 0\\\"\\n        }\\n      },\\n      {\\n        \\\"id\\\": \\\"convertToEms\\\",\\n        \\\"adaptor\\\": \\\"varo\\\",\\n        \\\"expression\\\": \\\"jobVaro.js\\\",\\n      }\\n    ],\\n    \\\"credentials\\\": {\\n      \\\"collections_endpoint\\\": \\\"http://localhost:4000/collections\\\",\\n      \\\"collections_token\\\": \\\"[redacted]\\\"\\n    }\\n  }\\n}\\n```\\n\\n### jobGmail.js\\n\\nThis job will define message parts of interest including: metadata, data and fridgeTag. Also important is a collection of previously-processed messageIds. This job will grab ids from the `gmail-processed-ids` collection and pass them into the request. Once the request is complete, the new, processed messageIds are placed into the collection for future retrieval.\\n\\n```js\\nconst contents = [\\n  { name: \\\"metadata\\\", file: /\\\\d{12}_\\\\d{8}T\\\\d{6}Z\\\\.json$/ },\\n  { name: \\\"data\\\", file: /_CURRENT_DATA_.*\\\\.json$/ },\\n  {\\n    name: \\\"data\\\",\\n    archive: /_varo_data\\\\.zip$/,\\n    file: /_CURRENT_DATA_.*\\\\.json$/,\\n  },\\n  { name: \\\"fridgeTag\\\", file: /\\\\d{12}_\\\\d{12}_\\\\d{8}T\\\\d{6}Z\\\\.txt$/ },\\n];\\n\\nconst collectionName = \\\"gmail-processed-ids\\\";\\nconst itemName = \\\"processedIds\\\";\\n\\ncollections.get(collectionName, itemName);\\n\\ngetContentsFromMessages({\\n  contents,\\n  processedIds: $.data,\\n});\\n\\nfnIf(\\n  (state) => Array.isArray(state.processedIds),\\n  collections.set(collectionName, itemName, $.processedIds)\\n);\\n```\\n\\n### jobVaro.js\\n\\nThe function `convertToEms` expects an array of message contents. This property contains text files in EMS-like Varo format or FridgeTag format and transforms them into EMS-structured data. Tip: This format is automatically provided by the Gmail adaptor. \\n\\nExpected data structure:\\n\\n```js\\n[\\n  {\\n    metadata: {\\n      content: '',\\n      filename: '',\\n    },\\n    data: {\\n      content: '',\\n      filename: '',\\n    },\\n  },\\n]\\n```\\n\\n\\n```js\\nconvertToEms($.data);\\n\\nfn((state) => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\\n# CCDX data collection -> Gmail\\n\\nFollowing is an example demonstrating how to retrieve data found in an OpenFn collection, convert it to a EMS report, assemble it as a Varo package and send it to a Varo inbox to be processed by Pogo LT.\\n\\n## Example workflow\\n\\nPlace these files in the openfn/adaptors/workflows/sendVaroPackage folder.\\n\\n### workflow.js\\n```js\\n{\\n  \\\"workflow\\\": {\\n    \\\"steps\\\": [\\n      {\\n        \\\"id\\\": \\\"convertRecordsToMessageContent\\\",\\n        \\\"adaptor\\\": \\\"varo\\\",\\n        \\\"expression\\\": \\\"jobVaro.js\\\",\\n        \\\"next\\\": {\\n          \\\"sendMessage\\\": \\\"state.data != null\\\"\\n        }\\n      },\\n      {\\n        \\\"id\\\": \\\"sendMessage\\\",\\n        \\\"adaptor\\\": \\\"gmail\\\",\\n        \\\"expression\\\": \\\"jobGmail.js\\\",\\n        \\\"configuration\\\": {\\n          \\\"access_token\\\": \\\"[redacted]\\\"\\n        }\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n### jobVaro.js\\n\\n```js\\n// Pull the data from the collection into the state.\\ncollections.get(\\\"ccdx-ems\\\", \\\"*\\\");\\n\\n// Convert the raw collection records into an EMS report.\\nconvertRecordsToReport($.data);\\n\\n// Convert the EMS report to message contents (subject, data file).\\nconvertReportToMessageContent($.data, \\\"ems\\\");\\n```\\n\\n### jobGmail.js\\n\\n```js\\nfn((state) => {\\n  const { subject, data } = state.data;\\n\\n  /*\\n    subject = \\\"OpenFn | EMS\\\";\\n    data = {\\n      filename: \\\"data.json\\\", \\n      content: \\\"{ ... EMS report converted to JSON string ... }\\\",\\n    };\\n  */\\n \\n  // Compress the data.json file into a ZIP file.\\n  const dataArchive = {\\n    filename: \\\"data.zip\\\",\\n    archive: [data],\\n  };\\n\\n  state.data = {\\n    to: \\\"receiver@gmail.com\\\",\\n    subject,\\n    attachments: [dataArchive],\\n  };\\n\\n  return state;\\n});\\n\\nsendMessage($.data);\\n```\\n\\n# Running workflow\\n\\nWe can look in more detail at the Gmail -> EMS report workflow and illustrate some advanced techniques to enhance the development experience and operation.\\n\\n## Basics\\n\\nThe `-m` flag tells OpenFn to use the monorepo instead of its own adaptor cache.\\n\\n```\\ncd openfn/adaptors/workflows/readVaroPackages\\nopenfn workflow.json -m\\n```\\n\\n## Advanced workflow operation\\n\\nIt's beneficial to isolate the Varo adaptor during development to avoid the redundant step of repeatedly querying Gmail which also requires refreshing the access token each hour. We can use advanced functionality of the OpenFn CLI to cache the output of the Gmail step which will enable us reuse its output while we are enhancing the Varo adaptor.\\n\\n### Cache the output from a step\\n\\nWe can configure the workflow to retrieve this message content from a local file which will bypass the need to use the Gmail adaptor to retrieve this information.\\n\\n- `-m` Use the monorepo.\\n- `--cache-steps` Direct the CLI to cache the job output.\\n- `--only getContentsFromMessages` Execute only the getContentsFromMessage step.\\n\\n```\\nopenfn workflow.json -m --cache-steps --only getContentsFromMessages\\n```\\n\\n### Running with a cached step\\n\\n- `-m` Use the monorepo.\\n- `--only convertToEms` Execute only the convertToEms step.\\n\\n```\\nopenfn workflow.json -m --only convertToEms\\n```\\n\\n# Token configuration\\n\\nSome workflows required authorization to access the resources.\\n\\n## Gmail token\\n\\nUse Postman to retrieve an access token. This is a short-lived token will last 60 minutes and will have to be manually retrieved. See the documentation in the [Gmail adaptor readme](https://docs.openfn.org/adaptors/packages/gmail-readme#use-the-postman-application-to-query-the-oauth-enpoint-and-retrieve-an-access-token) for a guide on how to configure Postman to retrieve the access token.\\n\\n## OpenFn collections token\\n\\nA workflow may track the previously processed messages by storing the processed IDs in an OpenFn collection. OpenFn requires authorization to access a given collection.\\n\\n1. Access the [Collections](http://localhost:4000/settings/collections) configuration in the administration area.\\n1. Ensure the collection named `gmail-processed-ids` exists.\\n1. Create a new token in the [Personal Access Tokens](http://localhost:4000/profile/tokens) configuration.\\n\\n# Enhancing/developing the Varo adaptor\\n\\nThese instructions will illustrate how to install OpenFn and the adaptor monorepo. The monorepo gives you access to in-development versions of the adaptors.\\n\\nRecommended folder structure:\\n\\n```\\nopenfn\\n├── lightning\\n└── adaptors\\n    ├── adaptors\\n    └── workflows\\n```\\n\\n## Install OpenFn\\n\\nPrerequisite is Docker in installed, up-to-date, and running on your computer.\\n\\n### Clone the Lightning repository\\n\\n```\\ncd openfn\\ngit clone https://github.com/OpenFn/lightning.git\\n```\\n\\n### Build the containers\\n\\nThis will build three docker containers:\\n\\n1. lightning-web\\n1. postgres\\n1. ws-worker\\n\\n```\\ndocker compose build && docker compose run --rm web mix ecto.migrate\\ndocker compose up -d\\n```\\n\\nThe web application will be running on [localhost port 4000](http://localhost:4000).\\n\\n## Install the monorepo\\n\\nTo use the monorepo locally you'll need some prerequesite build tools installed.\\n\\n### Prerequesites\\n\\nasdf, nodejs, pnpm\\n\\n```\\ngit clone https://github.com/asdf-vm/asdf.git ~/.asdf\\n\\nasdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git\\nasdf plugin-add pnpm\\n```\\n\\n### Clone the monorepo repository\\n\\n```\\ncd openfn/adaptors\\ngit clone https://github.com/OpenFn/adaptors.git\\n```\\n\\n### Install the build tools\\n\\n```\\nasdf install # Install tool versions\\npnpm install\\npnpm build\\npnpm run setup\\n```\\n\\n### Switch to the working branch of the varo adaptor\\n\\n```\\ncd openfn/adaptors/adaptors\\ngit checkout nhgh-varo\\n```\\n\\n\"","changelog":"\"# @openfn/language-varo\\n\\n## 1.1.0 - 12 May 2025\\n\\n### Minor Changes\\n\\n- c9453ed: Added streaming RTMD data support.\\n\\n## 1.0.3 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.0.2 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.0.1 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.0.0 - 19 March 2025\\n\\nInitial release. Handles the parsing of Varo Ems-like format and the parsing of\\nFridgeTag format.\\n\"","functions":["convertItemsToReports","convertReportsToMessageContents","convertToEms"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{},"type":"object","additionalProperties":true,"required":[]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"vtiger","adaptor":"@openfn/language-vtiger","version":"1.3.14","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Vtiger\\n\\nLanguage Pack for building expressions and operations to make calls to the\\nVtiger API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/vtiger-configuration-schema/)\\ndefinition.\\n\\n#### sample listTypes expression\\n\\n```js\\nlistTypes();\\n```\\n\\n#### sample postElement expression\\n\\n```js\\npostElement({\\n  operation: \\\"create\\\"\\n  elementType: \\\"leads\\\",\\n  element: {\\n    \\\"name\\\": dataValue(\\\"name\\\")(state),\\n    \\\"surname\\\": dataValue(\\\"surname\\\")(state),\\n    \\\"email\\\": dataValue(\\\"email\\\")(state)\\n  }\\n});\\n\\n\\n```\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-vtiger\\n\\n## 1.3.14 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 1.3.13 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 1.3.12 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 1.3.11 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 1.3.10 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 1.3.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 1.3.8 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 1.3.7 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 1.3.6 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 1.3.5 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 1.3.4 - 09 October 2024\\n\\n### Patch Changes\\n\\n- 8d866e4: Update tough-cookie dependency\\n\\n## 1.3.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 1.3.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 1.3.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 1.3.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 1.2.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 1.2.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 1.1.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 1.1.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 1.1.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 1.1.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- b4a13ff: migrate vtiger\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"hostUrl":{"title":"Host URL","type":"string","description":"VTiger instance host URL","format":"uri","minLength":1,"examples":["https://openfunction.od2.vtiger.com"]},"username":{"title":"Username","type":"string","description":"VTiger instance username","minLength":1,"examples":["test@openfn.org"]},"accessToken":{"title":"Access Token","type":"string","description":"VTiger instance access token","writeOnly":true,"minLength":1,"examples":["@some()!veryHugeToke"]}},"type":"object","additionalProperties":true,"required":["hostUrl","username","accessToken"]}},
[
  {
    "id": "sendSms",
    "longname": "sendSms",
    "name": "sendSms",
    "kind": "function",
    "scope": "global",
    "description": "Send SMS using Wigal SMS Gateway API",
    "params": [
      {
        "type": {
          "names": [
            "SMSRequestObject"
          ]
        },
        "description": "SMS payload to push to Wigal. This includes the message, phone number, etc",
        "name": "data"
      }
    ],
    "examples": [
      "<caption>Send General SMS message</caption>\nsendSms({\n  senderid: \"Stevkky\",\n  destinations: [{ destination: \"0552825710\" }],\n  message: \"This is a sample message for SMS sending via Wigal FROG API.\",\n  smstype: \"text\",\n});",
      "<caption>Send Personalized SMS message</caption>\nsendSms({\n  senderid: \"Stevkky\",\n  destinations: [\n    {\n      destination: \"0542709440\",\n      message: \"Hello Joe your order is ready\",\n      msgid: \"MGS1010101\",\n      smstype: \"text\",\n    },\n  ],\n});"
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Operation"
          ]
        }
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 73,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/wigal-sms/src"
    },
    "state": [
      {
        "name": null,
        "description": "No description",
        "type": "SendSMSState"
      }
    ],
    "order": 3,
    "newscope": true,
    "level": 0
  },
  {
    "id": "SendSMSState",
    "longname": "SendSMSState",
    "name": "SendSMSState",
    "kind": "typedef",
    "scope": "global",
    "description": "State object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "description": "the parsed response body. containt status and message response",
        "name": "data"
      },
      {
        "description": "the response from the Wigal SMS server, including headers, statusCode etc",
        "name": "response"
      },
      {
        "description": "an array of all previous data objects used in the Job",
        "name": "references"
      }
    ],
    "access": "private",
    "meta": {
      "lineno": 14,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/wigal-sms/src"
    },
    "order": 1
  },
  {
    "id": "SMSRequestObject",
    "longname": "SMSRequestObject",
    "name": "SMSRequestObject",
    "kind": "typedef",
    "scope": "global",
    "description": "SMS Request Object",
    "type": {
      "names": [
        "Object"
      ]
    },
    "properties": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The senderID used for sending message. Approved SenderIDs only",
        "name": "senderid"
      },
      {
        "type": {
          "names": [
            "array"
          ]
        },
        "description": "An array of objects containing the destination phone number and message to be sent",
        "name": "destinations"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The message to be sent to the destinations",
        "name": "message"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The type of message to be sent. Default is 'text'",
        "name": "smstype"
      }
    ],
    "access": "public",
    "meta": {
      "lineno": 5,
      "filename": "Adaptor.js",
      "path": "/home/runner/work/adaptors/adaptors/packages/wigal-sms/src"
    },
    "order": 0,
    "level": 0
  },
  {
    "id": "cursor",
    "common": true,
    "name": "cursor",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dateFns",
    "common": true,
    "name": "dateFns",
    "scope": "global",
    "kind": "external"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"wigal-sms","adaptor":"@openfn/language-wigal-sms","version":"0.1.7","docs":"\"<dl>\\n<dt>\\n    <a href=\\\"#sendsms\\\">sendSms(data)</a></dt>\\n</dl>\\n\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#cursor\\\">cursor()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datefns\\\">dateFns</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n## Functions\\n### sendSms\\n\\n<p><code>sendSms(data) ⇒ Operation</code></p>\\n\\nSend SMS using Wigal SMS Gateway API\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | [<code>SMSRequestObject</code>](#smsrequestobject) | SMS payload to push to Wigal. This includes the message, phone number, etc |\\n\\nThis operation writes the following keys to state:\\n\\n| State Key | Description |\\n| --- | --- |\\n| data | the parsed response body. containt status and message response |\\n| response | the response from the Wigal SMS server, including headers, statusCode etc |\\n| references | an array of all previous data objects used in the Job |\\n**Example:** Send General SMS message\\n```js\\nsendSms({\\n  senderid: \\\"Stevkky\\\",\\n  destinations: [{ destination: \\\"0552825710\\\" }],\\n  message: \\\"This is a sample message for SMS sending via Wigal FROG API.\\\",\\n  smstype: \\\"text\\\",\\n});\\n```\\n**Example:** Send Personalized SMS message\\n```js\\nsendSms({\\n  senderid: \\\"Stevkky\\\",\\n  destinations: [\\n    {\\n      destination: \\\"0542709440\\\",\\n      message: \\\"Hello Joe your order is ready\\\",\\n      msgid: \\\"MGS1010101\\\",\\n      smstype: \\\"text\\\",\\n    },\\n  ],\\n});\\n```\\n\\n* * *\\n\\n\\n##  Interfaces\\n\\n### SMSRequestObject\\n\\nSMS Request Object\\n\\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| senderid | <code>string</code> | The senderID used for sending message. Approved SenderIDs only |\\n| destinations | <code>array</code> | An array of objects containing the destination phone number and message to be sent |\\n| message | <code>string</code> | The message to be sent to the destinations |\\n| smstype | <code>string</code> | The type of message to be sent. Default is 'text' |\\n\\n\\n* * *\\n\\n\"","readme":"\"# language-wigal-sms <img src='./assets/square.png' width=\\\"30\\\" height=\\\"30\\\"/>\\n\\nAn OpenFn **_adaptor_** for building integration jobs for use with the Wigal SMS\\nAPI.\\n\\n## Documentation\\n\\nView the [docs site](https://docs.openfn.org/adaptors/packages/wigal-sms-docs)\\nfor full technical documentation. Bulk SMS APIs are documented\\n[here](https://frogdocs.wigal.com.gh/introduction).\\n\\n### Example\\n\\n```js\\nsendSMS({\\n  senderid: 'Stevkky',\\n  destinations: [\\n    {\\n      destination: '0552825710',\\n    },\\n  ],\\n  message: 'This is a sample message for SMS sending via Wigal FROG API.',\\n  smstype: 'text',\\n});\\n```\\n\\n### Configuration\\n\\nView the\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/wigal-sms-configuration-schema/)\\nfor required and optional `configuration` properties.\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n\\\"Getting Started\\\" guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo build _only_ the docs run `pnpm build docs`.\\n\\n```\\n\\n```\\n\"","changelog":"\"# @openfn/language-wigal-sms\\n\\n## 0.1.7 - 22 April 2025\\n\\n### Patch Changes\\n\\n- 99e4b48: - Better handling of HTML content in http requests\\n  - When logging HTTP requests, include query parameters\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.1.6 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.1.5 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.1.4 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.1.3 - 31 January 2025\\n\\n### Patch Changes\\n\\n- 7c677a5: Update example for wigal sms\\n\\n## 0.1.2 - 30 January 2025\\n\\n### Patch Changes\\n\\n- Expose via @function\\n\\n## 0.1.1 - 29 January 2025\\n\\n### Patch Changes\\n\\n- Make sendSms public\\n\\n## 0.1.0 - 28 January 2025\\n\\n- Add `sendSms()` operation\\n\"","functions":["sendSms"],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"baseUrl":{"title":"Base URL","anyOf":[{"type":"string"},{"type":"null"}],"description":"The base URL (https://frogapi.wigal.com.gh)","format":"uri","minLength":1,"examples":["https://frogapi.wigal.com.gh"]},"username":{"title":"Username","type":"string","description":"Username","examples":["test@openfn.org"]},"apiKey":{"title":"API-KEY","type":"string","description":"API-KEY","writeOnly":true,"examples":["@some(!)apikey"]}},"type":"object","additionalProperties":true,"required":["apiKey","username"]}},
[
  {
    "id": "alterState",
    "common": true,
    "name": "alterState",
    "scope": "global",
    "kind": "external-function",
    "newscope": true
  },
  {
    "id": "dataPath",
    "common": true,
    "name": "dataPath",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "dataValue",
    "common": true,
    "name": "dataValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "each",
    "common": true,
    "name": "each",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "field",
    "common": true,
    "name": "field",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fields",
    "common": true,
    "name": "fields",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fn",
    "common": true,
    "name": "fn",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "fnIf",
    "common": true,
    "name": "fnIf",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "lastReferenceValue",
    "common": true,
    "name": "lastReferenceValue",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "merge",
    "common": true,
    "name": "merge",
    "scope": "global",
    "kind": "external-function"
  },
  {
    "id": "sourceValue",
    "common": true,
    "name": "sourceValue",
    "scope": "global",
    "kind": "external-function"
  }
],
{"name":"zoho","adaptor":"@openfn/language-zoho","version":"0.4.13","docs":"\"\\n\\nThis adaptor exports the following from common:\\n<dl>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#alterstate\\\">alterState()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datapath\\\">dataPath()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#datavalue\\\">dataValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#each\\\">each()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#field\\\">field()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fields\\\">fields()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fn\\\">fn()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#fnif\\\">fnIf()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#lastreferencevalue\\\">lastReferenceValue()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#merge\\\">merge()</a>\\n</dt>\\n<dt>\\n    <a href=\\\"/adaptors/packages/common-docs#sourcevalue\\\">sourceValue()</a>\\n</dt></dl>\\n\\n\\n\"","readme":"\"# Language Zoho\\n\\nLanguage Pack for sending messages using the Zoho API.\\n\\n## Documentation\\n\\n### Configuration\\n\\nView all the required and optional properties for `state.configuration` in the\\nofficial\\n[configuration-schema](https://docs.openfn.org/adaptors/packages/zoho-configuration-schema/)\\ndefinition.\\n\\n### addRow\\n\\nTo add a row to the \\\"Customers\\\" table in the \\\"testing_openfn\\\" database, use the\\nfollowing `addRow` function.\\n\\n```js\\naddRow(\\n  'testing_openfn',\\n  'Customers',\\n  fields(field('Subject', dataValue('formId')), field('Status', 'Closed'))\\n);\\n```\\n\\n### updateRow\\n\\nComing soon. Want to help?\\nhttps://zohoreportsapi.wiki.zoho.com/Updating-Data.html\\n\\n## Development\\n\\nClone the [adaptors monorepo](https://github.com/OpenFn/adaptors). Follow the\\n`Getting Started` guide inside to get set up.\\n\\nRun tests using `pnpm run test` or `pnpm run test:watch`\\n\\nBuild the project using `pnpm build`.\\n\\nTo just build the docs run `pnpm build docs`\\n\"","changelog":"\"# @openfn/language-zoho\\n\\n## 0.4.13 - 22 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[99e4b48]\\n- Updated dependencies \\\\[13bf08f]\\n  - @openfn/language-common@2.4.0\\n\\n## 0.4.12 - 16 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b089c56]\\n  - @openfn/language-common@2.3.3\\n\\n## 0.4.11 - 11 April 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[d7105c0]\\n  - @openfn/language-common@2.3.2\\n\\n## 0.4.10 - 14 March 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[23ccb01]\\n  - @openfn/language-common@2.3.1\\n\\n## 0.4.9 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[b3d7f59]\\n- Updated dependencies \\\\[2d709ff]\\n- Updated dependencies \\\\[41e8cc3]\\n  - @openfn/language-common@2.3.0\\n\\n## 0.4.8 - 16 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[6dffdbd]\\n  - @openfn/language-common@2.2.1\\n\\n## 0.4.7 - 09 January 2025\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[a47d8d5]\\n- Updated dependencies \\\\[9240428]\\n  - @openfn/language-common@2.2.0\\n\\n## 0.4.6 - 28 October 2024\\n\\n### Patch Changes\\n\\n- Updated docs for each()\\n- Updated dependencies\\n  - @openfn/language-common@2.1.1\\n\\n## 0.4.5 - 18 October 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[03a1a74]\\n  - @openfn/language-common@2.1.0\\n\\n## 0.4.4 - 15 October 2024\\n\\n### Patch Changes\\n\\n- Fixed security vulnerability in jsonpath-plus \\\\[33973a2]\\n  - @openfn/language-common@2.0.3\\n\\n## 0.4.3 - 24 September 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[77a690f]\\n  - @openfn/language-common@2.0.2\\n\\n## 0.4.2 - 16 August 2024\\n\\n### Patch Changes\\n\\n- 8146c23: Fix typings in package.json\\n- Updated dependencies \\\\[8146c23]\\n  - @openfn/language-common@2.0.1\\n\\n## 0.4.1 - 01 August 2024\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[4fe527c]\\n  - @openfn/language-common@2.0.0\\n\\n## 0.4.0 - 13 June 2024\\n\\n### Minor Changes\\n\\n- 73433c20: Add `fnIf` operation\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[106ecf6d]\\n  - @openfn/language-common@1.14.0\\n\\n## 0.3.1 - 19 June 2023\\n\\n### Patch Changes\\n\\n- Update lock files\\n- Updated dependencies\\n  - @openfn/language-common@1.8.1\\n\\n## 0.3.0\\n\\n### Minor Changes\\n\\n- 2c1d603: Remove parameter reassignment to ensure proper functioning inside an\\n  `each` block; add eslint\\n\\n  The packages receiving a major bump here exposed functions that didn't work as\\n  expected inside `each` blocks. Users were previously wrapping these functions\\n  inside their own custom `fn` blocks, and this change will ensure that they can\\n  be used inside a standard each.\\n\\n  See https://github.com/OpenFn/adaptors/issues/275 for more details.\\n\\n### Patch Changes\\n\\n- Updated dependencies \\\\[2c1d603]\\n  - @openfn/language-common@1.8.0\\n\\n## 0.2.3 - 30 March 2023\\n\\n### Patch Changes\\n\\n- 14f481e: mark execute as private\\n- Updated dependencies \\\\[2b4c61a]\\n  - @openfn/language-common@1.7.6\\n\\n## 0.2.2 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f7ebd3c: remove sample configuration\\n\\n## 0.2.1 - 15 February 2023\\n\\n### Patch Changes\\n\\n- f2aed32: add examples\\n\\n## 0.2.0 - 25 November 2022\\n\\n### Minor Changes\\n\\n- f9ac74a: migrate zoho\\n\\n### Patch Changes\\n\\n- e4ebcb6: Fix Large gzip Denial of Service in superagent\\n\"","functions":[],"configuration-schema":{"$schema":"http://json-schema.org/draft-07/schema#","properties":{"account":{"title":"Account","type":"string","description":"Your Zoho account","minLength":1,"examples":["yourzohoaccount"]},"authToken":{"title":"Auth Token","type":"string","description":"Your Zoho authentication token","writeOnly":true,"minLength":1,"examples":["secreauthtoken"]},"apiVersion":{"title":"API Version","type":"string","default":"v2","enum":["v1","v2"],"description":"Zoho API version","minLength":1,"examples":["v2","v1"]}},"type":"object","additionalProperties":true,"required":["account","authToken","apiVersion"]}}
]
