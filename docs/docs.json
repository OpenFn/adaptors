[
{"name":"asana","adaptor":"@openfn/language-asana","version":"2.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.getTask(task_gid, params, callback)](#module_Adaptor.getTask) ⇒ <code>Operation</code>\\n    * [.getTasks(project_gid, params, callback)](#module_Adaptor.getTasks) ⇒ <code>Operation</code>\\n    * [.updateTask(task_gid, params, callback)](#module_Adaptor.updateTask) ⇒ <code>Operation</code>\\n    * [.createTask(params, callback)](#module_Adaptor.createTask) ⇒ <code>Operation</code>\\n    * [.upsertTask(project_gid, params, callback)](#module_Adaptor.upsertTask) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.getTask\\\"></a>\\n\\n### Adaptor.getTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nGet a single task of a given project.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTask(\\\"task_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"module_Adaptor.getTasks\\\"></a>\\n\\n### Adaptor.getTasks(project_gid, params, callback) ⇒ <code>Operation</code>\\nGet the list of tasks for a given project.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | Query params to include. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ngetTasks(\\\"project_gid\\\",\\n {\\n   opt_fields: \\\"name,notes,assignee\\\"\\n })\\n```\\n<a name=\\\"module_Adaptor.updateTask\\\"></a>\\n\\n### Adaptor.updateTask(task_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate a specific task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| task_gid | <code>string</code> | Globally unique identifier for the task |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupdateTask(\\\"task_gid\\\",\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"module_Adaptor.createTask\\\"></a>\\n\\n### Adaptor.createTask(params, callback) ⇒ <code>Operation</code>\\nCreate a task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Body parameters |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTask(\\n {\\n   name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertTask\\\"></a>\\n\\n### Adaptor.upsertTask(project_gid, params, callback) ⇒ <code>Operation</code>\\nUpdate or create a task.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| project_gid | <code>string</code> | Globally unique identifier for the project |\\n| params | <code>object</code> | an object with an externalId and some task data. |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\nupsertTask(\\n \\\"1201382240880\\\",\\n {\\n   \\\"externalId\\\": \\\"name\\\",\\n   \\\"data\\\": {\\n     name: 'test', \\\"approval_status\\\": \\\"pending\\\", \\\"assignee\\\": \\\"12345\\\"\\n   }\\n\\n }\\n)\\n```\\n\""},
{"name":"beyonic","adaptor":"@openfn/language-beyonic","version":"0.1.3","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.createPayment](#module_Adaptor.createPayment)\\n        * [new exports.createPayment(data)](#new_module_Adaptor.createPayment_new)\\n    * [.createContact](#module_Adaptor.createContact)\\n        * [new exports.createContact(data)](#new_module_Adaptor.createContact_new)\\n    * [.createCollectionRequest](#module_Adaptor.createCollectionRequest)\\n        * [new exports.createCollectionRequest(data)](#new_module_Adaptor.createCollectionRequest_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for beyonic.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createPayment\\\"></a>\\n\\n### Adaptor.createPayment\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createPayment_new\\\"></a>\\n\\n#### new exports.createPayment(data)\\nCreate a payment\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the payment |\\n\\n**Example**  \\n```js\\nexecute(\\n  createPayment(data)\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createContact\\\"></a>\\n\\n### Adaptor.createContact\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createContact_new\\\"></a>\\n\\n#### new exports.createContact(data)\\nCreate a contact\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the contact |\\n\\n**Example**  \\n```js\\nexecute(\\n  createContact(data)\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.createCollectionRequest\\\"></a>\\n\\n### Adaptor.createCollectionRequest\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.createCollectionRequest_new\\\"></a>\\n\\n#### new exports.createCollectionRequest(data)\\nCreate a collection request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | Payload data for the collection request |\\n\\n**Example**  \\n```js\\nexecute(\\n  createCollectionRequest(data)\\n)(state)\\n```\\n\""},
{"name":"commcare","adaptor":"@openfn/language-commcare","version":"1.4.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute](#module_Adaptor.execute)\\n            * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n        * [.submitXls](#module_Adaptor.submitXls)\\n            * [new exports.submitXls(formData, params)](#new_module_Adaptor.submitXls_new)\\n        * [.submit](#module_Adaptor.submit)\\n            * [new exports.submit(formData)](#new_module_Adaptor.submit_new)\\n        * [.fetchReportData](#module_Adaptor.fetchReportData)\\n            * [new exports.fetchReportData(reportId, params, postUrl)](#new_module_Adaptor.fetchReportData_new)\\n    * _inner_\\n        * [~clientPost](#module_Adaptor..clientPost)\\n            * [new clientPost(formData)](#new_module_Adaptor..clientPost_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for commcare.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.submitXls\\\"></a>\\n\\n### Adaptor.submitXls\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.submitXls_new\\\"></a>\\n\\n#### new exports.submitXls(formData, params)\\nConvert form data to xls then submit.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n| params | <code>Object</code> | Request params including case type and external id. |\\n\\n**Example**  \\n```js\\nsubmitXls(\\n   [\\n     {name: 'Mamadou', phone: '000000'},\\n   ],\\n   {\\n     case_type: 'student',\\n     search_field: 'external_id',\\n     create_new_cases: 'on',\\n   }\\n)\\n```\\n<a name=\\\"module_Adaptor.submit\\\"></a>\\n\\n### Adaptor.submit\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.submit_new\\\"></a>\\n\\n#### new exports.submit(formData)\\nSubmit form data\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Object including form data. |\\n\\n**Example**  \\n```js\\nsubmit(\\n   fields(\\n     field(\\\"@\\\", function(state) {\\n       return {\\n         \\\"xmlns\\\": \\\"http://openrosa.org/formdesigner/form-id-here\\\"\\n       };\\n     }),\\n     field(\\\"question1\\\", dataValue(\\\"answer1\\\")),\\n     field(\\\"question2\\\", \\\"Some answer here.\\\")\\n   )\\n )\\n```\\n<a name=\\\"module_Adaptor.fetchReportData\\\"></a>\\n\\n### Adaptor.fetchReportData\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.fetchReportData_new\\\"></a>\\n\\n#### new exports.fetchReportData(reportId, params, postUrl)\\nMake a GET request to CommCare's Reports API\\nand POST the response to somewhere else.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| reportId | <code>String</code> | API name of the report. |\\n| params | <code>Object</code> | Query params, incl: limit, offset, and custom report filters. |\\n| postUrl | <code>String</code> | Url to which the response object will be posted. |\\n\\n**Example**  \\n```js\\nfetchReportData(reportId, params, postUrl)\\n```\\n<a name=\\\"module_Adaptor..clientPost\\\"></a>\\n\\n### Adaptor~clientPost\\n**Kind**: inner class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor..clientPost_new\\\"></a>\\n\\n#### new clientPost(formData)\\nPerforms a post request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| formData | <code>Object</code> | Form Data with auth params and body |\\n\\n**Example**  \\n```js\\nclientPost(formData)\\n```\\n\""},
{"name":"common","adaptor":"@openfn/language-common","version":"1.7.3","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>Execute a sequence of operations.\\nMain outer API for executing expressions.</p>\\n</dd>\\n<dt><a href=\\\"#alterState\\\">alterState(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>alias for &quot;fn()&quot;</p>\\n</dd>\\n<dt><a href=\\\"#fn\\\">fn(func)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates a custom step (or operation) for more flexible job writing.</p>\\n</dd>\\n<dt><a href=\\\"#jsonValue\\\">jsonValue(obj, path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#sourceValue\\\">sourceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#source\\\">source(path)</a> ⇒ <code>Array.&lt;(String|Object)&gt;</code></dt>\\n<dd><p>Picks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use <code>sourceValue</code> instead.</p>\\n</dd>\\n<dt><a href=\\\"#dataPath\\\">dataPath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at the data.</p>\\n</dd>\\n<dt><a href=\\\"#dataValue\\\">dataValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out a single value from the source data object—usually <code>state.data</code>.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.</p>\\n</dd>\\n<dt><a href=\\\"#referencePath\\\">referencePath(path)</a> ⇒ <code>string</code></dt>\\n<dd><p>Ensures a path points at references.</p>\\n</dd>\\n<dt><a href=\\\"#lastReferenceValue\\\">lastReferenceValue(path)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Picks out the last reference value from source data.</p>\\n</dd>\\n<dt><a href=\\\"#map\\\">map(path, operation, state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n</dd>\\n<dt><a href=\\\"#asData\\\">asData(data, state)</a> ⇒ <code>array</code></dt>\\n<dd><p>Simple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.</p>\\n<ul>\\n<li>JSONPath referencing a point in <code>state</code></li>\\n<li>Object Literal of the data itself.</li>\\n<li>Function to be called with state.</li>\\n</ul>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#combine\\\">combine(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Combines two operations into one</p>\\n</dd>\\n<dt><a href=\\\"#join\\\">join(targetPath, sourcePath, targetKey)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Adds data from a target object</p>\\n</dd>\\n<dt><a href=\\\"#expandReferences\\\">expandReferences(value, [skipFilter])</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions).</p>\\n</dd>\\n<dt><a href=\\\"#field\\\">field(key, value)</a> ⇒ <code>Field</code></dt>\\n<dd><p>Returns a key, value pair in an array.</p>\\n</dd>\\n<dt><a href=\\\"#fields\\\">fields(fields)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Zips key value pairs into an object.</p>\\n</dd>\\n<dt><a href=\\\"#merge\\\">merge(dataSource, fields)</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Merges fields into each item in an array.</p>\\n</dd>\\n<dt><a href=\\\"#index\\\">index()</a> ⇒ <code>DataSource</code></dt>\\n<dd><p>Returns the index of the current array being iterated.\\nTo be used with <code>each</code> as a data source.</p>\\n</dd>\\n<dt><a href=\\\"#arrayToString\\\">arrayToString(arr, separator)</a> ⇒ <code>string</code></dt>\\n<dd><p>Turns an array into a string, separated by X.</p>\\n</dd>\\n<dt><a href=\\\"#toArray\\\">toArray(arg)</a> ⇒ <code>array</code></dt>\\n<dd><p>Ensures primitive data types are wrapped in an array.\\nDoes not affect array objects.</p>\\n</dd>\\n<dt><a href=\\\"#composeNextState\\\">composeNextState(state, response)</a> ⇒ <code>State</code></dt>\\n<dd><p>Prepares next state</p>\\n</dd>\\n<dt><a href=\\\"#humanProper\\\">humanProper(str)</a> ⇒ <code>string</code></dt>\\n<dd><p>Substitutes underscores for spaces and proper-cases a string</p>\\n</dd>\\n<dt><a href=\\\"#scrubEmojis\\\">scrubEmojis(text, replacementChars)</a> ⇒ <code>string</code></dt>\\n<dd><p>Replaces emojis in a string.</p>\\n</dd>\\n<dt><a href=\\\"#chunk\\\">chunk(array, chunkSize)</a> ⇒ <code>Object</code></dt>\\n<dd><p>Chunks an array into an array of arrays, each with no more than a certain size.</p>\\n</dd>\\n<dt><a href=\\\"#each\\\">each(dataSource, operation)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Scopes an array of data based on a JSONPath.\\nUseful when the source data has <code>n</code> items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.</p>\\n<p>It also ensures the results of an operation make their way back into\\nthe state&#39;s references.</p>\\n</dd>\\n<dt><a href=\\\"#expandRequestReferences\\\">expandRequestReferences(value)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Recursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like <code>FormData</code>.</p>\\n</dd>\\n<dt><a href=\\\"#withAgent\\\">withAgent(params)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Creates an https agent for axios from the agentOptions key passed in params.</p>\\n</dd>\\n<dt><a href=\\\"#get\\\">get(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a GET request</p>\\n</dd>\\n<dt><a href=\\\"#post\\\">post(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a POST request</p>\\n</dd>\\n<dt><a href=\\\"#del\\\">del(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a DELETE request</p>\\n</dd>\\n<dt><a href=\\\"#head\\\">head(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a HEAD request</p>\\n</dd>\\n<dt><a href=\\\"#put\\\">put(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PUT request</p>\\n</dd>\\n<dt><a href=\\\"#patch\\\">patch(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a PATCH request</p>\\n</dd>\\n<dt><a href=\\\"#options\\\">options(requestParams)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Make a OPTIONS request</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Promise</code>\\nExecute a sequence of operations.\\nMain outer API for executing expressions.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n   create('foo'),\\n   delete('bar')\\n )\\n```\\n<a name=\\\"alterState\\\"></a>\\n\\n## alterState(func) ⇒ <code>Operation</code>\\nalias for \\\"fn()\\\"\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n<a name=\\\"fn\\\"></a>\\n\\n## fn(func) ⇒ <code>Operation</code>\\nCreates a custom step (or operation) for more flexible job writing.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| func | <code>function</code> | is the function |\\n\\n**Example**  \\n```js\\nfn(state => {\\n  // do some things to state\\n  return state;\\n});\\n```\\n<a name=\\\"jsonValue\\\"></a>\\n\\n## jsonValue(obj, path) ⇒ <code>Operation</code>\\nPicks out a single value from a JSON object.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| obj | <code>object</code> | A valid JSON object. |\\n| path | <code>String</code> | JSONPath referencing a point in given JSON object. |\\n\\n**Example**  \\n```js\\njsonValue({ a:1 }, 'a')\\n```\\n<a name=\\\"sourceValue\\\"></a>\\n\\n## sourceValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from source data.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsourceValue('$.key')\\n```\\n<a name=\\\"source\\\"></a>\\n\\n## source(path) ⇒ <code>Array.&lt;(String\\\\|Object)&gt;</code>\\nPicks out a value from source data.\\nWill return whatever JSONPath returns, which will always be an array.\\nIf you need a single value use `sourceValue` instead.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `state`. |\\n\\n**Example**  \\n```js\\nsource('$.key')\\n```\\n<a name=\\\"dataPath\\\"></a>\\n\\n## dataPath(path) ⇒ <code>string</code>\\nEnsures a path points at the data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataPath('key')\\n```\\n<a name=\\\"dataValue\\\"></a>\\n\\n## dataValue(path) ⇒ <code>Operation</code>\\nPicks out a single value from the source data object—usually `state.data`.\\nIf a JSONPath returns more than one value for the reference, the first\\nitem will be returned.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `data`. |\\n\\n**Example**  \\n```js\\ndataValue('key')\\n```\\n<a name=\\\"referencePath\\\"></a>\\n\\n## referencePath(path) ⇒ <code>string</code>\\nEnsures a path points at references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nreferencePath('key')\\n```\\n<a name=\\\"lastReferenceValue\\\"></a>\\n\\n## lastReferenceValue(path) ⇒ <code>Operation</code>\\nPicks out the last reference value from source data.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>String</code> | JSONPath referencing a point in `references`. |\\n\\n**Example**  \\n```js\\nlastReferenceValue('key')\\n```\\n<a name=\\\"map\\\"></a>\\n\\n## map(path, operation, state) ⇒ <code>State</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | JSONPath referencing a point in `state.data`. |\\n| operation | <code>function</code> | The operation needed to be repeated. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nmap(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"asData\\\"></a>\\n\\n## asData(data, state) ⇒ <code>array</code>\\nSimple switcher allowing other expressions to use either a JSONPath or\\nobject literals as a data source.\\n- JSONPath referencing a point in `state`\\n- Object Literal of the data itself.\\n- Function to be called with state.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| data | <code>String</code> \\\\| <code>object</code> \\\\| <code>function</code> |  |\\n| state | <code>object</code> | The current state. |\\n\\n**Example**  \\n```js\\nasData('$.key'| key | callback)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n  create(\\\"SObject\\\",\\n    field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\"))\\n  )\\n)\\n```\\n<a name=\\\"combine\\\"></a>\\n\\n## combine(operations) ⇒ <code>Operation</code>\\nCombines two operations into one\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\ncombine(\\n  create('foo'),\\n  delete('bar')\\n)\\n```\\n<a name=\\\"join\\\"></a>\\n\\n## join(targetPath, sourcePath, targetKey) ⇒ <code>Operation</code>\\nAdds data from a target object\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| targetPath | <code>String</code> | Target path |\\n| sourcePath | <code>String</code> | Source path |\\n| targetKey | <code>String</code> | Target Key |\\n\\n**Example**  \\n```js\\njoin('$.key','$.data','newKey')\\n```\\n<a name=\\\"expandReferences\\\"></a>\\n\\n## expandReferences(value, [skipFilter]) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions).\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n| [skipFilter] | <code>function</code> | a function which returns true if a value should be skipped |\\n\\n<a name=\\\"field\\\"></a>\\n\\n## field(key, value) ⇒ <code>Field</code>\\nReturns a key, value pair in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| key | <code>string</code> | Name of the field |\\n| value | <code>Value</code> | The value itself or a sourceable operation. |\\n\\n**Example**  \\n```js\\nfield('destination_field_name__c', 'value')\\n```\\n<a name=\\\"fields\\\"></a>\\n\\n## fields(fields) ⇒ <code>Object</code>\\nZips key value pairs into an object.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| fields | <code>Fields</code> | a list of fields |\\n\\n**Example**  \\n```js\\nfields(list_of_fields)\\n```\\n<a name=\\\"merge\\\"></a>\\n\\n## merge(dataSource, fields) ⇒ <code>DataSource</code>\\nMerges fields into each item in an array.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> |  |\\n| fields | <code>Object</code> | Group of fields to merge in. |\\n\\n**Example**  \\n```js\\nmerge(\\n  \\\"$.books[*]\\\",\\n  fields(\\n    field( \\\"publisher\\\", sourceValue(\\\"$.publisher\\\") )\\n  )\\n)\\n```\\n<a name=\\\"index\\\"></a>\\n\\n## index() ⇒ <code>DataSource</code>\\nReturns the index of the current array being iterated.\\nTo be used with `each` as a data source.\\n\\n**Kind**: global function  \\n**Access**: public  \\n**Example**  \\n```js\\nindex()\\n```\\n<a name=\\\"arrayToString\\\"></a>\\n\\n## arrayToString(arr, separator) ⇒ <code>string</code>\\nTurns an array into a string, separated by X.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arr | <code>array</code> | Array of toString'able primatives. |\\n| separator | <code>string</code> | Separator string. |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", function(state) {\\n  return arrayToString(dataValue(\\\"path_of_array\\\")(state), ', ')\\n})\\n```\\n<a name=\\\"toArray\\\"></a>\\n\\n## toArray(arg) ⇒ <code>array</code>\\nEnsures primitive data types are wrapped in an array.\\nDoes not affect array objects.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| arg | <code>any</code> | Data required to be in an array |\\n\\n**Example**  \\n```js\\neach(function(state) {\\n  return toArray( dataValue(\\\"path_of_array\\\")(state) )\\n}, ...)\\n```\\n<a name=\\\"composeNextState\\\"></a>\\n\\n## composeNextState(state, response) ⇒ <code>State</code>\\nPrepares next state\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | state |\\n| response | <code>Object</code> | Response to be added |\\n\\n**Example**  \\n```js\\ncomposeNextState(state, response)\\n```\\n<a name=\\\"humanProper\\\"></a>\\n\\n## humanProper(str) ⇒ <code>string</code>\\nSubstitutes underscores for spaces and proper-cases a string\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| str | <code>string</code> | String that needs converting |\\n\\n**Example**  \\n```js\\nfield(\\\"destination_string__c\\\", humanProper(state.data.path_to_string))\\n```\\n<a name=\\\"scrubEmojis\\\"></a>\\n\\n## scrubEmojis(text, replacementChars) ⇒ <code>string</code>\\nReplaces emojis in a string.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| text | <code>string</code> | String that needs to be cleaned |\\n| replacementChars | <code>string</code> | Characters that replace the emojis |\\n\\n**Example**  \\n```js\\nscrubEmojis('Dove🕊️⭐ 29')\\n```\\n<a name=\\\"chunk\\\"></a>\\n\\n## chunk(array, chunkSize) ⇒ <code>Object</code>\\nChunks an array into an array of arrays, each with no more than a certain size.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| array | <code>Object</code> | Array to be chunked |\\n| chunkSize | <code>Integer</code> | The maxiumum size of each chunks |\\n\\n**Example**  \\n```js\\nchunk([1,2,3,4,5], 2)\\n```\\n<a name=\\\"each\\\"></a>\\n\\n## each(dataSource, operation) ⇒ <code>Operation</code>\\nScopes an array of data based on a JSONPath.\\nUseful when the source data has `n` items you would like to map to\\nan operation.\\nThe operation will receive a slice of the data based of each item\\nof the JSONPath provided.\\n\\nIt also ensures the results of an operation make their way back into\\nthe state's references.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataSource | <code>DataSource</code> | JSONPath referencing a point in `state`. |\\n| operation | <code>Operation</code> | The operation needed to be repeated. |\\n\\n**Example**  \\n```js\\neach(\\\"$.[*]\\\",\\n   create(\\\"SObject\\\",\\n   field(\\\"FirstName\\\", sourceValue(\\\"$.firstName\\\")))\\n )\\n```\\n<a name=\\\"expandRequestReferences\\\"></a>\\n\\n## expandRequestReferences(value) ⇒ <code>Operation</code>\\nRecursively resolves objects that have resolvable values (functions), but\\nomits HTTP request specific modules like `FormData`.\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| value | <code>object</code> | data |\\n\\n<a name=\\\"withAgent\\\"></a>\\n\\n## withAgent(params) ⇒ <code>Operation</code>\\nCreates an https agent for axios from the agentOptions key passed in params.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data |\\n\\n<a name=\\\"get\\\"></a>\\n\\n## get(requestParams) ⇒ <code>Operation</code>\\nMake a GET request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Get an item with a specified id from state)*  \\n```js\\n get({\\n     url: state => `https://www.example.com/api/items/${state.id},\\n     headers: {\\\"content-type\\\": \\\"application/json\\\"}\\n});\\n```\\n<a name=\\\"post\\\"></a>\\n\\n## post(requestParams) ⇒ <code>Operation</code>\\nMake a POST request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Sending a payload with data that comes from state)*  \\n```js\\npost({\\n  url: \\\"https://example.com\\\",\\n  data: (state) => state.data\\n});\\n```\\n**Example** *( Capturing the response for later use in state )*  \\n```js\\nalterState((state) => {\\n  return post({\\n    url: \\\"https://example.com\\\",\\n    data: (state) => state.data\\n  })(state).then(({response}) => {\\n   state.responseData = response.data\\n  })\\n});\\n```\\n<a name=\\\"del\\\"></a>\\n\\n## del(requestParams) ⇒ <code>Operation</code>\\nMake a DELETE request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Deleting a record with data that comes from state)*  \\n```js\\ndelete({\\n   url: state => `https://www.example.com/api/items/${state.id}`,\\n })(state);\\n```\\n<a name=\\\"head\\\"></a>\\n\\n## head(requestParams) ⇒ <code>Operation</code>\\nMake a HEAD request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Gets the headers that would be returned if the HEAD request&#x27;s URL was instead requested with the HTTP GET method)*  \\n```js\\nhead({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n<a name=\\\"put\\\"></a>\\n\\n## put(requestParams) ⇒ <code>Operation</code>\\nMake a PUT request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Creates a new resource or replaces a representation of the target resource with the request payload, with data from state.)*  \\n```js\\nput({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"patch\\\"></a>\\n\\n## patch(requestParams) ⇒ <code>Operation</code>\\nMake a PATCH request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Applies partial modifications to a resource, with data from state.)*  \\n```js\\npatch({\\n  url: state => `https://www.example.com/api/items/${state.id}`,\\n  data: state => state.data\\n});\\n```\\n<a name=\\\"options\\\"></a>\\n\\n## options(requestParams) ⇒ <code>Operation</code>\\nMake a OPTIONS request\\n\\n**Kind**: global function  \\n**Returns**: <code>Operation</code> - - Function which takes state and returns a Promise  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| requestParams | <code>object</code> | Supports the exact parameters as Axios. See [here](https://github.com/axios/axios#axios-api) |\\n\\n**Example** *(Requests permitted communication options for a given URL or server, with data from state.)*  \\n```js\\noptions({\\n  url: 'https://www.example.com/api/items',\\n});\\n```\\n\""},
{"name":"dhis2","adaptor":"@openfn/language-dhis2","version":"3.2.1","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_Adaptor\\\">Adaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#request\\\">request(configuration, axiosRequest)</a> ⇒ <code>Promise</code></dt>\\n<dd><p>The request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.</p>\\n</dd>\\n<dt><a href=\\\"#selectId\\\">selectId(resourceType)</a> ⇒ <code>string</code></dt>\\n<dd><p>Determines the attribute name for a DHIS2 system ID given a resource type.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute](#module_Adaptor.execute)\\n            * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n        * [.create](#module_Adaptor.create)\\n            * [new exports.create(resourceType, data, [options], [callback])](#new_module_Adaptor.create_new)\\n        * [.update](#module_Adaptor.update)\\n            * [new exports.update(resourceType, path, data, [options], [callback])](#new_module_Adaptor.update_new)\\n        * [.get](#module_Adaptor.get)\\n            * [new exports.get(resourceType, query, [options], [callback])](#new_module_Adaptor.get_new)\\n        * [.upsert](#module_Adaptor.upsert)\\n            * [new exports.upsert(resourceType, query, data, [options], [callback])](#new_module_Adaptor.upsert_new)\\n        * [.discover](#module_Adaptor.discover)\\n            * [new exports.discover(httpMethod, endpoint)](#new_module_Adaptor.discover_new)\\n        * [.patch](#module_Adaptor.patch)\\n            * [new exports.patch(resourceType, path, data, [options], [callback])](#new_module_Adaptor.patch_new)\\n        * [.destroy](#module_Adaptor.destroy)\\n            * [new exports.destroy(resourceType, path, [data], [options], [callback])](#new_module_Adaptor.destroy_new)\\n        * [.findAttributeValue](#module_Adaptor.findAttributeValue)\\n            * [new exports.findAttributeValue(trackedEntityInstance, attributeDisplayName)](#new_module_Adaptor.findAttributeValue_new)\\n        * [.attr](#module_Adaptor.attr)\\n            * [new exports.attr(attribute, value)](#new_module_Adaptor.attr_new)\\n        * [.dv](#module_Adaptor.dv)\\n            * [new exports.dv(dataElement, value)](#new_module_Adaptor.dv_new)\\n    * _inner_\\n        * [~configMigrationHelper](#module_Adaptor..configMigrationHelper)\\n            * [new configMigrationHelper(state)](#new_module_Adaptor..configMigrationHelper_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for DHIS2.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.create_new\\\"></a>\\n\\n#### new exports.create(resourceType, data, [options], [callback])\\nCreate a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | Type of resource to create. E.g. `trackedEntityInstances`, `programs`, `events`, ... |\\n| data | <code>Object</code> | Data that will be used to create a given instance of resource. To create a single instance of a resource, `data` must be a javascript object, and to create multiple instances of a resources, `data` must be an array of javascript objects. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\ncreate('programs', {\\n  name: 'name 20',\\n  shortName: 'n20',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\ncreate('events', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'DiszpKrYNg8',\\n  status: 'COMPLETED',\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\ncreate('trackedEntityInstances', {\\n  orgUnit: 'TSyzvBiovKh',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  attributes: [\\n    {\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Gigiwe',\\n    },\\n  ]\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\ncreate('dataSets', { name: 'OpenFn Data Set', periodType: 'Monthly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\ncreate('dataSetNotificationTemplates', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello',\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\ncreate('dataElements', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\ncreate('dataElementGroups', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\ncreate('dataElementGroupSets', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\ncreate('dataValueSets', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\ncreate('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(an enrollment)*  \\n```js\\ncreate('enrollments', {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-09-17',\\n  incidentDate: '2013-09-17',\\n});\\n```\\n<a name=\\\"module_Adaptor.update\\\"></a>\\n\\n### Adaptor.update\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.update_new\\\"></a>\\n\\n#### new exports.update(resourceType, path, data, [options], [callback])\\nUpdate data. A generic helper function to update a resource object of any type.\\nUpdating an object requires to send `all required fields` or the `full body`\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. It requires to send `all required fields` or the `full body`. If you want `partial updates`, use `patch` operation. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params (E.g. `filter`, `dimension` and other import parameters), request config (E.g. `auth`) and the DHIS2 apiVersion. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a program)*  \\n```js\\nupdate('programs', 'qAZJCrNJK8H', {\\n  name: '14e1aa02c3f0a31618e096f2c6d03bed',\\n  shortName: '14e1aa02',\\n  programType: 'WITHOUT_REGISTRATION',\\n});\\n```\\n**Example** *(an event)*  \\n```js\\nupdate('events', 'PVqUD2hvU4E', {\\n  program: 'eBAyeGv0exc',\\n  orgUnit: 'Ngelehun CHC',\\n  status: 'COMPLETED',\\n  storedBy: 'admin',\\n  dataValues: [],\\n});\\n```\\n**Example** *(a trackedEntityInstance)*  \\n```js\\nupdate('trackedEntityInstances', 'IeQfgUtGPq2', {\\n  created: '2015-08-06T21:12:37.256',\\n  orgUnit: 'TSyzvBiovKh',\\n  createdAtClient: '2015-08-06T21:12:37.256',\\n  trackedEntityInstance: 'IeQfgUtGPq2',\\n  lastUpdated: '2015-08-06T21:12:37.257',\\n  trackedEntityType: 'nEenWmSyUEp',\\n  inactive: false,\\n  deleted: false,\\n  featureType: 'NONE',\\n  programOwners: [\\n    {\\n      ownerOrgUnit: 'TSyzvBiovKh',\\n      program: 'IpHINAT79UW',\\n      trackedEntityInstance: 'IeQfgUtGPq2',\\n    },\\n  ],\\n  enrollments: [],\\n  relationships: [],\\n  attributes: [\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      displayName: 'Last name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'zDhUuAYrxNC',\\n      value: 'Russell',\\n    },\\n    {\\n      lastUpdated: '2016-01-12T00:00:00.000',\\n      code: 'MMD_PER_NAM',\\n      displayName: 'First name',\\n      created: '2016-01-12T00:00:00.000',\\n      valueType: 'TEXT',\\n      attribute: 'w75KJ2mc4zz',\\n      value: 'Catherine',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a dataSet)*  \\n```js\\nupdate('dataSets', 'lyLU2wR22tC', { name: 'OpenFN Data Set', periodType: 'Weekly' });\\n```\\n**Example** *(a dataSetNotification)*  \\n```js\\nupdate('dataSetNotificationTemplates', 'VbQBwdm1wVP', {\\n  dataSetNotificationTrigger: 'DATA_SET_COMPLETION',\\n  notificationRecipient: 'ORGANISATION_UNIT_CONTACT',\\n  name: 'Notification',\\n  messageTemplate: 'Hello Updated,\\n  deliveryChannels: ['SMS'],\\n  dataSets: [],\\n});\\n```\\n**Example** *(a dataElement)*  \\n```js\\nupdate('dataElements', 'FTRrcoaog83', {\\n  aggregationType: 'SUM',\\n  domainType: 'AGGREGATE',\\n  valueType: 'NUMBER',\\n  name: 'Paracetamol',\\n  shortName: 'Para',\\n});\\n```\\n**Example** *(a dataElementGroup)*  \\n```js\\nupdate('dataElementGroups', 'QrprHT61XFk', {\\n  name: 'Data Element Group 1',\\n  dataElements: [],\\n});\\n```\\n**Example** *(a dataElementGroupSet)*  \\n```js\\nupdate('dataElementGroupSets', 'VxWloRvAze8', {\\n  name: 'Data Element Group Set 4',\\n  dataDimension: true,\\n  shortName: 'DEGS4',\\n  dataElementGroups: [],\\n});\\n```\\n**Example** *(a dataValueSet)*  \\n```js\\nupdate('dataValueSets', 'AsQj6cDsUq4', {\\n  dataElement: 'f7n9E0hX8qk',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  value: '12',\\n});\\n```\\n**Example** *(a dataValueSet with related dataValues)*  \\n```js\\nupdate('dataValueSets', 'Ix2HsbDMLea', {\\n  dataSet: 'pBOMPrpg1QX',\\n  completeDate: '2014-02-03',\\n  period: '201401',\\n  orgUnit: 'DiszpKrYNg8',\\n  dataValues: [\\n    {\\n      dataElement: 'f7n9E0hX8qk',\\n      value: '1',\\n    },\\n    {\\n      dataElement: 'Ix2HsbDMLea',\\n      value: '2',\\n    },\\n    {\\n      dataElement: 'eY5ehpbEsB7',\\n      value: '3',\\n    },\\n  ],\\n});\\n```\\n**Example** *(a single enrollment)*  \\n```js\\nupdate('enrollments', 'CmsHzercTBa' {\\n  trackedEntityInstance: 'bmshzEacgxa',\\n  orgUnit: 'TSyzvBiovKh',\\n  program: 'gZBxv9Ujxg0',\\n  enrollmentDate: '2013-10-17',\\n  incidentDate: '2013-10-17',\\n});\\n```\\n<a name=\\\"module_Adaptor.get\\\"></a>\\n\\n### Adaptor.get\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.get_new\\\"></a>\\n\\n#### new exports.get(resourceType, query, [options], [callback])\\nGet data. Generic helper method for getting data of any kind from DHIS2.\\n- This can be used to get `DataValueSets`,`events`,`trackedEntityInstances`,`etc.`\\n\\n**Returns**: <code>Operation</code> - state  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to get(use its `plural` name). E.g. `dataElements`, `trackedEntityInstances`,`organisationUnits`, etc. |\\n| query | <code>Object</code> | A query object that will limit what resources are retrieved when converted into request params. |\\n| [options] | <code>Object</code> | Optional `options` to define URL parameters via params beyond filters, request configuration (e.g. `auth`) and DHIS2 api version to use. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(all data values for the &#x27;pBOMPrpg1QX&#x27; dataset)*  \\n```js\\nget('dataValueSets', {\\n  dataSet: 'pBOMPrpg1QX',\\n  orgUnit: 'DiszpKrYNg8',\\n  period: '201401',\\n  fields: '*',\\n});\\n```\\n**Example** *(all programs for an organization unit)*  \\n```js\\nget('programs', { orgUnit: 'TSyzvBiovKh', fields: '*' });\\n```\\n**Example** *(a single tracked entity instance by a unique external ID)*  \\n```js\\nget('trackedEntityInstances', {\\n  ou: 'DiszpKrYNg8',\\n  filter: ['flGbXLXCrEo:Eq:124', 'w75KJ2mc4zz:Eq:John'],\\n});\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(resourceType, query, data, [options], [callback])\\nUpsert a record. A generic helper function used to atomically either insert a row, or on the basis of the row already existing, UPDATE that existing row instead.\\n\\n**Throws**:\\n\\n- <code>RangeError</code> - Throws range error\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of a resource to `upsert`. E.g. `trackedEntityInstances` |\\n| query | <code>Object</code> | A query object that allows to uniquely identify the resource to update. If no matches found, then the resource will be created. |\\n| data | <code>Object</code> | The data to use for update or create depending on the result of the query. |\\n| [options] | <code>Object</code> | Optional configuration that will be applied to both the `get` and the `create` or `update` operations. |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(Example &#x60;expression.js&#x60; of upsert)*  \\n```js\\nupsert('trackedEntityInstances', {\\n ou: 'TSyzvBiovKh',\\n filter: ['w75KJ2mc4zz:Eq:Qassim'],\\n}, {\\n orgUnit: 'TSyzvBiovKh',\\n trackedEntityType: 'nEenWmSyUEp',\\n attributes: [\\n   {\\n     attribute: 'w75KJ2mc4zz',\\n     value: 'Qassim',\\n   },\\n ],\\n});\\n```\\n<a name=\\\"module_Adaptor.discover\\\"></a>\\n\\n### Adaptor.discover\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.discover_new\\\"></a>\\n\\n#### new exports.discover(httpMethod, endpoint)\\nDiscover `DHIS2` `api` `endpoint` `query parameters` and allowed `operators` for a given resource's endpoint.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| httpMethod | <code>string</code> | The HTTP to inspect parameter usage for a given endpoint, e.g., `get`, `post`,`put`,`patch`,`delete` |\\n| endpoint | <code>string</code> | The path for a given endpoint. E.g. `/trackedEntityInstances` or `/dataValueSets` |\\n\\n**Example** *(a list of parameters allowed on a given endpoint for specific http method)*  \\n```js\\ndiscover('post', '/trackedEntityInstances')\\n```\\n<a name=\\\"module_Adaptor.patch\\\"></a>\\n\\n### Adaptor.patch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.patch_new\\\"></a>\\n\\n#### new exports.patch(resourceType, path, data, [options], [callback])\\nPatch a record. A generic helper function to send partial updates on one or more object properties.\\n- You are not required to send the full body of object properties.\\n- This is useful for cases where you don't want or need to update all properties on a object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be updated. E.g. `dataElements`, `organisationUnits`, etc. |\\n| path | <code>string</code> | The `id` or `path` to the `object` to be updated. E.g. `FTRrcoaog83` or `FTRrcoaog83/{collection-name}/{object-id}` |\\n| data | <code>Object</code> | Data to update. Include only the fields you want to update. E.g. `{name: \\\"New Name\\\"}` |\\n| [options] | <code>Object</code> | Optional configuration, including params for the update ({preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}). Defaults to `{operationName: 'patch', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a dataElement)*  \\n```js\\npatch('dataElements', 'FTRrcoaog83', { name: 'New Name' });\\n```\\n<a name=\\\"module_Adaptor.destroy\\\"></a>\\n\\n### Adaptor.destroy\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.destroy_new\\\"></a>\\n\\n#### new exports.destroy(resourceType, path, [data], [options], [callback])\\nDelete a record. A generic helper function to delete an object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| resourceType | <code>string</code> | The type of resource to be deleted. E.g. `trackedEntityInstances`, `organisationUnits`, etc. |\\n| path | <code>string</code> | Can be an `id` of an `object` or `path` to the `nested object` to `delete`. |\\n| [data] | <code>Object</code> | Optional. This is useful when you want to remove multiple objects from a collection in one request. You can send `data` as, for example, `{\\\"identifiableObjects\\\": [{\\\"id\\\": \\\"IDA\\\"}, {\\\"id\\\": \\\"IDB\\\"}, {\\\"id\\\": \\\"IDC\\\"}]}`. See more [on DHIS2 API docs](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#deleting-objects) |\\n| [options] | <code>Object</code> | Optional `options` for `del` operation including params e.g. `{preheatCache: true, strategy: 'UPDATE', mergeMode: 'REPLACE'}`. Run `discover` or see [DHIS2 documentation](https://docs.dhis2.org/2.34/en/dhis2_developer_manual/web-api.html#create-update-parameters). Defaults to `{operationName: 'delete', apiVersion: state.configuration.apiVersion, responseType: 'json'}` |\\n| [callback] | <code>function</code> | Optional callback to handle the response |\\n\\n**Example** *(a tracked entity instance)*  \\n```js\\ndestroy('trackedEntityInstances', 'LcRd6Nyaq7T');\\n```\\n<a name=\\\"module_Adaptor.findAttributeValue\\\"></a>\\n\\n### Adaptor.findAttributeValue\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.findAttributeValue_new\\\"></a>\\n\\n#### new exports.findAttributeValue(trackedEntityInstance, attributeDisplayName)\\nGets an attribute value by its case-insensitive display name\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| trackedEntityInstance | <code>Object</code> | A tracked entity instance (TEI) object |\\n| attributeDisplayName | <code>string</code> | The 'displayName' to search for in the TEI's attributes |\\n\\n**Example**  \\n```js\\nfindAttributeValue(state.data.trackedEntityInstances[0], 'first name')\\n```\\n<a name=\\\"module_Adaptor.attr\\\"></a>\\n\\n### Adaptor.attr\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.attr_new\\\"></a>\\n\\n#### new exports.attr(attribute, value)\\nConverts an attribute ID and value into a DSHI2 attribute object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| attribute | <code>string</code> | A tracked entity instance (TEI) attribute ID. |\\n| value | <code>string</code> | The value for that attribute. |\\n\\n**Example**  \\n```js\\nattr('w75KJ2mc4zz', 'Elias')\\n```\\n<a name=\\\"module_Adaptor.dv\\\"></a>\\n\\n### Adaptor.dv\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.dv_new\\\"></a>\\n\\n#### new exports.dv(dataElement, value)\\nConverts a dataElement and value into a DSHI2 dataValue object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dataElement | <code>string</code> | A data element ID. |\\n| value | <code>string</code> | The value for that data element. |\\n\\n**Example**  \\n```js\\ndv('f7n9E0hX8qk', 12)\\n```\\n<a name=\\\"module_Adaptor..configMigrationHelper\\\"></a>\\n\\n### Adaptor~configMigrationHelper\\n**Kind**: inner class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor..configMigrationHelper_new\\\"></a>\\n\\n#### new configMigrationHelper(state)\\nMigrates `apiUrl` to `hostUrl` if `hostUrl` is `blank`.\\nFor `OpenFn.org` users with the `old-style configuration`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>object</code> | the runtime state |\\n\\n**Example**  \\n```js\\nconfigMigrationHelper(state)\\n```\\n<a name=\\\"request\\\"></a>\\n\\n## request(configuration, axiosRequest) ⇒ <code>Promise</code>\\nThe request client takes configuration from state and an axios request object\\nthen (1) logs the method and URL, (2) applies standard headers and auth\\nbefore spreading the rest of the axios configuration, and (3) executes an\\naxios request.\\n\\n**Kind**: global function  \\n**Returns**: <code>Promise</code> - a promise that will resolve to either a response object or an error object.  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| configuration | <code>object</code> | configuration must have a username and password |\\n| axiosRequest | <code>object</code> | the axiosRequest contains valid axios params: https://axios-http.com/docs/req_config |\\n\\n<a name=\\\"selectId\\\"></a>\\n\\n## selectId(resourceType) ⇒ <code>string</code>\\nDetermines the attribute name for a DHIS2 system ID given a resource type.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| resourceType | <code>string</code> | \\n\\n\""},
{"name":"fhir","adaptor":"@openfn/language-fhir","version":"1.0.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.create(path, params, callback)](#module_Adaptor.create) ⇒ <code>Operation</code>\\n    * [.createTransactionBundle(params, callback)](#module_Adaptor.createTransactionBundle) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a resource in a destination system using a POST request\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"module_Adaptor.createTransactionBundle\\\"></a>\\n\\n### Adaptor.createTransactionBundle(params, callback) ⇒ <code>Operation</code>\\nCreates a transactionBundle for HAPI FHIR\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new transaction |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreateTransactionBundle( {\\\"entry\\\": [{...},, {...}]})\\n```\\n\""},
{"name":"googlesheets","adaptor":"@openfn/language-googlesheets","version":"2.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.appendValues](#module_Adaptor.appendValues)\\n        * [new exports.appendValues(params)](#new_module_Adaptor.appendValues_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.appendValues\\\"></a>\\n\\n### Adaptor.appendValues\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.appendValues_new\\\"></a>\\n\\n#### new exports.appendValues(params)\\nAdd an array of rows to the spreadsheet.\\nhttps://developers.google.com/sheets/api/samples/writing#append_values\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>Object</code> | Data object to add to the spreadsheet. |\\n\\n**Example**  \\n```js\\nappendValues({\\n  spreadsheetId: '1O-a4_RgPF_p8W3I6b5M9wobA3-CBW8hLClZfUik5sos',\\n  range: 'Sheet1!A1:E1',\\n  values: [\\n    ['From expression', '$15', '2', '3/15/2016'],\\n    ['Really now!', '$100', '1', '3/20/2016'],\\n  ],\\n})\\n```\\n\""},
{"name":"http","adaptor":"@openfn/language-http","version":"4.2.1","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.get](#module_Adaptor.get)\\n        * [new exports.get(path, params, callback)](#new_module_Adaptor.get_new)\\n    * [.post](#module_Adaptor.post)\\n        * [new exports.post(path, params, callback)](#new_module_Adaptor.post_new)\\n    * [.put](#module_Adaptor.put)\\n        * [new exports.put(path, params, callback)](#new_module_Adaptor.put_new)\\n    * [.patch](#module_Adaptor.patch)\\n        * [new exports.patch(path, params, callback)](#new_module_Adaptor.patch_new)\\n    * [.del](#module_Adaptor.del)\\n        * [new exports.del(path, params, callback)](#new_module_Adaptor.del_new)\\n    * [.parseXML](#module_Adaptor.parseXML)\\n        * [new exports.parseXML(body, script)](#new_module_Adaptor.parseXML_new)\\n    * [.parseCSV](#module_Adaptor.parseCSV)\\n        * [new exports.parseCSV(target, config)](#new_module_Adaptor.parseCSV_new)\\n    * [.request](#module_Adaptor.request)\\n        * [new exports.request(params)](#new_module_Adaptor.request_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.get\\\"></a>\\n\\n### Adaptor.get\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.get_new\\\"></a>\\n\\n#### new exports.get(path, params, callback)\\nMake a GET request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nget('/myEndpoint', {\\n   query: {foo: 'bar', a: 1},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.post\\\"></a>\\n\\n### Adaptor.post\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.post_new\\\"></a>\\n\\n#### new exports.post(path, params, callback)\\nMake a POST request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npost('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.put\\\"></a>\\n\\n### Adaptor.put\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.put_new\\\"></a>\\n\\n#### new exports.put(path, params, callback)\\nMake a PUT request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nput('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.patch\\\"></a>\\n\\n### Adaptor.patch\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.patch_new\\\"></a>\\n\\n#### new exports.patch(path, params, callback)\\nMake a PATCH request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\npatch('/myEndpoint', {\\n   body: {'foo': 'bar'},\\n   headers: {'content-type': 'application/json'},\\n   authentication: {username: 'user', password: 'pass'}\\n })\\n```\\n<a name=\\\"module_Adaptor.del\\\"></a>\\n\\n### Adaptor.del\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.del_new\\\"></a>\\n\\n#### new exports.del(path, params, callback)\\nMake a DELETE request\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | Body, Query, Headers and Auth parameters |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ndel(`/myendpoint/${state => state.data.id}`, {\\n   headers: {'content-type': 'application/json'}\\n })\\n```\\n<a name=\\\"module_Adaptor.parseXML\\\"></a>\\n\\n### Adaptor.parseXML\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.parseXML_new\\\"></a>\\n\\n#### new exports.parseXML(body, script)\\nParse XML with the Cheerio parser\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| body | <code>String</code> | data string to be parsed |\\n| script | <code>function</code> | script for extracting data |\\n\\n**Example**  \\n```js\\nparseXML(body, function($){\\n   return $(\\\"table[class=your_table]\\\").parsetable(true, true, true);\\n })\\n```\\n<a name=\\\"module_Adaptor.parseCSV\\\"></a>\\n\\n### Adaptor.parseCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.parseCSV_new\\\"></a>\\n\\n#### new exports.parseCSV(target, config)\\nCSV-Parse for CSV conversion to JSON\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| target | <code>String</code> | string or local file with CSV data |\\n| config | <code>Object</code> | csv-parse config object |\\n\\n**Example**  \\n```js\\nparseCSV(\\\"/home/user/someData.csv\\\", {\\n\\t  quoteChar: '\\\"',\\n\\t  header: false,\\n\\t});\\n```\\n<a name=\\\"module_Adaptor.request\\\"></a>\\n\\n### Adaptor.request\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.request_new\\\"></a>\\n\\n#### new exports.request(params)\\nMake a request using the 'request' node module. This module is deprecated.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n\\n**Example**  \\n```js\\nrequest(params);\\n```\\n\""},
{"name":"kobotoolbox","adaptor":"@openfn/language-kobotoolbox","version":"1.0.4","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.getForms(params, callback)](#module_Adaptor.getForms) ⇒ <code>Operation</code>\\n    * [.getSubmissions(params, callback)](#module_Adaptor.getSubmissions) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.getForms\\\"></a>\\n\\n### Adaptor.getForms(params, callback) ⇒ <code>Operation</code>\\nMake a request to get the list of forms\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Query, Headers and Authentication parameters |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form list |\\n\\n**Example**  \\n```js\\ngetForms({}, state => {\\n   console.log(state.data);\\n   return state;\\n});\\n```\\n<a name=\\\"module_Adaptor.getSubmissions\\\"></a>\\n\\n### Adaptor.getSubmissions(params, callback) ⇒ <code>Operation</code>\\nGet submissions for a specific form\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Form Id and data to make the fetch or filter |\\n| callback | <code>function</code> | (Optional) Callback function to execute after fetching form submissions |\\n\\n**Example**  \\n```js\\ngetSubmissions({formId: 'aXecHjmbATuF6iGFmvBLBX'}, state => {\\n  console.log(state.data);\\n  return state;\\n});\\n```\\n\""},
{"name":"mssql","adaptor":"@openfn/language-mssql","version":"3.1.0","docs":"\"## Classes\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#sql\\\">sql</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#findValue\\\">findValue</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insert\\\">insert</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insertMany\\\">insertMany</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsert\\\">upsert</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsertIf\\\">upsertIf</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#upsertMany\\\">upsertMany</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#describeTable\\\">describeTable</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#insertTable\\\">insertTable</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#modifyTable\\\">modifyTable</a></dt>\\n<dd></dd>\\n</dl>\\n\\n## Functions\\n\\n<dl>\\n<dt><a href=\\\"#createConnection\\\">createConnection(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Creates a connection.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#addRowsToRefs\\\">addRowsToRefs(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Sets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.</p>\\n</dd>\\n<dt><a href=\\\"#flattenRows\\\">flattenRows(state, rows)</a> ⇒ <code>State</code></dt>\\n<dd><p>Returns a flatten object of the rows (array of arrays) with rowCount.</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute\\n**Kind**: global class  \\n<a name=\\\"new_execute_new\\\"></a>\\n\\n### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for mssql.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"sql\\\"></a>\\n\\n## sql\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_sql_new\\\"></a>\\n\\n### new exports.sql(params)\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | Payload data for the message |\\n\\n**Example**  \\n```js\\nsql({ query, options })\\n```\\n<a name=\\\"findValue\\\"></a>\\n\\n## findValue\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_findValue_new\\\"></a>\\n\\n### new exports.findValue(filter)\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mama%', last_name: 'Cisse'},\\n   operator: { first_name: 'like', last_name: '='}\\n })\\n```\\n<a name=\\\"insert\\\"></a>\\n\\n## insert\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insert_new\\\"></a>\\n\\n### new exports.insert(table, record, options)\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert(table, record, {setNull: [\\\"'undefined'\\\", \\\"''\\\"], logValues: false})\\n```\\n<a name=\\\"insertMany\\\"></a>\\n\\n## insertMany\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insertMany_new\\\"></a>\\n\\n### new exports.insertMany(table, records, options)\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany(table, records, { setNull: false, writeSql: true, logValues: false })\\n```\\n<a name=\\\"upsert\\\"></a>\\n\\n## upsert\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsert_new\\\"></a>\\n\\n### new exports.upsert(table, uuid, record, options)\\nInsert or update a record using SQL MERGE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(table, uuid, record, { setNull: \\\"'undefined'\\\", logValues: false})\\nupsert(table, [uuid1, uuid2], record, { setNull: \\\"'undefined'\\\", logValues: false})\\n```\\n<a name=\\\"upsertIf\\\"></a>\\n\\n## upsertIf\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsertIf_new\\\"></a>\\n\\n### new exports.upsertIf(logical, table, uuid, record, options)\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'uuid', // a DB column with a unique constraint\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true, logValues: false }\\n)\\n```\\n<a name=\\\"upsertMany\\\"></a>\\n\\n## upsertMany\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_upsertMany_new\\\"></a>\\n\\n### new exports.upsertMany(table, uuid, records, options)\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| records | <code>function</code> | A function that takes state and returns an array of records |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n 'users', 'email', records, { logValues: false }\\n)\\nupsertMany(\\n 'users', ['email', 'phone'], records, { logValues: false }\\n)\\n```\\n<a name=\\\"describeTable\\\"></a>\\n\\n## describeTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_describeTable_new\\\"></a>\\n\\n### new exports.describeTable(tableName, options)\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"insertTable\\\"></a>\\n\\n## insertTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_insertTable_new\\\"></a>\\n\\n### new exports.insertTable(tableName, columns, options)\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"modifyTable\\\"></a>\\n\\n## modifyTable\\n**Kind**: global class  \\n**Access**: public  \\n<a name=\\\"new_modifyTable_new\\\"></a>\\n\\n### new exports.modifyTable(tableName, columns, options)\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"createConnection\\\"></a>\\n\\n## createConnection(state) ⇒ <code>State</code>\\nCreates a connection.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"addRowsToRefs\\\"></a>\\n\\n## addRowsToRefs(state, rows) ⇒ <code>State</code>\\nSets the returned rows from a query as the first item in the state.references\\narray, leaving state.data unchanged between operations.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n<a name=\\\"flattenRows\\\"></a>\\n\\n## flattenRows(state, rows) ⇒ <code>State</code>\\nReturns a flatten object of the rows (array of arrays) with rowCount.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> |  |\\n| rows | <code>array</code> | the array of rows returned from the sql query |\\n\\n\""},
{"name":"ocl","adaptor":"@openfn/language-ocl","version":"0.1.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n        * [.map(state, [params])](#module_Adaptor.map) ⇒ <code>Operation</code>\\n            * [~retrievedMapping](#module_Adaptor.map..retrievedMapping)\\n    * _inner_\\n        * [~auth](#module_Adaptor..auth)\\n        * [~params](#module_Adaptor..params)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.map\\\"></a>\\n\\n### Adaptor.map(state, [params]) ⇒ <code>Operation</code>\\nReplaces source keys(data elements) to destination keys(data elements) with out changing state.data structure\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>Object</code> | Json object containing keys and data values; |\\n| [params] | <code>Object</code> | E.g. `{users:\\\"haftamuk\\\", sources: \\\"eCHIS-CODES\\\", concepts: \\\"fp_new_at_10_to_14\\\" } |\\n\\n**Example**  \\n```js\\nmapp(state, state)\\n```\\n<a name=\\\"module_Adaptor.map..retrievedMapping\\\"></a>\\n\\n#### map~retrievedMapping\\nIn order to minimize web trafic, already accessed mapping\\ninformation is put into this variable to\\nreuse values for the consucutive keys.\\n\\n**Kind**: inner constant of [<code>map</code>](#module_Adaptor.map)  \\n<a name=\\\"module_Adaptor..auth\\\"></a>\\n\\n### Adaptor~auth\\nDo we have a mechanism to retrieve those from configuration\\n\\n**Kind**: inner property of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"module_Adaptor..params\\\"></a>\\n\\n### Adaptor~params\\nSpecify query parameters that may include OCL Data Source, MappingType, includion and exclusion values\\n\\n**Kind**: inner property of [<code>Adaptor</code>](#module_Adaptor)  \\n\""},
{"name":"postgresql","adaptor":"@openfn/language-postgresql","version":"3.4.0","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute](#module_Adaptor.execute)\\n        * [new exports.execute(operations)](#new_module_Adaptor.execute_new)\\n    * [.sql](#module_Adaptor.sql)\\n        * [new exports.sql(sqlQuery, options)](#new_module_Adaptor.sql_new)\\n    * [.findValue](#module_Adaptor.findValue)\\n        * [new exports.findValue(filter)](#new_module_Adaptor.findValue_new)\\n    * [.insert](#module_Adaptor.insert)\\n        * [new exports.insert(table, record, options)](#new_module_Adaptor.insert_new)\\n    * [.insertMany](#module_Adaptor.insertMany)\\n        * [new exports.insertMany(table, records, options)](#new_module_Adaptor.insertMany_new)\\n    * [.upsert](#module_Adaptor.upsert)\\n        * [new exports.upsert(table, uuid, record, options)](#new_module_Adaptor.upsert_new)\\n    * [.upsertIf](#module_Adaptor.upsertIf)\\n        * [new exports.upsertIf(logical, table, uuid, record, options)](#new_module_Adaptor.upsertIf_new)\\n    * [.upsertMany](#module_Adaptor.upsertMany)\\n        * [new exports.upsertMany(table, uuid, data, options)](#new_module_Adaptor.upsertMany_new)\\n    * [.describeTable](#module_Adaptor.describeTable)\\n        * [new exports.describeTable(tableName, options)](#new_module_Adaptor.describeTable_new)\\n    * [.insertTable](#module_Adaptor.insertTable)\\n        * [new exports.insertTable(tableName, columns, options)](#new_module_Adaptor.insertTable_new)\\n    * [.modifyTable](#module_Adaptor.modifyTable)\\n        * [new exports.modifyTable(tableName, columns, options)](#new_module_Adaptor.modifyTable_new)\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n<a name=\\\"new_module_Adaptor.execute_new\\\"></a>\\n\\n#### new exports.execute(operations)\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for postgresql.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.sql\\\"></a>\\n\\n### Adaptor.sql\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.sql_new\\\"></a>\\n\\n#### new exports.sql(sqlQuery, options)\\nExecute an SQL statement\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sqlQuery | <code>function</code> | a function which takes state and returns a string of SQL. |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nsql(state => `select(*) from ${state.data.tableName};`, { writeSql: true })\\n```\\n<a name=\\\"module_Adaptor.findValue\\\"></a>\\n\\n### Adaptor.findValue\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.findValue_new\\\"></a>\\n\\n#### new exports.findValue(filter)\\nFetch a uuid key given a condition\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filter | <code>object</code> | A filter object with the lookup table, a uuid and the condition |\\n\\n**Example**  \\n```js\\nfindValue({\\n   uuid: 'id',\\n   relation: 'users',\\n   where: { first_name: 'Mamadou' },\\n   operator: { first_name: 'like' }\\n })\\n```\\n<a name=\\\"module_Adaptor.insert\\\"></a>\\n\\n### Adaptor.insert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insert_new\\\"></a>\\n\\n#### new exports.insert(table, record, options)\\nInsert a record\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsert('users', { name: 'Elodie', id: 7 }, { setNull: \\\"'NaN'\\\", logValues: true });\\n```\\n<a name=\\\"module_Adaptor.insertMany\\\"></a>\\n\\n### Adaptor.insertMany\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insertMany_new\\\"></a>\\n\\n#### new exports.insertMany(table, records, options)\\nInsert many records, using the keys of the first as the column template\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| records | <code>array</code> | An array or a function that takes state and returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertMany('users', state => state.data.recordArray, { setNull: \\\"'undefined'\\\", logValues: true });\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(table, uuid, record, options)\\nInsert or update a record using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsert(\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { setNull: [\\\"''\\\", \\\"'undefined'\\\"], writeSql:true, execute: true, logValues: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertIf\\\"></a>\\n\\n### Adaptor.upsertIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertIf_new\\\"></a>\\n\\n#### new exports.upsertIf(logical, table, uuid, record, options)\\nInsert or update a record based on a logical condition using ON CONFLICT UPDATE\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>string</code> | a data to check existing value for. |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| record | <code>object</code> | Payload data for the record as a JS object or function |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertIf(\\n  dataValue('name'),\\n  'users', // the DB table\\n  'ON CONSTRAINT users_pkey', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  { name: 'Elodie', id: 7 },\\n  { writeSql:true, execute: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.upsertMany\\\"></a>\\n\\n### Adaptor.upsertMany\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertMany_new\\\"></a>\\n\\n#### new exports.upsertMany(table, uuid, data, options)\\nInsert or update multiple records using ON CONFLICT UPDATE and excluded\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| table | <code>string</code> | The target table |\\n| uuid | <code>string</code> | The uuid column to determine a matching/existing record |\\n| data | <code>array</code> | An array of objects or a function that returns an array |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nupsertMany(\\n  'users', // the DB table\\n  'email', // a DB column with a unique constraint OR a CONSTRAINT NAME\\n  [\\n    { name: 'one', email: 'one@openfn.org },\\n    { name: 'two', email: 'two@openfn.org },\\n  ]\\n { logValues: true }\\n)\\n```\\n<a name=\\\"module_Adaptor.describeTable\\\"></a>\\n\\n### Adaptor.describeTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.describeTable_new\\\"></a>\\n\\n#### new exports.describeTable(tableName, options)\\nList the columns of a table in a database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to describe |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ndescribeTable('clinic_visits')\\n```\\n<a name=\\\"module_Adaptor.insertTable\\\"></a>\\n\\n### Adaptor.insertTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.insertTable_new\\\"></a>\\n\\n#### new exports.insertTable(tableName, columns, options)\\nCreate a table in database when given an array of columns and a table_name.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to create |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\ninsertTable('table_name', state => state.data.map(\\n  column => ({\\n    name: column.name,\\n    type: column.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n<a name=\\\"module_Adaptor.modifyTable\\\"></a>\\n\\n### Adaptor.modifyTable\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.modifyTable_new\\\"></a>\\n\\n#### new exports.modifyTable(tableName, columns, options)\\nAlter an existing table in the database.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| tableName | <code>string</code> | The name of the table to alter |\\n| columns | <code>array</code> | An array of form columns |\\n| options | <code>object</code> | Optional options argument |\\n\\n**Example**  \\n```js\\nmodifyTable('table_name', state => state.data.map(\\n  newColumn => ({\\n    name: newColumn.name,\\n    type: newColumn.type,\\n    required: true, // optional\\n    unique: false, // optional - to be set to true for unique constraint\\n  })\\n));\\n```\\n\""},
{"name":"primero","adaptor":"@openfn/language-primero","version":"2.10.0","docs":"\"## Functions\\n\\n<dl>\\n<dt><a href=\\\"#execute\\\">execute(operations)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Execute a sequence of operations.\\nWraps <code>language-common/execute</code>, and prepends initial state for http.</p>\\n</dd>\\n<dt><a href=\\\"#generateAuthString\\\">generateAuthString(state)</a> ⇒ <code>string</code></dt>\\n<dd><p>Generate an auth string to support multiple types of auth credentials.</p>\\n</dd>\\n<dt><a href=\\\"#queryHandler\\\">queryHandler(state, params, callback)</a> ⇒ <code>State</code></dt>\\n<dd><p>Execute custom query</p>\\n</dd>\\n<dt><a href=\\\"#login\\\">login(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Logs in to Primero.</p>\\n</dd>\\n<dt><a href=\\\"#cleanupState\\\">cleanupState(state)</a> ⇒ <code>State</code></dt>\\n<dd><p>Removes unserializable keys from the state.</p>\\n</dd>\\n<dt><a href=\\\"#getCases\\\">getCases(query, options, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get cases from Primero</p>\\n</dd>\\n<dt><a href=\\\"#createCase\\\">createCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#updateCase\\\">updateCase(id, params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#upsertCase\\\">upsertCase(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Upsert case to Primero</p>\\n</dd>\\n<dt><a href=\\\"#getReferrals\\\">getReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get referrals for a specific case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#createReferrals\\\">createReferrals(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Create referrals in Primero</p>\\n</dd>\\n<dt><a href=\\\"#updateReferral\\\">updateReferral(params, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Update a single referral for a specific case in Primero</p>\\n</dd>\\n<dt><a href=\\\"#getForms\\\">getForms(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get forms from Primero</p>\\n</dd>\\n<dt><a href=\\\"#getLookups\\\">getLookups(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get lookups from Primero</p>\\n</dd>\\n<dt><a href=\\\"#getLocations\\\">getLocations(query, callback)</a> ⇒ <code>Operation</code></dt>\\n<dd><p>Get locations from Primero</p>\\n</dd>\\n</dl>\\n\\n<a name=\\\"execute\\\"></a>\\n\\n## execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"generateAuthString\\\"></a>\\n\\n## generateAuthString(state) ⇒ <code>string</code>\\nGenerate an auth string to support multiple types of auth credentials.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ngenerateAuthString(state)\\n```\\n<a name=\\\"queryHandler\\\"></a>\\n\\n## queryHandler(state, params, callback) ⇒ <code>State</code>\\nExecute custom query\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n| params | <code>object</code> | \\n| callback | <code>function</code> | \\n\\n<a name=\\\"login\\\"></a>\\n\\n## login(state) ⇒ <code>State</code>\\nLogs in to Primero.\\n\\n**Kind**: global function  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"cleanupState\\\"></a>\\n\\n## cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: global function  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"getCases\\\"></a>\\n\\n## getCases(query, options, callback) ⇒ <code>Operation</code>\\nGet cases from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum, option to getReferrals |\\n| options | <code>object</code> | (Optional) an object with a getReferrals key to fetch referrals |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetCases({\\n  remote: true,\\n  case_id: '6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz'\\n  query: 'sex=male' // optional\\n}, { withReferrals: true }, callback)\\n```\\n<a name=\\\"createCase\\\"></a>\\n\\n## createCase(params, callback) ⇒ <code>Operation</code>\\nCreate case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ncreateCase({\\n  data: state => data {\\n    \\\"enabled\\\": true,\\n    \\\"age\\\": 15,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n    \\\"owned_by\\\": \\\"primero_cp\\\"\\n  }}, callback)\\n```\\n<a name=\\\"updateCase\\\"></a>\\n\\n## updateCase(id, params, callback) ⇒ <code>Operation</code>\\nUpdate case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| id | <code>string</code> | an ID to use for the update. |\\n| params | <code>object</code> | an object with some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupdateCase(\\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\", {\\n  data: state => data {\\n    \\\"age\\\": 20,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  }}, callback)\\n```\\n<a name=\\\"upsertCase\\\"></a>\\n\\n## upsertCase(params, callback) ⇒ <code>Operation</code>\\nUpsert case to Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId and some case data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupsertCase({\\n  externalIds: ['case_id'],\\n  data: state => ({\\n    \\\"age\\\": 20,\\n    \\\"sex\\\": \\\"male\\\",\\n    \\\"name\\\": \\\"Alex\\\",\\n    \\\"status\\\": \\\"open\\\",\\n    \\\"case_id\\\": \\\"6aeaa66a-5a92-4ff5-bf7a-e59cde07eaaz\\\",\\n  })\\n});\\n```\\n<a name=\\\"getReferrals\\\"></a>\\n\\n## getReferrals(params, callback) ⇒ <code>Operation</code>\\nGet referrals for a specific case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId field to select the attribute to use for matching on case and an externalId value for that case. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetReferrals({\\n  externalId: \\\"record_id\\\",\\n  id: \\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\",\\n}, callback)\\n```\\n<a name=\\\"createReferrals\\\"></a>\\n\\n## createReferrals(params, callback) ⇒ <code>Operation</code>\\nCreate referrals in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with referral data. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ncreateReferrals({\\n  data: {\\n    \\\"ids\\\": ['case_id'],\\n     \\\"transitioned_to\\\": \\\"primero_cp\\\",\\n     \\\"notes\\\": \\\"Creating a referral\\\"\\n  }\\n}, callback)\\n```\\n<a name=\\\"updateReferral\\\"></a>\\n\\n## updateReferral(params, callback) ⇒ <code>Operation</code>\\nUpdate a single referral for a specific case in Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | an object with an externalId value to use, the id and the referral id to update. |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\nupdateReferral({\\n  caseExternalId: \\\"record_id\\\",\\n  caseId: \\\"7ed1d49f-14c7-4181-8d83-dc8ed1699f08\\\"\\n  id: \\\"37612f65-3bda-48eb-b526-d31383f94166\\\",\\n  data: state => state.data\\n}, callback)\\n```\\n<a name=\\\"getForms\\\"></a>\\n\\n## getForms(query, callback) ⇒ <code>Operation</code>\\nGet forms from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetForms({\\n  record_type: '' // Optional. Filters by the record type of the form,\\n  module_id: 'id' //Optional. Filter forms by module,\\n}, callback)\\n```\\n<a name=\\\"getLookups\\\"></a>\\n\\n## getLookups(query, callback) ⇒ <code>Operation</code>\\nGet lookups from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetLookups({\\n  page: 1 // Optional. Pagination. Defaults to 1,\\n  per: 20 // Optional. Records per page. Defaults to 20,\\n}, callback)\\n```\\n<a name=\\\"getLocations\\\"></a>\\n\\n## getLocations(query, callback) ⇒ <code>Operation</code>\\nGet locations from Primero\\n\\n**Kind**: global function  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| query | <code>object</code> | an object with a query param at minimum |\\n| callback | <code>function</code> | (Optional) Callback function |\\n\\n**Example**  \\n```js\\ngetLocations({\\n  page: 1 // Optional.\\n  per: 20 // Optional. Records per page,\\n  hierarchy: // Defaults to false,\\n}, callback)\\n```\\n\""},
{"name":"salesforce","adaptor":"@openfn/language-salesforce","version":"2.11.0","docs":"\"## Modules\\n\\n<dl>\\n<dt><a href=\\\"#module_Adaptor\\\">Adaptor</a></dt>\\n<dd></dd>\\n<dt><a href=\\\"#module_FakeAdaptor\\\">FakeAdaptor</a></dt>\\n<dd></dd>\\n</dl>\\n\\n<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * _static_\\n        * [.relationship](#module_Adaptor.relationship)\\n            * [new exports.relationship(relationshipName, externalId, dataSource)](#new_module_Adaptor.relationship_new)\\n        * [.describe](#module_Adaptor.describe)\\n            * [new exports.describe(sObject, state)](#new_module_Adaptor.describe_new)\\n        * [.retrieve](#module_Adaptor.retrieve)\\n            * [new exports.retrieve(sObject, id, callback, state)](#new_module_Adaptor.retrieve_new)\\n        * [.query](#module_Adaptor.query)\\n            * [new exports.query(qs, state)](#new_module_Adaptor.query_new)\\n        * [.bulk](#module_Adaptor.bulk)\\n            * [new exports.bulk(sObject, operation, options, fun, state)](#new_module_Adaptor.bulk_new)\\n        * [.destroy](#module_Adaptor.destroy)\\n            * [new exports.destroy(sObject, attrs, options, state)](#new_module_Adaptor.destroy_new)\\n        * [.create](#module_Adaptor.create)\\n            * [new exports.create(sObject, attrs, state)](#new_module_Adaptor.create_new)\\n        * [.createIf](#module_Adaptor.createIf)\\n            * [new exports.createIf(logical, sObject, attrs, state)](#new_module_Adaptor.createIf_new)\\n        * [.upsert](#module_Adaptor.upsert)\\n            * [new exports.upsert(sObject, externalId, attrs, state)](#new_module_Adaptor.upsert_new)\\n        * [.upsertIf](#module_Adaptor.upsertIf)\\n            * [new exports.upsertIf(logical, sObject, externalId, attrs, state)](#new_module_Adaptor.upsertIf_new)\\n        * [.update](#module_Adaptor.update)\\n            * [new exports.update(sObject, attrs, state)](#new_module_Adaptor.update_new)\\n        * [.reference](#module_Adaptor.reference)\\n            * [new exports.reference(position, state)](#new_module_Adaptor.reference_new)\\n        * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>State</code>\\n        * [.steps()](#module_Adaptor.steps) ⇒ <code>Array</code>\\n    * _inner_\\n        * [~createConnection(state)](#module_Adaptor..createConnection) ⇒ <code>State</code>\\n        * [~login(state)](#module_Adaptor..login) ⇒ <code>State</code>\\n        * [~cleanupState(state)](#module_Adaptor..cleanupState) ⇒ <code>State</code>\\n        * [~State](#module_Adaptor..State) : <code>Object</code>\\n        * [~Operation](#module_Adaptor..Operation) : <code>function</code>\\n\\n<a name=\\\"module_Adaptor.relationship\\\"></a>\\n\\n### Adaptor.relationship\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.relationship_new\\\"></a>\\n\\n#### new exports.relationship(relationshipName, externalId, dataSource)\\nAdds a lookup relation or 'dome insert' to a record.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| relationshipName | <code>string</code> | `__r` relationship field on the record. |\\n| externalId | <code>string</code> | Salesforce ExternalID field. |\\n| dataSource | <code>string</code> | resolvable source. |\\n\\n**Example**  \\n```js\\nData Sourced Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", dataSource(\\\"path\\\"))\\nFixed Value:\\n relationship(\\\"relationship_name__r\\\", \\\"externalID on related object\\\", \\\"hello world\\\")\\n```\\n<a name=\\\"module_Adaptor.describe\\\"></a>\\n\\n### Adaptor.describe\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.describe_new\\\"></a>\\n\\n#### new exports.describe(sObject, state)\\nOutputs basic information about an sObject to `STDOUT`.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ndescribe('obj_name')\\n```\\n<a name=\\\"module_Adaptor.retrieve\\\"></a>\\n\\n### Adaptor.retrieve\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.retrieve_new\\\"></a>\\n\\n#### new exports.retrieve(sObject, id, callback, state)\\nRetrieves a Salesforce sObject(s).\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | The sObject to retrieve |\\n| id | <code>String</code> | The id of the record |\\n| callback | <code>function</code> | A callback to execute once the record is retrieved |\\n| state | <code>State</code> | Runtime state |\\n\\n**Example**  \\n```js\\nretrieve('ContentVersion', '0684K0000020Au7QAE/VersionData');\\n```\\n<a name=\\\"module_Adaptor.query\\\"></a>\\n\\n### Adaptor.query\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.query_new\\\"></a>\\n\\n#### new exports.query(qs, state)\\nExecute an SOQL query.\\nNote that in an event of a query error,\\nerror logs will be printed but the operation will not throw the error.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| qs | <code>String</code> | A query string. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nquery(`SELECT Id FROM Patient__c WHERE Health_ID__c = '${state.data.field1}'`);\\n```\\n<a name=\\\"module_Adaptor.bulk\\\"></a>\\n\\n### Adaptor.bulk\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.bulk_new\\\"></a>\\n\\n#### new exports.bulk(sObject, operation, options, fun, state)\\nCreate and execute a bulk job.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| operation | <code>String</code> | The bulk operation to be performed |\\n| options | <code>Object</code> | Options passed to the bulk api. |\\n| fun | <code>function</code> | A function which takes state and returns an array. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nbulk('Patient__c', 'insert', { failOnError: true, pollInterval: 3000, pollTimeout: 240000 }, state => {\\n  return state.data.someArray.map(x => {\\n    return { 'Age__c': x.age, 'Name': x.name }\\n  })\\n});\\n```\\n<a name=\\\"module_Adaptor.destroy\\\"></a>\\n\\n### Adaptor.destroy\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.destroy_new\\\"></a>\\n\\n#### new exports.destroy(sObject, attrs, options, state)\\nDelete records of an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Array of IDs of records to delete. |\\n| options | <code>Object</code> | Options for the destroy delete operation. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ndestroy('obj_name', [\\n '0060n00000JQWHYAA5',\\n '0090n00000JQEWHYAA5\\n], { failOnError: true })\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.create_new\\\"></a>\\n\\n#### new exports.create(sObject, attrs, state)\\nCreate a new object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.createIf\\\"></a>\\n\\n### Adaptor.createIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.createIf_new\\\"></a>\\n\\n#### new exports.createIf(logical, sObject, attrs, state)\\nCreate a new object if conditions are met.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateIf(true, 'obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.upsert\\\"></a>\\n\\n### Adaptor.upsert\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsert_new\\\"></a>\\n\\n#### new exports.upsert(sObject, externalId, attrs, state)\\nUpsert an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupsert('obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.upsertIf\\\"></a>\\n\\n### Adaptor.upsertIf\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.upsertIf_new\\\"></a>\\n\\n#### new exports.upsertIf(logical, sObject, externalId, attrs, state)\\nUpsert if conditions are met.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| logical | <code>boolean</code> | a logical statement that will be evaluated. |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| externalId | <code>String</code> | ID. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupsertIf(true, 'obj_name', 'ext_id', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.update\\\"></a>\\n\\n### Adaptor.update\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.update_new\\\"></a>\\n\\n#### new exports.update(sObject, attrs, state)\\nUpdate an object.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| sObject | <code>String</code> | API name of the sObject. |\\n| attrs | <code>Object</code> | Field attributes for the new object. |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nupdate('obj_name', {\\n  attr1: \\\"foo\\\",\\n  attr2: \\\"bar\\\"\\n})\\n```\\n<a name=\\\"module_Adaptor.reference\\\"></a>\\n\\n### Adaptor.reference\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.reference_new\\\"></a>\\n\\n#### new exports.reference(position, state)\\nGet a reference ID by an index.\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| position | <code>number</code> | Position for references array. |\\n| state | <code>State</code> | Array of references. |\\n\\n**Example**  \\n```js\\nreference(0)\\n```\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>State</code>\\nExecutes an operation.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operation</code> | Operations |\\n\\n<a name=\\\"module_Adaptor.steps\\\"></a>\\n\\n### Adaptor.steps() ⇒ <code>Array</code>\\nFlattens an array of operations.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Example**  \\n```js\\nsteps(\\n  createIf(params),\\n  update(params)\\n)\\n```\\n<a name=\\\"module_Adaptor..createConnection\\\"></a>\\n\\n### Adaptor~createConnection(state) ⇒ <code>State</code>\\nCreates a connection.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\ncreateConnection(state)\\n```\\n<a name=\\\"module_Adaptor..login\\\"></a>\\n\\n### Adaptor~login(state) ⇒ <code>State</code>\\nPerforms a login.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| state | <code>State</code> | Runtime state. |\\n\\n**Example**  \\n```js\\nlogin(state)\\n```\\n<a name=\\\"module_Adaptor..cleanupState\\\"></a>\\n\\n### Adaptor~cleanupState(state) ⇒ <code>State</code>\\nRemoves unserializable keys from the state.\\n\\n**Kind**: inner method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n**Example**  \\n```js\\ncleanupState(state)\\n```\\n<a name=\\\"module_Adaptor..State\\\"></a>\\n\\n### Adaptor~State : <code>Object</code>\\n**Kind**: inner typedef of [<code>Adaptor</code>](#module_Adaptor)  \\n**Properties**\\n\\n| Name | Type | Description |\\n| --- | --- | --- |\\n| data | <code>object</code> | JSON Data. |\\n| references | <code>Array.&lt;Reference&gt;</code> | History of all previous operations. |\\n\\n<a name=\\\"module_Adaptor..Operation\\\"></a>\\n\\n### Adaptor~Operation : <code>function</code>\\n**Kind**: inner typedef of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type |\\n| --- | --- |\\n| state | <code>State</code> | \\n\\n<a name=\\\"module_FakeAdaptor\\\"></a>\\n\\n## FakeAdaptor\\n\""},
{"name":"sftp","adaptor":"@openfn/language-sftp","version":"0.6.2","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.list](#module_Adaptor.list)\\n        * [new exports.list(dirPath)](#new_module_Adaptor.list_new)\\n    * [.getCSV](#module_Adaptor.getCSV)\\n        * [new exports.getCSV(filePath)](#new_module_Adaptor.getCSV_new)\\n    * [.putCSV](#module_Adaptor.putCSV)\\n        * [new exports.putCSV(localFilePath, remoteFilePath, parsingOptions)](#new_module_Adaptor.putCSV_new)\\n    * [.getJSON](#module_Adaptor.getJSON)\\n        * [new exports.getJSON(filePath, encoding)](#new_module_Adaptor.getJSON_new)\\n    * [.normalizeCSVarray](#module_Adaptor.normalizeCSVarray)\\n        * [new exports.normalizeCSVarray(options, callback)](#new_module_Adaptor.normalizeCSVarray_new)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.list\\\"></a>\\n\\n### Adaptor.list\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.list_new\\\"></a>\\n\\n#### new exports.list(dirPath)\\nList files present in a directory\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| dirPath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\nlist('/some/path/')\\n```\\n<a name=\\\"module_Adaptor.getCSV\\\"></a>\\n\\n### Adaptor.getCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.getCSV_new\\\"></a>\\n\\n#### new exports.getCSV(filePath)\\nGet a CSV and return a JSON array of strings for each item separated by the delimiter\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n\\n**Example**  \\n```js\\ngetCSV(\\n  '/some/path/to_file.csv'\\n);\\n```\\n<a name=\\\"module_Adaptor.putCSV\\\"></a>\\n\\n### Adaptor.putCSV\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.putCSV_new\\\"></a>\\n\\n#### new exports.putCSV(localFilePath, remoteFilePath, parsingOptions)\\nConvert JSON to CSV and upload to an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| localFilePath | <code>string</code> | Data source for data to copy to the remote server. |\\n| remoteFilePath | <code>string</code> | Path to the remote file to be created on the server. |\\n| parsingOptions | <code>object</code> | Options which can be passed to adjust the read and write stream used in sending the data to the remote server |\\n\\n**Example**  \\n```js\\nputCSV(\\n  '/some/path/to_local_file.csv',\\n  '/some/path/to_remove_file.csv',\\n  { delimiter: ';', noheader: true }\\n);\\n```\\n<a name=\\\"module_Adaptor.getJSON\\\"></a>\\n\\n### Adaptor.getJSON\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.getJSON_new\\\"></a>\\n\\n#### new exports.getJSON(filePath, encoding)\\nFetch a json file from an FTP server\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| filePath | <code>string</code> | Path to resource |\\n| encoding | <code>string</code> | Character encoding for the json |\\n\\n**Example**  \\n```js\\ngetJSON(\\n  '/path/To/File',\\n  'utf8',\\n);\\n```\\n<a name=\\\"module_Adaptor.normalizeCSVarray\\\"></a>\\n\\n### Adaptor.normalizeCSVarray\\n**Kind**: static class of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n<a name=\\\"new_module_Adaptor.normalizeCSVarray_new\\\"></a>\\n\\n#### new exports.normalizeCSVarray(options, callback)\\nConvert JSON array of strings into a normalized object\\n\\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| options | <code>options</code> | Options passed to csvtojson parser |\\n| callback | <code>callback</code> | Options passed to csvtojson parser |\\n\\n**Example**  \\n```js\\nnormalizeCSVarray({ delimiter: ';', noheader: true });\\n```\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n\""},
{"name":"template","adaptor":"@openfn/language-template","version":"1.7.2","docs":"\"<a name=\\\"module_Adaptor\\\"></a>\\n\\n## Adaptor\\n\\n* [Adaptor](#module_Adaptor)\\n    * [.execute(operations)](#module_Adaptor.execute) ⇒ <code>Operation</code>\\n    * [.create(path, params, callback)](#module_Adaptor.create) ⇒ <code>Operation</code>\\n    * [.createPatient(params, callback)](#module_Adaptor.createPatient) ⇒ <code>Operation</code>\\n\\n<a name=\\\"module_Adaptor.execute\\\"></a>\\n\\n### Adaptor.execute(operations) ⇒ <code>Operation</code>\\nExecute a sequence of operations.\\nWraps `language-common/execute`, and prepends initial state for http.\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| operations | <code>Operations</code> | Operations to be performed. |\\n\\n**Example**  \\n```js\\nexecute(\\n  create('foo'),\\n  delete('bar')\\n)(state)\\n```\\n<a name=\\\"module_Adaptor.create\\\"></a>\\n\\n### Adaptor.create(path, params, callback) ⇒ <code>Operation</code>\\nCreates a fictional resource in a fictional destination system using a POST request\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| path | <code>string</code> | Path to resource |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreate(\\\"/endpoint\\\", {\\\"foo\\\": \\\"bar\\\"})\\n```\\n<a name=\\\"module_Adaptor.createPatient\\\"></a>\\n\\n### Adaptor.createPatient(params, callback) ⇒ <code>Operation</code>\\nCreate a fictional patient in a fictional universe with a fictional REST api\\n\\n**Kind**: static method of [<code>Adaptor</code>](#module_Adaptor)  \\n**Access**: public  \\n\\n| Param | Type | Description |\\n| --- | --- | --- |\\n| params | <code>object</code> | data to create the new resource |\\n| callback | <code>function</code> | (Optional) callback function |\\n\\n**Example**  \\n```js\\ncreatePatient({\\\"foo\\\": \\\"bar\\\"})\\n```\\n\""}
]
